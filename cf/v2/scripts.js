/* Minification failed. Returning unminified contents.
(2913,32-37): run-time error JS1195: Expected expression: class
(3452,32-37): run-time error JS1195: Expected expression: class
(3544,29-30): run-time error JS1004: Expected ';': {
(3545,29-30): run-time error JS1004: Expected ';': {
(3546,29-30): run-time error JS1004: Expected ';': {
(3547,29-30): run-time error JS1004: Expected ';': {
(4192,36-41): run-time error JS1195: Expected expression: class
(4305,30-35): run-time error JS1195: Expected expression: class
(4410,31-36): run-time error JS1195: Expected expression: class
(4650,35-40): run-time error JS1195: Expected expression: class
(4778,33-38): run-time error JS1195: Expected expression: class
(4989,39-40): run-time error JS1014: Invalid character: `
(4989,40-41): run-time error JS1195: Expected expression: <
(4989,100-101): run-time error JS1014: Invalid character: `
(5008,43-44): run-time error JS1014: Invalid character: `
(5008,44-45): run-time error JS1195: Expected expression: <
(5008,108-109): run-time error JS1014: Invalid character: `
(5076,33-38): run-time error JS1195: Expected expression: class
(5376,32-37): run-time error JS1195: Expected expression: class
(5748,33-38): run-time error JS1195: Expected expression: class
(5830,37-42): run-time error JS1195: Expected expression: class
(5831,3-4): run-time error JS1197: Too many errors. The file might not be a JavaScript file: {
(1,2-13): run-time error JS1301: End of file encountered before function is properly closed: function ()
(5832,5-16): run-time error JS1006: Expected ')': constructor
(5903,3-4): run-time error JS1002: Syntax error: }
(5903,4-5): run-time error JS1197: Too many errors. The file might not be a JavaScript file: ;
(5845,26-38): run-time error JS1018: 'return' statement outside of function: return false
 */
(function ()
{
  var ieVersion = -1;
  var ieVersionData = ((navigator.userAgent.match(/(?:MSIE |Trident.*rv:|Edge\/)(\d+(\.\d+)?)/)) || []);
  if (ieVersionData.length > 0) ieVersion = parseFloat(ieVersionData[1]);
  if (ieVersion > -1 && ieVersion < 18)
  {
    alert('This version of IE or Edge is not suported (' + ieVersion + '). Please use latest Chrome, Firefox, Safari, Brave or MS Edge v18 or newer.');
    return;
  }

  if (!window.hasOwnProperty('Affinity')) window.Affinity = {};
  if (!window.hasOwnProperty('Affinity2018')) window.Affinity2018 = {};
  if (!Affinity2018.hasOwnProperty('Classes')) Affinity2018.Classes = {};
  if (!Affinity2018.Classes.hasOwnProperty('Plugins')) Affinity2018.Classes.Plugins = {};
  if (!Affinity2018.hasOwnProperty('Apps')) Affinity2018.Apps = {};
  if (!Affinity2018.Apps.hasOwnProperty('Plugins')) Affinity2018.Apps.Plugins = {};
  if (!Affinity2018.hasOwnProperty('Plugins')) Affinity2018.Plugins = {};
  if (!Affinity2018.hasOwnProperty('ApiEndpoints')) Affinity2018.ApiEndpoints = {};
  if (!Affinity2018.hasOwnProperty('UserProfile')) Affinity2018.UserProfile = {};

  Affinity.app = "CleverForms";
  Affinity2018.Domain = 'Affinity';
  Affinity2018.Name = 'UI 2018';
  Affinity2018.Id = 'ui.2018';
  Affinity2018.Version = '0.0.6';
  Affinity2018.Language = 'english';
  if (!Affinity2018.hasOwnProperty('Path')) Affinity2018.Path = document.location.protocol + '//cdn.source63.com/affinity/beta1';
  if (!Affinity2018.hasOwnProperty('ContentPath')) Affinity2018.ContentPath = document.location.protocol + '//cdn.source63.com/affinity/beta1';
  if (!Affinity2018.hasOwnProperty('WebWorkerPath')) Affinity2018.WebWorkerPath = document.location.protocol + '//cdn.source63.com/affinity/beta1/scripts/plugins/';
  if (!Affinity2018.hasOwnProperty('HideAllTemplates')) Affinity2018.HideAllTemplates = false;
  if (!Affinity2018.hasOwnProperty('DisablePlugins')) Affinity2018.DisablePlugins = [];

  /* config */

  Affinity2018.UiReady = false;
  Affinity2018.HasCitrix = false;

  Affinity2018.PreloadResources = {
    Scripts: [
      'https:/' + '/cdnjs.cloudflare.com/ajax/libs/fontfaceobserver/2.0.13/fontfaceobserver.js',
      // 'https:/' + '/cdnjs.cloudflare.com/ajax/libs/qs/6.9.1/qs.min.js',
      'https:/' + '/cdnjs.cloudflare.com/ajax/libs/axios/0.18.0/axios.min.js',
      'https:/' + '/cdn.polyfill.io/v2/polyfill.min.js?features=Intl.~locale.en',
      'https:/' + '/cdnjs.cloudflare.com/ajax/libs/datejs/1.0/date.min.js',
      'https:/' + '/cdnjs.cloudflare.com/ajax/libs/luxon/1.25.0/luxon.min.js',
      'https:/' + '/cdnjs.cloudflare.com/ajax/libs/dragula/3.7.2/dragula.min.js',
      'https:/' + '/cdnjs.cloudflare.com/ajax/libs/gsap/2.0.1/TweenLite.min.js',
      //'https:/' + '/cdnjs.cloudflare.com/ajax/libs/css-element-queries/1.2.3/ElementQueries.min.js',
      'https:/' + '/cdnjs.cloudflare.com/ajax/libs/css-element-queries/1.2.3/ResizeSensor.js'
    ],
    Extentions: [ // loads after externalCDNs
      'https:/' + '/cdnjs.cloudflare.com/ajax/libs/gsap/2.0.1/plugins/ScrollToPlugin.min.js'
    ],
    Styles: [
      //'https:/'+'/fonts.googleapis.com/css?family=Montserrat:300,300i,400,400i,600,600i,700,700i',
      'https:/' + '/cdnjs.cloudflare.com/ajax/libs/dragula/3.7.2/dragula.min.css'
    ],
    Fonts: [
      'Montserrat',
      'Roboto Mono'
    ],
    Images: [],
    Audio: [],
    Video: []
  };


  /***************************************************************************************************************************************************/
  /***************************************************************************************************************************************************/
  /***                                           *****************************************************************************************************/
  /***   ██  ██████  ██████  ███    ██ ███████   *****************************************************************************************************/
  /***   ██ ██      ██    ██ ████   ██ ██        *****************************************************************************************************/
  /***   ██ ██      ██    ██ ██ ██  ██ ███████   *****************************************************************************************************/
  /***   ██ ██      ██    ██ ██  ██ ██      ██   *****************************************************************************************************/
  /***   ██  ██████  ██████  ██   ████ ███████   *****************************************************************************************************/
  /***                                           *****************************************************************************************************/
  /***************************************************************************************************************************************************/
  /***************************************************************************************************************************************************/


  Affinity2018.icons = {
    graphLinefill: '&#xe912;',
    thermometer: '&#xe913;',
    progressHalf: '&#xe914;',
    brogressThird: '&#xe915;',
    progressFull: '&#xe917;',
    progressEmpty: '&#xe918;',
    browser: '&#xe919;',
    gauge: '&#xe91a;',
    box: '&#xe91c;',
    pageEmpty: '&#xe91d;',
    news: '&#xe91f;',
    pageBlack: '&#xe920;',
    page: '&#xe924;',
    arrowLeftSmall: '&#xe908;',
    arrowRightSmall: '&#xe909;',
    arrowUpSmall: '&#xe90a;',
    arrowDownSmall: '&#xe907;',
    arrowLeftCircle: '&#xe90c;',
    arrowRightCircle: '&#xe90e;',
    arrowUpCircle: '&#xe910;',
    arrowDownCircle: '&#xe90b;',
    arrowBoldLeft: '&#xe904;',
    arrowBoldRight: '&#xe905;',
    arrowBoldUp: '&#xe906;',
    arrowBoldDown: '&#xe903;',
    question: '&#xe925;',
    tools: '&#xe933;',
    vcard: '&#xe92a;',
    graphStatistics: '&#xe900;',
    graphBars: '&#xe901;',
    graphPie: '&#xe902;',
    ticket: '&#xe929;',
    trophy: '&#xe934;',
    lab: '&#xe931;',
    droplet: '&#xe92c;',
    qrcode: '&#xe911;',
    brightness: '&#xe1ae;',
    popupSolid: '&#xe150;',
    drive: '&#xe875;',
    new: '&#xe05e;',
    resizeText: '&#xe25e;',
    flashlight: '&#xe25f;',
    hourglassEmpty: '&#xe88b;',
    hourglass: '&#xe88c;',
    inboxEmpty: '&#xe158;',
    cart: '&#xe8cc;',
    upskill: '&#xe54b;',
    inbox: '&#xe16a;',
    outbox: '&#xe16b;',
    publish: '&#xe89d;',
    install: '&#xe0df;',
    rss: '&#xe0e5;',
    basket: '&#xe8cb;',
    sort: '&#xe165;',
    sortAlpha: '&#xe053;',
    drives: '&#xe1dc;',
    language: '&#xe8e2;',
    voicemail: '&#xe0e2;',
    networkLock: '&#xe62f;',
    wireless: '&#xe63e;',
    arrowLeft: '&#xe5c4;',
    arrowRight: '&#xe5c8;',
    arrowUp: '&#xe5d8;',
    arrowDown: '&#xe5db;',
    arrowLineSmallLeft: '&#xe314;',
    arrowLineSmallRight: '&#xe315;',
    arrowLineSmallUp: '&#xe316;',
    arrowLineSmallDown: '&#xe313;',
    unfoldMore: '&#xe5d7;',
    scaleup: '&#xe5e1;',
    resizeEnlarge: '&#xe5e2;',
    unfoldLess: '&#xe5d6;',
    scaledown: '&#xe5e3;',
    resizeShrink: '&#xe5e4;',
    code: '&#xe86f;',
    chevronLeft: '&#xe573;',
    chevronRight: '&#xe574;',
    chevronUp: '&#xe575;',
    chevronDown: '&#xe576;',
    download: '&#xe884;',
    upload: '&#xe2c6;',
    replyAll: '&#xe15f;',
    reply: '&#xe15e;',
    forward: '&#xe162;',
    sync: '&#xe041;',
    trendingFlat: '&#xe8e4;',
    return: '&#xe31b;',
    returnBack: '&#xe31c;',
    subdirectoryArrowLeft: '&#xe5d9;',
    subdirectoryArrowRight: '&#xe5da;',
    switchVert: '&#xe8d5;',
    switch: '&#xe8d6;',
    shuffle: '&#xe043;',
    workFlowMultiple: '&#xe0b6;',
    workFlow: '&#xe252;',
    trendingUp: '&#xe8e5;',
    trendingDown: '&#xe8e3;',
    undo: '&#xe577;',
    swap: '&#xe0d7;',
    refresh: '&#xe5d5;',
    cycle: '&#xe86a;',
    update: '&#xe863;',
    syncDot: '&#xe8ba;',
    restore: '&#xe8b3;',
    history: '&#xe923;',
    ccw: '&#xe419;',
    cw: '&#xe41a;',
    share: '&#xe80d;',
    timeline: '&#xe922;',
    flow: '&#xe260;',
    tickAll: '&#xe877;',
    tick: '&#xe5ca;',
    tickSquare: '&#xe834;',
    tickRound: '&#xe86c;',
    tickShield: '&#xe8e8;',
    tickTag: '&#xe52d;',
    cross: '&#xe5cd;',
    crossSquare: '&#xe5c9;',
    crossRound: '&#xe5cb;',
    crossOctagon: '&#xe578;',
    plus: '&#xe145;',
    plusSquare: '&#xe146;',
    plusRound: '&#xe147;',
    minus: '&#xe15b;',
    minusSquare: '&#xe92d;',
    minusRound: '&#xe15c;',
    infoRound: '&#xe88e;',
    infoRoundLight: '&#xe88f;',
    info: '&#xe645;',
    helpRound: '&#xe887;',
    helpRoundLight: '&#xe8fd;',
    error: '&#xe000;',
    errorLight: '&#xe001;',
    warning: '&#xe002;',
    stop: '&#xe160;',
    danger: '&#xe031;',
    search: '&#xe8b6;',
    zoomIn: '&#xe8ff;',
    zoomOut: '&#xe930;',
    searchRefresh: '&#xe8fa;',
    cog: '&#xe8b8;',
    settings: '&#xe8b9;',
    wrench: '&#xe869;',
    tune: '&#xe429;',
    login: '&#xe879;',
    logout: '&#xe87c;',
    export: '&#xe89e;',
    house: '&#xe88a;',
    lock: '&#xe897;',
    lockOpen: '&#xe899;',
    blockLock: '&#xe641;',
    addLock: '&#xe63f;',
    key: '&#xe0da;',
    shield: '&#xe32a;',
    clock: '&#xe8b5;',
    alarm: '&#xe855;',
    alarmAdd: '&#xe856;',
    snooze: '&#xe046;',
    timer: '&#xe425;',
    watch: '&#xe334;',
    bell: '&#xe7f4;',
    bellAdd: '&#xe003;',
    bellRing: '&#xe7f7;',
    bellOff: '&#xe7f6;',
    bellSnooze: '&#xe7f8;',
    money: '&#xe227;',
    cash: '&#xe53e;',
    creditCard: '&#xe8a1;',
    wallet: '&#xe850;',
    accountBox: '&#xe851;',
    accountCircle: '&#xe853;',
    userBossRound: '&#xe854;',
    user: '&#xe7fd;',
    userAdd: '&#xe7fe;',
    userDel: '&#xe7ff;',
    userCheck: '&#xe800;',
    userBlock: '&#xe801;',
    users: '&#xe7fb;',
    usersAdd: '&#xe7f0;',
    contact: '&#xe0cf;',
    treeView: '&#xe579;',
    emptyInbox: '&#xe156;',
    moveInbox: '&#xe168;',
    archive: '&#xe149;',
    unarchive: '&#xe169;',
    cloud: '&#xe42d;',
    cloudTick: '&#xe2bf;',
    cloudDownload: '&#xe2c0;',
    cloudUpload: '&#xe2c3;',
    dashboard: '&#xe8f1;',
    layout: '&#xe8f2;',
    grid: '&#xe42b;',
    guage: '&#xe640;',
    graphs: '&#xe6df;',
    timelapse: '&#xe422;',
    equalizer: '&#xe01d;',
    graphLine: '&#xe6e1;',
    infinity: '&#xeb3d;',
    fullscreen: '&#xe5d0;',
    fullscreenExit: '&#xe5d1;',
    pencil: '&#xe254;',
    edit: '&#xe255;',
    save: '&#xe161;',
    trash: '&#xe872;',
    delete: '&#xe92b;',
    calendar: '&#xe916;',
    schedule: '&#xe926;',
    date: '&#xe24f;',
    dateCheck: '&#xe614;',
    dateNote: '&#xe616;',
    dateCross: '&#xe615;',
    dateSearch: '&#xe57a;',
    dateHeart: '&#xe57b;',
    dateEdit: '&#xe57c;',
    scheduleTime: '&#xe57d;',
    dateAlert: '&#xe57e;',
    mailLight: '&#xe0e1;',
    mail: '&#xe159;',
    mailOpen: '&#xe151;',
    mailTick: '&#xe57f;',
    mailSearch: '&#xe580;',
    mailAdd: '&#xe581;',
    mailAlert: '&#xe582;',
    mailLock: '&#xe583;',
    paperclip: '&#xe226;',
    attachment: '&#xe2bc;',
    link: '&#xe157;',
    flag: '&#xe153;',
    ribbon: '&#xe8e6;',
    tag: '&#xe54e;',
    tagHeart: '&#xe89a;',
    tags: '&#xe41d;',
    bookmark: '&#xe431;',
    bookmarks: '&#xe432;',
    chat: '&#xe8af;',
    prompt: '&#xe0ca;',
    comment: '&#xe0cb;',
    promptInfo: '&#xe0d8;',
    promptText: '&#xe0b7;',
    promptMessage: '&#xe0c9;',
    promptBlock: '&#xe92f;',
    promptList: '&#xe8cd;',
    promptAlert: '&#xe85a;',
    promptImage: '&#xe618;',
    promptVideo: '&#xe62e;',
    promptEdit: '&#xe560;',
    blocked: '&#xe033;',
    blockedLeft: '&#xe611;',
    cancel: '&#xe14a;',
    moreLeft: '&#xe619;',
    moreRight: '&#xe61a;',
    label: '&#xe892;',
    more: '&#xe5d3;',
    dotsVert: '&#xe5d4;',
    menuDots: '&#xe5dc;',
    menu: '&#xe5d2;',
    clearAll: '&#xe0b8;',
    suitcase: '&#xe8f9;',
    briefcase: '&#xeb3f;',
    bag: '&#xe54c;',
    gift: '&#xe8b1;',
    cake: '&#xe7e9;',
    heartFull: '&#xe87d;',
    heartEmpty: '&#xe87e;',
    starFull: '&#xe838;',
    starEmpty: '&#xe83a;',
    dart: '&#xe584;',
    paperplane: '&#xe163;',
    lockSubmitted: '&#xe164;',
    thumbsUp: '&#xe8dc;',
    lockApproved: '&#xe8df;',
    thumbsDown: '&#xe8db;',
    lockDeclined: '&#xe8de;',
    thumbsUpDown: '&#xe8dd;',
    dollarRound: '&#xe263;',
    paid: '&#xe265;',
    lockPaid: '&#xe264;',
    codeA: '&#xe56b;',
    codeH: '&#xe56d;',
    codeD: '&#xe56e;',
    codeR: '&#xe56f;',
    codeM: '&#xe570;',
    codeP: '&#xe571;',
    codeS: '&#xe572;',
    pin: '&#xe921;',
    coffeeFull: '&#xeb44;',
    coffeeEmpty: '&#xe586;',
    meal: '&#xe56c;',
    car: '&#xe531;',
    incident: '&#xe3f3;',
    incidentCross: '&#xe548;',
    holiday: '&#xeb3e;',
    beach: '&#xeb40;',
    plane: '&#xe539;',
    traffic: '&#xe565;',
    directions: '&#xe52e;',
    location: '&#xe8b4;',
    locationPin: '&#xe55e;',
    locationArrow: '&#xe569;',
    target: '&#xe55c;',
    compass: '&#xe87a;',
    map: '&#xe55b;',
    network: '&#xe894;',
    earth: '&#xe80b;',
    server: '&#xe1db;',
    database: '&#xe587;',
    databaseTick: '&#xe588;',
    databaseAdd: '&#xe589;',
    databaseMinus: '&#xe58a;',
    databaseDelete: '&#xe58b;',
    databaseLock: '&#xe590;',
    databaseSearch: '&#xe58c;',
    databaseEdit: '&#xe5e5;',
    databaseImport: '&#xe5e6;',
    databaseExport: '&#xe5e7;',
    databaseRefresh: '&#xe5e8;',
    databaseSync: '&#xe5e9;',
    cpu: '&#xe322;',
    nfc: '&#xe1bb;',
    eye: '&#xe8f4;',
    eyeBlock: '&#xe8f5;',
    palette: '&#xe40a;',
    brush: '&#xe3ae;',
    power: '&#xe8ac;',
    powerMore: '&#xe8c6;',
    flaskContent: '&#xe58d;',
    flaskFull: '&#xe58e;',
    lightBulb: '&#xe90f;',
    bug: '&#xe868;',
    extension: '&#xe87b;',
    plugin: '&#xe63c;',
    book: '&#xe0e0;',
    docWord: '&#xe58f;',
    doc: '&#xe874;',
    docs: '&#xe873;',
    fileCabinet: '&#xe599;',
    zipBlack: '&#xe5ea;',
    zip: '&#xe5eb;',
    executableBlack: '&#xe5ec;',
    executable: '&#xe5ed;',
    fileBlack: '&#xe24d;',
    docBlack: '&#xe24d;',
    file: '&#xe24e;',
    fileTextBlack: '&#xe5ee;',
    fileText: '&#xe5ef;',
    fileSearchBlack: '&#xe880;',
    fileSearch: '&#xe881;',
    fileAddBlack: '&#xe89c;',
    fileAdd: '&#xe89f;',
    fileAlertBlack: '&#xe5f0;',
    fileAlert: '&#xe5f1;',
    fileImageBlack: '&#xe594;',
    fileImage: '&#xe5f2;',
    fileStatsBlack: '&#xe596;',
    fileStats: '&#xe5f3;',
    fileCheckBlack: '&#xe5f4;',
    fileCheck: '&#xe5f5;',
    fileKeyBlack: '&#xe5f6;',
    fileKey: '&#xe5f7;',
    fileQuestionBlack: '&#xe5f8;',
    fileQuestion: '&#xe5f9;',
    fileCancelBlack: '&#xe5fa;',
    fileCancel: '&#xe592;',
    fileLockBlack: '&#xeae1;',
    fileLock: '&#xe593;',
    fileStarBlack: '&#xeadf;',
    fileStar: '&#xeae2;',
    fileCogBlack: '&#xeae3;',
    fileCog: '&#xeae4;',
    fileSourceBlack: '&#xeae5;',
    fileSource: '&#xe595;',
    fileVideoBlack: '&#xe5fb;',
    fileVideo: '&#xe598;',
    fileAudioBlack: '&#xe5fc;',
    fileAudio: '&#xe5fd;',
    filePdfBlack: '&#xe5fe;',
    filePdf: '&#xe5ff;',
    fileWordBlack: '&#xe600;',
    fileWord: '&#xe601;',
    fileExcelBlack: '&#xe602;',
    fileExcel: '&#xe603;',
    filePowerpointBlack: '&#xe604;',
    filePowerpoint: '&#xe605;',
    fileExeBlack: '&#xe606;',
    fileExe: '&#xe607;',
    fileSettingsBlack: '&#xe608;',
    fileSettings: '&#xe609;',
    filesBlack: '&#xe60a;',
    files: '&#xe60b;',
    fileDelete: '&#xe597;',
    clipboard: '&#xe14f;',
    copy: '&#xe14d;',
    popup: '&#xe883;',
    folder: '&#xe2c7;',
    newFolder: '&#xe2cc;',
    folderEmpty: '&#xe2c8;',
    folderPictures: '&#xe8a7;',
    picture: '&#xe410;',
    pictures: '&#xe413;',
    pictureSize: '&#xe433;',
    camera: '&#xe412;',
    video: '&#xe404;',
    music: '&#xe3a1;',
    cut: '&#xe14e;',
    fingerprint: '&#xe90d;',
    cd: '&#xe019;',
    education: '&#xe80c;',
    hand: '&#xe92e;',
    sun: '&#xe1ad;',
    moon: '&#xe3a7;',
    parental: '&#xeb42;',
    print: '&#xe8ad;',
    lightning: '&#xe3e7;',
    quoteOpen: '&#xe0d6;',
    quoteClose: '&#xe244;',
    quote: '&#xe245;',
    sentimentVerySatisfied: '&#xe815;',
    sentimentSatisfied: '&#xe813;',
    sentimentNeutral: '&#xe812;',
    sentimentDissatisfied: '&#xe811;',
    sentimentVeryDissatisfied: '&#xe7f3;',
    sentimentDead: '&#xe814;',
    kiwi: '&#xe59a;',
    atom: '&#xe59b;',
    brain: '&#xe1c1;',
    deathstarIncomplete: '&#xe1c2;',
    deathstar: '&#xe1c3;',
    poop: '&#xe59c;',
    easterEgg: '&#xe59d;',
    easterEggFull: '&#xe59e;',
    dragHorizontal: '&#xe59f;',
    dragVertical: '&#xe5a0;',
    drag: '&#xe5a1;',
    twitterCircle: '&#xe5a2;',
    twitterSquare: '&#xe5a3;',
    facebookSquare: '&#xe5a4;',
    facebook: '&#xe5a5;',
    twitter: '&#xe5a6;',
    uploadNetwork: '&#xe5a7;',
    play: '&#xe037;',
    pause: '&#xe034;',
    previous: '&#xe020;',
    next: '&#xe01f;',
    first: '&#xe045;',
    last: '&#xe044;',
    repeat: '&#xe040;',
    record: '&#xe061;',
    eject: '&#xe8fb;',
    capslock: '&#xe318;',
    mute: '&#xe04f;',
    volume: '&#xe050;',
    volumeUp: '&#xe050;',
    sound: '&#xe050;',
    volumeDown: '&#xe04d;',
    volumeMute: '&#xe04e;',
    mic: '&#xe029;',
    microphoneOff: '&#xe02b;',
    micVoice: '&#xe8c8;',
    microphoneNone: '&#xe02a;',
    field: '&#xe3c0;',
    fieldEdit: '&#xe3c1;',
    list: '&#xe896;',
    bulletList: '&#xe898;',
    addToList: '&#xe03b;',
    tickList: '&#xe065;',
    sendList: '&#xe05f;',
    reorderList: '&#xe16d;',
    mouse: '&#xe323;',
    keyboard: '&#xe312;',
    screen: '&#xe333;',
    desktop: '&#xe30c;',
    desktopDashboard: '&#xe0d9;',
    desktopTowerMonitor: '&#xe0db;',
    desktopTower: '&#xe0dc;',
    laptop: '&#xe31e;',
    phone: '&#xe0cd;',
    mobile: '&#xe324;',
    mobileSettings: '&#xe0de;',
    tablet: '&#xe331;',
    portrait: '&#xe0dd;',
    landscape: '&#xe0d5;',
    landscapeLock: '&#xe1be;',
    portraitLock: '&#xe1bf;',
    rotationLock: '&#xe1c0;',
    rotation: '&#xe1c4;',
    chrome: '&#xe5a8;',
    firefox: '&#xe5a9;',
    safari: '&#xe5aa;',
    egde: '&#xe5ab;',
    google: '&#xe5ac;',
    googleDrive: '&#xe5ad;',
    adobe: '&#xe5ae;',
    viewJs: '&#xe5af;',
    amazon: '&#xe5b0;',
    icomoon: '&#xe585;',
    cfDrag: '&#xe5b1;',
    cfSection: '&#xe5b2;',
    cfAffinityField: '&#xe5b3;',
    cfAffinityKey: '&#xe5e0;',
    cfAddress: '&#xe5b4;',
    cfAttach: '&#xe5b5;',
    cfAttachMulti: '&#xe5b6;',
    cfBankAccount: '&#xe5b7;',
    cfCurrency: '&#xe5b8;',
    cfDate: '&#xe5b9;',
    cfDraw: '&#xe5ba;',
    cfDropDown: '&#xe5bb;',
    cfEffectiveDate: '&#xe5bc;',
    cfEmail: '&#xe5bd;',
    cfDocsign: '&#xe591;',
    cfExplanation: '&#xe5be;',
    cfLink: '&#xe5bf;',
    cfMemo: '&#xe5c0;',
    cfMultiCheckbox: '&#xe5c1;',
    cfNumberDecimal: '&#xe5c2;',
    cfNumber: '&#xe5c3;',
    cfParagraph: '&#xe5c5;',
    cfRadioButtonList: '&#xe5c6;',
    cfPageBreak: '&#xe5c7;',
    cfCheckbox: '&#xe5cc;',
    cfTaxNumber: '&#xe5df;',
    cfHeading: '&#xe5ce;',
    cfTableContents: '&#xe5cf;',
    cfTextbox: '&#xe5dd;',
    cfYoutube: '&#xe5de;'
  };


  /***************************************************************************************************************************************************/
  /***************************************************************************************************************************************************/
  /***                                                                          **********************************************************************/
  /***   ██████   ██████  ██      ██    ██ ███████ ██ ██      ██      ███████   **********************************************************************/
  /***   ██   ██ ██    ██ ██       ██  ██  ██      ██ ██      ██      ██        **********************************************************************/
  /***   ██████  ██    ██ ██        ████   █████   ██ ██      ██      ███████   **********************************************************************/
  /***   ██      ██    ██ ██         ██    ██      ██ ██      ██           ██   **********************************************************************/
  /***   ██       ██████  ███████    ██    ██      ██ ███████ ███████ ███████   **********************************************************************/
  /***                                                                          **********************************************************************/
  /***************************************************************************************************************************************************/
  /************************************************************************************************************************ Source63 *** polyfills ***/


  /**
   * Array.prototype.forEach() polyfill
   * @this    Array
   * @author  Ben King, benk at affinityteam.com, ben.king at source63.com, +64 21 2672729.
   */
  if (!Array.prototype.forEach)
  {
    Array.prototype.forEach = function (callback)
    {
      var _args, _key, _obj, _len, _keyValue;
      if (this == null) throw new TypeError('this is null or not defined');
      if (typeof callback !== 'function') throw new TypeError(callback + ' is not a function');
      _obj = Object(this);
      _len = _obj.length >>> 0;
      if (arguments.length > 1) _args = arguments[1];
      _key = 0;
      while (_key < _len)
      {
        if (_key in _obj)
        {
          _keyValue = _obj[_key];
          callback.call(_args, _keyValue, _key, _obj);
        }
        _key++;
      }
    };
  }

  /**
   * Array.prototype.removeEmpty() polyfill
   * @this    Array
   * @author  Ben King, benk at affinityteam.com, ben.king at source63.com, +64 21 2672729.
   */
  if (!Array.prototype.removeEmpty)
  {
    Array.prototype.removeEmpty = function ()
    {
      return this.filter(function (mixed)
      {
        if (mixed === null) return false;
        if (mixed === undefined) return false;
        if (Affinity2018.isString(mixed) && mixed === '') return false;
        return true;
      });
    };
  }

  /**
   * Array.prototype.removeDuplicates() polyfill
   * @this    Array
   * @author  Ben King, benk at affinityteam.com, ben.king at source63.com, +64 21 2672729.
   */
  if (!Array.prototype.removeDuplicates)
  {
    Array.prototype.removeDuplicates = function ()
    {
      var prims = { "boolean": {}, "number": {}, "string": {} }, objs = [];
      return this.filter(function (item)
      {
        var type = typeof item;
        if (type in prims) return prims[type].hasOwnProperty(item) ? false : (prims[type][item] = true);
        else return objs.indexOf(item) >= 0 ? false : objs.push(item);
      });
    };
  }

  /**
   * NodeList.prototype.forEach() polyfill
   * @this    NodeList
   * @author  Ben King, benk at affinityteam.com, ben.king at source63.com, +64 21 2672729.
   */
  if (window.NodeList && !NodeList.prototype.forEach && Array.prototype.forEach)
  {
    NodeList.prototype.forEach = Array.prototype.forEach;
  }

  /**
   * Node.hasAttribute() polyfill
   * @this    DomElement
   * @author  Ben King, benk at affinityteam.com, ben.king at source63.com, +64 21 2672729.
   */
  (function (prototype)
  {
    prototype.hasAttribute = prototype.hasAttribute || function (name)
    {
      return !!(this.attributes[name] && this.attributes[name].specified);
    }
  })(Element.prototype);

  /**
   * DateTime.clone() polyfill
   * @this    Date
   * @author  Ben King, benk at affinityteam.com, ben.king at source63.com, +64 21 2672729.
   */
  if (!Date.prototype.clone)
  {
    Date.prototype.clone = function ()
    {
      return new Date(this.getTime());
    };
  }

  /**
   * DateTime.isValid() polyfill
   * @this    Date
   * @author  Ben King, benk at affinityteam.com, ben.king at source63.com, +64 21 2672729.
   */
  if (!Date.prototype.isValid)
  {
    Date.prototype.isValid = function ()
    {
      return this instanceof Date && !isNaN(this);
    };
  }

  /**
   * Element.Closest() polyfill
   * @this    Element
   * @author  Ben King, benk at affinityteam.com, ben.king at source63.com, +64 21 2672729.
   */
  if (window.Element)
  {
    if (!Element.prototype.matches) Element.prototype.matches = Element.prototype.msMatchesSelector || Element.prototype.webkitMatchesSelector;
    if (!Element.prototype.closest)
    {
      Element.prototype.closest = function (s)
      {
        var el = this;
        if (!document.documentElement.contains(el)) return null;
        do
        {
          if (el.matches(s)) return el;
          el = el.parentElement || el.parentNode;
        } while (el !== null && el.nodeType === 1);
        return null;
      };
    }
  }


  /**
   * String.startsWith() polyfill
   * @this    String
   * @author  Ben King, benk at affinityteam.com, ben.king at source63.com, +64 21 2672729.
   */
  if (!String.prototype.startsWith)
  {
    Object.defineProperty(String.prototype, 'startsWith',
      {
        value: function (search, rawPos)
        {
          var pos = rawPos > 0 ? rawPos | 0 : 0;
          return this.substring(pos, pos + search.length) === search;
        }
      });
  }


  /**
   * String.endsWith() polyfill
   * @this    String
   * @author  Ben King, benk at affinityteam.com, ben.king at source63.com, +64 21 2672729.
   */
  if (!String.prototype.endsWith)
  {
    String.prototype.endsWith = function (search, this_len)
    {
      if (this_len === undefined || this_len > this.length)
      {
        this_len = this.length;
      }
      return this.substring(this_len - search.length, this_len) === search;
    };
  }


  /**
   * String.shorten(length) polyfill
   * @this    String
   * @author  Ben King, benk at affinityteam.com, ben.king at source63.com, +64 21 2672729.
   */
  if (!String.prototype.shorten)
  {
    String.prototype.shorten = function (length, eliipses)
    {
      length = length === undefined ? 50 : length;
      eliipses = eliipses === undefined ? ' ...' : '';
      let string = this;
      if (string.length > length)
      {
        string = string.substring(0, length);
        string = string.substring(0, string.lastIndexOf(' '));
        string += eliipses;
        string = '"' + string + '"';
      }
      return string;
    };
  }

  /***************************************************************************************************************************************************/
  /***************************************************************************************************************************************************/
  /***                                                                                                                               *****************/
  /***    █████  ███████ ███████ ██ ███    ██ ██ ████████ ██    ██     ████████  ██████   ██████  ██      ██████   ██████  ██   ██   *****************/
  /***   ██   ██ ██      ██      ██ ████   ██ ██    ██     ██  ██         ██    ██    ██ ██    ██ ██      ██   ██ ██    ██  ██ ██    *****************/
  /***   ███████ █████   █████   ██ ██ ██  ██ ██    ██      ████          ██    ██    ██ ██    ██ ██      ██████  ██    ██   ███     *****************/
  /***   ██   ██ ██      ██      ██ ██  ██ ██ ██    ██       ██           ██    ██    ██ ██    ██ ██      ██   ██ ██    ██  ██ ██    *****************/
  /***   ██   ██ ██      ██      ██ ██   ████ ██    ██       ██           ██     ██████   ██████  ███████ ██████   ██████  ██   ██   *****************/
  /***                                                                                                                               *****************/
  /***************************************************************************************************************************************************/
  /***************************************************************************************************************** Source63 *** affinity toolbox ***/


  /**
   * Affinity2018.type()
   * Returns the name of the type of the passed object
   * 
   * @author  Ben King, benk at affinityteam.com, ben.king at source63.com, +64 21 2672729.
   * 
   * @param {object} obj
   * 
   * @returns {string}
   */
  if (!Affinity2018.hasOwnProperty('type'))
  {
    Affinity2018.ClasstTypes = {};
    'Boolean Number String Function Array Date RegExp Object Error Event CustomEvent HTMLElement'.split(' ').forEach(function (name, i)
    {
      Affinity2018.ClasstTypes['[object ' + name + ']'] = name.toLowerCase();
    });
    Affinity2018.type = function (obj)
    {
      if (obj == null) return obj + '';
      return typeof obj === 'object' || typeof obj === 'function' ? obj instanceof HTMLElement ? 'HTMLElement' : Affinity2018.ClasstTypes[toString.call(obj)] || 'object' : typeof obj;
    };
    Affinity2018.Type = Affinity2018.type;
  }


  /**
   * Affinity2018.uuid()
   * Returns a 9 character long unique ID string 
   * 
   * @author  Ben King, benk at affinityteam.com, ben.king at source63.com, +64 21 2672729.
   * 
   * @returns {string}
   */
  if (!Affinity2018.hasOwnProperty('uuid'))
  {
    Affinity2018.uuid = function ()
    {
      return String('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz').charAt(Math.round(Math.random() * 52)) + Math.random().toString(36).substr(2, 9);
    };
  }


  /**
   * Affinity2018.toString()
   * Retrun strin gon any type
   * 
   * @author  Ben King, benk at affinityteam.com, ben.king at source63.com, +64 21 2672729.
   * 
   * @param {object} obj
   * 
   * @returns {string}
   */
  if (!Affinity2018.hasOwnProperty('toString'))
  {
    Affinity2018.toString = function (obj)
    {
      return (obj + '').trim();
    };
  }


  /**
   * Affinity2018.isNull()
   * Determines if passed value is NULL
   * 
   * @author  Ben King, benk at affinityteam.com, ben.king at source63.com, +64 21 2672729.
   * 
   * @param {object} obj
   * 
   * @returns {boolean}
   */
  if (!Affinity2018.hasOwnProperty('isNull'))
  {
    Affinity2018.isNull = function (obj)
    {
      return obj === null || obj === undefined ? true : false;
    };
  }


  /**
   * Affinity2018.isNullOrEmpty()
   * Determines if passed value is NULL
   * 
   * @author  Ben King, benk at affinityteam.com, ben.king at source63.com, +64 21 2672729.
   * 
   * @param {object} obj
   * 
   * @returns {boolean}
   */
  if (!Affinity2018.hasOwnProperty('isNullOrEmpty'))
  {
    Affinity2018.isNullOrEmpty = function (obj)
    {
      return obj === null || obj === undefined ? true : Affinity2018.isString(obj) && (obj.trim().toLowerCase() === 'null' || obj.trim() === '') ? true : false;
    };
  }


  /**
   * Affinity2018.isDomElement()
   * Affinity2018.isElement()
   * Affinity2018.isNode()
   * Determines if passed objects is Dom Elmements
   * 
   * @author  Ben King, benk at affinityteam.com, ben.king at source63.com, +64 21 2672729.
   * 
   * @param {Object} obj
   * 
   * @returns {boolean}
   */
  if (!Affinity2018.hasOwnProperty('isDomElement'))
  {
    Affinity2018.isDomElement = function (obj)
    {
      if (obj === undefined || obj === null)
      {
        return false;
      }
      try
      {
        return obj instanceof HTMLElement;
      }
      catch (e)
      {
        return (typeof obj === "object") && (obj.nodeType === 1) && (typeof obj.style === "object") && (typeof obj.ownerDocument === "object");
      }
    };
    Affinity2018.isDomElementReturn = function (obj)
    {
      return Affinity2018.isDomElement(obj) ? obj : false;
    };
    Affinity2018.isNode = Affinity2018.isElement = Affinity2018.isDomElement;
  }


  /**
   * Affinity2018.isArray()
   * Determines if passed object is an Array
   * 
   * @author  Ben King, benk at affinityteam.com, ben.king at source63.com, +64 21 2672729.
   * 
   * @param {Object} obj
   * 
   * @returns {boolean}
   */
  if (!Affinity2018.hasOwnProperty('isArray'))
  {
    Affinity2018.isArray = function (obj)
    {
      return Array.isArray(obj);
    };
    Affinity2018.isArrayReturn = function (obj)
    {
      return Affinity2018.isArray(obj) ? obj : false;
    };
  }


  /**
   * Affinity2018.isNumeric()
   * Determines if passed object is a number (including strings that are numbers)
   * 
   * @author  Ben King, benk at affinityteam.com, ben.king at source63.com, +64 21 2672729.
   * 
   * @param {Object} obj
   * 
   * @returns {boolean}
   */
  if (!Affinity2018.hasOwnProperty('isNumeric'))
  {
    Affinity2018.isNumeric = function (obj)
    {
      return !isNaN(parseFloat(obj));
    };
    Affinity2018.isNumericReturn = function (obj)
    {
      return Affinity2018.isNumeric(obj) ? obj : false;
    };
  }


  /**
   * Affinity2018.isInt()
   * Determines if passed object is an Int
   * 
   * @author  Ben King, benk at affinityteam.com, ben.king at source63.com, +64 21 2672729.
   * 
   * @param {Object} obj
   * 
   * @returns {boolean}
   */
  if (!Affinity2018.hasOwnProperty('isInt'))
  {
    Affinity2018.isInt = function (obj)
    {
      return Affinity2018.isNumeric(obj) && !obj.toString().contains('.');
    };
    Affinity2018.isIntReturn = function (obj)
    {
      return Affinity2018.isInt(obj) ? obj : false;
    };
  }


  /**
   * Affinity2018.isFunction()
   * Affinity2018.isMethod()
   * Determines if passed object is a Function
   * 
   * @author  Ben King, benk at affinityteam.com, ben.king at source63.com, +64 21 2672729.
   * 
   * @param {Object} obj
   * 
   * @returns {boolean}
   */
  if (!Affinity2018.hasOwnProperty('isFunction'))
  {
    Affinity2018.isFunction = function (obj)
    {
      return typeof obj === "function" ? obj : false;
    };
    Affinity2018.isFunctionReturn = function (obj)
    {
      return Affinity2018.isFunction(obj) ? obj : false;
    };
    Affinity2018.isMethod = Affinity2018.isFunction;
    Affinity2018.isMethodReturn = Affinity2018.isFunctionReturn;
  }


  /**
   * Affinity2018.isDate()
   * Determines if passed object is a Date
   * 
   * @author  Ben King, benk at affinityteam.com, ben.king at source63.com, +64 21 2672729.
   * 
   * @param {Object} obj
   * 
   * @returns {boolean}
   */
  if (!Affinity2018.hasOwnProperty('isDate'))
  {
    Affinity2018.isDate = function (obj)
    {
      return Object.prototype.toString.call(obj) === '[object Date]';
    };
    Affinity2018.isDateReturn = function (obj)
    {
      return Affinity2018.isDate(obj) ? obj : false;
    };
  }


  /**
   * Affinity2018.isDateValid()
   * Determines if passed object is a valid Date
   * 
   * @author  Ben King, benk at affinityteam.com, ben.king at source63.com, +64 21 2672729.
   * 
   * @param {Object} obj
   * 
   * @returns {boolean}
   */
  if (!Affinity2018.hasOwnProperty('isDateValid'))
  {
    Affinity2018.isDateValid = function (obj)
    {
      if (obj === null || obj === false || obj === undefined) return false;
      return Affinity2018.isDate(obj) && obj.isValid();
    };
  }


  /**
   * Affinity2018.isBool()
   * Determines if passed object is a Boolean
   * 
   * @author  Ben King, benk at affinityteam.com, ben.king at source63.com, +64 21 2672729.
   * 
   * @param {Object} obj
   * 
   * @returns {boolean}
   */
  if (!Affinity2018.hasOwnProperty('isBool'))
  {
    Affinity2018.isBool = function (obj)
    {
      return obj !== null && typeof obj === 'boolean';
    };
    Affinity2018.isBoolReturn = function (obj)
    {
      return Affinity2018.isBool(obj) ? obj : false;
    };
  }


  /**
   * Affinity2018.isWindow()
   * Determines if passed object is the current Window
   * 
   * @author  Ben King, benk at affinityteam.com, ben.king at source63.com, +64 21 2672729.
   * 
   * @param {Object} obj
   * 
   * @returns {boolean}
   */
  if (!Affinity2018.hasOwnProperty('isWindow'))
  {
    Affinity2018.isWindow = function (obj)
    {
      return obj != null && obj === obj.window;
    };
    Affinity2018.isWindowReturn = function (obj)
    {
      return Affinity2018.isWindow(obj) ? obj : false;
    };
  }


  /**
   * Affinity2018.isClass()
   * Determines if passed object is a Class
   * 
   * @author  Ben King, benk at affinityteam.com, ben.king at source63.com, +64 21 2672729.
   * 
   * @param {Object} obj
   * 
   * @returns {boolean}
   */
  if (!Affinity2018.hasOwnProperty('isClass'))
  {
    Affinity2018.isClass = function (obj)
    {
      return obj && obj instanceof Object && obj.constructor && obj.constructor.name && (Affinity2018.Classes.contains(obj.constructor.name) || Affinity2018.Classes.Plugins.contains(obj.constructor.name));
    };
  }


  /**
   * Affinity2018.isObject()
   * Determines if passed object is a Object
   * 
   * @author  Ben King, benk at affinityteam.com, ben.king at source63.com, +64 21 2672729.
   * 
   * @param {Object} obj
   * 
   * @returns {boolean}
   */
  if (!Affinity2018.hasOwnProperty('isObject'))
  {
    Affinity2018.isObject = function (obj)
    {
      if (obj === null || typeof obj !== "object" || obj.nodeType || Affinity2018.isWindow(obj))
      {
        return false;
      }
      if (
        obj.constructor
        && !hasOwnProperty.call(obj.constructor.prototype, "isPrototypeOf")
      )
      {
        return false;
      }
      return true;
    };
    Affinity2018.isObjectReturn = function (obj)
    {
      return Affinity2018.isObject(obj) ? obj : false;
    };
  }


  /**
   * Affinity2018.isStringifiedObject()
   * Determines if a passed string is a stringified object
   * 
   * @author  Ben King, benk at affinityteam.com, ben.king at source63.com, +64 21 2672729.
   * 
   * @param {string} objectString Stringified object
   * 
   * @returns {boolean}
   */
  if (!Affinity2018.hasOwnProperty('isStringifiedObject'))
  {
    Affinity2018.isStringifiedObject = function (objectString)
    {
      if (Affinity2018.isString(objectString) && objectString.trim() !== '')
      {
        try
        {
          var testObject = JSON.parse(objectString.trim());
          return Affinity2018.isObject(testObject) || Affinity2018.isArray(testObject);
        }
        catch (err)
        {
          //console.log(err);
        }
      }
      return false;
    };
  }


  /**
   * Affinity2018.isUrl()
   * Determines if passed string is a valid url
   * 
   * @author  Ben King, benk at affinityteam.com, ben.king at source63.com, +64 21 2672729.
   * 
   * @param {string} url
   * 
   * @returns {boolean}
   */
  if (!Affinity2018.hasOwnProperty('isUrl'))
  {
    Affinity2018.isUrl = function (url)
    {
      if (typeof url !== 'string') return false;
      if (url.trim() === '') return false;
      url = url.trim();
      // NOTE: Does NOT match IPv6
      var expression = '(https?:\/\/(?:www\.|(?!www))[a-zA-Z0-9][a-zA-Z0-9-]+[a-zA-Z0-9]\.[^\s]{2,}|www\.[a-zA-Z0-9][a-zA-Z0-9-]+[a-zA-Z0-9]\.[^\s]{2,}|https?:\/\/(?:www\.|(?!www))[a-zA-Z0-9]+\.[^\s]{2,}|www\.[a-zA-Z0-9]+\.[^\s]{2,})';
      //var pattern = new RegExp('^((ft|htt)ps?:\\/\\/)?'+ // protocol
      // '((([a-z\\d]([a-z\\d-]*[a-z\\d])*)\\.)+[a-z]{2,}|'+ // domain name and extension
      // '(localhost)|'+ // OR localhost
      // '((\\d{1,3}\\.){3}\\d{1,3}))'+ // OR IPv4 address
      // '(\\:\\d+)?'+ // port
      // '(\\/[-a-z\\d%@_.~+&:]*)*'+ // path
      // '(\\?[;&a-z\\d%@_.,~+&:=-]*)?'+ // query string
      // '(\\#[-a-z\\d_]*)?$','i'); // fragment locator
      var pattern = new RegExp(expression);
      return pattern.test(url) ? true : false;
    };
    Affinity2018.isUrlReturn = function (url)
    {
      return Affinity2018.isUrl(url) ? url : false;
    };
  }


  /**
   * Affinity2018.isEmptyObject()
   * Determines if passed object is empty (has no keys)
   * 
   * @author  Ben King, benk at affinityteam.com, ben.king at source63.com, +64 21 2672729.
   * 
   * @param {Object} obj
   * 
   * @returns {boolean}
   */
  if (!Affinity2018.hasOwnProperty('isEmptyObject'))
  {
    Affinity2018.isEmptyObject = function (obj)
    {
      for (var n in obj)
      {
        return false;
      }
      return true;
    };
  }


  /**
   * Affinity2018.isString()
   * Determines if passed object is a string
   * 
   * @author  Ben King, benk at affinityteam.com, ben.king at source63.com, +64 21 2672729.
   * 
   * @param {Object} obj
   * 
   * @returns {boolean}
   */
  if (!Affinity2018.hasOwnProperty('isString'))
  {
    Affinity2018.isString = function (obj)
    {
      return typeof obj === 'string';
    };
  }


  /**
   * Affinity2018.isEvent()
   * Determines if passed object is an Event or CustomEvent
   * 
   * @author  Ben King, benk at affinityteam.com, ben.king at source63.com, +64 21 2672729.
   * 
   * @param {event} ev
   * 
   * @returns {boolean}
   */
  if (!Affinity2018.hasOwnProperty('isEvent'))
  {
    Affinity2018.isEvent = function (ev)
    {
      if (!ev || ev === null || ev === undefined || ev === 'undefined') return false;
      if (Affinity2018.isString(ev) || Affinity2018.isBool(ev) || Affinity2018.isDate(ev) || Affinity2018.isMethod(ev)) return false;
      if (ev && ev instanceof Event) return true;
      if (ev && 'originalEvent' in ev && ev.originalEvent instanceof Event) return true;
      return false;
    };
  }


  /**
   * Affinity2018.isPropString()
   * Determines if passed prop is a string belonging to the passed object
   * 
   * @author  Ben King, benk at affinityteam.com, ben.king at source63.com, +64 21 2672729.
   * 
   * @param {Object} obj
   * @param {string} prop
   * 
   * @returns {boolean}
   */
  if (!(Affinity2018.hasOwnProperty('isPropString')))
  {
    Affinity2018.isPropString = function (obj, prop)
    {
      if (
        typeof obj === 'object'
        && obj.hasOwnProperty(prop)
        && typeof obj[prop] === 'string'
        && !Affinity2018.isNull(obj[prop])
      )
      {
        return true;
        //return obj[prop].trim();
      }
      return false;
    };
  }


  /**
   * Affinity2018.isPropInt()
   * Determines if passed prop is an Int belonging to the passed object
   * 
   * @author  Ben King, benk at affinityteam.com, ben.king at source63.com, +64 21 2672729.
   * 
   * @param {Object} obj
   * @param {int} prop
   * 
   * @returns {boolean}
   */
  if (!(Affinity2018.hasOwnProperty('isPropInt')))
  {
    Affinity2018.isPropInt = function (obj, prop)
    {
      if (
        Affinity2018.isObject(obj)
        && obj.hasOwnProperty(prop)
        && Affinity2018.isNumeric(obj[prop])
      )
      {
        return true; // parseInt(obj[prop]);
      }
      return false;
    };
  }


  /**
   * Affinity2018.isPropBool()
   * Determines if passed prop is a Boolean belonging to the passed object
   * 
   * @author  Ben King, benk at affinityteam.com, ben.king at source63.com, +64 21 2672729.
   * 
   * @param {Object} obj
   * @param {boolean} prop
   * 
   * @returns {boolean}
   */
  if (!(Affinity2018.hasOwnProperty('isPropBool')))
  {
    Affinity2018.isPropBool = function (obj, prop)
    {
      if (
        Affinity2018.isObject(obj)
        && obj.hasOwnProperty(prop)
        && Affinity2018.isBool(obj[prop])
      )
      {
        return true;
      }
      return false;
    };
  }


  /**
   * Affinity2018.isPropArray()
   * Determines if passed prop is an Array belonging to the passed object
   * 
   * @author  Ben King, benk at affinityteam.com, ben.king at source63.com, +64 21 2672729.
   * 
   * @param {Object} obj
   * @param {array} prop
   * 
   * @returns {boolean}
   */
  if (!(Affinity2018.hasOwnProperty('isPropArray')))
  {
    Affinity2018.isPropArray = function (obj, prop)
    {
      if (
        Affinity2018.isObject(obj)
        && obj.hasOwnProperty(prop)
        && Array.isArray(obj[prop])
      )
      {
        return obj[prop];
      }
      return false;
    };
  }


  /**
   * Affinity2018.isPropObject()
   * Determines if passed prop is an Object belonging to the passed object
   * 
   * @author  Ben King, benk at affinityteam.com, ben.king at source63.com, +64 21 2672729.
   * 
   * @param {Object} obj
   * @param {Object} prop
   * 
   * @returns {boolean}
   */
  if (!(Affinity2018.hasOwnProperty('isPropObject')))
  {
    Affinity2018.isPropObject = function (obj, prop)
    {
      if (
        Affinity2018.isObject(obj)
        && obj.hasOwnProperty(prop)
        && Affinity2018.isObject(obj[prop])
      )
      {
        return obj[prop];
      }
      return false;
    };
  }


  /**
   * Affinity2018.isPropFunction()
   * Determines if passed prop is an Object belonging to the passed object
   * 
   * @author  Ben King, benk at affinityteam.com, ben.king at source63.com, +64 21 2672729.
   * 
   * @param {Object} obj
   * @param {Object} prop
   * 
   * @returns {boolean}
   */
  if (!(Affinity2018.hasOwnProperty('isPropFunction')))
  {
    Affinity2018.isPropFunction = function (obj, prop)
    {
      if (
        Affinity2018.isObject(obj)
        && obj.hasOwnProperty(prop)
        && Affinity2018.isFunction(obj[prop])
      )
      {
        return obj[prop];
      }
      return false;
    };
    Affinity2018.isPropMethod = Affinity2018.isPropFunction;
  }


  /**
  * Affinity2018.PadLeft(Int, String, Int)
  * Pads the start of a string with a character to length
  *
  * @author  Ben King, Ben King, benk at affinityteam.com, ben.king at source63.com, +64 21 2672729.
  *
  * @param {string} str     String to pad
  * @param {string} pad     Character to pad with
  * @param {int}    length  Length of padded string
  */
  if (!(Affinity2018.hasOwnProperty('padLeft')))
  {
    Affinity2018.padLeft = function (str, pad, length)
    {
      str = str + '';
      while (str.length < length) str = pad + str;
      return str;
    };
    Affinity2018.PadLeft = Affinity2018.padLeft;
  }


  /**
  * Affinity2018.PadRight(Int, String, Int)
  * Pads the end of a string with a character to length
  *
  * @author  Ben King, Ben King, benk at affinityteam.com, ben.king at source63.com, +64 21 2672729.
  *
  * @param {string} str     String to pad
  * @param {string} pad     Character to pad with
  * @param {int}    length  Length of padded string
  */
  if (!(Affinity2018.hasOwnProperty('padRight')))
  {
    Affinity2018.padRight = function (str, pad, length)
    {
      str = str + '';
      while (str.length < length) str = str + pad;
      return str;
    };
    Affinity2018.PadRight = Affinity2018.padRight;
  }


  /**
   * Affinity2018.getPosition()
   * Gets the position of the passed DOM Node relevant to the window
   * 
   * @author  Ben King, benk at affinityteam.com, ben.king at source63.com, +64 21 2672729.
   * 
   * @param {HTMLElement} node
   * 
   * @returns {Object}
   * @returns {float} object.top
   * @returns {float} object.left
   */
  if (!(Affinity2018.hasOwnProperty('getPosition')))
  {
    Affinity2018.getPosition = function (node)
    {
      let rect = node.getBoundingClientRect(),
        scrollLeft = window.pageXOffset || document.documentElement.scrollLeft,
        scrollTop = window.pageYOffset || document.documentElement.scrollTop;
      return { top: rect.top + scrollTop, left: rect.left + scrollLeft };
    };
  }


  /**
   * Affinity2018.getSize()
   * Gets the size of the passed DOM Node
   * 
   * @author  Ben King, benk at affinityteam.com, ben.king at source63.com, +64 21 2672729.
   * 
   * @param {HTMLElement} node
   * 
   * @returns {Object} object
   * @returns {float} object.width
   * @returns {float} object.height
   */
  if (!(Affinity2018.hasOwnProperty('getSize')))
  {
    Affinity2018.getSize = function (node)
    {
      let rect = node.getBoundingClientRect();
      return { width: rect.width, height: rect.height };
    };
  }


  /**
   * Affinity2018.getOffsetRect()
   * Gets the Rectangle of the passed DOM Node relevant to it's parent
   * 
   * @author  Ben King, benk at affinityteam.com, ben.king at source63.com, +64 21 2672729.
   * 
   * @param {HTMLElement} node
   * 
   * @returns {Object} object
   * @returns {float} object.width
   * @returns {float} object.height
   * @returns {float} object.top
   * @returns {float} object.right
   * @returns {float} object.bottom
   * @returns {float} object.left
   * @returns {float} object.x
   * @returns {float} object.y
   */
  if (!(Affinity2018.hasOwnProperty('getOffsetRect')))
  {
    Affinity2018.getOffsetRect = function (node)
    {
      let scrollLeft = window.pageXOffset || document.documentElement.scrollLeft,
        scrollTop = window.pageYOffset || document.documentElement.scrollTop,
        parentRect = node.parentNode.getBoundingClientRect(),
        nodeRect = node.getBoundingClientRect();
      return {
        width: nodeRect.width,
        height: nodeRect.height,
        top: (nodeRect.top - parentRect.top) + scrollTop,
        right: nodeRect.right - parentRect.right,
        bottom: nodeRect.bottom - parentRect.bottom,
        left: (nodeRect.left - parentRect.left) + scrollLeft,
        x: nodeRect.right - parentRect.right,
        y: nodeRect.top - parentRect.top
      };
    };
  }


  /**
   * Affinity2018.getWindowSize()
   * Gets the size of view excluding scroll (view port)
   * 
   * @author  Ben King, benk at affinityteam.com, ben.king at source63.com, +64 21 2672729.
   * 
   * @param {HTMLElement} node
   * 
   * @returns {Object} size
   * @returns {float} size.x
   * @returns {float} size.y
   * @returns {float} size.width
   * @returns {float} size.height
   */
  if (!(Affinity2018.hasOwnProperty('getWindowSize')))
  {
    Affinity2018.getWindowSize = function ()
    {
      var size = {
        x: window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth,
        y: window.innerHeight || document.documentElement.clientHeight || document.body.clientHeight
      };
      size.width = size.x;
      size.height = size.y;
      return size;
    }
  }


  /**
   * Affinity2018.getPageSize()
   * Gets the size of view including scroll
   * 
   * @author  Ben King, benk at affinityteam.com, ben.king at source63.com, +64 21 2672729.
   * 
   * @param {HTMLElement} node
   * 
   * @returns {Object} size
   * @returns {float} size.x
   * @returns {float} size.y
   * @returns {float} size.width
   * @returns {float} size.height
   */
  if (!(Affinity2018.hasOwnProperty('getPageSize')))
  {
    Affinity2018.getPageSize = function ()
    {
      var size = {
        x: Math.max(document.body.scrollWidth, document.documentElement.scrollWidth, document.body.offsetWidth, document.documentElement.offsetWidth, document.body.clienWidth, document.documentElement.clientWidth),
        y: Math.max(document.body.scrollHeight, document.documentElement.scrollHeight, document.body.offsetHeight, document.documentElement.offsetHeight, document.body.clientHeight, document.documentElement.clientHeight)
      };
      size.width = size.x;
      size.height = size.y;
      return size;
    }
  }


  /**
   * Affinity2018.getParent()
   * Gets the first parent DOM Element matching the arguments
   * 
   * @author  Ben King, benk at affinityteam.com, ben.king at source63.com, +64 21 2672729.
   * 
   * @param {HTMLElement} node The node to search in
   * @param {string} className A class name to match
   * @param {int} parentDepth The number of parent nodes to look in before gicing up
   * 
   * @returns {DOMElement|Boolean}
   */
  if (!(Affinity2018.hasOwnProperty('getParent')))
  {
    Affinity2018.getParent = function (node, className, parentDepth)
    {
      var depth = 0;
      parentDepth = !isNaN(parseInt(parentDepth)) ? parseInt(parentDepth) : 5;
      className = className.replace('.', '').replace('#', '').trim();
      if (!node || !className || className.trim() === '') return false;
      if (node.className.split(' ').filter(function (i) { return i }).contains(className)) return node;
      if (node.tagName.toLowerCase() === className.trim().toLowerCase()) return node;
      if (node.id.toLowerCase() === className.trim().toLowerCase()) return node;
      while (node.parentElement)
      {
        if (node.parentElement.className.split(' ').filter(function (i) { return i }).contains(className)) return node.parentElement;
        if (node.parentElement.tagName.toLowerCase() === className.trim().toLowerCase()) return node.parentElement;
        node = node.parentElement;
        depth++;
        if (depth >= parentDepth) return false;
      }
      return false;
    };
  }


  /**
  * Affinity2018.getDate()
  * Attempts to return date from mixed
  *
  * @author  Ben King, benk at affinityteam.com, ben.king at source63.com, +64 21 2672729.
  *
  * @param {string} mixed
  *
  * @returns {Date|String}
  */
  Affinity2018.getDate = function (mixed, format, ignoreLocalZone, nullOnFail)
  {
    var date;
    format = format !== undefined && Affinity2018.isString(format) ? format : null;
    ignoreLocalZone = ignoreLocalZone !== undefined && Affinity2018.isBool(ignoreLocalZone) ? ignoreLocalZone : true;
    nullOnFail = nullOnFail !== undefined && Affinity2018.isBool(nullOnFail) ? nullOnFail : false;
    if (Affinity2018.isDate(mixed))
    {
      luxonDate = luxon.DateTime.fromJSDate(mixed);
      if (luxonDate.isValid && ignoreLocalZone)
      {
        dateParts = {
          year: mixed.getFullYear(),
          month: mixed.getMonth(),
          day: mixed.getDate(),
          hour: mixed.getHours(),
          min: mixed.getMinutes(),
          sec: mixed.getSeconds()
        };
        luxonDate = luxon.DateTime.fromJSDate(new Date(
          dateParts.year,
          dateParts.month,
          dateParts.day,
          dateParts.hour,
          dateParts.min,
          dateParts.sec,
          0
        ));
      }
      date = format ? luxonDate.toFormat(format) : luxonDate.toJSDate();
      //date = format ? luxonDate.toFormat(format) : mixed;
      return date;
    }
    // strings
    var dateStr, luxonDate, partsStr, dateParts = { year: 0, month: 0, day: 0, hour: 0, min: 0, sec: 0 };
    if (Affinity2018.isString(mixed))
    {
      if (mixed.startsWith('/Date(') && mixed.endsWith(')/')) // C# Date Object as String
      {
        dateStr = mixed.replace(/\/Date\((-?\d+)\)\//, '$1').trim();
        luxonDate = luxon.DateTime.fromMillis(parseInt(dateStr));

        if (window.hasOwnProperty('dateLogStart') && window.dateLogStart)
        {
          console.log('                   (Is C# date)');
          console.log('--- Input ---------------------------');
          console.log('Passed Value:     ', mixed, ' -> ', dateStr);
          console.log('As JS Date:       ', new Date(parseInt(dateStr)));
          console.log('As Luxon Date     ', JSON.stringify(luxonDate.c));
          //console.log(luxonDate);
        }

        dateParts = {
          year: luxonDate.year,
          month: luxonDate.month - 1,
          day: luxonDate.day,
          hour: luxonDate.hour,
          min: luxonDate.minute,
          sec: luxonDate.second
        };
      }
      else if (/\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}.*?/.test(mixed)) // ISO Date String
      {
        luxonDate = luxon.DateTime.fromISO(mixed);
        partsStr = /(\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}).*?/.exec(mixed)[0];
        dateParts = {
          year: parseInt(partsStr.split('T')[0].split('-')[0]),
          month: parseInt(partsStr.split('T')[0].split('-')[1]) - 1,
          day: parseInt(partsStr.split('T')[0].split('-')[2]),
          hour: parseInt(partsStr.split('T')[1].split(':')[0]),
          min: parseInt(partsStr.split('T')[1].split(':')[1]),
          sec: parseInt(partsStr.split('T')[1].split(':')[2])
        };
      }
      else // Unknown .. we have to work it out as beast we can ...
      {
        var parserFormat = 'dd/MM/yyyy';
        date = Date.parse(mixed);
        luxonDate = luxon.DateTime.fromJSDate(date);
        if (mixed.countString('/') === 2 || mixed.countString('\\') === 2 || mixed.countString('-') === 2 || mixed.countString('.') === 2)
        {
          if (mixed.countString('/') === 2)
          {
            parserFormat = 'dd/MM/yyyy';
            partsStr = mixed.split(' ')[0].trim().split('/');
          }
          else if (mixed.countString('\\') === 2)
          {
            parserFormat = 'dd\\MM\\yyyy';
            partsStr = mixed.split(' ')[0].trim().split('\\');
          }
          else if (mixed.countString('-') === 2)
          {
            parserFormat = 'dd-MM-yyyy';
            partsStr = mixed.split(' ')[0].trim().split('-');
          }
          else if (mixed.countString('.') === 2)
          {
            parserFormat = 'dd.MM.yyyy';
            partsStr = mixed.split(' ')[0].trim().split('.');
          }
          dateParts = { year: parseInt(partsStr[2]), month: parseInt(partsStr[1]) - 1, day: parseInt(partsStr[0]), hour: 0, min: 0, sec: 0 };
          if (mixed.countString(':') >= 1)
          {
            if (mixed.countString(':') === 1) parserFormat += ' HH:mm';
            else if (mixed.countString(':') === 2) parserFormat += ' HH:mm:ss';
            else if (mixed.countString(':') === 2 && mixed.split(':')[mixed.split(':').length - 1].countString('.') > 0) parserFormat += ' HH:mm:ss.S';
            else if (mixed.countString(':') === 3) parserFormat += ' HH:mm:ss:S';
            partsStr = mixed.split(' ')[1].trim().split(' ')[0].trim().split(':');
            if (partsStr.length === 2) partsStr.push(0);
            dateParts.hour = parseInt(partsStr[0]);
            dateParts.min = parseInt(partsStr[1]);
            dateParts.sec = parseInt(partsStr[2]);
          }
          if (mixed.toLowerCase().trim().endsWith(' am') || mixed.toLowerCase().trim().endsWith(' pm'))
          {
            parserFormat += ' a';
            if (mixed.countString(':') >= 1)
            {
              parserFormat = parserFormat.replace('HH:', 'hh:');
              if (mixed.toLowerCase().trim().endsWith(' pm'))
              {
                dateParts.hour += 12;
              }
            }
          }
          luxonDate = luxon.DateTime.fromFormat(mixed, parserFormat);
        }
        else
        {
          mixed = mixed.replace('st ', ' ');
          mixed = mixed.replace('nd ', ' ');
          mixed = mixed.replace('rd ', ' ');
          mixed = mixed.replace('th ', ' ');
          mixed = mixed.replace(', ', ' ');
          date = Date.parse(mixed);
          luxonDate = luxon.DateTime.fromJSDate(date);
          if (luxonDate.isValid)
          {
            dateParts = {
              year: date.getFullYear(),
              month: date.getMonth(),
              day: date.getDate(),
              hour: date.getHours(),
              min: date.getMinutes(),
              sec: date.getSeconds()
            };
          }
          else
          {
            // I don't know what the hell mixed is .. 
            luxonDate = null;
          }
        }
      }
      if (luxonDate && luxonDate.isValid)
      {
        if (ignoreLocalZone)
        {
          luxonDate = luxon.DateTime.fromJSDate(new Date(
            dateParts.year,
            dateParts.month,
            dateParts.day,
            dateParts.hour,
            dateParts.min,
            dateParts.sec,
            0
          ));

          if (window.hasOwnProperty('dateLogStart') && window.dateLogStart)
          {
            console.log('--- Output --------------------------');
            console.log('JS Date parts:    ', JSON.stringify(dateParts));
            console.log('As Luxon Date     ', JSON.stringify(luxonDate.c));
            console.log('Luxon Date Obj    ', luxonDate);
            console.log('Luxon to JS Obj   ', luxonDate.toJSDate());
            if (format)
            {
              console.log('Formated Date:    ', luxonDate.toFormat(format));
            }
            console.groupEnd();
          }
          window.dateLogStart = false;

        }
        date = format ? luxonDate.toFormat(format) : luxonDate.toJSDate();
        return date
      }
    }
    if (!nullOnFail)
    {
      // I don't know what the hell mixed is .. soooooo .. return "now" ..
      luxonDate = luxon.DateTime.fromJSDate(new Date());
      date = format ? luxonDate.toFormat(format) : luxonDate.toJSDate();
      return date
    }
    return null;
  };


  /**
   * Affinity2018.stringToDate()
   * Attempts to parse string to NZ Date
   *
   * @author  Ben King, benk at affinityteam.com, ben.king at source63.com, +64 21 2672729.
   *
   * @param {string} json
   *
   * @returns {string|null}
   */
  if (!(Affinity2018.hasOwnProperty('stringToDate')))
  {
    Affinity2018.stringToDate = function (dateStr, failReturn)
    {
      if (!Affinity2018.isString(dateStr) || (Affinity2018.isString(dateStr) && dateStr.trim() === '')) return null;
      var date = Affinity2018.getDate(dateStr, undefined, undefined, true);
      if (date === null) return failReturn;
      return date;
    };
  }


  /**
   * Affinity2018.stringToObject()
   * Attempts to parse JSON string to object
   *
   * @author  Ben King, benk at affinityteam.com, ben.king at source63.com, +64 21 2672729.
   *
   * @param {string} json
   *
   * @returns {string|null}
   */
  if (!(Affinity2018.hasOwnProperty('stringToObject')))
  {
    Affinity2018.stringToObject = function (json)
    {
      if (Affinity2018.isObject(json))
      {
        return json;
      }
      if (Affinity2018.isString(json) && Affinity2018.isStringifiedObject(json))
      {
        return JSON.parse(json);
      }
      return null;
    };
  }


  /**
   * Affinity2018.setObjectToDataset()
   * Gets base64 encoded object data from a HTML node dataset attribute and returns escaped data
   *
   * @author  Ben King, benk at affinityteam.com, ben.king at source63.com, +64 21 2672729.
   *
   * @param {HTMLElement} node The node containing the dataset attribute
   * @param {string} datasetName A name of a dataset value
   * @param {object} data The data to encode
   *
   * @returns {string|null}
   */
  if (!(Affinity2018.hasOwnProperty('setObjectToDataset')))
  {
    Affinity2018.setObjectToDataset = function (node, datasetName, data)
    {
      try
      {
        if (Affinity2018.isObject(data))
        {
          //node.dataset[datasetName] = window.btoa(JSON.stringify(data));
          node.dataset[datasetName] = btoa(unescape(encodeURIComponent(JSON.stringify(data))));
          return node.dataset[datasetName];
        }
        if (Affinity2018.isString(data) && Affinity2018.isStringifiedObject(data))
        {
          node.dataset[datasetName] = btoa(unescape(encodeURIComponent(data)));
          return node.dataset[datasetName];
        }
      } catch (err) { console.warn(err); }
      return null;
    };
  }


  /**
   * Affinity2018.getObjectFromDataset()
   * Gets base64 encoded object data from a HTML node dataset attribute and returns escaped data
   *
   * @author  Ben King, benk at affinityteam.com, ben.king at source63.com, +64 21 2672729.
   *
   * @param {HTMLElement} node The node containing the dataset attribute
   * @param {string} datasetName A name of a dataset value
   *
   * @returns {object}
   */
  if (!(Affinity2018.hasOwnProperty('getObjectFromDataset')))
  {
    Affinity2018.getObjectFromDataset = function (node, datasetName)
    {
      if (node.dataset[datasetName])
      {
        try
        {
          var objectCheck = JSON.parse(decodeURIComponent(escape(atob(node.dataset[datasetName]))));
          if (Affinity2018.isObject(objectCheck))
          {
            return objectCheck;
          }
        } catch (err) { console.warn(err); }
      }
      return null;
    };
  }


  /**
   * Affinity2018.stopEvent()
   * Event.stop(), CustomEvent.stop()
   * Forces an event to stop default bheaviour and stop bubbling.
   * 
   * @author  Ben King, benk at affinityteam.com, ben.king at source63.com, +64 21 2672729.
   * 
   * @param {Event} ev
   */
  if (!(Affinity2018.hasOwnProperty('stopEvent')))
  {
    Affinity2018.stopEvent = function (ev)
    {
      try { ev.preventDefault(); } catch (er) { console.warn('failed to prevent default'); };
      try { ev.stopPropagation(); } catch (er) { console.warn('failed to stop propagation'); };
      try { ev.returnValue = false; } catch (er) { }
      try { ev.cancelBubble = true; } catch (er) { }
      if ('detail' in this && 'keyboardEvent' in this.detail)
      {
        try { this.detail.keyboardEvent.preventDefault(); } catch (er) { console.warn('failed to prevent default'); };
        try { this.detail.keyboardEvent.stopPropagation(); } catch (er) { console.warn('failed to stop propagation'); };
      }
    };
    Affinity2018.StopEvent = Affinity2018.stopEvent;
    Affinity2018.StopEvents = Affinity2018.stopEvent;
    Affinity2018.stopEvents = Affinity2018.stopEvent;
    if (!Event.prototype.stop) Event.prototype.stop = function () { Affinity2018.StopEvent(this); };
    if (!CustomEvent.prototype.stop) CustomEvent.prototype.stop = function () { Affinity2018.StopEvent(this); };
  }


  /**
   * Affinity2018.getUrlData()
   * Gets the first parent DOM Element matching the arguments
   * 
   * @author  Ben King, benk at affinityteam.com, ben.king at source63.com, +64 21 2672729.
   * 
   * @param {string} url
   * 
   * @returns {Object} object
   * @returns {string} object.original  The url that was passed in
   * @returns {string} object.protocol  The url protocol
   * @returns {string} object.hostname  The url domain name and tld
   * @returns {string} object.port      The url port (if any, else empty string)
   * @returns {string} object.pathname  The url path after domain name (if any, else empty string)
   * @returns {string} object.search    The url search params after path (if any, else empty string)
   * @returns {string} object.hash      The url hash after search params (if any, else empty string)
   * @returns {string} object.host      The url host name (domian name without subdomains)
   * @returns {string} object.current   The current page host
   */
  if (!Affinity2018.hasOwnProperty('getUrlData'))
  {
    Affinity2018.getHrefData = function (url)
    {
      var url = url.trim(), a = document.createElement("a"), p = false, r;
      if (url != 'null')
      {
        var ps = ['http', 'https', 'ftp', 'sftp', 'mailto', 'callto'];
        ps.forEach(function (pp) { if (url.toLowerCase().startsWith(pp + '://')) p = pp + '://'; });
        if (!p)
        {
          if (new RegExp('^[a-z:]+\/\/', 'i').test(url)) url = url.replace(new RegExp('^([a-z:]+\/\/).*?', 'i'), '');
          ps.forEach(function (pp) { if (url.startsWith(pp + ':')) url = url.substring(pp.length + 1); });
          ps.forEach(function (pp) { if (url.startsWith(pp + '//')) url = url.substring(pp.length + 2); });
          ps.forEach(function (pp) { if (url.startsWith(pp + '/')) url = url.substring(pp.length + 1); });
          ps.forEach(function (pp) { if (url.startsWith(pp)) url = url.substring(pp.length); });
          url = url.startsWith(':') ? url.substring(1) : url;
          url = url.startsWith('/') ? url.substring(1) : url;
          url = url.startsWith('/') ? url.substring(1) : url;
          url = 'https://' + url;
        }
      }
      a.href = url;
      r = {
        original: url,
        protocol: a.protocol, // => "https:"
        hostname: a.hostname, // => "example.com"
        port: a.port,     // => "3000"
        pathname: a.pathname, // => "/pathname/"
        search: a.search,   // => "?search=test"
        hash: a.hash,     // => "#hash"
        host: a.host,     // => "example.com:3000"
      };
      a = null;
      return r;
    };
    Affinity2018.getUrlData = function (url)
    {
      var returnData = Affinity2018.getHrefData(url), baseData = Affinity2018.getHrefData('null');
      baseData.pathname = baseData.pathname.replace('null', '');
      returnData.current = baseData.host;
      return returnData;
      /*
      var returnData = Affinity2018.getHrefData(url),
          baseData = Affinity2018.getHrefData('null');
      baseData.pathname = baseData.pathname.replace('null', '');
      if (returnData.pathname.indexOf(baseData.pathname) === 0) returnData.pathname = returnData.pathname.replace(baseData.pathname, '');
      returnData.current = baseData.host;
      if (returnData.host === baseData.host)
      {
        returnData = Affinity2018.getHrefData('//' + url);
        returnData.current =  baseData.host;
      }
      return returnData;
      */
    };
    Affinity2018.returnFormattedUrl = function (urlString)
    {
      var urlData = $a.getUrlData(urlString),
        port = urlData.port !== '' ? ':' + urlData.port : '',
        search = urlData.search !== '' ? (urlData.search.charAt(0) === '?' ? '' : '?') + urlData.search : '',
        hash = urlData.hash !== '' ? (urlData.hash.charAt(0) === '#' ? '' : '#') + urlData.hash : '',
        host = urlData.hostname;
      newUrl = '{0}//{1}{2}{3}{4}{5}'.format(urlData.protocol, host, port, urlData.pathname, search, hash);
      newUrl = newUrl.charAt(newUrl.length - 1) === '/' ? newUrl.substring(0, newUrl.length - 1) : newUrl;
      return newUrl;
    }
  }


  /**
   * Affinity2018.getBaseUrl()
   * Gets the base url of the current page
   * 
   * @author  Ben King, benk at affinityteam.com, ben.king at source63.com, +64 21 2672729.
   * 
   * @returns {string}
   */
  if (!(Affinity2018.hasOwnProperty('getBaseUrl')))
  {
    Affinity2018.getBaseUrl = function ()
    {
      let url = '';
      url += document.location.protocol;
      url += '//';
      url += document.location.hostname;
      url += document.location.port === '80' ? '' : ':' + document.location.port;
      return url;
    }
    Affinity2018.GetBaseUrl = Affinity2018.getBaseUrl;
  }


  /**
   * Affinity2018.localiseUrl()
   * Converts url to local url host
   * 
   * @author  Ben King, benk at affinityteam.com, ben.king at source63.com, +64 21 2672729.
   * 
   * @returns {string}
   */
  if (!(Affinity2018.hasOwnProperty('localiseUrl')))
  {
    Affinity2018.localiseUrl = function (path)
    {
      if (!Affinity2018.isString(path)) return path;
      var pathArray = path.split('/');
      var protocol = pathArray[0];
      var host = pathArray[2];
      var pathURL = protocol + '//' + host;
      pathArray = window.location.href.split('/');
      protocol = pathArray[0];
      host = pathArray[2];
      return path.replace(pathURL, protocol + '//' + host);
    }
    Affinity2018.LocaliseUrl = Affinity2018.localiseUrl;
  }


  /**
   * Affinity2018.jsonCloneObject()
   * Clones basic objects using JSON
   * 
   * @author  Ben King, benk at affinityteam.com, ben.king at source63.com, +64 21 2672729.
   * 
   * @param {object|array} mixed
   * 
   * @returns {object|array}
   */
  if (!(Affinity2018.hasOwnProperty('jsonCloneObject')))
  {
    Affinity2018.jsonCloneObject = function (mixed)
    {
      if (
        !Affinity2018.isObject(mixed)
        && Affinity2018.isArray(mixed)
      ) return mixed;
      try
      {
        return JSON.parse(JSON.stringify(mixed));
      }
      catch (e) { }
      return mixed;
    }
  }


  /**
   * Affinity2018.objectDeepMerge()
   * Creates a Deep copy of each object passed in and compiles a new merged object from each
   * 
   * @author  Ben King, benk at affinityteam.com, ben.king at source63.com, +64 21 2672729.
   * 
   * @param {array} objArray
   * 
   * @returns {Object}
   */
  if (!(Affinity2018.hasOwnProperty('objectDeepMerge')))
  {
    Affinity2018.objectDeepMerge = function (objArray)
    {
      // a little expensive, but a true "deep merge".
      // result is guranteed to be all props of all param objects as deep copies
      // no refrences are left intact to param objects
      // WARNING! Objects or nodes of type Event, Function, or DomNode will return as NULL
      function isMergeableObject(val)
      {
        var nonNullObject = val && typeof val === 'object'
        return nonNullObject
          && Object.prototype.toString.call(val) !== '[object RegExp]'
          && Object.prototype.toString.call(val) !== '[object Date]'
      }
      function emptyTarget(val)
      {
        return Array.isArray(val) ? [] : {}
      }
      function cloneIfNecessary(value, optionsArgument)
      {
        var clone = optionsArgument && optionsArgument.clone === true
        return (clone && isMergeableObject(value)) ? deepmerge(emptyTarget(value), value, optionsArgument) : value
      }
      function defaultArrayMerge(target, source, optionsArgument)
      {
        var destination = target.slice()
        source.forEach(function (e, i)
        {
          if (typeof destination[i] === 'undefined')
          {
            destination[i] = cloneIfNecessary(e, optionsArgument)
          }
          else if (isMergeableObject(e))
          {
            destination[i] = deepmerge(target[i], e, optionsArgument)
          }
          else if (target.indexOf(e) === -1)
          {
            destination.push(cloneIfNecessary(e, optionsArgument))
          }
        });
        return destination
      }
      function mergeObject(target, source, optionsArgument)
      {
        var destination = {}
        if (isMergeableObject(target))
        {
          Object.keys(target).forEach(function (key)
          {
            destination[key] = cloneIfNecessary(target[key], optionsArgument)
          })
        }
        Object.keys(source).forEach(function (key)
        {
          if (!isMergeableObject(source[key]) || !target[key])
          {
            destination[key] = cloneIfNecessary(source[key], optionsArgument)
          }
          else
          {
            destination[key] = deepmerge(target[key], source[key], optionsArgument)
          }
        });
        return destination
      }
      function deepmerge(target, source, optionsArgument)
      {
        var array = Array.isArray(source);
        var options = optionsArgument || { arrayMerge: defaultArrayMerge }
        var arrayMerge = options.arrayMerge || defaultArrayMerge
        if (array)
        {
          return Array.isArray(target) ? arrayMerge(target, source, optionsArgument) : cloneIfNecessary(source, optionsArgument)
        }
        else
        {
          return mergeObject(target, source, optionsArgument)
        }
      }
      deepmerge.all = function deepmergeAll(array, optionsArgument)
      {
        if (!Array.isArray(array) || array.length < 2)
        {
          throw new Error('first argument should be an array with at least two elements')
        }
        return array.reduce(function (prev, next)
        {
          return deepmerge(prev, next, optionsArgument)
        })
      }
      /**/
      var objects = [], i;
      if (Array.isArray(arguments[0]) && arguments.length === 1)
      {
        for (i = 0; i < arguments[0].length; i++) objects.push(arguments[0][i]);
      }
      else
      {
        for (i = 0; i < arguments.length; i++) objects.push(arguments[i]);
      }
      return deepmerge.all(objects);
    };
  }


  /**
   * Affinity2018.getParent()
   * Gets the first parent DOM Element matching the arguments
   *
   * @author  Ben King, ben.king at source63.com, +64 21 2672729.
   *
   * @param {HTMLElement} node The node to search in
   * @param {string} className A class name to match
   * @param {int} parentDepth The number of parent nodes to look in before gicing up
   *
   * @returns {DOMElement|Boolean}
   */
  if (!(Affinity2018.hasOwnProperty('getParent')))
  {
    Affinity2018.getParent = function (node, className, parentDepth)
    {
      if (!Affinity2018.isNode(node)) return false;
      if (!Affinity2018.isString(className) || (Affinity2018.isString(className) && className.trim() === '')) return false;
      var depth = 0;
      parentDepth = !isNaN(parseInt(parentDepth)) ? parseInt(parentDepth) : 5;
      className = className.replace('.', '').replace('#', '').trim();
      if (!node || !className || className.trim() === '') return false;
      if (node.className.split(' ').filter(function (i) { return i }).contains(className)) return node;
      if (node.tagName.toLowerCase() === className.trim().toLowerCase()) return node;
      if (node.id.toLowerCase() === className.trim().toLowerCase()) return node;
      while (node.parentElement)
      {
        if (node.parentElement.className.split(' ').filter(function (i) { return i }).contains(className)) return node.parentElement;
        if (node.parentElement.tagName.toLowerCase() === className.trim().toLowerCase()) return node.parentElement;
        node = node.parentElement;
        depth++;
        if (depth >= parentDepth) return false;
      }
      return false;
    };
    Affinity2018.GetParent = Affinity2018.getParent;
  }


  /**
  * Affinity2018.getEventNode()
  * Get the HTMLElement or parent HTMLElement that matches className from Event
  *
  * @author  Ben King, benk at affinityteam.com, ben.king at source63.com, +64 21 2672729.
  *
  * @param {Event}  event     Event object
  * @param {string} className Class name to match
  */
  if (!Affinity2018.hasOwnProperty('getEventNode'))
  {
    Affinity2018.getEventNode = function (event, className)
    {
      if (event && 'target' in event && Affinity2018.isNode(event.target)) return Affinity2018.getParent(event.target, className, 10);
      else return false;
    };
    Affinity2018.GetEventNode = Affinity2018.getEventNode;
  }


  /**
  * Affinity2018.isNullOrEmpty()
  * Get the HTMLElement or parent HTMLElement that matches className from Event
  *
  * @author  Ben King, benk at affinityteam.com, ben.king at source63.com, +64 21 2672729.
  *
  * @param {Event}  event     Event object
  * @param {string} className Class name to match
  */
  if (!Affinity2018.hasOwnProperty('isNullOrEmpty'))
  {
    Affinity2018.isNullOrEmpty = function (str)
    {
      if (str === null) return true;
      if (typeof str === 'string' && str.trim() === '') return true;
      return false;
    };
    Affinity2018.GetEventNode = Affinity2018.getEventNode;
  }




  /**
   * Affinity2018.FormatString()
   * Replaces matching variables.
   * Eg string "{var} bar", args {var:'foo'} -> "foo bar".
   *
   * @author  Ben King, ben.king at source63.com, +64 21 2672729.
   *
   * @param {string}  name      The name for this error
   * @param {int}     level     The priority level to display
   * @param {string}  message   A default message to show
   * @param {Object}  stack     Any code stack trace you wish to include
   */
  if (!(Affinity2018.hasOwnProperty('FormatString')))
  {
    Affinity2018.FormatString = function (string, args)
    {
      if (typeof string === 'object')
      {
        string = Object.keys(string).map(function (key)
        {
          return string[key]
        }).join('')
      }
      if (args.length === 1 && Affinity2018.isObject(args[0]))
      {
        var obj = args[0], key, regex, regexp;
        for (key in obj)
        {
          if (obj.hasOwnProperty(key))
          {
            string = string.replace(new RegExp('{' + key + '}', 'g'), obj[key]);
          }
        }
        return string;
      }
      else
      {
        return string.replace(/{(\d+)}/g, function (match, number)
        {
          return typeof args[number] != 'undefined' ? args[number] : match;
        });
      }
    };
  }


  /**
   * Affinity2018.LogError()
   * Creates a verbose error object in dev tools Console.
   * 
   * @author  Ben King, benk at affinityteam.com, ben.king at source63.com, +64 21 2672729.
   * 
   * @param {string}  name      The name for this error
   * @param {int}     level     The priority level to display
   * @param {string}  message   A default message to show
   * @param {Object}  stack     Any code stack trace you wish to include
   */
  if (!(Affinity2018.hasOwnProperty('Trace')))
  {
    Affinity2018.Trace = function (name, infoArray, type)
    {
      function getErrorObject() { try { throw Error('') } catch (err) { return err; } };
      var err = getErrorObject(),
        caller_lines = 'stack' in err && typeof err.stack === 'string' ? err.stack.split("\n") : [],
        caller_line = caller_lines.length > 3 ? caller_lines[3].toString() : caller_lines.length > 0 ? caller_lines[caller_lines.length - 1].toString() : '',
        method = '', link = '', line = '';

      if (caller_line.trim().startsWith('at '))
      {
        caller_line = caller_line.trim().replace('at ', '');
        method = caller_line.substring(0, caller_line.indexOf(' '));
        link = caller_line.replace(method, '').replace('(', '').replace(')', '').trim();
        line = link.split(':').length > 1 ? link.split(':')[link.split(':').length - 2] : '';
      }

      var c = { red: { f: '#f19880', b: '#390c00' }, orange: { f: '#ff8540', b: '#3a2e27' }, yellow: { f: '#ffda8a', b: '#402d05' }, green: { f: '#c6e59a', b: '#23330d' }, blue: { f: '#8be0f9', b: '#06303d' }, grey: { f: '#b3b3b3', b: '#333333' }, default: { f: '#d9d9d9', b: '#242424' } },
        cs = '',
        cap = '----------------------------------------------------------------------------',
        longest, spacing;

      switch (type.trim().toLowerCase())
      {
        case 'critical': cs = 'color:' + c.red.f + ';font-weight:bold;background:' + c.red.b; break;
        case 'error': cs = 'color:' + c.red.f + ';font-weight:normal;background:' + c.red.b; break;
        case 'important': cs = 'color:' + c.orange.f + ';font-weight:bold;background:' + c.orange.b; break;
        case 'warning': cs = 'color:' + c.orange.f + ';font-weight:normal;background:' + c.orange.b; break;
        case 'medium': cs = 'color:' + c.yellow.f + ';font-weight:normal;background:' + c.yellow.b; break;
        case 'low': cs = 'color:' + c.yellow.f + ';font-weight:normal;background:' + c.yellow.b; break;
        case 'ok': case 'success': cs = 'color:' + c.green.f + ';font-weight:normal;background:' + c.green.b; break;
        case 'info': cs = 'color:' + c.blue.f + ';font-weight:normal;background:' + c.blue.b; break;
        case 'note': cs = 'color:' + c.grey.f + ';font-weight:normal;background:' + c.grey.b; break;
        default: cs = 'color:' + c.default.f + ';font-weight:normal;background:' + c.default.b; break;
      }
      cs = 'color:#8be0f9;font-weight:bold;background:#06303d';
      console.groupCollapsed('%c' + name + ' ' + cap.substr(name.length + 1), cs);
      console.log('%c' + method + ' at line ' + line, cs);
      console.log('%c' + link, cs);
      if (infoArray && Affinity2018.isArray(infoArray))
      {
        longest = 0;
        infoArray.forEach(function (infoItem)
        {
          if (Affinity2018.type(infoItem[0]) === 'string' && infoItem[0].length > longest) longest = infoItem[0].length;
        });
        spacing = ''.padLeft(' ', longest + 1);
        infoArray.forEach(function (infoItem)
        {
          if (Affinity2018.type(infoItem[0]) === 'string') console.log('%c' + infoItem[0] + spacing.substr(infoItem[0].length) + ' : ', cs, infoItem[1]);
          else console.log(infoItem[0], infoItem[1]);
        });
      }
      console.log('%c' + cap.substr(0, cap.length - 2), cs);
      console.groupEnd();
    };
  }


  /**
   * Affinity2018.LogError()
   * Creates a verbose error object in dev tools Console.
   * 
   * @author  Ben King, benk at affinityteam.com, ben.king at source63.com, +64 21 2672729.
   * 
   * @param {string}  name      The name for this error
   * @param {int}     level     The priority level to display
   * @param {string}  message   A default message to show
   * @param {Object}  stack     Any code stack trace you wish to include
   */
  if (!(Affinity2018.hasOwnProperty('LogError')))
  {
    Affinity2018.LogError = function (name, level, message, stack)
    {
      function getErrorObject() { try { throw Error('') } catch (err) { return err; } };
      var err = getErrorObject(),
        caller_lines = 'stack' in err && typeof err.stack === 'string' ? err.stack.split("\n") : [],
        caller_line = caller_lines.length > 3 ? caller_lines[3].toString() : caller_lines.length > 0 ? caller_lines[caller_lines.length - 1].toString() : '',
        method = '', link = '', line = '';

      if (caller_line.trim().startsWith('at '))
      {
        caller_line = caller_line.trim().replace('at ', '');
        method = caller_line.substring(0, caller_line.indexOf(' '));
        link = caller_line.replace(method, '').replace('(', '').replace(')', '').trim();
        line = link.split(':').length > 1 ? link.split(':')[link.split(':').length - 2] : '';
      }

      var c = { red: { f: '#f19880', b: '#390c00' }, orange: { f: '#ff8540', b: '#3a2e27' }, yellow: { f: '#ffda8a', b: '#402d05' }, green: { f: '#c6e59a', b: '#23330d' }, blue: { f: '#8be0f9', b: '#06303d' }, grey: { f: '#b3b3b3', b: '#333333' }, default: { f: '#d9d9d9', b: '#242424' } },
        cs = '';

      switch (level.toLowerCase())
      {
        case 'critical': cs = 'color:' + c.red.f + ';font-weight:bold;background:' + c.red.b; break;
        case 'error': cs = 'color:' + c.red.f + ';font-weight:normal;background:' + c.red.b; break;
        case 'important': cs = 'color:' + c.orange.f + ';font-weight:bold;background:' + c.orange.b; break;
        case 'warning': cs = 'color:' + c.orange.f + ';font-weight:normal;background:' + c.orange.b; break;
        case 'medium': cs = 'color:' + c.yellow.f + ';font-weight:normal;background:' + c.yellow.b; break;
        case 'low': cs = 'color:' + c.yellow.f + ';font-weight:normal;background:' + c.yellow.b; break;
        case 'ok': case 'success': cs = 'color:' + c.green.f + ';font-weight:normal;background:' + c.green.b; break;
        case 'info': cs = 'color:' + c.blue.f + ';font-weight:normal;background:' + c.blue.b; break;
        case 'note': cs = 'color:' + c.grey.f + ';font-weight:normal;background:' + c.grey.b; break;
        default: cs = 'color:' + c.default.f + ';font-weight:normal;background:' + c.default.b; break;
      }
      console.groupCollapsed('%c' + name + ' [' + level.toUpperCase() + ']', cs);
      console.log('%c' + method + ' at line ' + line, cs);
      console.log('%c' + link, cs);
      console.log('%c' + message, cs);
      messages = [];
      if (stack)
      {
        if (typeof stack === 'string')
        {
          try { stack = JSON.parse(stack); } catch (err) { }
        }
        if (Affinity2018.isObject(stack)) stack = JSON.stringify(stack, null, 2);
        messages.push(stack);
      }
      message = messages.join('\n');
      console.log('%c' + message, cs);
      console.groupEnd();
    };
  }


  /**
   * Affinity2018.ThrowError()
   * Throws a verbose error object in dev tools Console.
   * 
   * @author  Ben King, benk at affinityteam.com, ben.king at source63.com, +64 21 2672729.
   * 
   * @param {string}  name      The name for this error
   * @param {int}     level     The priority level to display
   * @param {string}  message   A default message to show
   * @param {Object}  stack     Any code stack trace you wish to include
   */
  if (!(Affinity2018.hasOwnProperty('ThrowError')))
  {
    Affinity2018.ThrowError = function (name, level, message, stack)
    {
      function getErrorObject() { try { throw Error('') } catch (err) { return err; } };
      var err = getErrorObject(),
        caller_lines = 'stack' in err && typeof err.stack === 'string' ? err.stack.split("\n") : [],
        caller_line = caller_lines.length > 3 ? caller_lines[3].toString() : caller_lines.length > 0 ? caller_lines[caller_lines.length - 1].toString() : '',
        htmlMessage = message.replace(/\n/g, '<br />'),
        method = '', link = '', line = '';

      if (caller_line.trim().startsWith('at '))
      {
        caller_line = caller_line.trim().replace('at ', '');
        method = caller_line.substring(0, caller_line.indexOf(' '));
        link = caller_line.replace(method, '').replace('(', '').replace(')', '').trim();
        line = link.split(':').length > 1 ? link.split(':')[link.split(':').length - 2] : '';
      }
      Affinity2018.HidePageLoader();
      if (stack)
      {
        if (typeof stack === 'string')
        {
          try { stack = JSON.parse(stack); } catch (err) { }
        }
        if (Affinity2018.isObject(stack)) stack = JSON.stringify(stack, null, 2);
        message = message += '\n' + stack;
      }
      if (method !== '') message = message += '\n' + method + ' at line ' + line;
      if (link !== '') message = message += '\n' + link;
      htmlMessage = message.replace(/\n/g, '<br />');
      throw {
        name: name,
        level: '[' + level + ']',
        message: message,
        htmlMessage: htmlMessage,
        toString: function () { return this.name + ": " + this.message; }
      };
    };
  }


  /**
   * Affinity2018.ForceSectionTop()
   * Forces a page section to the top of the z-index stack
   * 
   * @author  Ben King, benk at affinityteam.com, ben.king at source63.com, +64 21 2672729.
   * 
   * @param {HTMLElement} node
   */
  if (!(Affinity2018.hasOwnProperty('ForceSectionTop')))
  {
    Affinity2018.ForceSectionTop = function (node)
    {
      if (Affinity2018.isNode(node) && node.closest('.section'))
      {
        document.querySelectorAll('.section.step-up').forEach(function (node) { node.classList.remove('step-up'); })
        node.closest('.section').classList.add('step-up');
      }
    };
  }
  /**
   * Affinity2018.ResetForceSectionTop()
   * Resets a page section previously forced to the top of the z-index stack
   * 
   * @param {HTMLElement} node
   */
  if (!(Affinity2018.hasOwnProperty('ResetForceSectionTop')))
  {
    Affinity2018.ResetForceSectionTop = function (node)
    {
      if (Affinity2018.isNode(node) && node.closest('.section'))
      {
        node.closest('.section').classList.remove('step-up');
      }
    };
  }


  /**
   * Affinity2018.valueOrDefault()
   * Returns value if exists, else default value
   * 
   * @author  Ben King, benk at affinityteam.com, ben.king at source63.com, +64 21 2672729.
   * 
   * @param {object} parentObject
   * @param {string} propName
   * @param {object} defaultValue
   */
  if (!(Affinity2018.hasOwnProperty('valueOrDefault')))
  {
    Affinity2018.valueOrDefault = function (parentObject, propName, defaultValue)
    {
      if (
        propName !== undefined
        && parentObject !== undefined
        && defaultValue !== undefined
        && Affinity2018.isString(propName) && propName.trim() !== ''
        && Affinity2018.isObject(parentObject) && parentObject.hasOwnProperty(propName)
        && Affinity2018.type(parentObject[propName]) == Affinity2018.type(defaultValue)
        //&& typeof parentObject[propName] === typeof defaultValue
      )
      {
        return parentObject[propName];
      }
      if (defaultValue === undefined)
      {
        console.error('defaultValue not set');
        return;
      }
      return defaultValue;
    };
  }


  /**
   * Affinity2018.paramOrDefault()
   * Returns value if exists, else default value
   * 
   * @author  Ben King, benk at affinityteam.com, ben.king at source63.com, +64 21 2672729.
   * 
   * @param {object} value
   * @param {object} defaultValue
   * @param {string} typeString (optional) Check typeString if default and param are differnt types
   */
  if (!(Affinity2018.hasOwnProperty('paramOrDefault')))
  {
    Affinity2018.paramOrDefault = function (value, defaultValue, typeString)
    {
      typeString = Affinity2018.type(typeString) === 'string' && typeString.trim() !== '' ? typeString : false;
      if (typeString)
      {
        if (Affinity2018.type(value) == typeString) return value;
        return defaultValue;
      }
      if (Affinity2018.type(value) == Affinity2018.type(defaultValue)) return value;
      return defaultValue;
    };
  }


  /**
   * Affinity2018.toBoolean()
   * Returns string 'true' / 'false' as boolean true / false
   * If already boolean, returns value
   * If neither boolean or string, but is onject of some kind, retrun true
   * Else return false
   * 
   * @author  Ben King, benk at affinityteam.com, ben.king at source63.com, +64 21 2672729.
   * 
   * @param {string} propName
   */
  if (!(Affinity2018.hasOwnProperty('toBoolean')))
  {
    Affinity2018.toBoolean = function (value)
    {
      if (Affinity2018.type(value) === 'boolean') return value;
      if (Affinity2018.type(value) === 'string')
      {
        if (value.trim().toLowerCase() === 'true') return true;
        if (value.trim().toLowerCase() === 'false') return false;
      }
      if (value !== undefined || value === null) return false;
      return true;
    }
  }


  /**
   * Affinity2018.decodeHTML()
   * Returns a decoded html string
   * 
   * @author  Ben King, benk at affinityteam.com, ben.king at source63.com, +64 21 2672729.
   * 
   * @param {string} string
   */
  if (!(Affinity2018.hasOwnProperty('decodeHTML ')))
  {
    Affinity2018.decodeHTML = function (string)
    {
      if (Affinity2018.isString(string))
      {
        string = string.replace(/\<br.*?\>/gi, '\n');
        var txt = document.createElement('textarea');
        txt.innerHTML = string;
        string = txt.value;
        txt = null;
      }
      return string;
    }
  }


  /**
   * Affinity2018.lockBodyScroll()
   * Locks Body Scroll so that other HTMLElements can have scroll focus without scrolling Body
   * 
   * @author  Ben King, benk at affinityteam.com, ben.king at source63.com, +64 21 2672729.
   * 
   */
  if (!(Affinity2018.hasOwnProperty('lockBodyScroll')))
  {
    Affinity2018.lockBodyScroll = function ()
    {
      if (!document.body.classList.contains('disable-scroll'))
      {
        Affinity2018.lockBodyScroll_lastScrollY = (window.pageYOffset || document.documentElement.scrollTop) - (document.documentElement.clientTop || 0);
        document.body.style.top = (0 - Affinity2018.lockBodyScroll_lastScrollY) + 'px';
        document.body.classList.add('disable-scroll');
        //console.log('!!! LOCK background scroll');
      }
    };

    /**
     * Affinity2018.unlockBodyScroll()
     * Reset Body Scroll
     */
    Affinity2018.unlockBodyScroll = function ()
    {
      if (document.body.classList.contains('disable-scroll'))
      {
        document.body.classList.remove('disable-scroll');
        document.body.removeAttribute('style');
        window.scrollTo(0, Affinity2018.lockBodyScroll_lastScrollY);
        //console.log('!!! UNLOCK background scroll');
      }
    };
  }

  /***************************************************************************************************************************************************/
  /***************************************************************************************************************************************************/
  /***                                                                                                     *******************************************/
  /***    ██████ ██       █████  ███████ ███████     ███████ ██    ██ ███████ ███    ██ ████████ ███████   *******************************************/
  /***   ██      ██      ██   ██ ██      ██          ██      ██    ██ ██      ████   ██    ██    ██        *******************************************/
  /***   ██      ██      ███████ ███████ ███████     █████   ██    ██ █████   ██ ██  ██    ██    ███████   *******************************************/
  /***   ██      ██      ██   ██      ██      ██     ██       ██  ██  ██      ██  ██ ██    ██         ██   *******************************************/
  /***    ██████ ███████ ██   ██ ███████ ███████     ███████   ████   ███████ ██   ████    ██    ███████   *******************************************/
  /***                                                                                                     *******************************************/
  /***************************************************************************************************************************************************/
  /********************************************************************************************************************* Source63 *** class events ***/

  /**
   *
   * Summary.       Extends native Class object with Event method
   *
   * Description.   Extends native Classes with AddEventListener, removeEventListener, dispatchEvent
   *
   * @author        Ben King, benk at affinityteam.com, ben.king at source63.com, +64 21 2672729.
   *
   *
   * @since         01.01.2020
   * @class         Default
   * @namespace     Affinity2018
   * @memberof      Affinity2018
   * @constructs    Affinity2018.ClassEvents
   *
   * @public
   */
  if (!(Affinity2018.hasOwnProperty('ClassEvents')))
  {
    Affinity2018.ClassEvents = class
    {
      constructor()
      {
        ['addEventListener', 'removeEventListener', 'dispatchEvent'].bindEach(this);
        this.eventListerners = {};
      }
      addEventListener(type, callback)
      {
        if (typeof type === 'string' && typeof callback === 'function')
        {
          if (!this.eventListerners.hasOwnProperty(type.toLowerCase())) this.eventListerners[type.toLowerCase()] = [];
          if (!this.eventListerners[type.toLowerCase()].contains(callback))
          {
            this.eventListerners[type.toLowerCase()].push(callback);
          }
        }
      }
      removeEventListener(type, callback)
      {
        if (typeof type === 'string' && typeof callback === 'function')
        {
          if (
            this.eventListerners.hasOwnProperty(type.toLowerCase())
            && Array.isArray(this.eventListerners[type.toLowerCase()])
          )
          {
            for (var l = 0; l < this.eventListerners[type.toLowerCase()].length; l++)
            {
              if (this.eventListerners[type.toLowerCase()][l] === callback)
              {
                this.eventListerners[type.toLowerCase()][l] = null;
                this.eventListerners[type.toLowerCase()].splice(l, 1);
                break;
              }
            }
          }
        }
      }
      dispatchEvent(ev)
      {
        if (ev instanceof Event && this.eventListerners.hasOwnProperty(ev.type.toLowerCase()))
        {
          for (var l = 0; l < this.eventListerners[ev.type.toLowerCase()].length; l++)
          {
            if (typeof this.eventListerners[ev.type.toLowerCase()][l] === 'function')
            {
              if (ev.hasOwnProperty('detail') && ev.detail.hasOwnProperty('dispatchObject')) this.eventListerners[ev.type.toLowerCase()][l](ev.detail.dispatchObject);
              else this.eventListerners[ev.type.toLowerCase()][l](ev);
            }
          }
        }
      }
    };
  }

  /***************************************************************************************************************************************************/
  /***************************************************************************************************************************************************/
  /***                                                                              ******************************************************************/
  /***   ███████ ██ ██      ███████     ████████ ██    ██ ██████  ███████ ███████   ******************************************************************/
  /***   ██      ██ ██      ██             ██     ██  ██  ██   ██ ██      ██        ******************************************************************/
  /***   █████   ██ ██      █████          ██      ████   ██████  █████   ███████   ******************************************************************/
  /***   ██      ██ ██      ██             ██       ██    ██      ██           ██   ******************************************************************/
  /***   ██      ██ ███████ ███████        ██       ██    ██      ███████ ███████   ******************************************************************/
  /***                                                                              ******************************************************************/
  /***************************************************************************************************************************************************/
  /*********************************************************************************************************************** Source63 *** file types ***/


  /**
   *
   * Summary.       Returns file information on any passed file string
   *
   * Description.   Returns file information on any passed file string
   *
   * @author        Ben King, benk at affinityteam.com, ben.king at source63.com, +64 21 2672729.
   *
   *
   * @since         01.01.2020
   * @class         Default
   * @namespace     Affinity2018
   * @memberof      Affinity2018
   *
   * @public
   */
  if (!(Affinity2018.hasOwnProperty('GetMimeType')))
  {

    Affinity2018.FileTypeGroupData = {
      Spreadsheet: {
        Name: 'Spreadsheet',
        Description: 'MS Excel files',
        Icon: Affinity2018.icons.fileExcelBlack,
        IconClass: 'icon-file-excel-black',
        TypeData: [
          {
            Types: ['xl', 'xls', 'xlsx', 'xll'], Mime: 'application/excel'
          },
          { Types: ['csv'], Mime: 'application/vnd.ms-excel' }
        ]
      },
      Word: {
        Name: 'Word',
        Description: 'MS Word files',
        Icon: Affinity2018.icons.fileWordBlack,
        IconClass: 'icon-file-word-black',
        TypeData: [
          { Types: ['doc', 'docx', 'dot', 'word', 'w6w'], Mime: 'application/msword' },
          { Types: ['rtx'], Mime: 'text/richtext' }
        ]
      },
      Presentation: {
        Name: 'Presentation',
        Description: 'MS PowerPoint files',
        Icon: Affinity2018.icons.filePowerpointBlack,
        IconClass: 'icon-file-powerpoint-black',
        TypeData: [
          { Types: ['ppt', 'pptx', 'pot'], Mime: 'application/powerpoint' }
        ]
      },
      PDF: {
        Name: 'PDF',
        Description: 'PDF files',
        Icon: Affinity2018.icons.filePdfBlack,
        IconClass: 'icon-file-pdf-black',
        TypeData: [
          { Types: ['pdf'], Mime: 'application/pdf' }
        ]
      },
      Code: {
        Name: 'Code',
        Description: 'Code and Script files',
        Icon: Affinity2018.icons.fileSourceBlack,
        IconClass: 'icon-file-source-black',
        TypeData: [
          { Types: ['ps1', 'py', 'cs', 'js'], Mime: 'text/plain' },
          { Types: ['xml'], Mime: 'text/xml' },
          { Types: ['htm', 'htmls', 'shtml', 'xshtml', 'xhtml', 'html'], Mime: 'application/xml+xhtml' },
          { Types: ['wrl', 'wrz'], Mime: 'x-world/x-vrml' }
        ]
      },
      Text: {
        Name: 'Text',
        Description: 'Plain text files',
        Icon: Affinity2018.icons.fileTextBlack,
        IconClass: 'icon-file-text-black',
        TypeData: [
          { Types: ['txt', 'text', 'ini', 'cfg', 'config', 'json'], Mime: 'text/plain' },
          { Types: ['rtf', 'rtx'], Mime: 'application/rtf' }
        ]
      },
      Images: {
        Name: 'Images',
        Description: 'Image format files',
        Icon: Affinity2018.icons.fileImageBlack,
        IconClass: 'icon-file-image-black',
        TypeData: [
          { Types: ['webp'], Mime: 'image/webp' },
          { Types: ['png'], Mime: 'image/png' },
          { Types: ['jpg', 'jpe', 'jfif', 'pjpeg', 'pjp'], Mime: 'image/jpeg' },
          { Types: ['gif'], Mime: 'image/gif' },
          { Types: ['tif', 'tiff'], Mime: 'image/tiff' },
          { Types: ['bmp'], Mime: 'image/x-windows-bmp' },
          { Types: ['pic'], Mime: 'image/x-pict' },
          { Types: ['pbm'], Mime: 'image/x-portable-bitmap' },
          { Types: ['eps'], Mime: 'application/postscript' },
        ]
      },
      Vector: {
        Name: 'Vector',
        Description: 'Vector image, Adobe Illustrator files',
        Icon: Affinity2018.icons.fileImageBlack,
        IconClass: 'icon-file-image-black',
        TypeData: [
          { Types: ['svg'], Mime: 'image/svg+xml' },
          { Types: ['ai', 'eps'], Mime: 'application/postscript' }
        ]
      },
      Video: {
        Name: 'Video',
        Description: 'Video format files',
        Icon: Affinity2018.icons.fileVideoBlack,
        IconClass: 'icon-file-video-black',
        TypeData: [
          { Types: ['webm'], Mime: 'video/webm' },
          { Types: ['mp4'], Mime: 'video/mp4' },
          { Types: ['mp4', 'mpg', 'mpeg', 'mpe', 'm1v', 'mp2', 'mpa'], Mime: 'video/mpeg' },
          { Types: ['mkv'], Mime: 'video/mp4' }, // mkv special type?
          { Types: ['avi'], Mime: 'video/x-msvideo' },
          { Types: ['wmv', 'wmx'], Mime: 'video/x-ms-wmx' },
          { Types: ['flv'], Mime: 'video/x-flv' },
          { Types: ['mov', 'qt'], Mime: 'video/quicktime' },
          { Types: ['3gp'], Mime: 'video/3gpp' },
          { Types: ['m3u8'], Mime: 'application/x-mpegURL' },
          { Types: ['movie'], Mime: 'video/x-sgi-movie' },
          { Types: ['swf'], Mime: 'application/x-shockwave-flash' }
        ]
      },
      Audio: {
        Name: 'Audio',
        Description: 'Audio format files',
        Icon: Affinity2018.icons.fileAudioBlack,
        IconClass: 'icon-file-audio-black',
        TypeData: [
          { Types: ['aac'], Mime: 'audio/aac' },
          { Types: ['mp3'], Mime: 'audio/mpeg' },
          { Types: ['m3u'], Mime: 'audio/x-mpegurl' },
          { Types: ['wav'], Mime: 'audio/vnd.wav' },
          { Types: ['pcm'], Mime: 'audio/L24' },
          { Types: ['ogg', 'aif'], Mime: 'audio/ogg' },
          { Types: ['aiff'], Mime: 'audio/x-aiff' },
          { Types: ['au'], Mime: 'audio/basic' },
          { Types: ['ra', 'ram'], Mime: 'audio/vnd.rn-realaudio' }
        ]
      },
      Archives: {
        Name: 'Archives',
        Description: 'Archive and compressed files',
        Icon: Affinity2018.icons.fileZipBlack,
        IconClass: 'icon-file-zip-black',
        TypeData: [
          { Types: ['zip'], Mime: 'application/zip' },
          { Types: ['rar'], Mime: 'application/x-rar-compressed' },
          { Types: ['gzip', 'gz'], Mime: 'aapplication/x-gzip' },
          { Types: ['7z'], Mime: 'application/x-7z-compressed' },
          { Types: ['bz'], Mime: 'application/x-7z-bzip' },
          { Types: ['bz2'], Mime: 'application/x-7z-bzip2' },
          { Types: ['cab', 'bin'], Mime: 'application/octet-stream' },
        ]
      },
      Executables: {
        Name: 'Executables',
        Description: 'Executable files and stand-alone apps',
        Icon: Affinity2018.icons.executableBlack,
        IconClass: 'icon-executable-black',
        TypeData: [
          { Types: ['exe', 'msi'], Mime: 'application/octet-stream' },
          { Types: ['bat'], Mime: 'text/plain' }
        ]
      },
      Unknown: {
        Name: 'Unknown',
        Description: 'Any file types that is not known to Affinity2018',
        Icon: Affinity2018.icons.fileBlack,
        IconClass: 'icon-file-black',
        TypeData: [
          { Types: [], Mime: 'text/plain' }
        ]
      }
    };

    Affinity2018.FileTypeGroups = [];
    for (var key in Affinity2018.FileTypeGroupData)
    {
      if (Affinity2018.FileTypeGroupData.hasOwnProperty(key))
      {
        Affinity2018.FileTypeGroups.push(key);
        Affinity2018.FileTypeGroupData[key].Types = [];
        for (var t = 0; t < Affinity2018.FileTypeGroupData[key].TypeData.length; t++)
        {
          Affinity2018.FileTypeGroupData[key].Types = Affinity2018.FileTypeGroupData[key].Types.concat(Affinity2018.FileTypeGroupData[key].TypeData[t].Types);
        }
      }
    }

    /**
     * Affinity2018.GetMimeType()
     * Returns the MIME type information of the passed in file extension.
     * 
     * @author  Ben King, benk at affinityteam.com, ben.king at source63.com, +64 21 2672729.
     * 
     * @param {string} ext The extension of the file 
     * 
     * @returns {string} The MIME type for the extension. example: 'txt' -> 'text/plain'
     */
    Affinity2018.GetMimeType = function (ext)
    {
      ext = Affinity2018.isString(ext) && ext.trim() !== '' ? ext.toLowerCase().trim() : '';
      ext = ext.replace('.', '');
      for (var key in Affinity2018.FileTypeGroupData)
      {
        if (
          Affinity2018.FileTypeGroupData.hasOwnProperty(key)
          && Affinity2018.FileTypeGroupData[key].Types.contains(ext)
        )
        {
          for (var t = 0; t < Affinity2018.FileTypeGroupData[key].TypeData.length; t++)
          {
            if (Affinity2018.FileTypeGroupData[key].TypeData[t].Types.contains(ext))
            {
              return Affinity2018.FileTypeGroupData[key].TypeData[t].Mime;
            }
          }
        }
      }
    }


    /**
     * Affinity2018.GetDocFileData()
     * Returns the fiel information fo the passed in file name or extention.
     * 
     * @author  Ben King, benk at affinityteam.com, ben.king at source63.com, +64 21 2672729.
     * 
     * @param {string} fileNameOrExtention The file name or file extention
     * 
     * @returns {Object} object
     * @returns {string} object.type        The group type for the file or extention
     * @returns {Object} object.mime        The MIME type for the file or extention
     * @returns {Object} object.icon        The icon name for the file or extention type
     * @returns {Object} object.iconClass   The class name to render the file or extention type icon
     * @returns {Object} object.ext         The extention of the file passed in or the extention passed in 
     */
    Affinity2018.GetDocFileData = function (fileNameOrExtention)
    {
      var ext = '';
      if (
        !Affinity2018.isString(fileNameOrExtention)
        || (Affinity2018.isString(fileNameOrExtention) && fileNameOrExtention.trim() === '')
      )
      {
        return {
          type: Affinity2018.FileTypeGroupData.Unknown.Name,
          mime: Affinity2018.FileTypeGroupData.Unknown.TypeData[0].Mime,
          icon: Affinity2018.FileTypeGroupData.Unknown.Icon,
          iconClass: Affinity2018.FileTypeGroupData.Unknown.IconClass,
          ext: ext
        };
      }
      ext = fileNameOrExtention.trim().toLowerCase(), key, t;
      if (ext.contains('.'))
      {
        ext = ext.substring(ext.lastIndexOf('.'));
        ext = ext.replace('.', '');
      }
      if (ext !== '')
      {
        for (key in Affinity2018.FileTypeGroupData)
        {
          if (
            Affinity2018.FileTypeGroupData.hasOwnProperty(key)
            && Affinity2018.FileTypeGroupData[key].Types.contains(ext)
          )
          {
            for (t = 0; t < Affinity2018.FileTypeGroupData[key].TypeData.length; t++)
            {
              if (Affinity2018.FileTypeGroupData[key].TypeData[t].Types.contains(ext))
              {
                return {
                  type: Affinity2018.FileTypeGroupData[key].Name,
                  mime: Affinity2018.FileTypeGroupData[key].TypeData[t].Mime,
                  icon: Affinity2018.FileTypeGroupData[key].Icon,
                  iconClass: Affinity2018.FileTypeGroupData[key].IconClass,
                  ext: ext
                };
              }
            }
          }
        }
      }
      return {
        type: Affinity2018.FileTypeGroupData.Unknown.Name,
        mime: Affinity2018.FileTypeGroupData.Unknown.TypeData[0].Mime,
        icon: Affinity2018.FileTypeGroupData.Unknown.Icon,
        iconClass: Affinity2018.FileTypeGroupData.Unknown.IconClass,
        ext: ext
      };
    };
  }

  /***************************************************************************************************************************************************/
  /***************************************************************************************************************************************************/
  /***                                                                                                ************************************************/
  /***   ███████ ████████ ██████      ██████  ██ ███████ ████████  █████  ███    ██  ██████ ███████   ************************************************/
  /***   ██         ██    ██   ██     ██   ██ ██ ██         ██    ██   ██ ████   ██ ██      ██        ************************************************/
  /***   ███████    ██    ██████      ██   ██ ██ ███████    ██    ███████ ██ ██  ██ ██      █████     ************************************************/
  /***        ██    ██    ██   ██     ██   ██ ██      ██    ██    ██   ██ ██  ██ ██ ██      ██        ************************************************/
  /***   ███████    ██    ██   ██     ██████  ██ ███████    ██    ██   ██ ██   ████  ██████ ███████   ************************************************/
  /***                                                                                                ************************************************/
  /***************************************************************************************************************************************************/
  /***************************************************************************************************************************************************/


  /**
   * Affinity2018.StringDistance()
   * Returns the Levenshtein string distance score between two strings
   * 
   * @author  Ben King, benk at affinityteam.com, ben.king at source63.com, +64 21 2672729.
   * 
   * @param {string} stringA
   * @param {string} stringB
   * 
   * @returns {int}
   * 
   */
  Affinity2018.StringDistance = function (stringA, stringB)
  {
    var a = stringA.toLowerCase(),
      b = stringB.toLowerCase(),
      matrix = [],
      i, j;
    if (a.length === 0) return b.length;
    if (b.length === 0) return a.length;
    for (i = 0; i <= b.length; i++)
    {
      matrix[i] = [i];
    }
    for (j = 0; j <= a.length; j++)
    {
      matrix[0][j] = j;
    }
    for (i = 1; i <= b.length; i++)
    {
      for (j = 1; j <= a.length; j++)
      {
        if (b.charAt(i - 1) == a.charAt(j - 1))
        {
          matrix[i][j] = matrix[i - 1][j - 1];
        }
        else
        {
          matrix[i][j] = Math.min(matrix[i - 1][j - 1] + 1, // substitution
            Math.min(matrix[i][j - 1] + 1, // insertion
              matrix[i - 1][j] + 1)); // deletion
        }
      }
    }
    return matrix[b.length][a.length];
  };

  /***************************************************************************************************************************************************/
  /***************************************************************************************************************************************************/
  /***                                                                 *******************************************************************************/
  /***   ███████  ██████  ██    ██ ███    ██ ██████  ███████ ██   ██   *******************************************************************************/
  /***   ██      ██    ██ ██    ██ ████   ██ ██   ██ ██       ██ ██    *******************************************************************************/
  /***   ███████ ██    ██ ██    ██ ██ ██  ██ ██   ██ █████     ███     *******************************************************************************/
  /***        ██ ██    ██ ██    ██ ██  ██ ██ ██   ██ ██       ██ ██    *******************************************************************************/
  /***   ███████  ██████   ██████  ██   ████ ██████  ███████ ██   ██   *******************************************************************************/
  /***                                                                 *******************************************************************************/
  /***************************************************************************************************************************************************/
  /***************************************************************************************************************************************************/


  /**
   * Affinity2018.StringDistance()
   * Returns the english SoundEx code of the passed in string (us weighted)
   * 
   * @author  Ben King, benk at affinityteam.com, ben.king at source63.com, +64 21 2672729.
   * 
   * @param {string} wordString
   * 
   * @returns {string}
   * 
   */
  Affinity2018.Soundex = function (wordString)
  {
    var soundExLen = 5,
      wordStr = "",
      tmpStr, curChar, lastChar, wsLen, firstLetter, i;
    wordString = wordString.toUpperCase();
    wordStr = wordString;
    wordStr = wordStr.replace(/[^A-Z]/gi, " ");
    wordStr = wordStr.replace(/^\s*/g, "");
    wordStr = wordStr.replace(/\s*$/g, "");
    wordStr = wordStr.replace(/^GH/g, "G");
    wordStr = wordStr.replace(/DG/g, "G");
    wordStr = wordStr.replace(/GH/g, "H");
    wordStr = wordStr.replace(/GN/g, "N");
    wordStr = wordStr.replace(/KN/g, "N");
    wordStr = wordStr.replace(/PH/g, "F");
    wordStr = wordStr.replace(/MP([STZ])/g, "M$1");
    wordStr = wordStr.replace(/^PS/g, "S");
    wordStr = wordStr.replace(/^PF/g, "F");
    wordStr = wordStr.replace(/MB/g, "M");
    wordStr = wordStr.replace(/TCH/g, "CH");
    firstLetter = wordStr.substr(0, 1);
    if (firstLetter == "H" || firstLetter == "W") wordStr = "-" + wordStr.substr(1);
    wordStr = wordStr.replace(/[AEIOUYHW]/g, "0");
    wordStr = wordStr.replace(/[BPFV]/g, "1");
    wordStr = wordStr.replace(/[CSGJKQXZ]/g, "2");
    wordStr = wordStr.replace(/[DT]/g, "3");
    wordStr = wordStr.replace(/[L]/g, "4");
    wordStr = wordStr.replace(/[MN]/g, "5");
    wordStr = wordStr.replace(/[R]/g, "6");
    wsLen = wordStr.length;
    lastChar = "";
    tmpStr = "";
    for (i = 0; i < wsLen; i++)
    {
      curChar = wordStr.charAt(i);
      if (curChar == lastChar)
      {
        tmpStr += " ";
      }
      else
      {
        tmpStr += curChar;
        lastChar = curChar;
      }
    }
    wordStr = tmpStr;
    wordStr = wordStr.substr(1);
    wordStr = wordStr.replace(/\s/g, "");
    wordStr = wordStr.replace(/0/g, "");
    wordStr += "0000000000";
    wordStr = firstLetter + wordStr;
    wordStr = wordStr.substr(0, soundExLen);
    return (wordStr);
  };

  /***************************************************************************************************************************************************/
  /***************************************************************************************************************************************************/
  /***                                                                                    ************************************************************/
  /***   ███    ███ ██████  ███████     ██   ██  █████  ███████ ██   ██ ███████ ██████    ************************************************************/
  /***   ████  ████ ██   ██ ██          ██   ██ ██   ██ ██      ██   ██ ██      ██   ██   ************************************************************/
  /***   ██ ████ ██ ██   ██ ██████      ███████ ███████ ███████ ███████ █████   ██████    ************************************************************/
  /***   ██  ██  ██ ██   ██      ██     ██   ██ ██   ██      ██ ██   ██ ██      ██   ██   ************************************************************/
  /***   ██      ██ ██████  ██████      ██   ██ ██   ██ ███████ ██   ██ ███████ ██   ██   ************************************************************/
  /***                                                                                    ************************************************************/
  /***************************************************************************************************************************************************/
  /***************************************************************************************************************************************************/


  /**
   *
   * Summary.       Returns MD5 hashes
   *
   * Description.   Returns MD5 hashes from passed in content
   *
   * @author        Ben King, benk at affinityteam.com, ben.king at source63.com, +64 21 2672729.
   *
   *
   * @since         01.01.2020
   * @class         Default
   * @namespace     Affinity2018
   * @memberof      Affinity2018
   *
   * @public
   */
  Affinity2018.Md5Object = new class
  {
    constructor()
    {
      this.hex_chr = '0123456789abcdef'.split('');
      if (this.md5('hello') !== '5d41402abc4b2a76b9719d911017c592')
      {
        this.add32 = function (x, y)
        {
          var lsw = (x & 0xFFFF) + (y & 0xFFFF),
            msw = (x >> 16) + (y >> 16) + (lsw >> 16);
          return (msw << 16) | (lsw & 0xFFFF);
        };
      }
    }
    md5cycle(x, k)
    {
      var a = x[0], b = x[1], c = x[2], d = x[3];
      a = this.ff(a, b, c, d, k[0], 7, -680876936);
      d = this.ff(d, a, b, c, k[1], 12, -389564586);
      c = this.ff(c, d, a, b, k[2], 17, 606105819);
      b = this.ff(b, c, d, a, k[3], 22, -1044525330);
      a = this.ff(a, b, c, d, k[4], 7, -176418897);
      d = this.ff(d, a, b, c, k[5], 12, 1200080426);
      c = this.ff(c, d, a, b, k[6], 17, -1473231341);
      b = this.ff(b, c, d, a, k[7], 22, -45705983);
      a = this.ff(a, b, c, d, k[8], 7, 1770035416);
      d = this.ff(d, a, b, c, k[9], 12, -1958414417);
      c = this.ff(c, d, a, b, k[10], 17, -42063);
      b = this.ff(b, c, d, a, k[11], 22, -1990404162);
      a = this.ff(a, b, c, d, k[12], 7, 1804603682);
      d = this.ff(d, a, b, c, k[13], 12, -40341101);
      c = this.ff(c, d, a, b, k[14], 17, -1502002290);
      b = this.ff(b, c, d, a, k[15], 22, 1236535329);
      a = this.gg(a, b, c, d, k[1], 5, -165796510);
      d = this.gg(d, a, b, c, k[6], 9, -1069501632);
      c = this.gg(c, d, a, b, k[11], 14, 643717713);
      b = this.gg(b, c, d, a, k[0], 20, -373897302);
      a = this.gg(a, b, c, d, k[5], 5, -701558691);
      d = this.gg(d, a, b, c, k[10], 9, 38016083);
      c = this.gg(c, d, a, b, k[15], 14, -660478335);
      b = this.gg(b, c, d, a, k[4], 20, -405537848);
      a = this.gg(a, b, c, d, k[9], 5, 568446438);
      d = this.gg(d, a, b, c, k[14], 9, -1019803690);
      c = this.gg(c, d, a, b, k[3], 14, -187363961);
      b = this.gg(b, c, d, a, k[8], 20, 1163531501);
      a = this.gg(a, b, c, d, k[13], 5, -1444681467);
      d = this.gg(d, a, b, c, k[2], 9, -51403784);
      c = this.gg(c, d, a, b, k[7], 14, 1735328473);
      b = this.gg(b, c, d, a, k[12], 20, -1926607734);
      a = this.hh(a, b, c, d, k[5], 4, -378558);
      d = this.hh(d, a, b, c, k[8], 11, -2022574463);
      c = this.hh(c, d, a, b, k[11], 16, 1839030562);
      b = this.hh(b, c, d, a, k[14], 23, -35309556);
      a = this.hh(a, b, c, d, k[1], 4, -1530992060);
      d = this.hh(d, a, b, c, k[4], 11, 1272893353);
      c = this.hh(c, d, a, b, k[7], 16, -155497632);
      b = this.hh(b, c, d, a, k[10], 23, -1094730640);
      a = this.hh(a, b, c, d, k[13], 4, 681279174);
      d = this.hh(d, a, b, c, k[0], 11, -358537222);
      c = this.hh(c, d, a, b, k[3], 16, -722521979);
      b = this.hh(b, c, d, a, k[6], 23, 76029189);
      a = this.hh(a, b, c, d, k[9], 4, -640364487);
      d = this.hh(d, a, b, c, k[12], 11, -421815835);
      c = this.hh(c, d, a, b, k[15], 16, 530742520);
      b = this.hh(b, c, d, a, k[2], 23, -995338651);
      a = this.ii(a, b, c, d, k[0], 6, -198630844);
      d = this.ii(d, a, b, c, k[7], 10, 1126891415);
      c = this.ii(c, d, a, b, k[14], 15, -1416354905);
      b = this.ii(b, c, d, a, k[5], 21, -57434055);
      a = this.ii(a, b, c, d, k[12], 6, 1700485571);
      d = this.ii(d, a, b, c, k[3], 10, -1894986606);
      c = this.ii(c, d, a, b, k[10], 15, -1051523);
      b = this.ii(b, c, d, a, k[1], 21, -2054922799);
      a = this.ii(a, b, c, d, k[8], 6, 1873313359);
      d = this.ii(d, a, b, c, k[15], 10, -30611744);
      c = this.ii(c, d, a, b, k[6], 15, -1560198380);
      b = this.ii(b, c, d, a, k[13], 21, 1309151649);
      a = this.ii(a, b, c, d, k[4], 6, -145523070);
      d = this.ii(d, a, b, c, k[11], 10, -1120210379);
      c = this.ii(c, d, a, b, k[2], 15, 718787259);
      b = this.ii(b, c, d, a, k[9], 21, -343485551);
      x[0] = this.add32(a, x[0]);
      x[1] = this.add32(b, x[1]);
      x[2] = this.add32(c, x[2]);
      x[3] = this.add32(d, x[3]);
    }
    cmn(q, a, b, x, s, t)
    {
      a = this.add32(this.add32(a, q), this.add32(x, t));
      return this.add32((a << s) | (a >>> (32 - s)), b);
    }
    ff(a, b, c, d, x, s, t) { return this.cmn((b & c) | ((~b) & d), a, b, x, s, t); }
    gg(a, b, c, d, x, s, t) { return this.cmn((b & d) | (c & (~d)), a, b, x, s, t); }
    hh(a, b, c, d, x, s, t) { return this.cmn(b ^ c ^ d, a, b, x, s, t); }
    ii(a, b, c, d, x, s, t) { return this.cmn(c ^ (b | (~d)), a, b, x, s, t); }
    md51(s)
    {
      var n = s.length,
        state = [1732584193, -271733879, -1732584194, 271733878], i;
      for (i = 64; i <= s.length; i += 64)
      {
        this.md5cycle(state, this.md5blk(s.substring(i - 64, i)));
      }
      s = s.substring(i - 64);
      var tail = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
      for (i = 0; i < s.length; i++)
        tail[i >> 2] |= s.charCodeAt(i) << ((i % 4) << 3);
      tail[i >> 2] |= 0x80 << ((i % 4) << 3);
      if (i > 55)
      {
        this.md5cycle(state, tail);
        for (i = 0; i < 16; i++) tail[i] = 0;
      }
      tail[14] = n * 8;
      this.md5cycle(state, tail);
      return state;
    }
    md5blk(s)
    {
      var md5blks = [], i;
      for (i = 0; i < 64; i += 4)
      {
        md5blks[i >> 2] = s.charCodeAt(i)
          + (s.charCodeAt(i + 1) << 8)
          + (s.charCodeAt(i + 2) << 16)
          + (s.charCodeAt(i + 3) << 24);
      }
      return md5blks;
    }
    rhex(n)
    {
      var s = '', j = 0;
      for (; j < 4; j++)
        s += this.hex_chr[(n >> (j * 8 + 4)) & 0x0F]
          + this.hex_chr[(n >> (j * 8)) & 0x0F];
      return s;
    }
    hex(x)
    {
      for (var i = 0; i < x.length; i++)
        x[i] = this.rhex(x[i]);
      return x.join('');
    }
    md5(s)
    {
      return this.hex(this.md51(s));
    }
    add32(a, b)
    {
      return (a + b) & 0xFFFFFFFF;
    }
  };


  /**
   * Affinity2018.md5()
   * Returns the MD5 hash of any parsed in string
   * 
   * @author  Ben King, benk at affinityteam.com, ben.king at source63.com, +64 21 2672729.
   * 
   * @param {string} str
   
   * @returns {string}
   */
  Affinity2018.md5 = function (str) { return Affinity2018.Md5Object.md5(str); };


  /***************************************************************************************************************************************************/
  /***************************************************************************************************************************************************/
  /***                                                                                                                                      **********/
  /***   ██████  ██████   ██████  ████████  ██████      ███████ ██   ██ ████████ ███████ ███    ██ ████████ ██  ██████  ███    ██ ███████   **********/
  /***   ██   ██ ██   ██ ██    ██    ██    ██    ██     ██       ██ ██     ██    ██      ████   ██    ██    ██ ██    ██ ████   ██ ██        **********/
  /***   ██████  ██████  ██    ██    ██    ██    ██     █████     ███      ██    █████   ██ ██  ██    ██    ██ ██    ██ ██ ██  ██ ███████   **********/
  /***   ██      ██   ██ ██    ██    ██    ██    ██     ██       ██ ██     ██    ██      ██  ██ ██    ██    ██ ██    ██ ██  ██ ██      ██   **********/
  /***   ██      ██   ██  ██████     ██     ██████      ███████ ██   ██    ██    ███████ ██   ████    ██    ██  ██████  ██   ████ ███████   **********/
  /***                                                                                                                                      **********/
  /***************************************************************************************************************************************************/
  /***************************************************************************************************************** Source63 *** proto extentions ***/


  /**
   * NodeList.indexOf()
   * Returns the index of the passed in HTMLElement in the current NodeList
   * 
   * @author  Ben King, benk at affinityteam.com, ben.king at source63.com, +64 21 2672729.
   * 
   * @returns {int}
   */
  if (!NodeList.prototype.indexOf)
  {
    NodeList.prototype.indexOf = function (node)
    {
      if (!Affinity2018.isDomElement(node))
      {
        throw 'the passed element is not a Dom Element (type:' + (typeof node) + ')';
      }
      return Array.prototype.indexOf.call(this, node);
    };
  }


  /**
   * Array.unique()
   * Returns the unique top level items in the current Array
   * 
   * @author  Ben King, benk at affinityteam.com, ben.king at source63.com, +64 21 2672729.
   * 
   * @returns {array}
   */
  if (!Array.prototype.unique)
  {
    Array.prototype.unique = function ()
    {
      return this.filter(function (value, index, self)
      {
        return self.indexOf(value) === index;
      });
    };
  }
  /*
  if (!Array.prototype.unique)
  {
    Array.prototype.unique = function () {
      var a = this.concat();
      for (var i = 0; i < a.length; ++i) {
        for (var j = i + 1; j < a.length; ++j) {
          if (a[i] === a[j]) a.splice(j--, 1);
        }
      }
      return a;
    };
  }
  */


  /**
   * Array.diff()
   * Returns the differnce between two arrays
   * 
   * @author  Ben King, benk at affinityteam.com, ben.king at source63.com, +64 21 2672729.
   * 
   * @param {Array} array
   * 
   * @returns {array}
   */
  if (!Array.prototype.diff)
  {
    Array.prototype.diff = function (array)
    {
      return this.filter(function (i) { return array.indexOf(i) < 0; });
    };
  }


  /**
   * Array.contains()
   * Determines whether the current Array contains the parsed in Object
   * 
   * @author  Ben King, benk at affinityteam.com, ben.king at source63.com, +64 21 2672729.
   * 
   * @param mixed
   * 
   * @returns {boolean}
   */
  if (!Array.prototype.contains)
  {
    Array.prototype.contains = function (mixed)
    {
      return this.indexOf(mixed) !== -1;
    };
  }


  /**
   * Array.includes()
   * Determines whether the current Array contains the parsed in Object
   * 
   * @author  Ben King, benk at affinityteam.com, ben.king at source63.com, +64 21 2672729.
   * 
   * @param mixed
   * 
   * @returns {boolean}
   */
  if (!Array.prototype.includes) Array.prototype.includes = Array.prototype.contains;


  /**
   * Array.bindEachToClassScope()
   * Binds each function in the parsed in Array to the current Class scope
   * 
   * @author  Ben King, benk at affinityteam.com, ben.king at source63.com, +64 21 2672729.
   * 
   * @param bindto Class Scope
   */
  if (!Array.prototype.bindEachToClassScope)
  {
    Array.prototype.bindEachToClassScope = function (bindto)
    {
      this.forEach(function (fn)
      {
        if (
          bindto[fn]
          && typeof bindto[fn] === 'function'
        )
        {
          bindto[fn] = bindto[fn].bind(bindto);
        }
      }.bind(bindto));
    };
  }


  /**
   * Array.bindEach()
   * Binds each function in the parsed in Array to the current Class scope
   * 
   * @author  Ben King, benk at affinityteam.com, ben.king at source63.com, +64 21 2672729.
   * 
   * @param bindto Class Scope
   */
  if (!Array.prototype.bindEach) Array.prototype.bindEach = Array.prototype.bindEachToClassScope;


  /**
   * String.includes()
   * Determines whether the current String includes the parsed in String
   * 
   * @author  Ben King, benk at affinityteam.com, ben.king at source63.com, +64 21 2672729.
   * 
   * @param {string} search The string to search for
   * @param {string} search (optional) An index to start the search from (default is 0)
   * 
   * @returns {boolean}
   */
  if (!String.prototype.includes)
  {
    String.prototype.includes = function (search, start)
    {
      'use strict';
      if (typeof start !== 'number') start = 0;
      if (start + search.length > this.length) { return false; } else { return this.indexOf(search, start) !== -1; }
    };
  }


  /**
   * String.isEither()
   * Determines whether the current String includes anything in the passed array
   * 
   * @author  Ben King, benk at affinityteam.com, ben.king at source63.com, +64 21 2672729.
   * 
   * @param {...} arguments Strings to check if a match exists
   * 
   * @returns {boolean}
   */
  if (!String.prototype.isEither)
  {
    String.prototype.isEither = function ()
    {
      var args = [].slice.call(arguments);
      if (args && Affinity2018.isArray(args))
      {
        return args.contains(this.toString());
      }
      return false;
    };
  }


  /**
   * String.contains()
   * Determines whether the current String contains the parsed in String
   * 
   * @author  Ben King, benk at affinityteam.com, ben.king at source63.com, +64 21 2672729.
   * 
   * @param {string} str The string to search for
   * 
   * @returns {boolean}
   */
  if (!String.prototype.contains)
  {
    String.prototype.contains = function (str)
    {
      return new RegExp(str.escapeRegExp(), 'gi').test(this);
      //return this.indexOf(str) > -1;
    };
  }


  /**
   * String.padLeft()
   * Pads the end of a string with a character to length
   * 
   * @author  Ben King, benk at affinityteam.com, ben.king at source63.com, +64 21 2672729.
   * 
   * @param {string}  pad     Character to pad with
   * @param {int}     length  Length of padded string
   * 
   * @returns {string}
   */
  if (!String.prototype.padLeft)
  {
    String.prototype.padLeft = function (padChar, length)
    {
      return Affinity2018.padLeft(this, padChar, length);
    };
  }


  /**
   * String.padRight()
   * Pads the beginning of a string with a character to length
   * 
   * @author  Ben King, benk at affinityteam.com, ben.king at source63.com, +64 21 2672729.
   * 
   * @param {string}  pad     Character to pad with
   * @param {int}     length  Length of padded string
   * 
   * @returns {string}
   */
  if (!String.prototype.padRight)
  {
    String.prototype.padRight = function (padChar, length)
    {
      return Affinity2018.padRight(this, padChar, length);
    };
  }


  /**
   * String.toCamelCase()
   * Returns the Camel Case variant of the current string
   * 
   * @author  Ben King, benk at affinityteam.com, ben.king at source63.com, +64 21 2672729.
   * 
   * @returns {string}
   */
  if (!String.prototype.toCamelCase)
  {
    String.prototype.toCamelCase = function (str)
    {
      return this.toLowerCase().replace(/(_|-)([a-z])/g, function (str) { return str[1].toUpperCase(); });
    };
  }


  /**
   * String.toTitleCase()
   * Returns the Title Case variant of the current string
   * 
   * @author  Ben King, benk at affinityteam.com, ben.king at source63.com, +64 21 2672729.
   * 
   * @returns {string}
   */
  if (!String.prototype.toTitleCase)
  {
    String.prototype.toTitleCase = function ()
    {
      //return this.replace(/(^|\s)\S/g, function(t) { return t.toUpperCase() });
      return this.replace(/\b\w+/g, function (txt) { return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase(); });
    };
  }


  /**
   * String.toUpperFirst()
   * Returns the current string with the first character as Upprecase
   * 
   * @author  Ben King, benk at affinityteam.com, ben.king at source63.com, +64 21 2672729.
   * 
   * @returns {string}
   */
  if (!String.prototype.toUpperFirst)
  {
    String.prototype.toUpperFirst = function ()
    {
      if (this.trim() !== '')
        return str.trim().charAt(0).toUpperCase() + str.trim().slice(1);
      return str;
    };
  }


  /**
   * String.camelCaseToSentence()
   * Returns the current string with the first character as Upprecase
   * 
   * @author  Ben King, benk at affinityteam.com, ben.king at source63.com, +64 21 2672729.
   * 
   * @returns {string}
   */
  if (!String.prototype.splitCamelCase)
  {
    String.prototype.splitCamelCase = function ()
    {
      if (this.trim() !== '')
        return this.trim().charAt(0).toUpperCase() + this.trim().slice(1).replace(/([A-Z])/g, " $1");
      return this;
    };
  }


  /**
   * String.countString()
   * Counts the occureance if str in the current string
   * 
   * @author  Ben King, benk at affinityteam.com, ben.king at source63.com, +64 21 2672729.
   * 
   * @returns {int}
   */
  if (!String.prototype.countString)
  {
    String.prototype.countString = function (str)
    {
      //return this.split(str).length - 1;
      return (this.match(new RegExp(str.escapeRegExp(), "g")) || []).length;
    };
  }


  /**
   * String.firstWord()
   * Returns the first word in the current string
   * 
   * @author  Ben King, benk at affinityteam.com, ben.king at source63.com, +64 21 2672729.
   * 
   * @returns {string}
   */
  if (!String.prototype.firstWord)
  {
    String.prototype.firstWord = function ()
    {
      return this.split(' ')[0];
    };
  }


  /**
   * String.lastWord()
   * Returns the last word in the current string
   * 
   * @author  Ben King, benk at affinityteam.com, ben.king at source63.com, +64 21 2672729.
   * 
   * @returns {string}
   */
  if (!String.prototype.lastWord)
  {
    String.prototype.lastWord = function (str)
    {
      return this.replace(/  /g, ' ').split(' ')[this.split(' ').length - 1];
    };
  }


  /**
   * String.escapeRegExp()
   * Escapes strings to regex safe srtings
   * 
   * @author  Ben King, ben.king@source63.com, +64 21 2672729.
   * 
   * @returns {string}
   */
  if (!('escapeRegExp' in String))
  {
    String.prototype.escapeRegExp = function ()
    {
      var regex = /[.*+?^${}()|[\]\\]/g;
      return this.replace(regex, '\\$&');
    };
  }


  /**
   * String.escapeRegExpString()
   * Safely escape string for regular expressions
   *
   * @author  Ben King, benk at affinityteam.com, ben.king at source63.com, +64 21 2672729.
   *
   * @returns {string}
   */
  if (!String.prototype.escapeRegExpString)
  {
    String.prototype.escapeRegExpString = function ()
    {
      var regex = /[.*+?^${}()|[\]\\]/g;
      return this.replace(regex, '\\$&');
    };
  }


  /**
   * String.isNullOrEmpty()
   * Returns whether the current string is null or an empty string
   * 
   * @author  Ben King, benk at affinityteam.com, ben.king at source63.com, +64 21 2672729.
   * 
   * @returns {boolean}
   */
  if (!String.prototype.isNullOrEmpty)
  {
    String.prototype.isNullOrEmpty = function ()
    {
      return Affinity2018.isNullOrEmpty(this);
    };
  }


  /**
   * String.format()
   * Simulates C# String.format()
   * 'this is {0} string'.format('my')
   *
   * @author  Ben King, benk at affinityteam.com, ben.king at source63.com, +64 21 2672729.
   *
   * @returns {boolean}
   */
  if (!String.prototype.format)
  {
    String.prototype.format = function ()
    {
      var args = [].slice.call(arguments);
      return Affinity2018.FormatString(this, args);
    };
  }
  /* old
 if (!String.prototype.format)
 {
   String.prototype.format = function()
   {
     return this.replace(/{(\d+)}/g, function(match, number)
     {
       return typeof args[number] != 'undefined' ? args[number] : match;
     });
   };
 }
 */


  /**
   * String.format()
   * Simulates C# String.format()
   * String.format('this is {0} string', 'my')
   *
   * @author  Ben King, benk at affinityteam.com, ben.king at source63.com, +64 21 2672729.
   *
   * @returns {boolean}
   */
  if (!String.format)
  {
    String.format = function ()
    {
      var args = [].slice.call(arguments);
      return Affinity2018.FormatString(this, args);
    };
  }
  /* old
 if (!String.format)
 {
   String.format = function()
   {
     var args = [].slice.call(arguments), str = args.length > 0 ? args[0] : ''; args = args.length > 1 ? args.slice(1) : [];
     return str.replace(/{(\d+)}/g, function(match, number)
     {
       return typeof args[number] != 'undefined' ? args[number] : match;
     });
   };
 }
 */


  /**
   * String.soundex()
   * Returns the soundex code of the current string
   * 
   * @author  Ben King, benk at affinityteam.com, ben.king at source63.com, +64 21 2672729.
   * 
   * @returns {boolean}
   */
  String.prototype.soundex = function ()
  {
    return Affinity2018.Soundex(this);
  };


  /**
   * String.distance()
   * Returns the Levenshtein string distance value between the current string and the passed in string
   * 
   * @author  Ben King, benk at affinityteam.com, ben.king at source63.com, +64 21 2672729.
   * 
   * @param {string} compareStr
   * 
   * @returns {int}
   */
  String.prototype.distance = function (compareStr)
  {
    if (typeof compareStr !== 'string')
    {
      throw 'String.distance requires a string to compare';
    }
    return Affinity2018.StringDistance(this, compareStr);
  };


  /**
   * String.md5()
   * Returns the MD5 hash for the current string
   * 
   * @author  Ben King, benk at affinityteam.com, ben.king at source63.com, +64 21 2672729.
   * 
   * @returns {string}
   */
  String.prototype.md5 = function () { return Affinity2018.Md5Object.md5(this); };


  /**
   * Number.md5()
   * Returns the MD5 hash for the current number
   * 
   * @author  Ben King, benk at affinityteam.com, ben.king at source63.com, +64 21 2672729.
   * 
   * @returns {string}
   */
  Number.prototype.md5 = function () { return Affinity2018.Md5Object.md5(this); };


  /***************************************************************************************************************************************************/
  /***************************************************************************************************************************************************/
  /***                                                                                                                     ***************************/
  /***    ██████  ██████   ██████  ██   ██ ██ ███████     ███    ███  ██████  ███    ██ ███████ ████████ ███████ ██████    ***************************/
  /***   ██      ██    ██ ██    ██ ██  ██  ██ ██          ████  ████ ██    ██ ████   ██ ██         ██    ██      ██   ██   ***************************/
  /***   ██      ██    ██ ██    ██ █████   ██ █████       ██ ████ ██ ██    ██ ██ ██  ██ ███████    ██    █████   ██████    ***************************/
  /***   ██      ██    ██ ██    ██ ██  ██  ██ ██          ██  ██  ██ ██    ██ ██  ██ ██      ██    ██    ██      ██   ██   ***************************/
  /***    ██████  ██████   ██████  ██   ██ ██ ███████     ██      ██  ██████  ██   ████ ███████    ██    ███████ ██   ██   ***************************/
  /***                                                                                                                     ***************************/
  /***************************************************************************************************************************************************/
  /******************************************************************************************************************* Source63 *** cookie monster ***/


  Affinity2018.CookieMonster = new class
  {
    constructor()
    {
      [
        'Read', 'Write', 'Delete',
        '_exists'
      ].bindEach(this);
    }
    Read(cookiename)
    {
      if (this._exists(cookiename))
      {
        var value = document.cookie.match(new RegExp(cookiename + '=([^;]+)'))[1];
        return (function (v)
        {
          try
          {
            return JSON.parse(v);
          }
          catch (e)
          {
            return v;
          }
        })(value);
      }
    }
    Write(cookiename, data, expires)
    {
      var domain = window.location.host,
        dateNow = new Date(),
        dateExpires, dateExpiresStr;
      if (typeof data === 'object') data = JSON.stringify(data);
      data = escape(data);
      try
      {
        if (typeof expires !== 'undefined' && !isNaN(expires) && parseFloat(expires) > 0)
        {
          dateExpires = new Date(dateNow.getTime() + (expires * 60000));
          dateExpiresStr = dateExpires.toUTCString();
          if (window.location.host.toLowerCase().contains('localhost'))
          {
            document.cookie = cookiename + '=' + data + '; expires=' + dateExpiresStr + '; domain:NULL; secure; SameSite=Strict';
          }
          else
          {
            document.cookie = cookiename + '=' + data + '; expires=' + dateExpiresStr + '; domain:' + domain + '; secure; SameSite=Strict';
          }
          return data;
        }
        else
        {
          document.cookie = cookiename + '=' + data + '; secure; SameSite=Strict';
          return data;
        }
      }
      catch (e) { console.error(e); }
      return null;
    }
    Delete(cookiename)
    {
      if (this._exists(cookiename))
      {
        try
        {
          document.cookie = cookiename + '=; expires=Thu, 01 Jan 1970 00:00:00 GMT';
          return true;
        }
        catch (e) { console.error(e); }
      }
      return false;
    }
    _exists(cookiename)
    {
      if (document.cookie.split(';').filter(function (item) { return item.trim().indexOf(cookiename + '=') == 0 }).length)
      {
        return true;
      }
      return false;
    }
  };


  /***************************************************************************************************************************************************/
  /***************************************************************************************************************************************************/
  /***                                                                ********************************************************************************/
  /***   ███████ ████████  ██████  ██████   █████   ██████  ███████   ********************************************************************************/
  /***   ██         ██    ██    ██ ██   ██ ██   ██ ██       ██        ********************************************************************************/
  /***   ███████    ██    ██    ██ ██████  ███████ ██   ███ █████     ********************************************************************************/
  /***        ██    ██    ██    ██ ██   ██ ██   ██ ██    ██ ██        ********************************************************************************/
  /***   ███████    ██     ██████  ██   ██ ██   ██  ██████  ███████   ********************************************************************************/
  /***                                                                ********************************************************************************/
  /***************************************************************************************************************************************************/
  /************************************************************************************************************************** Source63 *** Storage ***/


  /**
   *
   * Summary.       Storage manager
   *
   * Description.   Storage helper for both Session Storage and Local Storage
   *
   * @author        Ben King, ben.king at source63.com, +64 21 2672729.
   *
   *
   * @since         01.01.2020
   * @class         Default
   * @namespace     Affinity2018
   * @memberof      Affinity2018
   *
   * @public
   *
  **/
  Affinity2018.Storage = new class
  {
    constructor()
    {
      this.Session = {};
      this.Session.Has = this.HasSession;
      this.Session.Get = this.GetSession;
      this.Session.Set = this.SetSession;
      this.Session.Del = this.DelSession;
      this.Local = {};
      this.Local.Has = this.HasLocal;
      this.Local.Get = this.GetLocal;
      this.Local.Set = this.SetLocal;
      this.Local.Del = this.DelLocal;
    }
    /**/
    HasSession(name)
    {
      return window.sessionStorage.getItem(name) !== null;
    }
    GetSession(name)
    {
      let data = window.sessionStorage.getItem(name);
      if (data !== null)
      {
        if (Affinity2018.isString(data) && ['true', 'false'].contains(data.trim().toLowerCase()))
        {
          if (data.trim().toLowerCase() === 'true') return true;
          if (data.trim().toLowerCase() === 'false') return false;
        }
        if (Affinity2018.isNumeric(data) && Affinity2018.isString(data) && data.contains('.'))
        {
          return parseFloat(data);
        }
        if (Affinity2018.isNumeric(data) && Affinity2018.isString(data) && !data.contains('.'))
        {
          return parseInt(data);
        }
        try
        {
          return JSON.parse(unescape(data));
        }
        catch (err) { }
        return unescape(data);
      }
      return false;
    }
    SetSession(name, data)
    {
      if (!Affinity2018.isString(data)) data = JSON.stringify(data);
      window.sessionStorage.setItem(name, escape(data));
    }
    DelSession(name)
    {
      window.sessionStorage.removeItem(name);
    }
    /**/
    HasLocal(name)
    {
      return window.localStorage.getItem(name) !== null;
    }
    GetLocal(name)
    {
      let data = window.localStorage.getItem(name);
      if (data !== null)
      {
        try
        {
          return JSON.parse(unescape(data));
        }
        catch (err) { }
        return data;
      }
      return false;
    }
    SetLocal(name, data)
    {
      if (!Affinity2018.isString(data)) data = JSON.stringify(data);
      window.localStorage.setItem(name, escape(data));
    }
    DelLocal(name)
    {
      window.localStorage.removeItem(name);
    }
  };


  /***************************************************************************************************************************************************/
  /***************************************************************************************************************************************************/
  /***                                                                          **********************************************************************/
  /***   ██       █████  ███    ██  ██████  ██    ██  █████   ██████  ███████   **********************************************************************/
  /***   ██      ██   ██ ████   ██ ██       ██    ██ ██   ██ ██       ██        **********************************************************************/
  /***   ██      ███████ ██ ██  ██ ██   ███ ██    ██ ███████ ██   ███ █████     **********************************************************************/
  /***   ██      ██   ██ ██  ██ ██ ██    ██ ██    ██ ██   ██ ██    ██ ██        **********************************************************************/
  /***   ███████ ██   ██ ██   ████  ██████   ██████  ██   ██  ██████  ███████   **********************************************************************/
  /***                                                                          **********************************************************************/
  /***************************************************************************************************************************************************/
  /************************************************************************************************************************* Source63 *** language ***/


  Affinity2018.languages = {
    english: {
    }
  };

  Affinity2018.Classes.Lang = class
  {
    constructor()
    {
      ['Process', 'Load', 'CheckPath', 'ReturnPath', '_returnIcon', '_returnLabel', '_retuenMethodRef', '_processString', '_check', '_process'].bindEach(this);
      this.Loaded = false;
    }

    Process()
    {
      if (this.Loaded)
      {
        var path, value, istooltip;
        document.querySelectorAll('[data-lang],[data-lang-tooltip]').forEach(function (node)
        {
          path = null;
          if (node.dataset.langTooltip)
          {
            istooltip = true;
            path = node.dataset.langTooltip;
          }
          else
          {
            istooltip = false;
            path = node.dataset.lang;
          }

          if (path !== null)
          {
            path = path.replace(/^app\./, 'application.');
            path = path.replace(/^apps\./, 'application.');
            path = path.replace('.ts.', '.timesheets.');
            path = path.replace('.cf.', '.cleverfroms.');
            if (this.CheckPath(path))
            {
              value = this.ReturnPath(path);
              if (Affinity2018.isString(value))
              {
                if (value.trim() != '')
                {
                  if (istooltip)
                  {
                    node.classList.add('ui-has-tooltip');
                    node.dataset.tooltip = value;
                  }
                  else node.innerHTML = value;
                }
              }
              else
              {
                console.log('Language path "{0}" is not string:'.format(path), value);
              }
            }
            else
            {
              console.log("Language can not find value for '" + path + "'");
            }
          }
          node.removeAttribute('data-lang');
          node.removeAttribute('data-lang-tooltip');
        }.bind(this));
        if (window.hasOwnProperty('Affinity') && Affinity.hasOwnProperty('tooltips')) Affinity.tooltips.processNew();
        if (Affinity2018.hasOwnProperty('Tooltips')) Affinity2018.Tooltips.Apply();
      }
    }

    Load()
    {
      axios.get('../../Content/v2/languages/english.json').then(function (response)
      {
        this._process(response.data);
      }.bind(this));
    }

    CheckPath(pathStr)
    {
      var path = Affinity2018.languages.english,
        patharray = pathStr.replace('l:', '').replace('join:', '').split('.'),
        p = 0,
        segment;
      for (; p < patharray.length; p++)
      {
        segment = patharray[p];
        if (segment === 'app') segment = segment.replace('app', 'application');
        if (segment === 'apps') segment = segment.replace('apps', 'application');
        if (segment === 'ts') segment = segment.replace('ts', 'timesheets');
        if (segment === 'cf') segment = segment.replace('cf', 'cleverfroms');
        if (path.hasOwnProperty(segment)) path = path[segment];
        else return false;
      }
      if (path !== null && path !== undefined) return true;
      return false;
    }

    ReturnPath(pathStr, variables)
    {
      var path = Affinity2018.languages.english,
        patharray = pathStr.replace('l:', '').replace('join:', '').split('.'),
        p = 0,
        segment;
      for (; p < patharray.length; p++)
      {
        segment = patharray[p];
        if (segment === 'app') segment = segment.replace('app', 'application');
        if (segment === 'apps') segment = segment.replace('apps', 'application');
        if (segment === 'ts') segment = segment.replace('ts', 'timesheets');
        if (segment === 'cf') segment = segment.replace('cf', 'cleverfroms');
        if (path.hasOwnProperty(segment)) path = path[segment];
      }
      if (path !== null && path !== undefined)
      {
        if (Affinity2018.isString(path))
        {
          path = this._processString(path, variables);
        }
        return path;
      }
      return null;
    }

    _returnIcon(str, pathStr)
    {
      var path = window,
        patharray = pathStr.replace('i:', '').split('.'),
        p = 0;
      for (; p < patharray.length; p++) if (path.hasOwnProperty(patharray[p])) path = path[patharray[p]];
      if (path !== null && path !== undefined && typeof path === 'string') return str.replace('{{' + pathStr + '}}', path);
      return str;
    }

    _returnLabel(str, pathStr)
    {
      var path = Affinity2018.languages.english,
        joinArray = pathStr.contains('join:'),
        patharray = pathStr.replace('l:', '').replace('join:', '').split('.'),
        p = 0;
      for (; p < patharray.length; p++) if (path.hasOwnProperty(patharray[p])) path = path[patharray[p]];
      if (path !== null && path !== undefined)
      {
        if (joinArray && Array.isArray(path)) return str.replace('{{' + pathStr + '}}', path.join(' '));
        if (!joinArray && (typeof path === 'string' || typeof path === 'number')) return str.replace('{{' + pathStr + '}}', path);
      }
      return str;
    }

    _retuenMethodRef(str, pathStr)
    {
      var path = window,
        patharray = pathStr.replace('m:', '').split('.'),
        p = 0;
      for (; p < patharray.length; p++) if (path.hasOwnProperty(patharray[p])) path = path[patharray[p]];
      if (path !== null && path !== undefined && typeof path === 'function') return path;
      return function () { };
    }

    _processString(str, variables)
    {
      if (str.contains('{{') && str.contains('}}'))
      {
        var braceRegExp = /[^{{\}}]+(?=}})/g, matches = str.match(braceRegExp);
        if (matches !== null)
        {
          var m, match, type, patharray, newStr;
          for (m = 0; m < matches.length; m++)
          {
            match = matches[m];
            type = match.substr(0, 2);
            switch (type)
            {
              case 'i:': // Icon
                str = this._returnIcon(str, match);
                break;
              case 'l:': // Label
                str = this._returnLabel(str, match);
                break;
              case 'm:': // Method
                str = this._retuenMethodRef(str, match);
                break;
              case 'v:': // variable
                if (variables && Affinity2018.isObject(variables))
                {
                  var key = match.replace('v:', '').trim();
                  var replace = '{{' + match + '}}';
                  if (variables.hasOwnProperty(key))
                  {
                    str = str.replace(replace, variables[key]);
                  }
                }
                break;
            }
          }
        }
      }
      return str;
    }

    _check(obj)
    {
      if (typeof obj === 'object')
      {
        for (var key in obj)
        {
          if (typeof obj[key] === 'object') this._check(obj[key]);
          else if (typeof obj[key] === 'string') obj[key] = this._processString(obj[key]);
        }
      }
      return obj;
    }

    _process(json)
    {
      if (json.hasOwnProperty('languages') && json.languages.hasOwnProperty('english'))
      {
        if (typeof json.languages.english === 'object')
        {
          Affinity2018.languages.english = Affinity2018.objectDeepMerge([Affinity2018.languages.english, json.languages.english]);
          Affinity2018.languages.english = this._check(Affinity2018.languages.english);
        }
      }
      this.Loaded = true;
      let event = new Event('LangComplete');
      window.dispatchEvent(event);
      this.Process();
    }
  };


  /***************************************************************************************************************************************************/
  /***************************************************************************************************************************************************/
  /***                                                                    ****************************************************************************/
  /***   ████████  ██████   ██████  ██      ████████ ██ ██████  ███████   ****************************************************************************/
  /***      ██    ██    ██ ██    ██ ██         ██    ██ ██   ██ ██        ****************************************************************************/
  /***      ██    ██    ██ ██    ██ ██         ██    ██ ██████  ███████   ****************************************************************************/
  /***      ██    ██    ██ ██    ██ ██         ██    ██ ██           ██   ****************************************************************************/
  /***      ██     ██████   ██████  ███████    ██    ██ ██      ███████   ****************************************************************************/
  /***                                                                    ****************************************************************************/
  /***************************************************************************************************************************************************/
  /************************************************************************************************************************* Source63 *** tooltips ***/


  Affinity2018.Classes.Tooltips = class
  {
    constructor()
    {
      [
        'init',
        'Apply', '_applyTo',
        'Show', 'Hide'
      ].bindEach(this);
      this.enabled = false;
      if (document.getElementById('tooltip')) this.enabled = true;
      else return false;
      this.head = document.getElementsByTagName('head')[0];
      this.body = document.getElementsByTagName('body')[0];
      this.tooltipEl = document.getElementById('tooltip');
      this.references = {};
      Affinity2018.Apps.Plugins.Tooltips = this;
    }

    Apply(el)
    {
      if (!this.enabled) return false;
      if (el !== undefined && el !== null)
      {
        this._applyTo(el);
      }
      else
      {
        document.querySelectorAll('.ui-has-tooltip').forEach(this._applyTo);
      }
    }

    _applyTo(el)
    {
      if (!this.enabled) return false;
      if (Affinity2018.isDomElement(el) && !Affinity2018.isNull(el.dataset.tooltip))
      {
        let ref = {
          id: 'tt' + (Object.keys(this.references).length + 1),
          el: el,
          tooltip: el.dataset.tooltip.trim(),
          direction: !Affinity2018.isNull(el.dataset.tooltipDir) ? el.dataset.tooltipDir : 'top'
        };
        this.references[ref.id] = ref;
        el.classList.add('tt');
        el.dataset.ttid = ref.id;
        el.addEventListener('mouseover', this.Show, false);
        el.addEventListener('mouseout', this.Hide, false);
        el.removeAttribute('data-tooltip');
        el.removeAttribute('data-tooltip-direction');
        el.removeAttribute('data-tooltip-dir');
        el.classList.remove('ui-has-tooltip');
      }
    }

    Show(e)
    {
      if (!this.enabled) return false;
      let el = Affinity2018.getParent(e.target, 'tt'),
        id = el.dataset.ttid,
        data = id && this.references.hasOwnProperty(id) ? this.references[id] : false,
        pos = data ? Affinity2018.getPosition(data.el) : false,
        size = data ? Affinity2018.getSize(data.el) : false,
        ttsize, top, left;

      if (data)
      {
        if (Affinity2018.Body.classList.contains('disable-scroll')) pos.top += parseInt(Affinity2018.Body.style.top) * -1;
        this.tooltipEl.innerHTML = data.tooltip;
        this.tooltipEl.classList.add('show');
        this.tooltipEl.classList.remove('top', 'top-right', 'left', 'bottom', 'right');
        ttsize = Affinity2018.getSize(this.tooltipEl);
        switch (data.direction)
        {
          case 'top-right':
            left = pos.left;
            top = pos.top - ttsize.height - 10;
            this.tooltipEl.classList.add('top-right');
            break;
          case 'left':
            left = pos.left - ttsize.width - 10;
            top = (pos.top + (size.height / 2)) - (ttsize.height / 2);
            this.tooltipEl.classList.add('left');
            break;
          case 'bottom':
            left = (pos.left + (size.width / 2)) - (ttsize.width / 2);
            top = pos.top + size.height + 15;
            this.tooltipEl.classList.add('bottom');
            break;
          case 'right':
            left = pos.left + size.width + 10;
            top = (pos.top + (size.height / 2)) - (ttsize.height / 2);
            this.tooltipEl.classList.add('right');
            break;
          case 'top':
          default:
            left = (pos.left + (size.width / 2)) - (ttsize.width / 2);
            top = pos.top - ttsize.height - 10;
            this.tooltipEl.classList.add('top');
            break;
        }
        this.tooltipEl.style.top = top + 'px';
        this.tooltipEl.style.left = left + 'px';
      }
    }

    Hide(e)
    {
      if (!this.enabled) return false;
      this.tooltipEl.classList.remove('show');
    }

  };


  /***************************************************************************************************************************************************/
  /***************************************************************************************************************************************************/
  /***                                                                                                                ********************************/
  /***    █████  ███████ ███████ ██ ███    ██ ██ ████████ ██    ██     ██████  ██  █████  ██       ██████   ██████    ********************************/
  /***   ██   ██ ██      ██      ██ ████   ██ ██    ██     ██  ██      ██   ██ ██ ██   ██ ██      ██    ██ ██         ********************************/
  /***   ███████ █████   █████   ██ ██ ██  ██ ██    ██      ████       ██   ██ ██ ███████ ██      ██    ██ ██   ███   ********************************/
  /***   ██   ██ ██      ██      ██ ██  ██ ██ ██    ██       ██        ██   ██ ██ ██   ██ ██      ██    ██ ██    ██   ********************************/
  /***   ██   ██ ██      ██      ██ ██   ████ ██    ██       ██        ██████  ██ ██   ██ ███████  ██████   ██████    ********************************/
  /***                                                                                                                ********************************/
  /***************************************************************************************************************************************************/
  /****************************************************************************************************************** Source63 *** affinity dialog ***/


  Affinity2018.Classes.Dialog = class
  {
    constructor()
    {
      [
        'Position',
        'Set',
        'Reset',
        'Show', 'Hide',
        '_setMessage', '_setInput', '_setButtons',
        '_okClicked', '_okContinue', '_cancelClicked', '_cancelContinue', '_bgClicked'
      ].bindEach(this);

      this.enabled = false;
      if (document.getElementById('dialog') && document.getElementById('dialog-bg')) this.enabled = true;
      else return false;

      this.Open = false;

      this.default = {
        message: 'Default message',
        buttons: {
          ok: {
            show: true,
            icon: 'tick',
            text: 'OK',
            color: 'blue'
          },
          cancel: {
            show: true,
            icon: 'cross',
            text: 'Cancel',
            color: 'grey'
          }
        },
        input: {
          show: false,
          placeholder: '',
          default: '',
          lines: 1
        },
        textAlign: 'center',
        canBackgroundClose: true,
        showOk: true, // depricated
        showCancel: true, // depricated
        showInput: false, // depricated
        inputLines: 1, // depricated
        onOk: function () { },
        onCancel: function () { },
        onClose: function () { }
      };
      this.data = Affinity2018.objectDeepMerge({}, this.default);
      this.resetTimeout = false;

      this.head = document.getElementsByTagName('head')[0];
      this.body = document.getElementsByTagName('body')[0];
      this.dialogBgEl = document.getElementById('dialog-bg');
      this.dialogEl = document.getElementById('dialog');
      this.ContentNode = document.getElementById('dialog-content');
      this.buttonsEl = document.getElementById('dialog-buttons');
      this.cancelButton = document.getElementById('dialog-cancel');
      this.okButton = document.getElementById('dialog-ok');
      this.inputEl = document.getElementById('dialog-inputs');
      this.inputBox = document.getElementById('dialog-input');
      this.textareaBox = document.getElementById('dialog-textarea');

      this.dialogBgEl.addEventListener('click', this._bgClicked);
      this.cancelButton.addEventListener('click', this._cancelClicked);
      this.okButton.addEventListener('click', this._okClicked);

      this.Reset();
    }

    Position()
    {
      if (!this.enabled) return false;
      let size = Affinity2018.getSize(this.dialogEl),
        left = 0 - (size.width / 2),
        top = 0 - (size.height / 2);
      this.dialogEl.style.marginLeft = left + 'px';
      this.dialogEl.style.marginTop = top + 'px';
    }

    Reset()
    {
      if (!this.enabled) return false;
      clearTimeout(this._resetTimeout);
      this._resetTimeout = null;
      this.ContentNode.innerHTML = '';
      this.data = Affinity2018.objectDeepMerge({}, this.default);
    }

    Set(mixed)
    {
      if (!this.enabled) return false;
      clearTimeout(this.resetTimout);
      if (Affinity2018.isDomElement(mixed))
      {
        this.ContentNode.appendChild(mixed);
      }
      else
      {
        // TODO: string? array? object? Dunno!
        let innerHTML = this.ContentNode.innerHTML;
        this.ContentNode.innerHTML = innerHTML + mixed;
      }
    }

    Show(data)
    {
      if (!this.enabled) return false;
      this.Reset();
      if (Affinity2018.Type(data) === 'string')
        this.data = Affinity2018.objectDeepMerge(this.default, { message: data.toString() });
      else if (Affinity2018.Type(data) === 'object')
        this.data = Affinity2018.objectDeepMerge(this.default, data);
      else
        this.data = Affinity2018.objectDeepMerge({}, this.default);
      this.data.onOk = function () { };
      this.data.onCancel = function () { };
      this.data.onClose = function () { };
      if (data.hasOwnProperty('onOk') && Affinity2018.isFunction(data.onOk)) this.data.onOk = data.onOk;
      if (data.hasOwnProperty('onCancel') && Affinity2018.isFunction(data.onCancel)) this.data.onCancel = data.onCancel;
      if (data.hasOwnProperty('onOk') && Affinity2018.isFunction(data.onClose)) this.data.onClose = data.onClose;
      this._setMessage(this.data);
      this._setInput(this.data);
      this._setButtons(this.data);
      this.dialogBgEl.classList.add('show');
      this.dialogEl.classList.add('show');
      this.Position();
      this.Open = true;
    }

    Hide()
    {
      if (!this.enabled) return false;
      clearTimeout(this._resetTimeout);
      this.dialogBgEl.classList.remove('show');
      this.dialogEl.classList.remove('show');
      this.data.onClose();
      this._resetTimeout = setTimeout(this.Reset, 300);
      this.Open = false;
    }

    _setMessage()
    {
      this.ContentNode.innerHTML = '';
      this.ContentNode.classList.add(this.data.textAlign.replace(/\s/gi, '').trim());
      this.Set(this.data.message);
    }

    _setInput()
    {
      this.inputEl.classList.add('hidden');
      this.inputBox.classList.add('hidden');
      this.textareaBox.classList.add('hidden');
      if (
        this.data.hasOwnProperty('input')
        && Affinity2018.isPropObject(this.data, 'input')
        && Affinity2018.isPropBool(this.data.input, 'show')
        && this.data.input.show
      )
      {
        if (this.data.input.lines > 1)
        {
          this.textareaBox.rows = this.data.input.lines;
          this.textareaBox.placeholder = this.data.input.placeholder;
          this.textareaBox.value = this.data.input.default;
          this.textareaBox.classList.remove('hidden');
          this.textareaBox.parentElement.classList.remove('hidden');
        }
        else
        {
          this.inputBox.placeholder = this.data.input.placeholder;
          this.inputBox.value = this.data.input.default;
          this.inputBox.classList.remove('hidden');
          this.inputBox.parentElement.classList.remove('hidden');
        }
      }
      else
      {
        // support depricated 'showInput'
        if (this.data.showInput)
        {
          if (this.data.inputLines === 1)
          {
            this.inputBox.classList.remove('hidden');
          }
          else
          {
            this.textareaBox.rows = this.data.inputLines;
            this.textareaBox.classList.remove('hidden');
          }
          this.inputEl.classList.remove('hidden');
        }
      }
    }

    _setButtons()
    {
      var gotOk = false, gotCancel = false;
      if (this.data.buttons)
      {
        if (this.data.buttons.ok)
        {
          if (
            this.data.buttons.ok.hasOwnProperty('show')
            && typeof this.data.buttons.ok.show === 'boolean'
            && this.data.buttons.ok.show === true
          )
          {
            this.okButton.innerHTML = `<span class="icon-` + this.data.buttons.ok.icon + `"></span>` + this.data.buttons.ok.text;
            this.okButton.className = 'button ok';
            this.okButton.classList.add(this.data.buttons.ok.color);
            this.buttonsEl.classList.remove('hidden');
            gotOk = true;
          }
          else
          {
            this.okButton.classList.add('hidden');
          }
        }
        if (this.data.buttons.cancel)
        {
          if (
            this.data.buttons.cancel.hasOwnProperty('show')
            && typeof this.data.buttons.cancel.show === 'boolean'
            && this.data.buttons.cancel.show === true
          )
          {
            this.cancelButton.innerHTML = `<span class="icon-` + this.data.buttons.cancel.icon + `"></span>` + this.data.buttons.cancel.text;
            this.cancelButton.className = 'button cancel';
            this.cancelButton.classList.add(this.data.buttons.cancel.color);
            this.buttonsEl.classList.remove('hidden');
            gotCancel = true;
          }
          else
          {
            this.cancelButton.classList.add('hidden');
          }
        }
      }
      // support depricated 'showOk'
      if (!this.data.showOk)
      {
        this.okButton.classList.add('hidden');
        gotOk = false;
      }
      // support depricated 'showCancel'
      if (!this.data.showCancel)
      {
        this.cancelButton.classList.add('hidden');
        gotCancel = false;
      }
      if (gotOk === false && gotCancel === false)
      {
        this.buttonsEl.classList.add('hidden');
      }
    }

    _okClicked()
    {
      this.Hide();
      if (!this.inputBox.classList.contains('hidden')) this.data.onOk(this.inputBox.value);
      else if (!this.textareaBox.classList.contains('hidden')) this.data.onOk(this.textareaBox.value);
      else this.data.onOk();
    }

    _cancelClicked()
    {
      this.Hide();
      this.data.onCancel();
    }

    _bgClicked()
    {
      if (this.data.canBackgroundClose)
      {
        this.Hide();
      }
    }

  };


  /***************************************************************************************************************************************************/
  /***************************************************************************************************************************************************/
  /***                                                                                                                     ***************************/
  /***    █████  ███████ ███████ ██ ███    ██ ██ ████████ ██    ██      █████  ██    ██  █████  ████████  █████  ██████    ***************************/
  /***   ██   ██ ██      ██      ██ ████   ██ ██    ██     ██  ██      ██   ██ ██    ██ ██   ██    ██    ██   ██ ██   ██   ***************************/
  /***   ███████ █████   █████   ██ ██ ██  ██ ██    ██      ████       ███████ ██    ██ ███████    ██    ███████ ██████    ***************************/
  /***   ██   ██ ██      ██      ██ ██  ██ ██ ██    ██       ██        ██   ██  ██  ██  ██   ██    ██    ██   ██ ██   ██   ***************************/
  /***   ██   ██ ██      ██      ██ ██   ████ ██    ██       ██        ██   ██   ████   ██   ██    ██    ██   ██ ██   ██   ***************************/
  /***                                                                                                                     ***************************/
  /***************************************************************************************************************************************************/
  /****************************************************************************************************************** Source63 *** affinity Avatar ***/


  Affinity2018.Classes.Avatar = class
  {
    constructor()
    {
      [
        'Reset',
        'Set',
        '_clearFile',
        '_editClicked',
        '_imageAdded',
        '_setNewImage'
      ].bindEach(this);

      this.enabled = false;
      if (document.getElementsByClassName('avatar-image')) this.enabled = true;

      this.supportedExt = ['png', 'jpg', 'jpeg', 'gif'];
      this.maxSize = 2097152; // 2 MB
      this.maxWidth = 1000;
      this.maxHeight = 1000;

      this.head = document.getElementsByTagName('head')[0];
      this.body = document.getElementsByTagName('body')[0];
      this.avatarEditButton = document.getElementById('avatar-edit');
      this.avatarEditFileInput = document.createElement('input');
      this.avatarEditFileInput.setAttribute('type', 'file');

      this.avatarEditButton.addEventListener('click', this._editClicked);
      this.avatarEditFileInput.addEventListener('change', this._imageAdded);

      if (Affinity2018.Tooltips) Affinity2018.Tooltips.Apply();
    }

    Reset()
    {
      if (!this.enabled) return false;
      let avatarDisplays = document.getElementsByClassName('avatar-image'), a = 0, el, editEl;
      if (avatarDisplays.length > 0)
      {
        for (; a < avatarDisplays.length; a++)
        {
          el = avatarDisplays[a];
          el.classList.add('default');
          el.removeAttribute('style');
          if (el.getElementsByClassName('avatar-edit'))
          {
            editEl = el.getElementsByClassName('avatar-edit')[0];
            editEl.classList.remove('small');
          }
        }
      }
    }

    Get()
    {
      //TODO: GET imageData from API
      /*
      axios.get('//path/to/avatar/get/api', {
        params: {
          employeeNumber: employeeNumber,
          companyNumber: companyNumber
        }
      })
        .then(function (response)
        {
          this.Set(response.data);
        }.bind(this));
      */
    }

    Set(imageData)
    {
      if (!this.enabled) return false;
      let avatarDisplays = document.getElementsByClassName('avatar-image'), a = 0, el, editEl;
      if (avatarDisplays.length > 0)
      {
        for (; a < avatarDisplays.length; a++)
        {
          el = avatarDisplays[a];
          el.classList.remove('default');
          el.style.backgroundImage = 'url(' + imageData + ')';
          if (el.getElementsByClassName('avatar-edit'))
          {
            editEl = el.getElementsByClassName('avatar-edit')[0];
            editEl.classList.add('small');
          }
        }
      }
      //TODO: POST imageData to API
      /*
      axios.post('//path/to/avatar/post/api', {
        imageData: imageData,
        employeeNumber: employeeNumber,
        companyNumber: companyNumber
      });
      */
      console.log(imageData);
    }

    _clearFile()
    {
      this.avatarEditFileInput.value = '';
      if (this.crooperObj) this.crooperObj.destroy();
    }

    _editClicked()
    {
      if (!this.enabled) return false;
      Affinity2018.ShowPageLoader();
      let editEl = document.createElement('div'),
        introEl = document.createElement('div'),
        dragEl = document.createElement('div'),
        fileEl = this.avatarEditFileInput;
      introEl.innerHTML = 'Drag an image below';
      dragEl.classList.add('drag-box');
      fileEl.type = 'file';
      fileEl.classList.add('obscured-file-input');
      dragEl.appendChild(fileEl);
      editEl.appendChild(introEl);
      editEl.appendChild(introEl);
      editEl.appendChild(dragEl);
      if (!window.hasOwnProperty('Cropper'))
      {
        let script = document.createElement('script'),
          style = document.createElement('link');
        style.setAttribute('href', 'https:/' + '/cdnjs.cloudflare.com/ajax/libs/cropperjs/1.3.6/cropper.min.css');
        style.setAttribute('rel', 'stylesheet');
        style.setAttribute('nonce', 'a9e3b03a6fd6ba6582578c3ad5393ee54b2b6acb==');
        script.setAttribute('src', 'https:/' + '/cdnjs.cloudflare.com/ajax/libs/cropperjs/1.3.6/cropper.min.js');
        script.setAttribute('nonce', 'a9e3b03a6fd6ba6582578c3ad5393ee54b2b6acb==');
        script.onload = function ()
        {
          Affinity2018.HidePageLoader();
          Affinity2018.Dialog.Show({
            message: editEl,
            onCancel: this._clearFile
          });
        }.bind(this);
        this.head.appendChild(style);
        this.body.appendChild(script);
      }
      else
      {
        Affinity2018.HidePageLoader();
        Affinity2018.Dialog.Show({
          message: editEl,
          onCancel: this._clearFile
        });
      }
    }

    _imageAdded()
    {

      let container = document.createElement('div'),
        cropper = document.createElement('div'),
        preview = document.createElement('div'),
        previewImg = document.createElement('img'),
        image = document.createElement('img'),
        reader = new FileReader(),
        file = this.avatarEditFileInput.files[0],
        ext = file.type.replace('image/', '').toLowerCase(),
        testReader = new FileReader(),
        testImage = new Image();

      if (!this.supportedExt.includes(ext))
      {
        Affinity2018.Dialog.Show({
          message: 'Your image must be a "' + this.supportedExt.join('","') + '"',
          onOk: this._editClicked
        });
        this._clearFile();
        return;
      }

      if (file.size > this.maxSize)
      {
        Affinity2018.Dialog.Show({
          message: 'Your image must be no bigger than ' + Math.round(this.maxSize / 1024) + 'kb. Yours is ' + Math.round(file.size / 1024) + 'kb',
          onOk: this._editClicked
        });
        this._clearFile();
        return;
      }

      testReader.onload = function ()
      {
        testImage.onload = function ()
        {
          if (testImage.width > this.maxWidth || testImage.height > this.maxHeight)
          {
            Affinity2018.Dialog.Show({
              message: 'Your image can be no larger than ' + this.maxWidth + 'x' + this.maxHeight + '. Yours is ' + testImage.width + 'x' + testImage.height + '.',
              onOk: this._editClicked
            });
            this._clearFile();
            return;
          }
          else
          {
            Affinity2018.ShowPageLoader();
            container.classList.add('avatar-crop');
            cropper.classList.add('avatar-cropper');
            preview.classList.add('avatar-crop-preview');
            previewImg.width = 100;
            previewImg.height = 100;
            preview.appendChild(previewImg);
            cropper.appendChild(image);
            container.appendChild(preview);
            container.appendChild(cropper);
            reader.addEventListener('load', function ()
            {
              image.src = reader.result;
              Affinity2018.Dialog.Reset();
              this.crooperObj = new Cropper(image, {
                autoCrop: true,
                dragMode: 'move',
                aspectRatio: 1 / 1,
                autoCropArea: 0.8,
                viewMode: 0,
                preview: preview,
                rotatable: false,
                scalable: true,
                zoomable: true,
                toggleDragModeOnDblclick: false,
                minContainerWidth: 100,
                minContainerHeight: 100,
                minCanvasWidth: 100,
                minCanvasHeight: 100,
                minCropBoxWidth: 100,
                minCropBoxHeight: 100,
                ready: function ()
                {
                  Affinity2018.HidePageLoader();
                  Affinity2018.Dialog.Position();
                }
              });
              Affinity2018.Dialog.Show({
                message: container,
                onOk: this._setNewImage,
                onCancel: this._clearFile
              });
            }.bind(this), false);
            reader.readAsDataURL(file);
          }
        }.bind(this);
        testImage.src = testReader.result;
      }.bind(this);
      testReader.readAsDataURL(file);
    }

    _setNewImage()
    {
      let cropCanvas = this.crooperObj.getCroppedCanvas(),
        finalData = cropCanvas.toDataURL(),
        container = document.createElement('div'),
        text = document.createElement('div'),
        image = new Image();
      container.appendChild(text);
      container.appendChild(image);
      text.innerHTML = 'Save this image as your avatar?<br /><br />';
      image.width = 100;
      image.height = 100;
      image.onload = function ()
      {
        this._clearFile();
        Affinity2018.Dialog.Show({
          message: container,
          onOk: function ()
          {
            let canvas = document.createElement('canvas'),
              context = canvas.getContext('2d');
            canvas.width = 100;
            canvas.height = 100;
            context.drawImage(image, 0, 0, 100, 100);
            Affinity2018.Avatar.Set(canvas.toDataURL());
            this._clearFile();
          }.bind(this),
          onCancel: this._clearFile
        });
      }.bind(this);
      image.src = finalData;
    }

  };


  /***************************************************************************************************************************************************/
  /***************************************************************************************************************************************************/
  /***                                                                                                          **************************************/
  /***    █████  ███████ ███████ ██ ███    ██ ██ ████████ ██    ██     ██       ██████   ██████  ██ ███    ██   **************************************/
  /***   ██   ██ ██      ██      ██ ████   ██ ██    ██     ██  ██      ██      ██    ██ ██       ██ ████   ██   **************************************/
  /***   ███████ █████   █████   ██ ██ ██  ██ ██    ██      ████       ██      ██    ██ ██   ███ ██ ██ ██  ██   **************************************/
  /***   ██   ██ ██      ██      ██ ██  ██ ██ ██    ██       ██        ██      ██    ██ ██    ██ ██ ██  ██ ██   **************************************/
  /***   ██   ██ ██      ██      ██ ██   ████ ██    ██       ██        ███████  ██████   ██████  ██ ██   ████   **************************************/
  /***                                                                                                          **************************************/
  /***************************************************************************************************************************************************/
  /******************************************************************************************************************* Source63 *** affinity login ***/


  Affinity2018.Classes.Login = class
  {
    constructor()
    {
      [
        'showLogin', 'hideLogin',
        'checkEnterLogin',
        'doLogin',
        'loginCaptureEscape',
        'logout',
        'showOptions', 'showQuestions', 'showEmail', 'showEmailSent', 'showSms', 'showSmsSent', 'showReset',
        'disableClose', 'enableClose',
        'disableLogin', 'enableLogin',
        'getUsername', 'getPassword',
        'overrideAction'
      ].bindEach(this);

      this.isInline = false;
      this.enabled = false;
      this.IsOverriden = false;
      if (document.getElementById('affinity-login')) this.enabled = true;

      this.head = document.getElementsByTagName('head')[0];
      this.body = document.getElementsByTagName('body')[0];
      this.loginShakeRemoveTimer;
      this.loginPanel = document.querySelector('#affinity-login');
      this.loginInnerPanel = this.loginPanel.querySelector('.affinity-login-box.login');
      this.loginForm = this.loginInnerPanel.querySelector('form, .form');

      if (this.loginPanel.querySelector('.affinity-login-box.options'))
      {
        this.optionsInnerPanel = this.loginPanel.querySelector('.affinity-login-box.options');
        this.optionsForm = this.optionsInnerPanel.querySelector('form');
        this.questionsInnerPanel = this.loginPanel.querySelector('.affinity-login-box.questions');
        this.questionsForm = this.questionsInnerPanel.querySelector('form');
        this.emailInnerPanel = this.loginPanel.querySelector('.affinity-login-box.email');
        this.emailForm = this.emailInnerPanel.querySelector('form');
        this.emailSentInnerPanel = this.loginPanel.querySelector('.affinity-login-box.email-sent');
        this.emailSentForm = this.emailSentInnerPanel.querySelector('form');
        this.smsInnerPanel = this.loginPanel.querySelector('.affinity-login-box.sms');
        this.smsForm = this.smsInnerPanel.querySelector('form');
        this.smsSentInnerPanel = this.loginPanel.querySelector('.affinity-login-box.sms-sent');
        this.smsSentForm = this.smsSentInnerPanel.querySelector('form');
        this.resetInnerPanel = this.loginPanel.querySelector('.affinity-login-box.reset');

        this.resetForm = this.resetInnerPanel.querySelector('form');

        this.optionsButtons = this.loginPanel.querySelectorAll('.recovery-options');
        this.questionsButtons = this.loginPanel.querySelectorAll('.recovery-questions');
        this.emailButtons = this.loginPanel.querySelectorAll('.recovery-email');
        this.emailSentButtons = this.loginPanel.querySelectorAll('.recovery-email-sent');
        this.smsButtons = this.loginPanel.querySelectorAll('.recovery-sms');
        this.smsSentButtons = this.loginPanel.querySelectorAll('.recovery-sms-sent');
        this.nextButtons = this.loginPanel.querySelectorAll('.recovery-reset');
        this.loginButtons = this.loginPanel.querySelectorAll('.recovery-login');
      }
      else
      {
        this.loginForm.querySelector('.form-row.remember').classList.add('hidden');
        this.loginForm.querySelector('.form-row.forgot').classList.add('hidden');
        this.loginInnerPanel.classList.add('basic');
        if (this.loginPanel.querySelector('p.error-message'))
        {
          this.loginInnerPanel.classList.add('error');
          clearTimeout(this.loginShakeRemoveTimer);
          this.loginInnerPanel.classList.remove('shake');
          this.loginInnerPanel.classList.add('shake');
          this.loginShakeRemoveTimer = setTimeout(function ()
          {
            this.loginInnerPanel.classList.remove('shake');
          }.bind(this), 500);
        }
        else this.loginInnerPanel.classList.remove('error');
      }

      this.userBox = this.loginForm.querySelector('input[type=text]');
      this.passBox = this.loginForm.querySelector('input[type=password]');

      this.loginButton = this.mobileLoginButton = this.logoutButton = this.mobileLogoutButton = false;

      if (document.querySelector('#avatar-login-button')) this.loginButton = document.querySelector('#avatar-login-button');
      if (document.querySelector('#avatar-mobile-login-button')) this.mobileLoginButton = document.querySelector('#avatar-mobile-login-button');
      if (document.querySelector('#avatar-logout-button')) this.logoutButton = document.querySelector('#avatar-logout-button');
      if (document.querySelector('#avatar-mobile-logout-button')) this.mobileLogoutButton = document.querySelector('#avatar-mobile-logout-button');
      this.loginPanelLoginButton = document.querySelector('#affinity-login-button');
      this.closeButtons = document.querySelectorAll('.login-close');
      this.loginPanelCloseButton = this.loginInnerPanel.querySelector('.login-close');

      if (this.loginButton) this.loginButton.addEventListener('click', this.showLogin);
      if (this.mobileLoginButton) this.mobileLoginButton.addEventListener('click', this.showLogin);
      if (this.logoutButton) this.logoutButton.addEventListener('click', this.logout);
      if (this.mobileLogoutButton) this.mobileLogoutButton.addEventListener('click', this.logout);

      this.loginPanelLoginButton.addEventListener('click', this.doLogin);

      this.closeButtons.forEach(function (node) { node.addEventListener('click', this.hideLogin); }.bind(this));

      if (this.optionsInnerPanel)
      {
        this.optionsButtons.forEach(function (node) { node.addEventListener('click', this.showOptions); }.bind(this));
        this.questionsButtons.forEach(function (node) { node.addEventListener('click', this.showQuestions); }.bind(this));
        this.emailButtons.forEach(function (node) { node.addEventListener('click', this.showEmail); }.bind(this));
        this.emailSentButtons.forEach(function (node) { node.addEventListener('click', this.showEmailSent); }.bind(this));
        this.smsButtons.forEach(function (node) { node.addEventListener('click', this.showSms); }.bind(this));
        this.smsSentButtons.forEach(function (node) { node.addEventListener('click', this.showSmsSent); }.bind(this));
        this.nextButtons.forEach(function (node) { node.addEventListener('click', this.showReset); }.bind(this));
        this.loginButtons.forEach(function (node) { node.addEventListener('click', this.showLogin); }.bind(this));
      }

      this.userBox.addEventListener('keyup', this.checkEnterLogin);
      this.passBox.addEventListener('keyup', this.checkEnterLogin);

      if (Affinity2018.Tooltips) Affinity2018.Tooltips.Apply();
    }

    showLogin()
    {
      if (!this.enabled) return false;
      window.removeEventListener('keyup', this.loginCaptureEscape);
      window.addEventListener('keyup', this.loginCaptureEscape);
      this.loginPanel.querySelectorAll('.affinity-login-box').forEach(function (flowNode) { flowNode.classList.remove('show'); });
      this.loginPanel.classList.add('enabled');
      this.loginInnerPanel.classList.add('show');
    }

    checkEnterLogin(ev)
    {
      if (!this.enabled) return false;
      if ('key' in ev && ev.key.toLowerCase() === 'enter')
      {
        if (this.userBox.value.length > 0 && this.passBox.value.length > 0)
        {
          this.doLogin();
        }
      }
    }

    resetUserDisplay()
    {
      if (!this.enabled) return false;
      let userDisplays = document.getElementsByClassName('user-display'), u = 0;
      if (userDisplays.length > 0)
      {
        for (; u < userDisplays.length; u++)
        {
          userDisplays[u].innerHTML = '';
        }
      }
      document.getElementsByClassName('avatar-label user-display')[0].innerHTML = 'Login';
    }

    setUserDisplay(userName)
    {
      if (!this.enabled) return false;
      let userDisplays = document.getElementsByClassName('user-display'), u = 0;
      if (userDisplays.length > 0)
      {
        for (; u < userDisplays.length; u++)
        {
          userDisplays[u].innerHTML = userName;
        }
      }
    }

    doLogin(ev)
    {
      Affinity2018.stopEvent(ev);
      if (!this.enabled) return false;
      if (this.loginInnerPanel.querySelector('p.error-message')) this.loginInnerPanel.querySelector('p.error-message').parentNode.removeChild(this.loginInnerPanel.querySelector('p.error-message'));
      this.loginInnerPanel.classList.remove('error');
      if (this.userBox.value.length > 0 && this.passBox.value.length > 0)
      {
        if (this.loginPanel.classList.contains('native-form'))
        {
          this.loginPanelLoginButton.classList.add('disabled');
          this.loginInnerPanel.classList.add('bounce');
          document.querySelector('form').submit();
        }
        else
        {
          if (this.loginButton) this.loginButton.classList.add('hidden');
          if (this.mobileLoginButton) this.mobileLoginButton.classList.add('hidden');
          if (this.logoutButton) this.logoutButton.classList.remove('hidden');
          if (this.mobileLogoutButton) this.mobileLogoutButton.classList.remove('hidden');
          if (!this.isInline) this.hideLogin();
          // TODO: get user profile data and pass it to Avatar
          this.setUserDisplay('John Doe');
          if (Affinity2018.Avatar) Affinity2018.Avatar.Get(this.userBox.value);
          if (!this.IsOverriden) window.dispatchEvent(new Event('loggedin'));
        }
      }
      else
      {
        clearTimeout(this.loginShakeRemoveTimer);
        this.loginInnerPanel.classList.add('error');
        var highlightNode = this.loginInnerPanel.querySelector('p.highlight');
        var errorNode = document.createElement('p');
        errorNode.classList.add('error-message');
        errorNode.innerHTML = 'You must enter a username and password';
        highlightNode.parentNode.insertBefore(errorNode, highlightNode)
        this.loginInnerPanel.classList.remove('shake');
        this.loginInnerPanel.classList.add('shake');
        this.loginShakeRemoveTimer = setTimeout(function ()
        {
          this.loginInnerPanel.classList.remove('shake');
        }.bind(this), 500);
      }
    }

    loginCaptureEscape(ev)
    {
      if (!this.enabled) return false;
      if ('key' in ev && ev.key.toLowerCase() === 'escape')
      {
        this.hideLogin();
      }
    }

    hideLogin()
    {
      if (!this.enabled) return false;
      this.loginPanel.querySelectorAll('.affinity-login-box').forEach(function (flowNode) { flowNode.classList.remove('show'); });
      window.removeEventListener('keyup', this.loginCaptureEscape);
      this.userBox.value = '';
      this.passBox.value = '';
      this.loginPanel.classList.remove('enabled');
    }

    logout()
    {
      if (!this.enabled) return false;
      this.resetUserDisplay();
      if (this.loginButton) this.loginButton.classList.remove('hidden');
      if (this.mobileLoginButton) this.mobileLoginButton.classList.remove('hidden');
      if (this.logoutButton) this.logoutButton.classList.add('hidden');
      if (this.mobileLogoutButton) this.mobileLogoutButton.classList.add('hidden');
      Affinity2018.Avatar.Reset();
      if (!this.IsOverriden) window.dispatchEvent(new Event('loggedout'));
    }

    preventLinkEvent(ev)
    {
      if (typeof ev === 'object' && ev.target && ev.target.tagName)
      {
        if (ev.target.tagName.toLowerCase() === 'a')
        {
          ev.preventDefault();
          ev.stopPropagation();
        }
        else
        {
          if (Affinity2018.getParent(ev.target, 'a'))
          {
            ev.preventDefault();
            ev.stopPropagation();
          }
        }
      }
    }

    showOptions(ev)
    {
      this.preventLinkEvent(ev);
      if (!this.enabled) return false;
      this.loginPanel.querySelectorAll('.affinity-login-box').forEach(function (flowNode) { flowNode.classList.remove('show'); });
      this.optionsInnerPanel.classList.add('show');
    }

    showQuestions(ev)
    {
      this.preventLinkEvent(ev);
      if (!this.enabled) return false;
      this.loginPanel.querySelectorAll('.affinity-login-box').forEach(function (flowNode) { flowNode.classList.remove('show'); });
      this.questionsInnerPanel.classList.add('show');
    }

    showEmail(ev)
    {
      this.preventLinkEvent(ev);
      if (!this.enabled) return false;
      this.loginPanel.querySelectorAll('.affinity-login-box').forEach(function (flowNode) { flowNode.classList.remove('show'); });
      this.emailInnerPanel.classList.add('show');
    }

    showEmailSent(ev)
    {
      this.preventLinkEvent(ev);
      if (!this.enabled) return false;
      this.loginPanel.querySelectorAll('.affinity-login-box').forEach(function (flowNode) { flowNode.classList.remove('show'); });
      this.emailSentInnerPanel.classList.add('show');
    }

    showSms(ev)
    {
      this.preventLinkEvent(ev);
      if (!this.enabled) return false;
      this.loginPanel.querySelectorAll('.affinity-login-box').forEach(function (flowNode) { flowNode.classList.remove('show'); });
      this.smsInnerPanel.classList.add('show');
    }

    showSmsSent(ev)
    {
      this.preventLinkEvent(ev);
      if (!this.enabled) return false;
      this.loginPanel.querySelectorAll('.affinity-login-box').forEach(function (flowNode) { flowNode.classList.remove('show'); });
      this.smsSentInnerPanel.classList.add('show');
    }

    showReset(ev)
    {
      this.preventLinkEvent(ev);
      if (!this.enabled) return false;
      this.loginPanel.querySelectorAll('.affinity-login-box').forEach(function (flowNode) { flowNode.classList.remove('show'); });
      this.resetInnerPanel.classList.add('show');
    }

    disableClose()
    {
      this.loginPanelCloseButton.classList.add('hidden');
    }

    enableClose()
    {
      this.loginPanelCloseButton.classList.remove('hidden');
    }

    disableLogin()
    {
      this.loginPanelCloseButton.classList.add('hidden');
    }

    enableLogin()
    {
      this.loginPanelCloseButton.classList.remove('hidden');
    }

    getUsername()
    {
      return this.userBox.value.trim();
    }

    getPassword()
    {
      return this.passBox.value.trim();
    }

    overrideAction(method)
    {
      if (method && typeof method === 'function')
      {
        this.loginPanelLoginButton.removeEventListener('click', this.doLogin);
        this.loginPanelLoginButton.addEventListener('click', method);
        this.IsOverriden = true;
      }
    }

  };


  /***************************************************************************************************************************************************/
  /***************************************************************************************************************************************************/
  /***                                                                                                                         ***********************/
  /***    █████  ███████ ███████ ██ ███    ██ ██ ████████ ██    ██     ██████   █████  ████████ ███████     ██    ██ ███████   ***********************/
  /***   ██   ██ ██      ██      ██ ████   ██ ██    ██     ██  ██      ██   ██ ██   ██    ██    ██          ██    ██ ██        ***********************/
  /***   ███████ █████   █████   ██ ██ ██  ██ ██    ██      ████       ██████  ███████    ██    █████       ██    ██ ███████   ***********************/
  /***   ██   ██ ██      ██      ██ ██  ██ ██ ██    ██       ██        ██   ██ ██   ██    ██    ██          ██    ██      ██   ***********************/
  /***   ██   ██ ██      ██      ██ ██   ████ ██    ██       ██        ██   ██ ██   ██    ██    ███████      ██████  ███████   ***********************/
  /***                                                                                                                         ***********************/
  /***************************************************************************************************************************************************/
  /***************************************************************************************************************** Source63 *** affinity rate us ***/


  Affinity2018.Classes.RateUs = class
  {
    constructor()
    {
      [
        'rate',
        'results'
      ].bindEach(this);

      this.enabled = false;
      if (document.getElementById('rate-us')) this.enabled = true;
      else return;
      this.ratings = [0, 1, 27, 59, 102];
      this.ratingLabels = ['Very Dissatisfied', 'Dissatisfied', 'Neutral', 'Satisfied', 'Very Satisfied'];
      this.rateBox = document.getElementById('rate-us');
      this.titleBox = this.rateBox.getElementsByClassName('rate-title')[0];
      this.rateIconBox = this.rateBox.getElementsByClassName('rate-sentiments')[0];
      this.rateResultBox = this.rateBox.getElementsByClassName('rate-results')[0];
      this.rateIcons = Array.prototype.slice.call(this.rateIconBox.getElementsByClassName('rate-sentiment'));
      this.rateBars = Array.prototype.slice.call(this.rateResultBox.getElementsByClassName('rate-result'));
      let r = 0, iconEl;
      if (this.rateIcons && this.rateIcons.length > 0)
      {
        for (; r < this.rateIcons.length; r++)
        {
          iconEl = this.rateIcons[r];
          iconEl.addEventListener('click', this.rate);
        }
      }
      if (Affinity2018.Tooltips) Affinity2018.Tooltips.Apply();
    }

    rate(e)
    {
      if (!this.enabled) return false;
      let target = Affinity2018.getParent(e.target, 'rate-sentiment'),
        index = this.rateIcons.indexOf(target);
      if (target && index > -1 && index < this.ratings.length) this.ratings[index]++;
      this.results();
    }

    results()
    {
      if (!this.enabled) return false;
      let r = 0,
        max = Math.max.apply(null, this.ratings),
        //total = this.ratings.reduce((a, b) => a + b, 0),
        total = this.ratings.reduce(function (a, b) { return a + b; }, 0),
        per, barPer, barEl;
      if (this.rateBars && this.rateIcons.length > 0)
      {
        for (; r < this.rateBars.length; r++)
        {
          per = ((this.ratings[r] / total) * 100);
          barPer = ((this.ratings[r] / max) * 100);
          barEl = this.rateBars[r].getElementsByClassName('bar')[0];
          barEl.style.height = barPer + '%';
          barEl.dataset.tooltip = Number.parseFloat(per).toFixed(2) + '% are ' + this.ratingLabels[r];
          Affinity2018.Tooltips.Apply(barEl);
        }
      }
      this.titleBox.innerHTML = 'User Satisfaction';
      this.rateIconBox.classList.add('hidden');
      this.rateResultBox.classList.remove('hidden');
    }

  };


  /***************************************************************************************************************************************************/
  /***************************************************************************************************************************************************/
  /***                                                                                  **************************************************************/
  /***   ██████   █████   ██████  ██ ███    ██  █████  ████████ ██  ██████  ███    ██   **************************************************************/
  /***   ██   ██ ██   ██ ██       ██ ████   ██ ██   ██    ██    ██ ██    ██ ████   ██   **************************************************************/
  /***   ██████  ███████ ██   ███ ██ ██ ██  ██ ███████    ██    ██ ██    ██ ██ ██  ██   **************************************************************/
  /***   ██      ██   ██ ██    ██ ██ ██  ██ ██ ██   ██    ██    ██ ██    ██ ██  ██ ██   **************************************************************/
  /***   ██      ██   ██  ██████  ██ ██   ████ ██   ██    ██    ██  ██████  ██   ████   **************************************************************/
  /***                                                                                  **************************************************************/
  /***************************************************************************************************************************************************/
  /*********************************************************************************************************************** Source63 *** pagination ***/


  Affinity2018.Classes.Pagination = class
  {
    constructor()
    {
      [
        'Apply',
        'Remove',
        '_applyTo'
      ].bindEach(this);
      this.enabled = true;
      this.paginationControllers = {};
    }

    Apply(el)
    {
      if (!this.enabled) return false;
      if (el !== undefined && el !== null)
      {
        this._applyTo(el);
      }
      else
      {
        document.querySelectorAll('.ui-pagination').forEach(this._applyTo);
      }
    }

    _applyTo(el)
    {
      if (Affinity2018.isDomElement(el) && el.hasAttribute('data-pages-total'))
      {
        let id, data, exists = false;
        for (id in this.paginationControllers)
        {
          data = this.paginationControllers[id];
          if (data.el === el)
          {
            exists = true;
            data.controller.Update();
            break;
          }
        }
        if (!exists)
        {
          let data = {
            id: 'pg' + Affinity2018.uuid(),
            el: el,
            pages: parseInt(el.dataset.pagesTotal),
            controller: new Affinity2018.Classes.PaginationControler(el)
          };
          el.dataset.pagesId = data.id;
          this.paginationControllers[data.id] = data;
        }
      }
    }

    Remove(el)
    {
      if (Affinity2018.isDomElement(el))
      {
        let id, data;
        for (id in this.paginationControllers)
        {
          data = this.paginationControllers[id];
          if (data.el === el)
          {
            data.controller.Destroy();
            this.paginationControllers[data.id] = null;
            delete this.paginationControllers[data.id];
            break;
          }
        }
      }
    }
  };

  Affinity2018.Classes.PaginationControler = class
  {

    constructor(target)
    {
      if (!Affinity2018.isDomElement(target)) return;
      target.classList.remove('ui-pagination');
      target.classList.add('pg');

      [
        'Update',
        'Back',
        'Forward',
        'JumpPage',
        '_goPage', '_moreBack', '_moreForward', '_resetPages',
        'Destroy'
      ].bindEach(this);

      this.container = target;

      let pageEls = this.container.querySelectorAll('a.page, a.current');
      this.totalPages = parseInt(this.container.dataset.pagesTotal);
      this.currentPage = parseInt(this.container.dataset.pagesCurrent);

      this.container.removeAttribute('data-pages-total');
      this.container.removeAttribute('data-pages-current');

      this.backEl = this.container.querySelector('a.back');
      this.forwardEl = this.container.querySelector('a.forward');

      this.quickBackEl = this.container.querySelector('a.first-page');
      this.quickFormardEl = this.container.querySelector('a.last-page');

      this.moreBackEl = this.container.querySelector('a.more-back');
      this.moreFormardEl = this.container.querySelector('a.more-forward');

      pageEls.forEach(function (el)
      {
        el.addEventListener('click', this._goPage, false);
      }.bind(this));

      if (this.backEl) this.backEl.addEventListener('click', this.Back, false);
      if (this.quickBackEl) this.quickBackEl.addEventListener('click', this._goPage, false);
      if (this.moreBackEl) this.moreBackEl.addEventListener('click', this._moreBack, false);

      if (this.moreFormardEl) this.moreFormardEl.addEventListener('click', this._moreForward, false);
      if (this.quickFormardEl) this.quickFormardEl.addEventListener('click', this._goPage, false);
      if (this.forwardEl) this.forwardEl.addEventListener('click', this.Forward, false);

      [
        this.backEl,
        this.quickBackEl,
        this.moreBackEl,
        this.moreFormardEl,
        this.quickFormardEl,
        this.forwardEl
      ].forEach(function (el)
      {
        if (el) el.addEventListener('mousedown', this._preventEvent, false);
        if (el) el.addEventListener('dblclick', this._preventSelection, false);
      }.bind(this));

      if (this.currentPage !== 1)
      {
        this.JumpPage(this.currentPage);
      }

    }

    Update()
    {

    }

    Back(ev)
    {
      let button = ev.target, pageNum = this.currentPage - 1 < 1 ? 1 : this.currentPage - 1;
      if (!button.classList.contains('disabled')) this._resetPages(pageNum);
      if (ev) this._preventEvent(ev);
    }

    Forward(ev)
    {
      let button = ev.target, pageNum = this.currentPage + 1 > this.totalPages ? this.totalPages : this.currentPage + 1;
      if (!button.classList.contains('disabled')) this._resetPages(pageNum);
      if (ev) this._preventEvent(ev);
    }

    JumpPage(pageNum)
    {
      this._resetPages(pageNum);
    }

    _preventEvent(ev)
    {
      ev.stopPropagation();
      ev.preventDefault();
    }

    _preventSelection(ev)
    {
      if (window.getSelection) window.getSelection().removeAllRanges();
      else if (document.selection) document.selection.empty();
    }

    _goPage(ev)
    {
      let pageEl = ev.target, pageNum = parseInt(pageEl.innerHTML);
      if (!pageEl.classList.contains('current')) this._resetPages(pageNum);
      if (ev) this._preventEvent(ev);
    }

    _moreForward(ev)
    {
      let pageNum = this.currentPage + 4 > this.totalPages ? this.totalPages : this.currentPage + 4;
      this._resetPages(pageNum);
      if (ev) this._preventEvent(ev);
    }

    _moreBack(ev)
    {
      let pageNum = this.currentPage - 4 > 0 ? this.currentPage - 4 : 1;
      this._resetPages(pageNum);
      if (ev) this._preventEvent(ev);
    }

    _resetPages(pageNum)
    {
      let changed = this.currentPage !== pageNum ? true : false,
        count = pageNum + 0;

      this.currentPage = pageNum;
      this.backEl.classList.add('disabled');
      this.forwardEl.classList.add('disabled');

      if (pageNum > 1) this.backEl.classList.remove('disabled');
      if (pageNum < this.totalPages) this.forwardEl.classList.remove('disabled');
      if (pageNum < 4) count = 1;
      if (pageNum > 3) count = pageNum - 2;
      if (pageNum + 4 >= this.totalPages) count = this.totalPages - 4;

      this.container.querySelectorAll('a.page, a.current').forEach(function (el)
      {
        el.classList.add('page');
        el.classList.remove('current');
        if (count === pageNum)
        {
          el.classList.remove('page');
          el.classList.add('current');
        }
        el.innerHTML = count++;
      });

      this.quickBackEl.innerHTML = 1;
      this.quickFormardEl.innerHTML = this.totalPages;

      if (pageNum < 4)
      {
        this.moreBackEl.classList.add('hide');
        this.quickBackEl.classList.add('hide');
      }
      else
      {
        this.moreBackEl.classList.remove('hide');
        this.quickBackEl.classList.remove('hide');
      }

      if (count > this.totalPages)
      {
        this.moreFormardEl.classList.add('hide');
        this.quickFormardEl.classList.add('hide');
      }
      else
      {
        this.moreFormardEl.classList.remove('hide');
        this.quickFormardEl.classList.remove('hide');
      }

      this._preventSelection();
      if (changed)
      {
        this.container.dispatchEvent(new CustomEvent('change', { detail: pageNum }));
      }
    }

    Destroy()
    {
      this.enabled = false;

      this.container.removeAttribute.remove('data-pages-id');
      this.container.classList.remove('pg');
      this.container.Controller = null;

      this.container.querySelectorAll('a.page, a.current').forEach(function (el)
      {
        el.removeEventListener('click', this._goPage, false);
        el.removeEventListener('mousedown', this._preventEvent, false);
        el.removeEventListener('dblclick', this._preventSelection, false);
        el = null;
      }.bind(this));

      if (this.backEl) this.backEl.removeEventListener('click', this.Back, false);
      if (this.quickBackEl) this.quickBackEl.removeEventListener('click', this._goPage, false);
      if (this.moreBackEl) this.moreBackEl.removeEventListener('click', this._moreBack, false);
      if (this.moreFormardEl) this.moreFormardEl.removeEventListener('click', this._moreForward, false);
      if (this.quickFormardEl) this.quickFormardEl.removeEventListener('click', this._goPage, false);
      if (this.forwardEl) this.forwardEl.removeEventListener('click', this.Forward, false);

      [
        this.backEl,
        this.quickBackEl,
        this.moreBackEl,
        this.moreFormardEl,
        this.quickFormardEl,
        this.forwardEl
      ].forEach(function (el)
      {
        if (el) el.removeEventListener('mousedown', this._preventEvent, false);
        if (el) el.removeEventListener('dblclick', this._preventSelection, false);
        el = null;
      }.bind(this));

      this.backEl = null;
      this.quickBackEl = null;
      this.moreBackEl = null;
      this.moreFormardEl = null;
      this.quickFormardEl = null;
      this.forwardEl = null;

      this.container.innerHTML = false;
      delete this.container['Controller'];
      if (Affinity2018.Pagination) Affinity2018.Pagination.Remove(this.container);
      this.container = null;

      delete this['container'];
    }

  };


  /***************************************************************************************************************************************************/
  /***************************************************************************************************************************************************/
  /***                                                                        ************************************************************************/
  /***   ██    ██ ███████ ███████ ██████      ██ ███    ██ ███████  ██████    ************************************************************************/
  /***   ██    ██ ██      ██      ██   ██     ██ ████   ██ ██      ██    ██   ************************************************************************/
  /***   ██    ██ ███████ █████   ██████      ██ ██ ██  ██ █████   ██    ██   ************************************************************************/
  /***   ██    ██      ██ ██      ██   ██     ██ ██  ██ ██ ██      ██    ██   ************************************************************************/
  /***    ██████  ███████ ███████ ██   ██     ██ ██   ████ ██       ██████    ************************************************************************/
  /***                                                                        ************************************************************************/
  /***************************************************************************************************************************************************/
  /************************************************************************************************************************ Source63 *** user info ***/


  Affinity2018.Classes.UserInfo = class
  {
    options()
    {
    }

    constructor()
    {
      this.options();
      [
        'Apply'
      ].bindEach(this);
      this.Apply();
    }

    Apply()
    {
    }

  };

  /***************************************************************************************************************************************************/
  /***************************************************************************************************************************************************/
  /***                                                                              ******************************************************************/
  /***   ██   ██ ███████ ██      ██████      ██      ██ ███    ██ ██   ██ ███████   ******************************************************************/
  /***   ██   ██ ██      ██      ██   ██     ██      ██ ████   ██ ██  ██  ██        ******************************************************************/
  /***   ███████ █████   ██      ██████      ██      ██ ██ ██  ██ █████   ███████   ******************************************************************/
  /***   ██   ██ ██      ██      ██          ██      ██ ██  ██ ██ ██  ██       ██   ******************************************************************/
  /***   ██   ██ ███████ ███████ ██          ███████ ██ ██   ████ ██   ██ ███████   ******************************************************************/
  /***                                                                              ******************************************************************/
  /***************************************************************************************************************************************************/
  /*********************************************************************************************************************** Source63 *** help links ***/

  Affinity2018.Classes.HelpLinks = class
  {
    options()
    {
      this.link = Affinity2018.Lang.ReturnPath('generic.contact.email');
    }

    constructor()
    {
      this.options();
      [
        'Apply'
      ].bindEach(this);

      this.Apply();
    }

    Apply()
    {
      this.link = Affinity2018.Lang.ReturnPath('generic.contact.email');
      if (Affinity2018.isString(this.link))
      {
        document.querySelectorAll('a.help-link').forEach(function (el, index)
        {
          el.setAttribute('href', 'mailto:' + this.link);
          el.innerHTML = this.link;
        }.bind(this));
      }
    }

  };

  /***************************************************************************************************************************************************/
  /***************************************************************************************************************************************************/
  /***                                                                             *******************************************************************/
  /***   ██████   █████  ██████  ██   ██     ███    ███  ██████  ██████  ███████   *******************************************************************/
  /***   ██   ██ ██   ██ ██   ██ ██  ██      ████  ████ ██    ██ ██   ██ ██        *******************************************************************/
  /***   ██   ██ ███████ ██████  █████       ██ ████ ██ ██    ██ ██   ██ █████     *******************************************************************/
  /***   ██   ██ ██   ██ ██   ██ ██  ██      ██  ██  ██ ██    ██ ██   ██ ██        *******************************************************************/
  /***   ██████  ██   ██ ██   ██ ██   ██     ██      ██  ██████  ██████  ███████   *******************************************************************/
  /***                                                                             *******************************************************************/
  /***************************************************************************************************************************************************/
  /************************************************************************************************************************ Source63 *** dark mode ***/

  new class
  {
    constructor()
    {
      ['init', 'onkey', 'set'].bindEach(this);
      this.scrollStyleNode = false;
      Affinity2018.DarkMode = false;
      if (!document.body) document.addEventListener("DOMContentLoaded", this.init);
      else this.init();
    }

    init()
    {
      if (!document.querySelector('style.scrollbars'))
      {
        this.scrollStyleNode = document.createElement('style');
        this.scrollStyleNode.nonce = 'a9e3b03a6fd6ba6582578c3ad5393ee54b2b6acb==';
        document.body.appendChild(this.scrollStyleNode);
      }
      Affinity2018.DarkMode = document.body.classList.contains('dark') ? true : false;
      if (Affinity2018.Storage.Local.Has('dark-mode')) Affinity2018.DarkMode = Affinity2018.Storage.Local.Get('dark-mode');
      if (window.location.href.contains('#dark'))
      {
        Affinity2018.DarkMode = true;
        Affinity2018.Storage.Local.Set('dark-mode', Affinity2018.DarkMode);
      }
      this.set();
      window.addEventListener('keyup', this.onkey);
      Affinity2018.CheckDarkMode = this.set;
    }

    onkey(ev)
    {
      if (ev.ctrlKey && ev.altKey && (ev.key === "d" || ev.key === "D"))
      {
        Affinity2018.DarkMode = !Affinity2018.DarkMode;
        Affinity2018.Storage.Local.Set('dark-mode', Affinity2018.DarkMode);
        this.set();
      }
    }

    set()
    {
      if (Affinity2018.DarkMode)
      {
        var color = '#222';
        if (document.body.classList.contains('dashboard')) color = '#222';
        document.body.classList.add('dark');
        var template = `
        ::-webkit-scrollbar-track {
          background: {0};
        }
        ::-webkit-scrollbar-thumb {
          border: 2px solid {0};
        }
        ::-webkit-resizer {
          background: {0};
        }
        `;
        this.scrollStyleNode.innerHTML = template.format(color);
      }
      else
      {
        var color = '#f5fafe';
        if (document.body.classList.contains('dashboard')) color = '#ddd';
        document.body.classList.remove('dark');
        var template = `
        ::-webkit-scrollbar-track {
          background: {0};
        }
        ::-webkit-scrollbar-thumb {
          border: 2px solid {0};
        }
        ::-webkit-resizer {
          background: {0};
        }
        `;
        this.scrollStyleNode.innerHTML = template.format(color);
      }
    }

  };


  /***************************************************************************************************************************************************/
  /***************************************************************************************************************************************************/
  /***                                                    ********************************************************************************************/
  /***   ███    ███  ██████  ██████  ██ ██      ███████   ********************************************************************************************/
  /***   ████  ████ ██    ██ ██   ██ ██ ██      ██        ********************************************************************************************/
  /***   ██ ████ ██ ██    ██ ██████  ██ ██      █████     ********************************************************************************************/
  /***   ██  ██  ██ ██    ██ ██   ██ ██ ██      ██        ********************************************************************************************/
  /***   ██      ██  ██████  ██████  ██ ███████ ███████   ********************************************************************************************/
  /***                                                    ********************************************************************************************/
  /***************************************************************************************************************************************************/
  /*************************************************************************************************************************** Source63 *** mobile ***/


  Affinity2018.MobileChecked = false;
  Affinity2018.IsMobile = false;
  Affinity2018.Device = 'desktop';
  Affinity2018.MobileDetect = new class
  {
    constructor()
    {
      Affinity2018.Browser = {
        userAgent: navigator.userAgent,
        platform: 'Unknown',
        renderer: 'Unknown',
        name: 'Unknown',
        version: '?',
        major: -1,
        minor: -1,
        isie: false,
        isedge: false,
        isfirefox: false,
        issafari: false,
        ischrome: false,
        isandroid: false,
        ismac: false,
        isipad: false,
        istablet: false
      };
      if (document.querySelector('body')) this.getBrowser();
      else setTimeout(this.checkBody, 10);
    }

    checkBody()
    {
      if (document.querySelector('body')) Affinity2018.MobileDetect.getBrowser();
      else setTimeout(Affinity2018.MobileDetect.checkBody, 10);
    }

    getBrowser()
    {
      /* github.com/faisalman/ua-parser-js */
      let loaded = function ()
      {
        let parser = new UAParser(), result = parser.getResult();
        Affinity2018.Browser.platform = result.os.name + (result.os.version !== undefined ? ' ' + result.os.version : '');
        Affinity2018.Browser.renderer = result.engine.name;
        Affinity2018.Browser.name = result.browser.name;
        Affinity2018.Browser.version = result.browser.version;
        Affinity2018.Browser.major = parseInt(result.browser.major);
        Affinity2018.Browser.minor = result.browser.version.replace(result.browser.major, '');
        Affinity2018.Browser.minor = Affinity2018.Browser.minor.indexOf('.') === 0 ? Affinity2018.Browser.minor.substr(1) : Affinity2018.Browser.minor;
        Affinity2018.Browser.minor = Affinity2018.Browser.minor.indexOf('0.') === 0 ? Affinity2018.Browser.minor.substr(2) : Affinity2018.Browser.minor;
        Affinity2018.Browser.minor = parseFloat(Affinity2018.Browser.minor);
        if (Affinity2018.Browser.name.toLowerCase().contains('ie')) Affinity2018.Browser.isie = true;
        if (Affinity2018.Browser.name.toLowerCase().contains('edge')) Affinity2018.Browser.isedge = true;
        if (Affinity2018.Browser.name.toLowerCase().contains('chrome')) Affinity2018.Browser.ischrome = true;
        if (Affinity2018.Browser.name.toLowerCase().contains('safari')) Affinity2018.Browser.issafari = true;
        if (Affinity2018.Browser.name.toLowerCase().contains('firefox')) Affinity2018.Browser.isfirefox = true;
        if (Affinity2018.Browser.platform.toLowerCase().contains('android')) Affinity2018.Browser.isandroid = true;
        if (Affinity2018.Browser.platform.toLowerCase().contains('mac')) Affinity2018.Browser.ismac = true;
        if (Affinity2018.Browser.platform.toLowerCase().contains('ios')) Affinity2018.Browser.ismac = true;
        if (result.device.model !== undefined && result.device.model.toLowerCase().contains('ipad')) Affinity2018.Browser.isipad = true;
        if (Affinity2018.Browser.isipad && !Affinity2018.Browser.ismac) Affinity2018.Browser.ismac = true;
        Affinity2018.MobileDetect.getWurfl();
      };
      let error = function (err)
      {
        console.warn('UAParser failed to load');
        console.warn(err);
        Affinity2018.MobileDetect.getWurfl();
      };
      let script = document.createElement('script');
      script.type = 'text/javascript';
      script.nonce = 'a9e3b03a6fd6ba6582578c3ad5393ee54b2b6acb==';
      if (script.readyState)
      {
        script.onreadystatechange = function ()
        {
          if (script.readyState === 'loaded' || script.readyState === 'complete')
          {
            script.onreadystatechange = null;
            loaded();
          }
          else console.log(script.readyState);
        }
      }
      else
      {
        script.onload = loaded;
        script.onerror = error;
      }
      script.setAttribute('src', 'https://cdnjs.cloudflare.com/ajax/libs/UAParser.js/0.7.20/ua-parser.min.js');
      document.head.appendChild(script);
    }

    getWurfl()
    {
      let script = document.createElement('script'), body = document.querySelector('body');
      script.type = 'text/javascript';
      script.src = document.location.protocol + '//wurfl.io/wurfl.js'
      script.nonce = 'a9e3b03a6fd6ba6582578c3ad5393ee54b2b6acb==';
      var scriptProcessed = function ()
      {
        var body = document.body;
        var istablet = false;
        if (Affinity2018.Browser.platform.toLowerCase().contains('ios') || Affinity2018.Browser.platform.toLowerCase().contains('android')) Affinity2018.IsMobile = true;
        if (navigator.platform === 'MacIntel' && navigator.maxTouchPoints > 1)
        {
          Affinity2018.IsMobile = true;
          Affinity2018.Browser.ismac = true;
        }
        if (Affinity2018.IsMobile)
        {
          var viewport = { width: window.innerWidth, height: window.innerHeight };
          if (viewport.height > viewport.width && viewport.height > 1024 && viewport.width > 760) istablet = true;
          if (viewport.width > viewport.height && viewport.width > 1024 && viewport.height > 760) istablet = true;
          Affinity2018.Browser.istablet = istablet;
        }
        if (Affinity2018.Browser.ismac && Affinity2018.Browser.istablet) Affinity2018.Browser.isipad = true;
        body.classList.remove('mobile', 'tablet', 'desktop', 'edge', 'ie', 'firefox', 'mac');
        body.classList.add(Affinity2018.IsMobile ? 'mobile' : 'desktop');
        if (Affinity2018.Browser.istablet) body.classList.add('tablet');
        if (Affinity2018.Browser.ismac) body.classList.add('mac');
        if (Affinity2018.Browser.isipad) body.classList.add('ipad');
        if (Affinity2018.Browser.isie && !isNaN(parseInt(Affinity2018.Browser.major))) body.classList.add('ie' + parseInt(Affinity2018.Browser.major));
        if (Affinity2018.Browser.isedge) body.classList.add('edge');
        if (Affinity2018.Browser.isfirefox) body.classList.add('firefox');
        window.dispatchEvent(new Event('MobileChecked'));
        if (Affinity2018.IsMobile && (window.location.host.contains('localhost') || window.location.host.contains('.test')))
        {
          var testNode = document.createElement('div');
          testNode.classList.add('test-device-info');
          document.body.appendChild(testNode);
          var type = Affinity2018.Browser.istablet ? 'tablet' : 'phone';
          var os = Affinity2018.Browser.isandroid ? 'android' : Affinity2018.Browser.ismac ? 'iOS' : 'unknown';
          var device = Affinity2018.Browser.isipad ? 'ipad' : Affinity2018.Browser.renderer;
          var dims = viewport.width + ' x ' + viewport.height;
          testNode.innerHTML = 'Type: ' + type + ', OS: ' + os + ', Device: ' + device + ', Dims: ' + dims;
        }
      };
      script.onload = function ()
      {
        Affinity2018.MobileChecked = true;
        Affinity2018.IsMobile = WURFL.is_mobile;
        Affinity2018.Device = WURFL.form_factor.toLowerCase();
        scriptProcessed();
      }
      script.onerror = function ()
      {
        console.error('WURFL failed to load');
        Affinity2018.MobileChecked = true;
        Affinity2018.IsMobile = false;
        Affinity2018.Device = 'unknown';
        scriptProcessed();
      };
      body.appendChild(script);
    }
  };


  /***************************************************************************************************************************************************/
  /***************************************************************************************************************************************************/
  /***                                                                                                              **********************************/
  /***   ███████ ██    ██ ██████  ██████   ██████  ██████  ████████     ████████ ███████ ███████ ████████ ███████   **********************************/
  /***   ██      ██    ██ ██   ██ ██   ██ ██    ██ ██   ██    ██           ██    ██      ██         ██    ██        **********************************/
  /***   ███████ ██    ██ ██████  ██████  ██    ██ ██████     ██           ██    █████   ███████    ██    ███████   **********************************/
  /***        ██ ██    ██ ██      ██      ██    ██ ██   ██    ██           ██    ██           ██    ██         ██   **********************************/
  /***   ███████  ██████  ██      ██       ██████  ██   ██    ██           ██    ███████ ███████    ██    ███████   **********************************/
  /***                                                                                                              **********************************/
  /***************************************************************************************************************************************************/
  /******************************************************************************************************************** Source63 *** support tests ***/


  Affinity2018.FeatureChecks = {

    /**
     * Scroll Bar Width
     * @author  Ben King, benk at affinityteam.com, ben.king at source63.com, +64 21 2672729.
     */
    ScrollBarWidth: function ()
    {
      var inner, outer, w1, w2;
      inner = document.createElement('p');
      inner.style.width = "100%";
      inner.style.height = "200px";
      outer = document.createElement('div');
      outer.style.position = "absolute";
      outer.style.top = "0px";
      outer.style.left = "0px";
      outer.style.visibility = "hidden";
      outer.style.width = "200px";
      outer.style.height = "150px";
      outer.style.overflow = "hidden";
      outer.appendChild(inner);
      document.body.appendChild(outer);
      w1 = inner.offsetWidth;
      outer.style.overflow = 'scroll';
      w2 = inner.offsetWidth;
      if (w1 == w2) w2 = outer.clientWidth;
      document.body.removeChild(outer);
      Affinity2018.scrollBarSize = (w1 - w2);
      return Affinity2018.scrollBarSize;
    },

    /**
     * DatalistTest Support Check
     * @author  Ben King, benk at affinityteam.com, ben.king at source63.com, +64 21 2672729.
     */
    DataListTest: function ()
    {
      var testEl = document.createElement('datalist');
      if (testEl && 'options' in testEl)
      {
        Affinity2018.SupportsDatalist = true;
      }
      testEl = null;
    },

    /**
     * Passive Events Support Check
     * @author  Ben King, benk at affinityteam.com, ben.king at source63.com, +64 21 2672729.
     */
    PassiveEvents: function ()
    {
      var passivetest = false;
      try { document.addEventListener("test", null, { get passive() { passivetest = true } }); } catch (e) { }
      Affinity2018.SupportsPassiveEvents = passivetest;
      Affinity2018.PassiveEventProp = Affinity2018.SupportsPassiveEvents ? { passive: true } : false;
    },

    /**
     * Web Worker Detection - Check if Web Worker APIs are avaiable
     * @author  Ben King, benk at affinityteam.com, ben.king at source63.com, +64 21 2672729.
     */
    CheckWebWorkers: function ()
    {
      if (!Affinity2018.hasOwnProperty('CheckForWorkers')) Affinity2018.CheckForWorkers = true;
      if (Affinity2018.CheckForWorkers) Affinity2018.CheckForWorkers = Affinity2018.isie && Affinity2018.ieversion <= 11 ? false : Affinity2018.CheckForWorkers;
      if (Affinity2018.CheckForWorkers) Affinity2018.SupportsWebWorkers = !!window.Worker;
      delete Affinity2018.CheckForWorkers;
    },

    /**
     * Canvas Detection - Check if canvas APIs are avaiable
     * @author  Ben King, benk at affinityteam.com, ben.king at source63.com, +64 21 2672729.
     */
    CheckCanvas: function ()
    {
      Affinity2018.SupportsCanvas = !!window.CanvasRenderingContext2D;
    },

    /**
     * WebGL Support Check
     * @author  Ben King, benk at affinityteam.com, ben.king at source63.com, +64 21 2672729.
     */
    CheckWebGL: function ()
    {
      Affinity2018.SupportsWebGL = false;
      Affinity2018.SupportsWebGL2 = false;
      var canvas;
      try
      {
        canvas = document.createElement('canvas');
        Affinity2018.SupportsWebGL = !!(window.WebGLRenderingContext && (canvas.getContext('webgl') || canvas.getContext('experimental-webgl')));
        canvas = null;
      }
      catch (err) { }
      try
      {
        canvas = document.createElement('canvas');
        Affinity2018.SupportsWebGL2 = !!(window.WebGL2RenderingContext && (canvas.getContext('webgl2')));
        canvas = null;
      }
      catch (err) { }
    },

    /**
     * File APIs Check
     * @author  Ben King, benk at affinityteam.com, ben.king at source63.com, +64 21 2672729.
     */
    CheckFileApi: function ()
    {
      Affinity2018.SupportsFileApi = window.File && window.FileReader && window.FileList && window.Blob ? true : false;
    },

    /**
     * DOMParser Check
     * @author  Ben King, benk at affinityteam.com, ben.king at source63.com, +64 21 2672729.
     */
    CheckDOMParser: function ()
    {
      Affinity2018.SupportsDOMParser = (function ()
      {
        if (!window.DOMParser) return false;
        var parser = new DOMParser();
        try
        {
          parser.parseFromString('x', 'text/html');
        } catch (err)
        {
          return false;
        }
        return true;
      })();
    },

    /**
     * Check Mouse Wheel Events
     * @author  Ben King, benk at affinityteam.com, ben.king at source63.com, +64 21 2672729.
     */
    CheckMouseEvents: function ()
    {
      Affinity2018.WheelEvent = 'onwheel' in document.createElement('div') ? 'wheel' : document.onmousewheel !== undefined ? 'mousewheel' : 'DOMMouseScroll';
    },


    CheckElementScrollTo: function ()
    {
      if (Element.hasOwnProperty('scrollTo') || Element.prototype.hasOwnProperty('scrollTo')) Affinity2018.SupportsElementScrollTo = true;
      else
      {
        Affinity2018.SupportsElementScrollTo = false;
        var script = document.createElement('script');
        script.nonce = 'a9e3b03a6fd6ba6582578c3ad5393ee54b2b6acb==';
        script.src = 'https://polyfill.io/v3/polyfill.min.js?features=Element.prototype.scroll%2CElement.prototype.scrollIntoView%2CElement.prototype.scrollBy';
        script.onerror = function ()
        {
          Element.prototype.scrollTo = function (x, y)
          {
            if (
              x !== undefined
              && y !== undefined
              && Affinity2018.isNumeric(x)
              && Affinity2018.isNumeric(y)
            )
            {
              this.scrollLeft = x;
              this.scrollTop = y;
            }
            if (
              y === undefined
              && Affinity2018.isObject(x)
            )
            {
              if (x.hasOwnProperty('left')) this.scrollLeft = x.left;
              if (x.hasOwnProperty('top')) this.scrollTop = x.top;
            }
          };
        };
        document.head.appendChild(script);
      }
    },

    /**
     * Async / Await Support Check
     * @author  Ben King, benk at affinityteam.com, ben.king at source63.com, +64 21 2672729.
     */
    CheckAsyncAwait: function ()
    {
      Affinity2018.SupportsAsync = false;
      if (!Affinity2018.IsMobile)
      {
        if (
          (Affinity2018.Browser.ischrome && Affinity2018.Browser.major > 54)
          || (Affinity2018.Browser.isfirefox && Affinity2018.Browser.major > 51)
          || (Affinity2018.Browser.isedge && Affinity2018.Browser.major > 13)
          || (Affinity2018.Browser.issafari && Affinity2018.Browser.major > 10)
          || (Affinity2018.Browser.isie && Affinity2018.Browser.major > 11)
          || (Affinity2018.Browser.name.toLowerCase().contains('chromium') && Affinity2018.Browser.major > 54)
          || (Affinity2018.Browser.name.toLowerCase().contains('opera') && Affinity2018.Browser.major > 41)
        )
        {
          Affinity2018.SupportsAsync = true;
        }
      }
      else
      {
        if (
          (Affinity2018.Browser.name.toLowerCase().contains('chrome') && Affinity2018.Browser.major > 79)
          || (Affinity2018.Browser.name.toLowerCase().contains('android') && Affinity2018.Browser.major > 4 && Affinity2018.Browser.minor > 4.4)
          || (Affinity2018.Browser.name.toLowerCase().contains('samsung') && Affinity2018.Browser.major > 6 && Affinity2018.Browser.minor > 1)
          || (Affinity2018.Browser.name.toLowerCase().contains('opera'))
        )
        {
          Affinity2018.SupportsAsync = true;
        }
      }
      if (!Affinity2018.SupportsAsync)
      {
        try
        {
          eval('async () => {}');
          Affinity2018.SupportsAsync = true;
        }
        catch (err) { }
      }
    },

    /**
     * ES6 (ECMA Script version 6) Support Check
     * @author  Ben King, benk at affinityteam.com, ben.king at source63.com, +64 21 2672729.
     */
    CheckES6: function ()
    {
      Affinity2018.SupportsES6 = function () { try { new Function("(a = 0) => a"); return true; } catch (err) { return false; } }();
      if (Affinity2018.ES6Only && !Affinity2018.SupportsES6)
      {
        // window.href.location = "./unsupported.html";
        // throw new Error("This browser is unsupported");
        // return;
      }
    },

    /**
     * Dashboard Detection - Check global value or body class for "dashboard wrapper"
     * @author  Ben King, benk at affinityteam.com, ben.king at source63.com, +64 21 2672729.
     */
    DashboardWrapper: function ()
    {
      var checkKeys = ['Dashboard', 'dashboard', 'IsDashboard', 'isDashboard', 'isdashboard', 'HasDashboard', 'hasDashboard', 'hasdashboard'],
        hasDashboard = false,
        i = 0,
        key;
      for (; i < checkKeys.length; i++)
      {
        key = checkKeys[i];
        if (Affinity2018.hasOwnProperty(key))
        {
          if (typeof Affinity2018[key] === 'boolean') hasDashboard = Affinity2018[key];
          else if (Affinity2018[key]) hasDashboard = true;
        }
      }
      if (!Affinity2018.hasOwnProperty('hasDashboardWrapper'))
      {
        Affinity2018.hasDashboard = hasDashboard;
        Affinity2018.hasDashboardWrapper = function () { return Affinity2018.hasDashboard; };
      }
      return hasDashboard;
    }

  };


  /***************************************************************************************************************************************************/
  /***************************************************************************************************************************************************/
  /***                                                                                                                                            ****/
  /***   ██████  ██████  ███████ ██       ██████   █████  ██████      ██████  ███████ ███████  ██████  ██    ██ ██████   ██████ ███████ ███████   ****/
  /***   ██   ██ ██   ██ ██      ██      ██    ██ ██   ██ ██   ██     ██   ██ ██      ██      ██    ██ ██    ██ ██   ██ ██      ██      ██        ****/
  /***   ██████  ██████  █████   ██      ██    ██ ███████ ██   ██     ██████  █████   ███████ ██    ██ ██    ██ ██████  ██      █████   ███████   ****/
  /***   ██      ██   ██ ██      ██      ██    ██ ██   ██ ██   ██     ██   ██ ██           ██ ██    ██ ██    ██ ██   ██ ██      ██           ██   ****/
  /***   ██      ██   ██ ███████ ███████  ██████  ██   ██ ██████      ██   ██ ███████ ███████  ██████   ██████  ██   ██  ██████ ███████ ███████   ****/
  /***                                                                                                                                            ****/
  /***************************************************************************************************************************************************/
  /**************************************************************************************************************** Source63 *** preload resources ***/


  Affinity2018.Classes.ResourcePreloader = class
  {
    options()
    {
      this.Total = 0;
      this.Loaded = 0;
      this.IsReady = false;
      this.Resources = {
        Scripts: {},
        Extentions: {},
        Styles: {},
        Fonts: {},
        Images: {},
        Audio: {},
        Video: {}
      };
    }
    constructor()
    {
      [
        'Start',
        'AddScripts', 'AddExtentions', 'AddStyles', 'AddFonts', 'AddImages', 'AddAudio', 'AddVideo',
        'Complete', 'Progress', 'ResourceLoaded', 'ResourceFailed',
        'LoadScripts', 'LoadExtentions', 'LoadStyles', 'LoadFonts', 'LoadImages', 'LoadAudio', 'LoadVideo',
        'options'
      ].bindEach(this);
      this.options();
      if (
        Affinity2018.hasOwnProperty('PreloadResources')
        && Affinity2018.isObject(Affinity2018.PreloadResources)
      )
      {
        for (var key in Affinity2018.PreloadResources)
        {
          if (
            Affinity2018.PreloadResources.hasOwnProperty(key)
            && Affinity2018.isArray(Affinity2018.PreloadResources[key])
            && this.Resources.hasOwnProperty(key)
          )
          {
            this.Resources[key].Injected = 0;
            this.Resources[key].Loaded = 0;
            this.Resources[key].Total = Affinity2018.PreloadResources[key].length;
            this.Resources[key].Paths = Affinity2018.jsonCloneObject(Affinity2018.PreloadResources[key]);
            this.Total += this.Resources[key].Total;
          }
        }
        Affinity2018.PreloadResources = null;
        delete Affinity2018.PreloadResources;
        Affinity2018.ResourcePreloader = this;
        if (!Affinity2018.Body.classList.contains('prevent-autoload')) this.Start();
        else window.dispatchEvent(new CustomEvent('ResourecePreloaderReady'));
      }
    }
    Start()
    {
      this.Progress();
      this.LoadScripts();
    }
    AddScript(path)
    {
      if (path.trim() === '') return;
      this.Resources.Scripts.Total++;
      this.Resources.Scripts.Paths.push(path.trim());
      this.Total++;
    }
    AddExtention(path)
    {
      if (path.trim() === '') return;
      this.Resources.Extentions.Total++;
      this.Resources.Extentions.Paths.push(path.trim());
      this.Total++;
    }
    AddStyle(path)
    {
      if (path.trim() === '') return;
      this.Resources.Styles.Total++;
      this.Resources.Styles.Paths.push(path.trim());
      this.Total++;
    }
    AddFont(path)
    {
      if (path.trim() === '') return;
      this.Resources.Fonts.Total++;
      this.Resources.Fonts.Paths.push(path.trim());
      this.Total++;
    }
    AddImage(path)
    {
      if (path.trim() === '') return;
      this.Resources.Images.Total++;
      this.Resources.Images.Paths.push(path.trim());
      this.Total++;
    }
    AddAudio(path)
    {
      if (path.trim() === '') return;
      this.Resources.Audio.Total++;
      this.Resources.Audio.Paths.push(path);
      this.Total++;
    }
    AddVideo(path)
    {
      if (path.trim() === '') return;
      this.Resources.Video.Total++;
      this.Resources.Video.Paths.push(path);
      this.Total++;
    }
    /**/
    Complete()
    {
      this.Progress();
      document.querySelectorAll('.image-preloader,.audio-preloader,.video-preloader').forEach(function (node) { domNode.parentNode.removeChild(node); });
      Affinity2018.ResourcePreloader = null;
      delete Affinity2018.ResourcePreloader;
      Affinity2018.MainStarter = new Affinity2018.Classes.MainStarter();
    }
    Progress()
    {
      window.dispatchEvent(new CustomEvent('ResourecePreloaderProgress',
        {
          detail: {
            total: this.Total,
            progress: this.Loaded,
            per: this.Loaded / this.Total
          }
        }));
    }
    ResourceLoaded(ev)
    {
      let key = 'target' in ev && 'dataset' in ev.target ? ev.target.dataset.group : 'family' in ev && typeof ev.family === 'string' ? 'Fonts' : '';
      if (this.Resources.hasOwnProperty(key))
      {
        this.Loaded++;
        this.Resources[key].Loaded++;
        if (this.Resources[key].Loaded === this.Resources[key].Total && this.hasOwnProperty('Load' + key) && Affinity2018.isMethod(this['Load' + key]))
        {
          this['Load' + key]();
        }
        this.Progress();
      }
    }
    ResourceFailed(ev)
    {
      this.ResourceLoaded(ev);
    }
    /**/
    LoadScripts()
    {
      if (this.Resources.Scripts.Loaded === this.Resources.Scripts.Total)
      {
        this.LoadExtentions();
        return;
      }
      if (this.Resources.Scripts.Injected === 0 && this.Resources.Scripts.Paths.length > 0)
      {
        this.Resources.Scripts.Paths.forEach(function (path)
        {
          Affinity2018.ResourcePreloader.Resources.Scripts.Injected++;
          let tag = document.createElement('script');
          tag.setAttribute('src', path);
          tag.setAttribute('nonce', 'a9e3b03a6fd6ba6582578c3ad5393ee54b2b6acb==');
          tag.dataset.group = 'Scripts';
          tag.onload = Affinity2018.ResourcePreloader.ResourceLoaded;
          tag.onerror = Affinity2018.ResourcePreloader.ResourceFailed;
          Affinity2018.Head.appendChild(tag);
        });
      }
    }
    LoadExtentions()
    {
      if (this.Resources.Extentions.Loaded === this.Resources.Extentions.Total)
      {
        this.LoadStyles();
        return;
      }
      if (this.Resources.Extentions.Injected === 0 && this.Resources.Extentions.Paths.length > 0)
      {
        this.Resources.Extentions.Paths.forEach(function (path)
        {
          Affinity2018.ResourcePreloader.Resources.Extentions.Injected++;
          let tag = document.createElement('script');
          tag.setAttribute('src', path);
          tag.setAttribute('nonce', 'a9e3b03a6fd6ba6582578c3ad5393ee54b2b6acb==');
          tag.dataset.group = 'Extentions';
          tag.onload = Affinity2018.ResourcePreloader.ResourceLoaded;
          tag.onerror = Affinity2018.ResourcePreloader.ResourceFailed;
          Affinity2018.Head.appendChild(tag);
        });
      }
    }
    LoadStyles()
    {
      if (this.Resources.Styles.Loaded === this.Resources.Styles.Total)
      {
        this.LoadFonts();
        return;
      }
      if (this.Resources.Styles.Injected === 0 && this.Resources.Styles.Paths.length > 0)
      {
        this.Resources.Styles.Paths.forEach(function (path)
        {
          Affinity2018.ResourcePreloader.Resources.Styles.Injected++;
          let tag = document.createElement('link');
          tag.setAttribute('href', path);
          tag.setAttribute('rel', 'stylesheet');
          tag.setAttribute('nonce', 'a9e3b03a6fd6ba6582578c3ad5393ee54b2b6acb==');
          tag.dataset.group = 'Styles';
          tag.onload = Affinity2018.ResourcePreloader.ResourceLoaded;
          tag.onerror = Affinity2018.ResourcePreloader.ResourceFailed;
          Affinity2018.Head.appendChild(tag);
        });
      }
    }
    LoadFonts()
    {
      if (this.Resources.Fonts.Loaded === this.Resources.Fonts.Total)
      {
        this.LoadImages();
        return;
      }
      if (this.Resources.Fonts.Injected === 0 && this.Resources.Fonts.Paths.length > 0)
      {
        this.Resources.Fonts.Paths.forEach(function (path)
        {
          Affinity2018.ResourcePreloader.Resources.Fonts.Injected++;
          new FontFaceObserver(path)
            .load()
            .then(Affinity2018.ResourcePreloader.ResourceLoaded)
            .catch(Affinity2018.ResourcePreloader.ResourceFailed);
        });
      }
    }
    LoadImages()
    {
      if (this.Resources.Images.Loaded === this.Resources.Images.Total)
      {
        this.LoadAudio();
        return;
      }
      if (this.Resources.Images.Injected === 0 && this.Resources.Images.Paths.length > 0)
      {
        this.Resources.Images.Paths.forEach(function (path)
        {
          Affinity2018.ResourcePreloader.Resources.Images.Injected++;
          let tag = document.createElement('img');
          tag.setAttribute('src', path);
          tag.classList.add('obscured image-preloader');
          tag.dataset.group = 'Images';
          tag.onload = Affinity2018.ResourcePreloader.ResourceLoaded;
          tag.onerror = Affinity2018.ResourcePreloader.ResourceFailed;
          Affinity2018.Body.appendChild(tag);
        });
      }
    }
    LoadAudio()
    {
      if (this.Resources.Audio.Loaded === this.Resources.Audio.Total)
      {
        this.LoadVideo();
        return;
      }
      if (this.Resources.Audio.Injected === 0 && this.Resources.Audio.Paths.length > 0)
      {
        this.Resources.Audio.Paths.forEach(function (path)
        {
          Affinity2018.ResourcePreloader.Resources.Audio.Injected++;
          let tag = document.createElement('audio');
          tag.setAttribute('src', path);
          tag.classList.add('obscured audio-preloader');
          tag.dataset.group = 'Audio';
          if (Affinity2018.iOS) Affinity2018.ResourcePreloader.ResourceLoaded({ target: tag });
          else tag.addEventListener('canplaythrough', Affinity2018.ResourcePreloader.ResourceLoaded, true);
          Affinity2018.Body.appendChild(tag);
        });
      }
    }
    LoadVideo()
    {
      if (this.Resources.Video.Loaded === this.Resources.Video.Total)
      {
        this.Complete();
        return;
      }
      if (this.Resources.Video.Injected === 0 && this.Resources.Video.Paths.length > 0)
      {
        this.Resources.Video.Paths.forEach(function (path)
        {
          Affinity2018.ResourcePreloader.Resources.Video.Injected++;
          let tag = document.createElement('video');
          tag.setAttribute('src', path);
          tag.classList.add('obscured video-preloader');
          tag.dataset.group = 'Video';
          if (Affinity2018.iOS) Affinity2018.ResourcePreloader.ResourceLoaded({ target: tag });
          else tag.addEventListener('canplaythrough', Affinity2018.ResourcePreloader.ResourceLoaded, true);
          Affinity2018.Body.appendChild(tag);
        });
      }
    }
  };


  /***************************************************************************************************************************************************/
  /***************************************************************************************************************************************************/
  /***                                                                                            ****************************************************/
  /***    █████  ███████ ███████ ██ ███    ██ ██ ████████ ██    ██     ██ ███    ██ ██ ████████   ****************************************************/
  /***   ██   ██ ██      ██      ██ ████   ██ ██    ██     ██  ██      ██ ████   ██ ██    ██      ****************************************************/
  /***   ███████ █████   █████   ██ ██ ██  ██ ██    ██      ████       ██ ██ ██  ██ ██    ██      ****************************************************/
  /***   ██   ██ ██      ██      ██ ██  ██ ██ ██    ██       ██        ██ ██  ██ ██ ██    ██      ****************************************************/
  /***   ██   ██ ██      ██      ██ ██   ████ ██    ██       ██        ██ ██   ████ ██    ██      ****************************************************/
  /***                                                                                            ****************************************************/
  /***************************************************************************************************************************************************/
  /******************************************************************************************************************** Source63 *** affinity init ***/


  Affinity2018.Classes.MainStarter = class
  {
    options()
    {
      this.tabbox = false;
      this.tabs = false;
      this.escapeKeyCapture = false;
    }

    constructor()
    {
      this.options();
      [
        'checkMobile',
        'setupPlugins',
        'completeSetup',
        'setTab',
        'setUserDisplay',
        'resetUserDisplay',
        'showLoadLock', 'hideLoadLock',
        'setloadLocToElementClick',
        'showMobileMenu', 'hideMobileMenu'
      ].bindEach(this);

      /** fix paths **/

      Affinity2018.Path = Affinity2018.localiseUrl(Affinity2018.Path);
      Affinity2018.ApiPath = Affinity2018.localiseUrl(Affinity2018.ApiPath);
      Affinity2018.ContentPath = Affinity2018.localiseUrl(Affinity2018.ContentPath);
      Affinity2018.TemplatesPath = Affinity2018.localiseUrl(Affinity2018.TemplatesPath);
      Affinity2018.WebWorkerPath = Affinity2018.localiseUrl(Affinity2018.WebWorkerPath);

      for (var apiKey in Affinity2018.ApiEndpoints)
      {
        if (Affinity2018.ApiEndpoints.hasOwnProperty(apiKey))
        {
          Affinity2018.ApiEndpoints[apiKey] = Affinity2018.localiseUrl(Affinity2018.ApiEndpoints[apiKey]);
        }
      }

      /** run feature checks **/

      Object.keys(Affinity2018.FeatureChecks).map(function (objectKey, index)
      {
        Affinity2018.FeatureChecks[objectKey]();
      });
      Affinity2018.FeatureChecks = null;
      delete Affinity2018.FeatureChecks;

      /**/

      this.enabled = false;

      Affinity2018.ShowPageLoader = this.showLoadLock;
      Affinity2018.HidePageLoader = this.hideLoadLock;

      Affinity2018.Id = Affinity2018.Name.trim().toLowerCase().replace(new RegExp(' ', 'gi'), '.');

      Affinity2018.ShowPageLoader();

      this.templatesHtml = false;
      if (!document.getElementById('affinity-login'))
      {
        // TODO: eventually, use CDN location when it exists:
        // axios.get('https:/'+'/cdn.source63.com/' + Affinity2018.Domain + '/' + Affinity2018.Id + '.' + Affinity2018.Version + '.min.html')
        // In the mean time, use Affinity2018.TemplatesPath + current app location
        axios.get(Affinity2018.TemplatesPath + 'templates.html')
          .then(function (response)
          {
            this.templatesHtml = response.data;
            this.checkMobile();
          }.bind(this))
          .catch(function (ex)
          {
            console.log(ex);
          });
      }
      else
      {
        this.checkMobile();
      }

    }

    checkMobile()
    {
      if (Affinity2018.MobileChecked) this.setupPlugins();
      else window.addEventListener('MobileChecked', this.setupPlugins, false);
    }

    setupPlugins()
    {
      window.removeEventListener('MobileChecked', this.setupPlugins, false);

      if (Affinity2018.Browser.isie && parseInt(Affinity2018.Browser.major) < 11)
      {
        document.getElementsByTagName('body')[0].classList.add('not-supported');
      }

      Affinity2018.isTeampayoffice = window.location.href.toLowerCase().indexOf('teampayoffice') !== -1 ? true : false;
      Affinity2018.isTeampayofficeBranch = Affinity2018.isTeampayoffice ? window.location.href.toLowerCase().indexOf('/tb') !== -1 ? true : false : false;

      if (this.templatesHtml) Affinity2018.Body.insertAdjacentHTML('beforeend', this.templatesHtml);

      Affinity2018.Lang = new Affinity2018.Classes.Lang();
      if (!Affinity2018.DisablePlugins.contains('Tooltips')) Affinity2018.Tooltips = new Affinity2018.Classes.Tooltips();
      if (!Affinity2018.DisablePlugins.contains('Dialog')) Affinity2018.Dialog = new Affinity2018.Classes.Dialog();
      if (!Affinity2018.DisablePlugins.contains('Pagination')) Affinity2018.Pagination = new Affinity2018.Classes.Pagination();
      if (!Affinity2018.DisablePlugins.contains('UserInfo')) Affinity2018.UserInfo = new Affinity2018.Classes.UserInfo();
      if (!Affinity2018.DisablePlugins.contains('HelpLinks')) Affinity2018.HelpLinks = new Affinity2018.Classes.HelpLinks();
      if (Affinity2018.Classes.Plugins.hasOwnProperty('SelectLookups') && !Affinity2018.DisablePlugins.contains('SelectLookups')) Affinity2018.SelectLookups = new Affinity2018.Classes.Plugins.SelectLookups();
      if (Affinity2018.Classes.Plugins.hasOwnProperty('Autocompletes') && !Affinity2018.DisablePlugins.contains('SelectLookups')) Affinity2018.Autocompletes = new Affinity2018.Classes.Plugins.Autocompletes();
      if (Affinity2018.Classes.Plugins.hasOwnProperty('Calendars') && !Affinity2018.DisablePlugins.contains('SelectLookups')) Affinity2018.Calendars = new Affinity2018.Classes.Plugins.Calendars();

      //moment.changeLocale('nz', function() {
      //  console.log('moment locale changed!');
      //});

      /**/

      if (document.getElementsByClassName('tabs').length > 0)
      {
        let t = 0, tab;
        if (document.getElementsByClassName('tabs')) this.tabbox = document.getElementsByClassName('tabs')[0];
        if (this.tabbox && this.tabbox.getElementsByClassName('tab')) this.tabs = this.tabbox.getElementsByClassName('tab');
        if (this.tabs && this.tabs.length > 0)
        {
          for (; t < this.tabs.length; t++)
          {
            tab = this.tabs[t];
            tab.addEventListener('click', this.setTab);
          }
        }
      }

      /**/

      if (document.getElementById('mobile-menu-button') && document.getElementById('mobile-menu-bg'))
      {
        this.mobileMenuButton = document.getElementById('mobile-menu-button');
        this.mobileMenuBg = document.getElementById('mobile-menu-bg');
        this.mobileMenuButton.addEventListener('click', this.showMobileMenu);
        this.mobileMenuBg.addEventListener('click', this.hideMobileMenu);
      }

      /**/

      if (document.getElementById('avatar-menu') && document.getElementById('tabs'))
      {
        var items = Array.prototype.slice.call(document.getElementById('avatar-menu').getElementsByTagName('a'));
        items.forEach(this.setloadLocToElementClick);
        items = Array.prototype.slice.call(document.getElementById('tabs').getElementsByTagName('a'));
        items.forEach(this.setloadLocToElementClick);
      }

      /**/

      this.enabled = true;

      window.addEventListener('LangComplete', this.completeSetup, false);
      Affinity2018.Lang.Load();

      //this.completeInit();

    }

    completeSetup()
    {
      window.removeEventListener('LangComplete', this.completeSetup, false);

      this.showLogin = function () { };
      this.hideLogin = function () { };
      if (document.getElementById('affinity-login'))
      {
        Affinity2018.Login = new Affinity2018.Classes.Login();
        this.showLogin = Affinity2018.Login.showLogin;
        this.hideLogin = Affinity2018.Login.hideLogin;
      }
      if (document.getElementById('affinity-login') && document.getElementById('avatar')) Affinity2018.Avatar = new Affinity2018.Classes.Avatar();
      if (document.getElementById('content')) Affinity2018.RateUs = new Affinity2018.Classes.RateUs();

      if (Affinity2018.hasOwnProperty('Tooltips')) Affinity2018.Tooltips.Apply();
      if (Affinity2018.hasOwnProperty('Pagination')) Affinity2018.Pagination.Apply();
      if (Affinity2018.hasOwnProperty('UserInfo')) Affinity2018.UserInfo.Apply();
      if (Affinity2018.hasOwnProperty('HelpLinks')) Affinity2018.HelpLinks.Apply();
      if (Affinity2018.hasOwnProperty('SelectLookups')) Affinity2018.SelectLookups.Apply();
      if (Affinity2018.hasOwnProperty('Autocompletes')) Affinity2018.Autocompletes.Apply();
      if (Affinity2018.hasOwnProperty('Calendars')) Affinity2018.Calendars.Apply();

      Affinity2018.HidePageLoader();
      Affinity2018.UiReady = true;

      //console.clear();

      window.dispatchEvent(new Event('MainInit'));
    }

    setTab(ev)
    {
      if (!this.enabled) return false;
      let tab = false;
      if (ev) tab = Affinity2018.getParent(ev.target, 'tab');
      if (tab && tab.classList.contains('tab-button')) tab = tab.parentElement;
      if (tab)
      {
        [].forEach.call(this.tabs, function (node)
        {
          node.classList.remove('selected');
          if (node === tab) node.classList.add('selected');
        });
      }
    }

    showLoadLock()
    {
      document.body.classList.add('load-lock');
    }

    hideLoadLock()
    {
      document.body.classList.remove('load-lock');
    }

    setloadLocToElementClick(node)
    {
      node.addEventListener('click', Affinity2018.ShowPageLoader);
    }

    showMobileMenu()
    {
      if (!this.enabled) return false;
      document.body.classList.add('menu');
    }

    hideMobileMenu()
    {
      if (!this.enabled) return false;
      document.body.classList.remove('menu');
    }

  };


  /***************************************************************************************************************************************************/
  /***************************************************************************************************************************************************/
  /***                                               *************************************************************************************************/
  /***   ███████ ████████  █████  ██████  ████████   *************************************************************************************************/
  /***   ██         ██    ██   ██ ██   ██    ██      *************************************************************************************************/
  /***   ███████    ██    ███████ ██████     ██      *************************************************************************************************/
  /***        ██    ██    ██   ██ ██   ██    ██      *************************************************************************************************/
  /***   ███████    ██    ██   ██ ██   ██    ██      *************************************************************************************************/
  /***                                               *************************************************************************************************/
  /***************************************************************************************************************************************************/
  /**************************************************************************************************************************** Source63 *** start ***/


  let globalinit = function ()
  {
    if (Affinity2018.HideAllTemplates)
    {
      var style = document.createElement('style');
      style.nonce = 'a9e3b03a6fd6ba6582578c3ad5393ee54b2b6acb==';
      style.innerHTML = `
        #affinity-login,
        #dialog-bg,
        #dialog,
        #loader-bg,
        #loader,
        #mobile-menu-bg,
        #loading-toast {
          display: none !important;
        }
      `;
      document.head.appendChild(style);
    }

    document.removeEventListener('DOMContentLoaded', globalinit, false);
    Affinity2018.Head = document.getElementsByTagName("head")[0];
    Affinity2018.Body = document.getElementsByTagName("body")[0];
    Affinity2018.Body.classList.add('load-lock');

    Affinity2018.UserProfile.CommonName = null;
    Affinity2018.UserProfile.CompanyNumber = null;
    Affinity2018.UserProfile.EmployeeNumber = null;

    if (document.getElementById('citrixlogin'))
    {
      Affinity2018.HasCitrix = true;
      Affinity2018.Body.classList.add('show-citrix');
      document.getElementById('citrixlogin').classList.add('hidden');
    }

    $a = Affinity2018;

    new Affinity2018.Classes.ResourcePreloader();
  };

  if (document.getElementsByTagName("head")[0] && document.getElementsByTagName("body")[0]) globalinit();
  else document.addEventListener('DOMContentLoaded', globalinit, false);

})();;
/***************************************************************************************************************************************************/
/***************************************************************************************************************************************************/
/***                                                                                                  **********************************************/
/***    ██████ ███████ ██      ██    ██ ███████ ██████  ███████  ██████  ██████  ███    ███ ███████   **********************************************/
/***   ██      ██      ██      ██    ██ ██      ██   ██ ██      ██    ██ ██   ██ ████  ████ ██        **********************************************/
/***   ██      █████   ██      ██    ██ █████   ██████  █████   ██    ██ ██████  ██ ████ ██ ███████   **********************************************/
/***   ██      ██      ██       ██  ██  ██      ██   ██ ██      ██    ██ ██   ██ ██  ██  ██      ██   **********************************************/
/***    ██████ ███████ ███████   ████   ███████ ██   ██ ██       ██████  ██   ██ ██      ██ ███████   **********************************************/
/***                                                                                                  **********************************************/
/***************************************************************************************************************************************************/
/***************************************************************************************************************************************************/

/**
 *
 * Summary.       CleverForms Master / Bootstrapper.
 *
 * Description.   Loads and processes templates. Used by Designer for Edit previews, Preview, View and Edit for form rendering.
 *
 * @author        Ben King, benk at affinityteam.com, ben.king at source63.com, +64 21 2672729.
 *
 *
 * @since         09.09.2019
 * @class         Default
 * @namespace     Affinity2018.Classes.Apps.Default
 * @memberof      CleverForms
 * @constructs    Affinity2018.Classes.Apps.CleverForms.Default
 *
 * @public
 */

if (!('Affinity2018' in window)) Affinity2018 = {};
if (!('Classes' in Affinity2018)) Affinity2018.Classes = {};
if (!('Apps' in Affinity2018.Classes)) Affinity2018.Classes.Apps = {};
if (!('Plugins' in Affinity2018.Classes)) Affinity2018.Classes.Plugins = {};
if (!('CleverForms' in Affinity2018.Classes.Apps)) Affinity2018.Classes.Apps.CleverForms = {};

if (!('Apps' in Affinity2018)) Affinity2018.Apps = {};
if (!('Plugins' in Affinity2018.Apps)) Affinity2018.Apps.Plugins = {};

Affinity2018.Classes.Apps.CleverForms.Default = class
{

  /**
   * Summary. Sets class scoped variables required for the HtmlTemplates instance
   * @this    Class scope
   * @access  private
   */
  _options()
  {



    /**
    * Description.    List of Types that are not elements but can be mapped to an existing element.
    * @type {[string]}
    * @public
    */
    this.TypeMap = []; // set by Elements.json



    /**
    * Description.    List of FIELDD FieldNames that are global keys.
    *                 Global keys will be auto added as needed above the top section by default.
    * @type {[string]}
    * @public
    */
    this.AllowedGlobalKeys = []; // set by Elements.json



    /**
    * Description.    List of FIELDD table names that are NOT masterfile records.
    *                 This drives edit options and behaviour.
    * @type {[string]}
    * @public
    */
    this.MasterfileTableBlacklist = []; // set by Elements.json



    /**
    * Description.    List of non FIELDD ElementTypes that act as global keys.
    *                 This drives edit options and behaviour.
    * @type {[string]}
    * @public
    */
    this.PseudoGlobalElementTypes = []; // set by Elements.json




    /**
    * Description.    Describes wwhat an Affinity Field is doing and how to render it.
    *                 Loaded in from Elements.json
    * @type {String}
    * @public
    */
    this.AffnityFieldModeTypes = {}; // set by Elements.json
    this.AffnityFieldModeEnums = {}; // set by Elements.json




    /**
    * Description.    Litte Arrow definitions.
    *                 Loaded in from Elements.json
    * @type {String}
    * @public
    */
    this.ArrowTypes = {}; // set by Elements.json
    




    /**
    * Description.    List of document categories and enums.
    *                 Loaded in from Elements.json
    * @type {String}
    * @public
    */
    this.DocumentCategories = [];



    /**
    * Description.    The API end point for available Form Element data.
    * @type {String}
    * @public
    * 
    * @param {String} templateId 
    */
    //this.GetElementDataApi = Affinity2018.Path + 'ElementV2/GetAvailableItems';
    this.GetElementDataApi = Affinity2018.Path + 'FormElement/GetAvailableItems';



    /**
    * Description.    The API end point for searching FIELDD fields.
    * @type {String}
    * @public
    * 
    * @param {String} fieldName (optional)
    * @param {String} tableName (optional)
    * @param {Int}    size      The number of items per page of results (optional)
    * @param {Int}    page      The page number (optional)
    */
    this.FielddSearchApi = Affinity2018.Path + 'FieldDefinition/get';



    /**
    * Description.    The API end point for loading existing templates.
    *                 This is automatically called if a valid GUID is present.
    * @type {String}
    * @public
    * 
    * @param {String} templateId The form template ID to load
    */
    this.GetTemplateApi = Affinity2018.Path + 'TemplateV2/GetItems';



    /**
    * Description.    The API end point for loading existing instances.
    *                 This is automatically called if a valid GUID is present.
    * @type {String}
    * @public
    * 
    * @param {String} none The form instance ID to load
    */
    this.GetInstanceApi = Affinity2018.Path + 'Instancev2/GetItems';



    /**
    * Description.    The API end point for submutting form instances.
    * @type {String}
    * @public
    * @since 2.0.3.5
    */
    this.SubmitFormApi = Affinity2018.Path + 'Instancev2/Save';



    /**
    * Description.    The API end point for creating or editing mixed ElementData.
    *                 This same API is used for QuestionData, SectionData, LayoutData
    *                 and AffinityData "Save" and "Edit".
    * @type {String}
    * @public
    * @since 2.0.3.5
    */
    this.SaveDataApi = Affinity2018.Path + 'FormElement/Save';



    /**
    * Description.    The API end point for loading 'attach document' categories.
    *                 This will trigger a 'GetDocumentTypes' load on change / set.
    * @type {String}
    * @public
    */
    //this.GetDocumentCategory = Affinity2018.Path + 'Document/GetDocumentCategoryNamesTemplateless';
    this.GetDocumentCategory = Affinity2018.Path + 'Document/GetDocumentCategoriesTemplateless';



    /**
    * Description.    The API end point for loading 'attach document' types.
    *                 This is a dependency that will be called when 'GetDocumentCategory' returns successfully.
    * @type {String}
    * @public
    *
    * @param {String} documentCategory The form template ID delete from
    */
    this.GetDocumentTypes = Affinity2018.Path + 'Document/GetDocumentTypes';



    /**
    * Description.    The API end point for loading Select Lookups.
    * @type {String}
    * @public
    *
    * @param {String} ModelName The AffinityField.ModelName
    * @param {String} PropertyName The AffinityField.FieldName
    */
    this.GetLookupApi = Affinity2018.Path + 'Lookup/Get';



    /**
    * Description.    The API end point for getting Model data in Form when a Lookup changes.
    * @type {String}
    * @public
    *
    * @param {String} ModelName The Question Name
    * @param {String} Key The Question Value
    */
    this.GetModelApi = Affinity2018.Path + 'Lookup/GetModel';



    /**
    * Description.    The API end point for loading generic groups.
     * @type {String}
    * @public
    *
    * @param {String} ModelName The AffinityField.Model (used to be TableName)
    * @param {String} PropertyName The AffinityField.FieldName
    */
    this.GetGenericGroupLookupApi = Affinity2018.Path + 'GenericGroup/GetGroups';



    /**
    * Description.    The API end point for loading generic group codes.
     * @type {String}
    * @public
    *
    * @param {String} ModelName The AffinityField.Model (used to be TableName)
    * @param {String} PropertyName The AffinityField.FieldName
    */
    this.GetGenericGroupCodesLookupApi = Affinity2018.Path + 'GenericGroup/GetCodes';



    /**
    * Description.    The API end point for loading generic groups.
     * @type {String}
    * @public
    *
    * @param {String} ModelName The AffinityField.Model (used to be TableName)
    * @param {String} PropertyName The AffinityField.FieldName
    * @param {String} GroupName The Group Name
    * @param {String} Description The Group Description
    * @param {String} GroupId The Group ID if exisitng, else null
    * @param {Array[String]} Codes The list of codes
    */
    this.GetGenericGroupSave = Affinity2018.Path + 'GenericGroup/Save';



    /**
    * Description.    The API end point for getting a list of hellosign templates.
     * @type {String}
    * @public
    *
    */
    this.GetDocumentSigningTemplatesApi = Affinity2018.Path + 'DocumentSigning/GetTemplates';



    /**
    * Description.    The API end point for posting a hellosign document.
     * @type {String}
    * @public
    *
    */
    this.DocumentSigningPostApi = Affinity2018.Path + 'DocumentSigning/Send';



    /**
    * Description.    The API end point for canceling a posted a hellosign document.
     * @type {String}
    * @public
    *
    */
    this.DocumentSigningCancelApi = Affinity2018.Path + 'DocumentSigning/Cancel';



    /**
    * Description.    The API end point for loading all available forms.
     * @type {String}
    * @public
    *
    * @param {String} FileId The AffinityField.FieldName
    */
    //this.GetAllAvaiableForms = Affinity2018.Path + 'TemplateV2/GetAll';
    this.GetAllAvaiableForms = Affinity2018.Path + 'Inbox/GetAvailableForms';



    /**
    * Description.    The form designer path.
    * @type {String}
    * @public
    *
    * @param {String} templateId The form template ID
    */
    this.DesignerPath = Affinity2018.Path + 'Inbox';




    /**
    * Description.    The form designer path.
    * @type {String}
    * @public
    *
    * @param {String} templateId The form template ID
    */
    this.InboxPath =  Affinity2018.Path;




    /**
    * Description.    The form preview path.
    * @type {String}
    * @public
    *
    * @param {String} templateId The form template ID
    */
    this.PreviewPath = Affinity2018.Path + 'TemplateV2/Preview';




    /**
    * Description.    Path to start a new Instance from Template Id.
    * @type {String}
    * @public
    *
    * @param {String} Id Template id guid
    */
    this.CreateInstancePath = Affinity2018.Path + 'Instance/Create';




    /**
    * Description.    The API end point for saving form details.
    * @type {String}
    * @public
    *
    * @param {String} model A JSON string of the full Template Model
    */
    this.FormDetailsApi = Affinity2018.Path + 'TemplateV2/Edit';




    /**
    * Description.    The API end point for validating bank accounts.
    * @type {String}
    * @public
    *
    * @param {String} EmployeeNo The target users Employee Number
    * @param {String} BankNumber The bank account to validate
    * @param {String} CountryCode The selected Country Code (NZ/AU)
    */
    this.BankValidationApi = Affinity2018.Path + 'Validation/BankAccount';




    /**
    * Description.    The API end point for validating tax numbers.
    * @type {String}
    * @public
    *
    * @param {String} EmployeeNo The target users Employee Number
    * @param {String} TaxNumber The tax number to validate
    * @param {String} CountryCode The selected Country Code (NZ/AU)
    */
    this.TaxValidationApi = Affinity2018.Path + 'Validation/TaxNumber';




    /**
    * Description.    The API end point for validating tax numbers.
    * @type {String}
    * @public
    *
    * @param {String} documentId Document manager (or equivalent) file ID
    */
    this.FileGetApi = Affinity2018.Path + 'Document/Download';




    /**
    * Description.    The API end point for validating tax numbers.
    * @type {String}
    * @public
    *
    * @param {String} fileIds Document manager (or equivalent) file Id(s) comma separated
    */
    this.FileGetInfoApi = Affinity2018.Path + 'Document/GetFileIdNamePairs';




    /**
    * Description.    The API end point for validating tax numbers.
    * @type {String}
    * @public
    * 
    * @param {String}     fileTag				  				Template or Instance ID
    * @param {String?}    questionName            The name of form element containing this file upload
    * @param {String}     file                    Form File object
    */
    this.FilePostApi = Affinity2018.Path + 'Document/UploadMulti';




    /**
    * Description.    The API end point for deleting files.
    * @type {String}
    * @public
    *
    * @param {String} FileIds Document manager (or equivalent) array of file IDs
    */
    this.FileDeleteApi = Affinity2018.Path + 'Document/Delete'; // Document/Delete for instance




    /**
    * Description.    The API end point for deleting a single file.
    * @type {String}
    * @public
    *
    * @param {String} FileId Document manager (or equivalent) file ID
    */
    this.FileDeleteSingleApi = Affinity2018.Path + 'Document/DeleteSingle'; // Document/Delete for instance




    /**
    * Description.    The API end point for getting logged in user data.
    * @type {String}
    * @public
    */
    this.GetUserDataApi = Affinity2018.Path + 'Api/GetLoginData'; 




    /**
    * Description.    The API end point for getting form employee user data.
    * @type {String}
    * @public
    */
    this.GetFormUserDataApi = Affinity2018.Path + 'Api/GetFormEmployeeData';




    /**
    * Description.    Add empty option to non-required lookup lists.
    * @public
    */
    this.InsertLookupEmptyOption = true;
    this.InsertLookupEmptyValue = 'null';
    this.InsertLookupEmptyDisplay = 'None';




    /**
    * Description.    Add empty option to required lookup lists.
    * @public
    */
    this.InsertLookupEmptyRequiredOption = true;
    this.InsertLookupEmptyRequiredValue = '';
    this.InsertLookupEmptyRequiredDisplay = 'Select...';




    /**
    * Description.    Country code options.
    * TODO: Replace CountryCodes and CountrySensativeFields with lookups
    * @public
    */
    this.DefaultCountryCode = 'A';
    this.CountryCodeMap = {
      'AU': 'A',
      'NZ': 'N'
    };
    this.CountryShortMap = {
      'A': 'AU',
      'N': 'NZ'
    };
    this.CountryDisplayMap = {
      'A': 'Australia',
      'N': 'New Zealand'
    };
    this.CountryCodes = [];
    this.CountrySensativeFields = {
      'PAY_POINT': {
        Name: 'Pay Point',
        OnlyInForm: false
      },
      'AWARD_ID ': {
        Name: 'Award ID',
        OnlyInForm: true
      },
      'TAX_CODE': {
        Name: 'Tax Code',
        OnlyInForm: false
      }
      //'TAX_NUMBER': {
      //  Name: 'Tax Number',
      //  OnlyInForm: false
      //},
      //'BAL_ACCT': {
      //  Name: 'Balance Account',
      //  OnlyInForm: false
      //},
      //'ACCT1': {
      //  Name: 'Account 1',
      //  OnlyInForm: false
      //},
      //'ACCT2': {
      //  Name: 'Account 2',
      //  OnlyInForm: false
      //},
      //'ACCT3': {
      //  Name: 'Account 3',
      //  OnlyInForm: false
      //},
      //'ACCT4': {
      //  Name: 'Account 4',
      //  OnlyInForm: false
      //},
      //'ACCT5': {
      //  Name: 'Account 5',
      //  OnlyInForm: false
      //}
    };
    this.CountrySensativeFieldNames = ["TAX_CODE", "TAX_NUMBER", "BAL_ACCT", "ACCT1", "ACCT2", "ACCT3", "ACCT4", "ACCT5"];
    // Consider this: If we do not know the user or form country, show selects
    this.ShowCountryIfUnknown = true;




    /**
    * Description.    A basic enum to indicate a XHR load status.
    * @type {Object}
    * @public
    */
    this.LoadStatusEnum = {
      Null: 0,
      Loading: 1,
      Complete: 2,
      Error: 3
    };
    this.LoadStatusCode = {
      0: 'Null',
      1: 'Loading',
      2: 'Complete',
      3: 'Error'
    };




    /**
    * Description.    A property to indicate a selected Employee Profile XHR load status.
    * @type {Object}
    * @public
    */
    this.ProfileStatus = this.LoadStatusEnum.Null;




    /**
    * Description.    A property to indicate a Model XHR load status.
    * @type {Object}
    * @public
    */
    this.ModelStatus = this.LoadStatusEnum.Null;




    /**
    * Description.    Default configuration. Updated by designer.js via constructor parameter.
    * @type {Object}
    * @public
    */
    this.defaultConfig = {
      TemplateModel: {
        Id: null,
        Name : '',
        Description: '',
        Revision: '',
        FormCountry: '',
        IsMultiCountry: false,
        AvaiableCountries: [],
        Type: '',
        DashboardTemplate: false,
        UserInstructions: '',
        WorkflowDefinitionIds: ''
      },
      OnInit: function () { },
      OnError: function () { }
    };

    this.EmployeeSelectLocked = false;
    this.FormCountry = null;
  }


  /**
   * Summary. Class constructor
   *
   * Description. Initialises HtmlTemplates instance.
   *
   * @since       09.09.2019
   * @access      public
   *
   * @global
   */
  constructor(config)
  {

    /** load all options above into class scope.*/
    this._options();

    /**
     * Summary. Array of class method names to be bound to the global Class scope.
     * @access  private
     */
    [
      '_init',
      '_getUserData', '_gotUserData', '_getUserDataError',
      '_getEmployeeData', '_gotEmployeeData', '_gotEmployeeDataError', '_isEmployeeDataReady',
      '_loadHtmlTemplates', '_templatesLoaded', '_loadHtmlTemplatesError',

      'GetEmployeeData', 'IsEmployeeDataReady',
      'GetFormEmployeeNo',
      'IsGlobalKey', 'IsPseudoGlobalKey', 'IsKey', 'IsReadOnly', 'IskeyWithNoRequiredKeys', 'IsMasterFile', 'IsLookup', 'SelectDefaultModeOnFieldSearch',

      'GetCountryOptons', 'GetCountryCodeVariant', 'GetCountryDisplayVariant',

      'LockEmployeeSelect', 'ReleaseEmployeeSelect', 

      '__THIS_IS_A_TEMP_TRANSMUTER_FOR_G_G_G_GET_DATA_UNTIL_GET_DATA_MATCHES_NEW_STRUCTURE',
      '__THIS_IS_A_TEMP_TRANSMUTER_FOR_P_P_P_POST_DATA_UNTIL_POST_DATA_MATCHES_NEW_STRUCTURE'

    ].bindEach(this);

    for (var key in this.CountryCodeMap)
    {
      this.CountryCodes.push(key);
      this.CountryCodes.push(this.CountryCodeMap[key]);
    }

    // apply passed in config from base page
    if (config && Affinity2018.isObject(config) && Object.keys(config).length > 0)
    {
      this.FormCountry =
        config.hasOwnProperty('TemplateModel') && config.TemplateModel.hasOwnProperty('FormCountry') && !Affinity2018.isNullOrEmpty(config.TemplateModel.FormCountry)
        ? this.GetCountryCodeVariant(config.TemplateModel.FormCountry)
          : !Affinity2018.isNullOrEmpty(Affinity2018.FormCountry)
            ? this.GetCountryCodeVariant(Affinity2018.FormCountry)
            : null;

      //console.log('Getting FormCountry:');
      //console.log('\tInjected FormCountry: ', Affinity2018.FormCountry);
      //console.log('\tIs Valid? ', this.CountryShortMap[Affinity2018.FormCountry.trim().toUpperCase()] ? true : false);
      //console.log('\tConfig: ', config);
      //if (config.hasOwnProperty('TemplateModel') && config.TemplateModel.hasOwnProperty('FormCountry'))
      //{
      //  console.log('\tTemplateModel: ', config.TemplateModel);
      //  console.log('\tTemplateModel FormCountry: ', config.TemplateModel.FormCountry);
      //  console.log('\tIs Valid? ', this.CountryShortMap[config.TemplateModel.FormCountry.trim().toUpperCase()] ? true : false);
      //}
      //else console.log('\tTemplateModel not found');

      // copy and overwrite default config with passed in config
      var key, mergedConfig = Affinity2018.objectDeepMerge(this.defaultConfig, config);
      // apply new config to class root
      for (key in mergedConfig)
      {
        this[key] = mergedConfig[key];
      }
      delete this.defaultConfig;
    }
    else
    {
      this.FormCountry = !Affinity2018.isNullOrEmpty(Affinity2018.FormCountry) ? this.GetCountryCodeVariant(Affinity2018.FormCountry) : null;
    }

    /* fix paths */
    
    for (var key in this)
    {
      if (this.hasOwnProperty(key))
      {
        if (Affinity2018.isString(this[key]) && this[key].startsWith('http'))
        {
          this[key] = Affinity2018.localiseUrl(this[key]);
        }
      }
    }

    /* compile enums */

    this.ArrowTypeEnum = {};
    for (var key in this.ArrowTypes)
    {
      if (this.ArrowTypes.hasOwnProperty(key))
      {
        this.ArrowTypeEnum[this.ArrowTypes[key].Enum] = this.ArrowTypes[key];
      }
    }

    var enablePostStr = Affinity2018.hasOwnProperty('EnablePost') ? Affinity2018.EnablePost.toLowerCase().trim() : '';
    Affinity2018.EnablePost = enablePostStr !== 'false';

    // apply global API values
    Affinity2018.ApiEndpoints.BankValidationApi = this.BankValidationApi;
    Affinity2018.ApiEndpoints.TaxValidationApi = this.TaxValidationApi;
    Affinity2018.ApiEndpoints.GetUserDataApi = this.GetUserDataApi;
    Affinity2018.ApiEndpoints.GetFormUserDataApi = this.GetFormUserDataApi;

    /** If Affnity2018 UI is ready, initialise, else initialise when Affnity2018 fires the "MainInit" event. */
    if (Affinity2018.UiReady) this._init();
    else window.addEventListener('MainInit', this._init);
  }



  _init()
  {
    Affinity2018.ShowPageLoader();

    var url = Affinity2018.Path + '/Scripts/V2/apps/cleverforms/Elements.json';

    axios({
      url: url,
      method: 'get'
    })
      .then(function (response)
      {
        if (
          $a.isPropObject(response, "data")
          && $a.isPropObject(response.data, "Elements")
          && $a.isPropArray(response.data, "TableTypes")
        )
        {
          this.DefaultPostObject = {};
          this.ElementKeys = Object.keys(response.data.Elements);
          this.ElementData = response.data.Elements;
          this.TableTypes = response.data.TableTypes;
          this.ArrowTypes = response.data.ArrowTypes;
          this.TypeMap = response.data.TypeMap;
          this.DocumentCategories = response.data.DocumentCategories;
          this.ElementControllerMap = {};

          this.TableTypes.sort(function (a, b)
          {
            if (a.Value < b.Value) return -1;
            if (a.Value > b.Value) return 1;
            return 0;
          });

          this.AffnityFieldModeTypes = response.data.AffnityFieldModeTypes;
          this.AffnityFieldModeEnums = {};
          for (var key in this.AffnityFieldModeTypes)
          {
            if (this.AffnityFieldModeTypes.hasOwnProperty(key))
            {
              this.AffnityFieldModeEnums[this.AffnityFieldModeTypes[key].Enum] = this.AffnityFieldModeTypes[key];
            }
          }

          var elementKey, elementData, postCopy;
          for (elementKey in this.ElementData)
          {
            if (this.ElementData.hasOwnProperty(elementKey))
            {
              elementData = this.ElementData[elementKey];
              if (!Affinity2018.Classes.Apps.CleverForms.Elements.hasOwnProperty(elementData.Type))
              {
                $a.LogError('Missing Element Component for "' + elementData.Type + '".', 'important', 'Missing Element Component for "' + elementData.Type + '".');
              }
              else
              {
                if (elementData.hasOwnProperty('TableTypes'))
                {
                  this.ElementData[elementData.Type].TableTypes = $a.jsonCloneObject(this.TableTypes);
                }
              }
              elementData.Cloned = false;
              this.DefaultPostObject = Object.assign({}, this.DefaultPostObject, elementData.Details);
            }
          }

          for (var i = 0; i < this.TypeMap.length; i++)
          {
            if (this.ElementData.hasOwnProperty(this.TypeMap[i].From) && !this.ElementData.hasOwnProperty(this.TypeMap[i].To))
            {
              this.ElementData[this.TypeMap[i].To] = $a.jsonCloneObject(this.ElementData[this.TypeMap[i].From]);
              this.ElementData[this.TypeMap[i].To].Cloned = true;
              this.ElementControllerMap[this.TypeMap[i].To] = this.TypeMap[i].From;
            }
          }

          /**/

          this.AllowedGlobalKeys = response.data.AllowedGlobalKeys;
          this.PseudoGlobalElementTypes = response.data.PseudoGlobalElementTypes;
          this.MasterfileTableBlacklist = response.data.MasterfileTableBlacklist;

          this.GenderFields = response.data.GenderFields;
          this.BooleanToRadioFields = response.data.BooleanToRadioFields;

          this._getUserData();

        }
        else
        {
          $a.LogError('Element Error', 'critical', 'Failed to get Element data from source (' + url + ').');
        }
      }.bind(this))
      .catch(function (error)
      {
        $a.LogError('Element Error', 'critical', 'Failed to load Element data.', error);
      }.bind(this));
  }



  /***************************************************************************************************************************************************/
  /***************************************************************************************************************************************************/
  /***                                                                                                                  ******************************/
  /***   ██████  ██    ██ ██████  ██      ██  ██████     ███    ███ ███████ ████████ ██   ██  ██████  ██████  ███████   ******************************/
  /***   ██   ██ ██    ██ ██   ██ ██      ██ ██          ████  ████ ██         ██    ██   ██ ██    ██ ██   ██ ██        ******************************/
  /***   ██████  ██    ██ ██████  ██      ██ ██          ██ ████ ██ █████      ██    ███████ ██    ██ ██   ██ ███████   ******************************/
  /***   ██      ██    ██ ██   ██ ██      ██ ██          ██  ██  ██ ██         ██    ██   ██ ██    ██ ██   ██      ██   ******************************/
  /***   ██       ██████  ██████  ███████ ██  ██████     ██      ██ ███████    ██    ██   ██  ██████  ██████  ███████   ******************************/
  /***                                                                                                                  ******************************/
  /***************************************************************************************************************************************************/
  /***************************************************************************************************************************************************/


  /**
   * Summary. ?
   * @this    Class scope
   * @access  private
   */
  GetEmployeeData(employeeNo)
  {
    this._getEmployeeData(employeeNo);
  }
  IsEmployeeDataReady()
  {
    return this._isEmployeeDataReady();
  }



  /**
   * Summary. ?
   * @this    Class scope
   * @access  private
   */
  GetInstanceGuid ()
  {
    var instanceId = false;
    if (
      document.querySelector('#InstanceId')
      && 'value' in document.querySelector('#InstanceId')
      && typeof document.querySelector('#InstanceId').value === 'string'
      && document.querySelector('#InstanceId').value.trim() !== ''
    )
    {
      instanceId = document.querySelector('#InstanceId').value.trim();
    }
    else
    {
      instanceId = this.GetInstanceGuidFromAddressBar();
    }
    return instanceId;
  }



  /**
   * Summary. ?
   * @this    Class scope
   * @access  private
   */
  GetInstanceGuidFromAddressBar()
  {
    var url = window.location.href.toLowerCase();
    if (
      url.split('/edit/').length === 2
      && $s.isString(url.split('/edit/')[1])
      && url.split('/edit/')[1].trim() !== ''
    ) return url.split('/edit/')[1].trim();
    return false;
  }



  /**
   * Summary. ?
   * @this    Class scope
   * @access  private
   */
  GetTemplateGuid()
  {
    var templateId = false;
    if (
      document.querySelector('#TemplateId')
      && 'value' in document.querySelector('#TemplateId')
      && typeof document.querySelector('#TemplateId').value === 'string'
      && document.querySelector('#TemplateId').value.trim() !== ''
    )
    {
      templateId = document.querySelector('#TemplateId').value.trim();
    }
    else
    {
      templateId = this.GetTemplateGuidFromAddressBar();
    }
    return templateId;
  }



  /**
   * Summary. ?
   * @this    Class scope
   * @access  private
   */
  GetTemplateGuidFromAddressBar()
  {
    var params = window.location.search.toLowerCase(),
      templateId = false,
      p = 0, pairs, pair;
    if (params.contains('templateId='))
    {
      pairs = params.split('&');
      for (; p < pairs.length; p++)
      {
        pair = pairs[p].split('=');
        if (pair[0] === 'templateId')
        {
          templateId = pair[1];
          break;
        }
      }
      if (templateId) return templateId;
    }
    return false;
  }



  /**
   * Summary. ?
   * @this    Class scope
   * @access  private
   */
  BackfillConfig(config)
  {
    if (!config.hasOwnProperty('Type') && config.hasOwnProperty('ElementType')) config.Type = config.ElementType; // NO MUTATORS!!!
    if (config.hasOwnProperty('ElementType')) delete config['ElementType'];

    var cloneElementdata = $a.jsonCloneObject(this.ElementData[config.Type]);

    for (var key in cloneElementdata)
    {
      if (cloneElementdata.hasOwnProperty(key) && key !== 'Details')
      {
        if (!config.hasOwnProperty(key) || config[key] === null)
        {
          config[key] = cloneElementdata[key];
        }
      }
    }

    if ($a.isPropObject(cloneElementdata, 'Details') && $a.isPropObject(config, 'Details'))
    {
      for (key in cloneElementdata.Details)
      {
        if (cloneElementdata.Details.hasOwnProperty(key) && key !== 'AffinityField')
        {
          if (!config.Details.hasOwnProperty(key) || config.Details[key] === null)
          {
            config.Details[key] = cloneElementdata.Details[key];
          }
        }
      }
      if (config.Label !== null && config.Details.Label === null) config.Details.Label = config.Label;
    }

    return config;
  }



  /**
   * Summary. ?
   * @this    Class scope
   * @access  private
   */
  ReturnClassSafeString (str)
  {
    return $a.isString(str) ? str.trim().toLowerCase().replace(/ |_/gi, '-').trim() : false;
  }



  /**
   * Summary. ?
   * @this    Class scope
   * @access  private
   */
  ShortenString(string, length)
  {
    return string.shorten(50);
    //if (string.length > length)
    //{
    //  string = string.substr(0, length);
    //  string = string.substr(0, string.lastIndexOf(' '));
    //  string += ' ...';
    //}
    //return string;
  }



  /**
   * Summary. ?
   * @this    Class scope
   * @access  private
   */
  CheckResponseForErrorPage (str)
  {
    var message = 'OK';
    if (str && $a.type(str) === 'string' && str !== '')
    {
      if (str.contains('This is not a page!'))
      {
        message = 'Response is a 404 error page';
      }
      else if (this.IsErrorPage(str) || str.contains('<div class="error-info">'))
      {
        var errorDetails = this.GetDetailsFromErrorPage(str);
        if (errorDetails && errorDetails.Details !== '')
        {
           return errorDetails.Details;
        }
        var from = str.indexOf('<h1>', str.indexOf('<div class="error-info">')) + 4, to = str.indexOf('</h1>', from);
        message = str.substring(from, to).trim();
      }
    }
    if (this.IsErrorPage(str))
    {
      var errorDetails = this.GetDetailsFromErrorPage(str);
      if (errorDetails && errorDetails.Details !== '')
      {
          return errorDetails.Details;
      }
    }
    return message;
  }



  /***************************************************************************************************************************************************/
  /***************************************************************************************************************************************************/
  /***                                                                                                                                            ****/
  /***    █████  ███████ ███████ ██ ███    ██ ████████ ██    ██     ███████ ██ ███████ ██      ██████      ██       ██████   ██████  ██  ██████   ****/
  /***   ██   ██ ██      ██      ██ ████   ██    ██     ██  ██      ██      ██ ██      ██      ██   ██     ██      ██    ██ ██       ██ ██        ****/
  /***   ███████ █████   █████   ██ ██ ██  ██    ██      ████       █████   ██ █████   ██      ██   ██     ██      ██    ██ ██   ███ ██ ██        ****/
  /***   ██   ██ ██      ██      ██ ██  ██ ██    ██       ██        ██      ██ ██      ██      ██   ██     ██      ██    ██ ██    ██ ██ ██        ****/
  /***   ██   ██ ██      ██      ██ ██   ████    ██       ██        ██      ██ ███████ ███████ ██████      ███████  ██████   ██████  ██  ██████   ****/
  /***                                                                                                                                            ****/
  /***************************************************************************************************************************************************/
  /************************************************************************************************************** Source63 *** Affinty Field Logic ***/



  /**
   * Summary. Get the employee number that is on the current form (not the logged in user)
   * @this    Class scope
   * @access  private
   */
  GetFormEmployeeNo()
  {
    var emp = -1;
    if (
      Affinity2018.hasOwnProperty('FormProfile')
      && Affinity2018.FormProfile.hasOwnProperty('EmployeeNumber')
      && Affinity2018.toString(Affinity2018.FormProfile.EmployeeNumber) !== ''
    )
    {
      emp = parseInt(Affinity2018.FormProfile.EmployeeNumber);
    }
    if (Affinity2018.Apps.CleverForms.hasOwnProperty('Form'))
    {
      emp = parseInt(Affinity2018.Apps.CleverForms.Form.GetFormEmployeeNo(emp));
    }
    if (emp === '') return -1; // emp is text and empty
    else if (emp === 0) return -1; // emp is create new
    else if (Affinity2018.toString(emp) === 'NaN') return -1; // emp is empty or can not be parsed
    else return emp;
    return null;
  }



  /**
   * Summary. ?
   * @this    Class scope
   * @access  private
   */
  IsGlobalKey (config)
  {
    if (!config.hasOwnProperty('Details')) return false;
    if (!config.Details.hasOwnProperty('AffinityField')) return false;
    if (this.AllowedGlobalKeys.contains(config.Details.AffinityField.FieldName)) return true;
    return false
  }



  /**
   * Summary. ?
   * @this    Class scope
   * @access  private
   */
  IsPseudoGlobalKey (config)
  {
    if (!config.hasOwnProperty('Details')) return false;
    if (!config.Details.hasOwnProperty('AffinityField')) return false;
    if (this.PseudoGlobalElementTypes.contains(config.Type)) return true;
    return false
  }



  /**
   * Summary. ?
   * @this    Class scope
   * @access  private
   */
  IsKey (config)
  {
    if (!config.hasOwnProperty('Details')) return false;
    if (!config.Details.hasOwnProperty('AffinityField')) return false;
    if (config.Details.AffinityField.IsKeyField) return true;
    return false;
  }

    /**
 * Summary. ?
 * @this    Class scope
 * @access  private
 */
  IsReadOnly(config)
  {
    if (!config.hasOwnProperty('Details')) return false;
    if (!config.Details.hasOwnProperty('AffinityField')) return false;
    if (config.Details.AffinityField.IsReadOnly) return true;
    return false;
  }


  /**
   * Summary. ?
   * @this    Class scope
   * @access  private
   */
  IskeyWithNoRequiredKeys (config)
  {
    if (!config.hasOwnProperty('Details')) return false;
    if (!config.Details.hasOwnProperty('AffinityField')) return false;
    if (
      config.Details.AffinityField.IsKeyField
      && $a.type(config.Details.AffinityField.KeyFields) === 'array'
      && config.Details.AffinityField.KeyFields.length === 0
    ) return true;
    return false;
  }



  /**
   * Summary. ?
   * @this    Class scope
   * @access  private
   */
  IsMasterFile (config)
  {
    if (
      $a.isPropObject(config, 'Details')
      && $a.isPropObject(config.Details, 'AffinityField')
      && $a.isPropString(config.Details.AffinityField, 'ModelName')
      && !this.MasterfileTableBlacklist.contains(config.Details.AffinityField.ModelName)
    ) return true;
    return false;
  }



  /**
   * Summary. ?
   * @this    Class scope
   * @access  private
   */
  IsLookup (config)
  {
    if (!config.hasOwnProperty('Details')) return false;
    if (!config.Details.hasOwnProperty('AffinityField')) return false;
    if (
      $a.isString(config.Details.AffinityField.LookupTable)
      && config.Details.AffinityField.LookupTable.trim() !== ''
    ) return true;
    return false;
  }



  /**
   * Summary. ?
   * @this    Class scope
   * @access  private
   */
  InsertEmptyListItem (dataList, required, selected)
  {
    if (this.InsertLookupEmptyOption)
    {
      if (required)
      {
        dataList.unshift({ Key: this.InsertLookupEmptyRequiredDisplay, Value: this.InsertLookupEmptyRequiredValue, Selected: selected });
      }
      else
      {
        dataList.unshift({ Key: this.InsertLookupEmptyDisplay, Value: this.InsertLookupEmptyValue, Selected: selected });
      }
    }
    return dataList;
  }



  /**
   * Summary. ?
   * @this    Class scope
   * @access  private
   */
  GetEmptyListOption (required, selected)
  {
    var option = '';
    if (this.InsertLookupEmptyOption)
    {
      if (required)
      {
        option = '<option value="{Value}"{Selected}>{Display}</option>'.format({
          Display: this.InsertLookupEmptyRequiredDisplay,
          Value: this.InsertLookupEmptyRequiredValue,
          Selected: selected ? ' selected="selected"' : ''
        });
      }
      else
      {
        option = '<option value="{Value}"{Selected}>{Display}</option>'.format({
          Display: this.InsertLookupEmptyDisplay,
          Value: this.InsertLookupEmptyValue,
          Selected: selected ? ' selected="selected"' : ''
        });
      }
    }
    return option;
  }



  /**
   * Summary. ?
   * @this    Class scope
   * @access  private
   */
  GetCountryOptons(country)
  {
    country = country || this.DefaultCountryCode;
    var options = [];
    for (var key in this.CountryCodeMap)
    {
      var selected = country.trim().toLowerCase() === this.CountryCodeMap[key].trim().toLowerCase() || country.trim().toLowerCase() === key.trim().toLowerCase();
      var code = this.GetCountryCodeVariant(key);
      var display = this.CountryDisplayMap[code];
      options.push(
        '<option value="{value}"{selected}>{display}</option>'.format({
          display: display, //this.CountryCodeMap[key],
          value: code, //key,
          selected: selected ? ' selected' : ''
        })
      );
    }
    return options.join('');
  }



  /**
   * Summary. ?
   * @this    Class scope
   * @access  private
   */
  GetCountryCodeVariant(country)
  {
    if (!Affinity2018.isString(country)) return country;
    country = country.toString().trim().toUpperCase();
    if (this.CountryCodes.contains(country))
    {
      return country.length === 2 ? this.CountryCodeMap[country] : country;
    }
    return country;
  }



  /**
   * Summary. ?
   * @this    Class scope
   * @access  private
   */
  GetCountryShortVariant(country)
  {
    if (!Affinity2018.isString(country)) return country;
    country = country.toString().trim().toUpperCase();
    var code = this.GetCountryCodeVariant(country);
    if (this.CountryShortMap[code])
    {
      return this.CountryShortMap[code];
    }
    return country;
  }



  /**
   * Summary. ?
   * @this    Class scope
   * @access  private
   */
  GetCountryDisplayVariant(country)
  {
    if (!Affinity2018.isString(country)) return country;
    country = country.toString().trim().toUpperCase();
    // new full display
    var code = this.GetCountryCodeVariant(country);
    if (this.CountryDisplayMap[code])
    {
      return this.CountryDisplayMap[code]
    }
    // old two char display
    if (this.CountryCodes.contains(country))
    {
      //return country.length === 1 && this.CountryCodeMap.hasOwnProperty(country) ? this.CountryCodeMap[country] : country;
      return country.length === 1 ? Object.keys(this.CountryCodeMap).find(key => this.CountryCodeMap[key] === country) : country;
    }
    return country;
  }



  /**
   * Summary. ?
   * @this    Class scope
   * @access  private
   */
  GetCountryWarning(node, oldVlaue, newValue, oldCountry, newCountry, popup)
  {
    popup = popup || false;
    var rowNode = $a.getParent(node, 'row-affinityfield');
    if (rowNode)
    {
      var name = rowNode.querySelector('label').innerText.trim();
      var currentField = rowNode.dataset.field;
      var warningFieldList = [];
      for (var key in this.CountrySensativeFields)
      {
        if (key !== currentField)
        {
          var sensativeFieldData = this.CountrySensativeFields[key];
          if (sensativeFieldData.OnlyInForm)
          {
            var sectionNode = $a.getParent(rowNode, 'section');
            if (sectionNode && sectionNode.querySelector('.form-row[data-field="' + key + '"]'))
            {
              warningFieldList.push(sensativeFieldData.Name);
            }
          }
          else warningFieldList.push(sensativeFieldData.Name);
        }
      }
      if (popup)
      {
        return $a.Lang.ReturnPath('application.cleverfroms.template_edit.country_warning_popup', {
          name: name,
          oldValue: oldVlaue,
          newValue: newValue,
          oldCountry: this.GetCountryDisplayVariant(oldCountry),
          newCountry: this.GetCountryDisplayVariant(newCountry),
          list: warningFieldList.join('<br />')
        });
      }

      return $a.Lang.ReturnPath('application.cleverfroms.template_edit.country_warning', {
        name: name,
        oldValue: oldVlaue,
        newValue: newValue,
        oldCountry: this.GetCountryDisplayVariant(oldCountry),
        newCountry: this.GetCountryDisplayVariant(newCountry),
        list: warningFieldList.join('<br />')
      });

    }
    return '';
  }



  /**
   * Summary. ?
   * @this    Class scope
   * @access  private
   */
  LockEmployeeSelect()
  {
    var empSelectClass = '.form-row.row-affinityfield.is-employee-no select';
    if (document.querySelector(empSelectClass))
    {
      var node = document.querySelector(empSelectClass);
      var widget = node.widgets.Autocomplete;
      widget.lock();
      this.EmployeeSelectLocked = true;
    }
  }
  ReleaseEmployeeSelect()
  {
    var empSelectClass = '.form-row.row-affinityfield.is-employee-no select';
    if (document.querySelector(empSelectClass))
    {
      var node = document.querySelector(empSelectClass);
      var widget = node.widgets.Autocomplete;
      widget.release();
      this.EmployeeSelectLocked = false;
    }
  }


  /**
   * Summary. ?
   * @this    Class scope
   * @access  private
   */
  ReturnExisitingModelKeyNode(modelName, fromNode)
  {
    var query, keyNode = null;
    if (Affinity2018.Apps.CleverForms.hasOwnProperty('Designer'))
    {
      var rightListNode = Affinity2018.Apps.CleverForms.Designer.RightListNode;
      if (keyNode !== null)
      {
        query = 'li[data-type="AffinityField"][data-model="{0}"].is-global-key'.format(modelName);
        if (rightListNode.querySelector(query)) keyNode = rightListNode.querySelector(query);
      }
      if (keyNode !== null)
      {
        query = 'li[data-type="AffinityField"][data-model="{0}"].is-key-field'.format(modelName);
        if (rightListNode.querySelector(query)) keyNode = rightListNode.querySelector(query);
      }
    }
    if (
      !Affinity2018.Apps.CleverForms.hasOwnProperty('Designer')
      && Affinity2018.Apps.CleverForms.hasOwnProperty('Form')
    )
    {
      query = 'div.form-row.row-affinityfield.is-global-key[data-model="{0}"]'.format(modelName);
      if (document.querySelector(query)) keyNode = document.querySelector(query);
    }
    return keyNode;
  }



  /**
   * Summary. ?
   * @this    Class scope
   * @access  private
   */
  ReturnExisitingModelNode(modelName, fromNode)
  {
    var keyNode = this.ReturnExisitingModelKeyNode(modelName, fromNode);
    if (keyNode === null && Affinity2018.Apps.CleverForms.hasOwnProperty('Designer'))
    {
      var rightListNode = Affinity2018.Apps.CleverForms.Designer.RightListNode, query;
      query = 'li[data-type="AffinityField"][data-model="{0}"]'.format(modelName);
      if (rightListNode.querySelector(query)) keyNode = rightListNode.querySelector(query);
    }
    return keyNode;
  }



  /**
   * Summary. ?
   * @this    Class scope
   * @access  private
   */
  SelectDefaultModeOnFieldSearch (config)
  {

    var filterOptions = $a.jsonCloneObject(this.AffnityFieldModeTypes); // all but Create are hidden by default
    var defaultMode = 0, // create
       defaultModeName = 'Create',
       isGolbalKey = this.IsGlobalKey(config),
       isKey = this.IsKey(config),
       isLookup = this.IsLookup(config),
       isMasterFile = this.IsMasterFile(config),
       iskeyWithNoRequiredKeys = this.IskeyWithNoRequiredKeys(config),
       isReadOnly = this.IsReadOnly(config);


    /* SET AVAIABLE OPTIONS */

    if (isGolbalKey) // EG: Employee Number
    {
      filterOptions.Edit.Show = false;
      filterOptions.Select.Show = true;
      filterOptions.Create.Show = true;
      filterOptions.Hidden.Show = true;
      filterOptions.Initiator.Show = true;
      defaultMode = 4; // Select
    }

    /**/

    if (!isGolbalKey && isMasterFile)
    {
      if (isReadOnly && !isKey)
      {
        filterOptions.Edit.Show = false;
        filterOptions.Select.Show = isLookup;
        filterOptions.Create.Show = false;
        filterOptions.Display.Show = true;
        defaultMode = isLookup ? 4 : 2; // Select for Lookup or Display for non Lookup
      }
      else if (isReadOnly && isKey)
      {
        filterOptions.Edit.Show = false;
        filterOptions.Select.Show = true;
        filterOptions.Create.Show = true;
        filterOptions.Display.Show = true;
        defaultMode = 0; // Create
      }
      else if (iskeyWithNoRequiredKeys) // if is a key but has no requires keys
      { 
        filterOptions.Edit.Show = false;
        filterOptions.Select.Show = true;
        filterOptions.Create.Show = true;

        defaultMode = 0; // Create

        if (isLookup)
        {
          filterOptions.Create.Show = false;
          filterOptions.Display.Show = false;

          defaultMode = 4; // Select
        }
      }
      else if (!iskeyWithNoRequiredKeys && isKey && isLookup)
      {
        filterOptions.Create.Show = false;
        filterOptions.Display.Show = false;

        defaultMode = 4; // Select
      }
      else if (isLookup) // if is a lookup
      {
        filterOptions.Create.Show = false;
        filterOptions.Edit.Show = false;
        filterOptions.Select.Show = true;

        defaultMode = 4; // Select
      }
      else
      {
        filterOptions.Create.Show = true;
        filterOptions.Edit.Show = true;

        defaultMode = 0; // Create
      }
    }

    /**/

    if (!isMasterFile)
    {
      if (isLookup) // EG: REASON
      {
        filterOptions.Edit.Show = false;
        filterOptions.Select.Show = true;
        filterOptions.Display.Show = false;
        filterOptions.Create.Show = false;

        defaultMode = 4; // Select
      }
      else  // EG: SDATE
      {
        filterOptions.Select.Show = false;
        filterOptions.Display.Show = false;
        filterOptions.Create.Show = true;

        defaultMode = 0; // Create
      }
    }

    // no keys can be display
    if (isKey || isGolbalKey) filterOptions.Display.Show = false;

    /* check section and template for appropriate default mode */

    var existingKeyNode = this.ReturnExisitingModelKeyNode(config.Details.AffinityField.ModelName);
    var exisitngMatchFailed = false;
    if (existingKeyNode && isMasterFile)
    {
      var existingMode = existingKeyNode.controller.Config.Details.AffinityField.Mode;
      var existingModeName = existingMode !== null ? this.AffnityFieldModeEnums[existingMode].Name : null;
      if (existingModeName)
      {
        if (!isLookup && [1, 4].contains(existingMode)) // existing is edit or select
        {
          if (defaultMode !== 1 && filterOptions.Edit.Show) defaultMode = 1; // edit
          else if (filterOptions[existingModeName].Show) defaultMode = existingMode; // edit
          else exisitngMatchFailed = true;
        }
        else if (isLookup && (existingMode === 0 || existingMode === 1))
        {
          defaultMode = 4;
        }
        else
        {
          if (filterOptions[existingModeName].Show) defaultMode = existingMode;
          else  exisitngMatchFailed = true;
        }
      }
      if (exisitngMatchFailed)
      {
        var errorMessage = 'ERROR! Can not select default Mode "{0}" ({1}). Option is Hidden.'.format(
          existingModeName, existingMode
        );
        console.log('%c' + errorMessage, 'color:#e33100;font-weight:bold');
        Affinity2018.ThrowError('Mode Error', 'critical', errorMessage);
      }
    }

    /**/
    
    filterOptions.Hidden.Show = false; // always hide Hidden now please

    if (defaultMode !== null)
    {
      defaultModeName = this.AffnityFieldModeEnums[defaultMode].Name;
      console.groupCollapsed('%cDefault Mode & Mode Options Selected:', 'color:#b27e0f');
      console.log('%cDefault Mode: "' + defaultModeName + '" (' + defaultMode + ')', 'color:#b27e0f');
      console.log('%cDefault Mode Options:', 'color:#b27e0f');
      config.Details.AffinityField.Mode = defaultMode;
      config.Details.AffinityField.ModeOptions = [];
      for (var key in filterOptions)
      {
        var filterOption = filterOptions[key];
        if (filterOption.Show)
        {
          config.Details.AffinityField.ModeOptions.push(filterOption.Enum);
          console.log('%c\t' + filterOption.Name + ' is Available', 'color:#b27e0f');
        }
        else
        {
          console.log('%c\t' + filterOption.Name + ' is Hidden', 'color:#b27e0f');
        }
      }
      console.groupEnd();
    }
    else
    {
      config.Details.AffinityField.Mode = -1;
      config.Details.AffinityField.ModeOptions = [];
      // epic fail
    }

    return config;
  }



  /**
   * Summary. ?
   * @this    Class scope
   * @access  private
   */
  OrderObject(obj)
  {
    var orderKeys = function (obj)
    {
      var rtn = {};
      var keys = Object.keys(obj);
      keys.sort();
      for (var k = 0; k < keys.length; k++)
      {
        var key = keys[k];
        var keyValue = obj[key];
        if ($a.isObject(keyValue))
        {
          rtn[key] = orderKeys(keyValue);
        }
        else if ($a.isArray(keyValue))
        {
          rtn[key] = [];
          for (var a = 0; a < keyValue.length; a++)
          {
            var arrayValue = keyValue[a];
            if ($a.isObject(arrayValue))
            {
              rtn[key][a] = orderKeys(arrayValue);
            }
            else if ($a.isArray(arrayValue))
            {
              rtn[key][a] = orderKeys(arrayValue);
            }
            else rtn[key][a] = arrayValue;
          }
          rtn[key].sort();
        }
        else rtn[key] = obj[key];
      }
      return rtn;
    };
    return orderKeys(obj);
  }



  /**
   * Summary. ?
   * @this    Class scope
   * @access  private
   */
  IsErrorPage(error)
  {
    if (Affinity2018.isString(error)) return error.contains('<!DOCTYPE html>');
    if (
      error
      && error.hasOwnProperty('response')
      && $a.isObject(error.response)
      && error.response.hasOwnProperty('data')
      && $a.isString(error.response.data)
      && error.response.data.contains('<!DOCTYPE html>')
    )
    {
      return true;
    }
    return false;
  }



  /**
   * Summary. ?
   * @this    Class scope
   * @access  private
   */
  GetDetailsFromErrorPage (error)
  {
    var output = null;

    if (this.IsErrorPage(error))
    {

      output = {
        Title: '',
        Source: '',
        Description: '',
        Details: '',
        Lines: []
      };

      var from, to, message, errors, test, linenum;

      var clean = function (str)
      {
        str = str.replace(/(\<br\>)/g, ' - ');
        str = str.replace(/(\<b\>)/g, '');
        str = str.replace(/(\<\/b\>)/g, '');
        str = str.replace(/(\&nbsp\;)/g, ' ');
        str = str.replace(/  +/g, ' ').trim();
        return str;
      }

      if (
        error
        && error.hasOwnProperty('response')
        && $a.isObject(error.response)
        && error.response.hasOwnProperty('data')
        && $a.isString(error.response.data)
        && error.response.data.contains('<!DOCTYPE html>')
      )
      {
        error = error.response.data;
      }

      if (error.contains('<title>') && error.contains('</title>'))
      {
        from = error.indexOf('<title>') + 7;
        to = error.indexOf('</title>', from);
        message = error.substr(from, to - from).trim();
        if (message.trim() !== '') output.Title = clean(message);
      }

      if (error.contains('<b> Source File: </b>'))
      {
        from = error.indexOf('<b> Source File: </b>') + 11;
        to = error.indexOf('<br>', from);
        message = error.substr(from, to - from).trim();
        if (message.trim() !== '') output.Source = clean(message.replace('File:', ''));
      }

      if (error.contains('<b> Description: </b>'))
      {
        from = error.indexOf('<b> Description: </b>') + 21;
        to = error.indexOf('<br>', from);
        message = error.substr(from, to - from).trim();
        if (message.trim() !== '') output.Description = clean(message);
      }

      if (error.contains('<b> Exception Details: </b>'))
      {
        from = error.indexOf('<b> Exception Details: </b>') + 27;
        to = error.indexOf('<br>', from);
        message = error.substr(from, to - from).trim();
        if (message.trim() !== '') output.Details = clean(message);
      }

      if (error.contains('pre'))
      {
        from = error.indexOf('<pre>') + 4;
        to = error.indexOf('</pre>', from);
        errors = error.substr(from, to - from).split('\n');
        errors.forEach(function (line)
        {
          linenum = '';
          if (line.contains('Line ') && line.contains(':'))
          {
            from = line.indexOf('Line ') + 5;
            to = line.indexOf(':');
            linenum = 'Line ' + line.substr(from, to - from) + ': ';
            test = line.substr(to + 1).trim();
          }
          else test = line.trim();
          if (test !== '{' && test !== '}' && test !== '>' && test !== '')
          {
            output.Lines.push(clean(linenum + test));
          }
        });
      }
    }
    return output;
  }



  /**
   * Summary. ?
   * @this    Class scope
   * @access  private
   */
  GetErrorPageOutputString(error)
  {
    var output = '';
    if (this.IsErrorPage(error)) error = this.GetDetailsFromErrorPage(error);
    if ($a.isObject(error))
    {
      var outLines = [];
      if (error.hasOwnProperty('Title') && error.Title !== '') outLines.push(error.Title);
      else outLines.push('Error');
      if (error.hasOwnProperty('Details') && error.Details !== '') outLines.push(error.Details);
      if (error.hasOwnProperty('Description') && error.Description !== '') outLines.push(error.Description);
      if (error.hasOwnProperty('Source') && error.Source !== '') outLines.push(error.Source);
      if (error.hasOwnProperty('Lines') && error.Lines.length > 0)
      {
        for (var l = 0; l < error.Lines.length; l++)
        {
          if ($a.isString(error.Lines[l]) && error.Lines[l] !== '')
          {
            outLines.push('\t' + $a.decodeHTML(error.Lines[l]));
          }
        }
      }
      output = outLines.join('\n');
    }
    return output;
  }




  /***************************************************************************************************************************************************/
  /***************************************************************************************************************************************************/
  /***                                                                                                                           *********************/
  /***   ██████  ██████  ██ ██    ██  █████  ████████ ███████     ███    ███ ███████ ████████ ██   ██  ██████  ██████  ███████   *********************/
  /***   ██   ██ ██   ██ ██ ██    ██ ██   ██    ██    ██          ████  ████ ██         ██    ██   ██ ██    ██ ██   ██ ██        *********************/
  /***   ██████  ██████  ██ ██    ██ ███████    ██    █████       ██ ████ ██ █████      ██    ███████ ██    ██ ██   ██ ███████   *********************/
  /***   ██      ██   ██ ██  ██  ██  ██   ██    ██    ██          ██  ██  ██ ██         ██    ██   ██ ██    ██ ██   ██      ██   *********************/
  /***   ██      ██   ██ ██   ████   ██   ██    ██    ███████     ██      ██ ███████    ██    ██   ██  ██████  ██████  ███████   *********************/
  /***                                                                                                                           *********************/
  /***************************************************************************************************************************************************/
  /***************************************************************************************************************************************************/



  /**
   * Summary. ?
   * @this    Class scope
   * @access  private
   */
  _getUserData()
  {

    /** Get logged in user data **/

    var api = null;

    if (
      Affinity2018.isPropObject(Affinity2018, 'ApiEndpoints')
      && Affinity2018.isPropString(Affinity2018.ApiEndpoints, 'GetUserDataApi')
      && Affinity2018.ApiEndpoints.GetUserDataApi.trim() !== ''
    )
    {
      api = (Affinity2018.ApiEndpoints.GetUserDataApi + '?InstanceId={id}').format({ id: this.GetInstanceGuid() });
    }
    else
    {
      this._getUserDataError('Failed to get API');
      return;
    }

    // Using events here to break out of promise scope

    if ('sessionStorage' in window)
    {
      if (sessionStorage.getItem('UserProfile'))
      {
        var profileStr = sessionStorage.getItem('UserProfile') || '{}';
        try
        {
          var profile = JSON.parse(profileStr);
          //if (
          //  profile.EmployeeNo === Affinity2018.UserProfile.FormEmployeeNumber
          //  || profile.FormInstaceId === this.GetInstanceGuid()
          //)
          if (profile.hasOwnProperty('CompanyNumber') && profile.hasOwnProperty('EmployeeNo'))
          {
            Affinity2018.UserProfile = profile;
            window.dispatchEvent(new Event('GotUserData'));
            window.dispatchEvent(new CustomEvent('GAReady', { bubbles: true, detail: { companyNumber: Affinity2018.UserProfile.CompanyNumber, employeeNumber: Affinity2018.UserProfile.EmployeeNumber } }));
            this.OnInit();
            return;
          }
        }
        catch (joErr)
        {
          console.warn('Could not load existing user from session: ', joErr);
        }
      }
    }

    window.addEventListener('GotUser', this._gotUserData);
    axios({
      method: 'GET',
      url: api
    })
      .then(function (response) { window.dispatchEvent(new CustomEvent('GotUser', { detail: response })); }.bind(this))
      .catch(this._getUserDataError);
  }


  /**
   * Summary. ?
   * @this    Class scope
   * @access  private
   */
  _gotUserData(response)
  {
    window.removeEventListener('GotUser', this._gotUserData);
    if ('detail' in response) response = response.detail;
    if (
      Affinity2018.isPropObject(response, 'data')
      && Affinity2018.isPropInt(response.data, 'EmployeeNumber')
    )
    {
      var paypoint = "";
      if (response.data.hasOwnProperty('EmployeePayPoint')) paypoint = $a.toString(response.data.EmployeePayPoint);
      if (response.data.hasOwnProperty('PayPoint')) paypoint = $a.toString(response.data.PayPoint);

      var country = "A";
      if (response.data.hasOwnProperty('EmployeeCountry')) country = $a.toString(response.data.EmployeeCountry);
      if (response.data.hasOwnProperty('PayPointCountry')) country = $a.toString(response.data.PayPointCountry);

      Affinity2018.UserProfile = {
        CompanyNumber: $a.toString(response.data.CompanyNumber),
        EmployeeNumber: $a.toString(response.data.EmployeeNumber),
        UserGuid: 'e0000000-0000-0000-0000-000000000000',
        PayPoint: paypoint,
        Country: country
      };
      Affinity2018.UserProfile.UserGuid = 'e' + Affinity2018.UserProfile.EmployeeNumber.padLeft('0', 7) + '-' + Affinity2018.UserProfile.CompanyNumber + '-0000-0000-000000000000';
      if ('sessionStorage' in window) sessionStorage.setItem('UserProfile', JSON.stringify(Affinity2018.UserProfile));
      window.dispatchEvent(new Event('GotUserData'));
      window.dispatchEvent(new CustomEvent('GAReady', { bubbles: true, detail: { companyNumber: Affinity2018.UserProfile.CompanyNumber, employeeNumber: Affinity2018.UserProfile.EmployeeNumber } }));
      this.OnInit();
    }
    else
    {
      this._getUserDataError('Failed to get data from response');
    }

    Affinity2018.HidePageLoader();
  }


  /**
   * Summary. ?
   * @this    Class scope
   * @access  private
   */
  _getUserDataError(subError)
  {
    var error = 'Could not get logged in user data. ' + subError + '. CleverForms Default failed.';
    Affinity2018.LogError('Bootstrap Error', 'critical', error);
    this.OnError(error);

    Affinity2018.HidePageLoader();
  }


  /**
   * Summary. ?
   * @this    Class scope
   * @access  private
   */
  _getEmployeeData(employeeNo)
  {

    /** Get form user data **/

    if (
      // No emp selected - starting a new form, so use logged in user
      employeeNo === null
      || $a.toString(employeeNo).toLowerCase() === 'null'
      || $a.toString(employeeNo) === ''
      // Employee is 0, or "create new employee"
      || employeeNo === 0
      || $a.toString(employeeNo) === '0'
      // Employee is already set to -1 becuase it is 0 or none
      || $a.toString(employeeNo) === '-1'
    )
    {
      Affinity2018.FormProfile = {
        CompanyNumber: Affinity2018.UserProfile.CompanyNumber,
        EmployeeNumber: '',
        UserGuid: 'e0000000-0000-0000-0000-000000000000',
        PayPoint: '',
        Country: ''
      };
      this.ProfileStatus = this.LoadStatusEnum.Null;
      window.dispatchEvent(new CustomEvent('GotEmployeeData'));
      return;
    }

    var api = null;

    if (
      Affinity2018.isPropObject(Affinity2018, 'ApiEndpoints')
      && Affinity2018.isPropString(Affinity2018.ApiEndpoints, 'GetFormUserDataApi')
      && $a.toString(Affinity2018.ApiEndpoints.GetFormUserDataApi) !== ''
    )
    {
      api = (Affinity2018.ApiEndpoints.GetFormUserDataApi + '?EmployeeNo={employeeNo}').format({ employeeNo: employeeNo });
    }
    else
    {
      this.ProfileStatus = this.LoadStatusEnum.Error;
      this._gotEmployeeDataError('Failed to get API');
      return;
    }

    // Using events here to break out of promise scope for debugging

    if ('sessionStorage' in window)
    {
      if (sessionStorage.getItem('FormProfile'))
      {
        var profileStr = sessionStorage.getItem('FormProfile') || '{}';
        try
        {
          var profile = JSON.parse(profileStr);
          if (profile.hasOwnProperty('CompanyNumber') && profile.hasOwnProperty('EmployeeNumber') && profile.EmployeeNumber.toString().trim() == employeeNo.toString().trim())
          {
            Affinity2018.FormProfile = profile;
            this.ProfileStatus = this.LoadStatusEnum.Complete;
            window.dispatchEvent(new CustomEvent('GotEmployeeData'));
            return;
          }
        }
        catch (joErr)
        {
          console.warn('Could not load existing user from session: ', joErr);
        }
      }
    }

    Affinity2018.ShowPageLoader();
    this.LockEmployeeSelect();

    this.ProfileStatus = this.LoadStatusEnum.Loading;

    window.addEventListener('GotEmployee', this._gotEmployeeData);
    axios({
      method: 'GET',
      url: api
    })
      .then(function (response) { window.dispatchEvent(new CustomEvent('GotEmployee', { detail: response })); }.bind(this))
      .catch(this._gotEmployeeDataError);
  }


  /**
   * Summary. ?
   * @this    Class scope
   * @access  private
   */
  _gotEmployeeData(response)
  {
    window.removeEventListener('GotEmployee', this._gotEmployeeData);
    if ('detail' in response) response = response.detail;
    if (
      Affinity2018.isPropObject(response, 'data')
      && Affinity2018.isPropInt(response.data, 'EmployeeNumber')
    )
    {
      var paypoint = "";
      if (response.data.hasOwnProperty('EmployeePayPoint')) paypoint = $a.toString(response.data.EmployeePayPoint);
      if (response.data.hasOwnProperty('PayPoint')) paypoint = $a.toString(response.data.PayPoint);

      var country = "A";
      if (response.data.hasOwnProperty('EmployeeCountry')) country = $a.toString(response.data.EmployeeCountry);
      if (response.data.hasOwnProperty('PayPointCountry')) country = $a.toString(response.data.PayPointCountry);

      Affinity2018.FormProfile = {
        CompanyNumber: $a.toString(response.data.CompanyNumber),
        EmployeeNumber: $a.toString(response.data.EmployeeNumber),
        UserGuid: 'e0000000-0000-0000-0000-000000000000',
        PayPoint: paypoint,
        Country: country
      };

      if ($a.toString(response.data.EmployeeNumber) !== '') Affinity2018.FormProfile.UserGuid = 'e' + Affinity2018.FormProfile.EmployeeNumber.padLeft('0', 7) + '-' + Affinity2018.FormProfile.CompanyNumber + '-0000-0000-000000000000';
      if ('sessionStorage' in window) sessionStorage.setItem('FormProfile', JSON.stringify(Affinity2018.FormProfile));
      this.ProfileStatus = this.LoadStatusEnum.Complete;
      window.dispatchEvent(new CustomEvent('GotEmployeeData'));
    }
    else
    {
      this.ProfileStatus = this.LoadStatusEnum.Error;
      this._gotEmployeeDataError('Failed to get data from response');
    }

    Affinity2018.HidePageLoader();
    if (this.EmployeeSelectLocked && this.ModelStatus === this.LoadStatusEnum.Complete) this.ReleaseEmployeeSelect();
  }


  /**
   * Summary. ?
   * @this    Class scope
   * @access  private
   */
  _gotEmployeeDataError(subError)
  {
    this.ProfileStatus = this.LoadStatusEnum.Error;

    var error = 'Could not get employee user data. ' + subError + '. CleverForms Default failed.';
    Affinity2018.LogError('Bootstrap Error', 'critical', error);
    this.OnError(error);

    Affinity2018.HidePageLoader();
    this.ReleaseEmployeeSelect();
  }


  /**
   * Summary. ?
   * @this    Class scope
   * @access  private
   */
  _isEmployeeDataReady()
  {
    var empSelectClass = '.form-row.row-affinityfield.is-employee-no select';
    var empCheck = document.querySelector(empSelectClass) ? Affinity2018.FormProfile.EmployeeNumber.toString().trim() === document.querySelector(empSelectClass).value.toString().trim() : true;
    if (this.ModelStatus === this.LoadStatusEnum.Complete && empCheck)
    {
      return true;
    }
    return false;
  }




  /***************************************************************************************************************************************************/
  /***************************************************************************************************************************************************/
  /***                                                                                                                             *******************/
  /***   ███    ██  ██████      ████████ ██████   █████  ███    ██ ███████ ███    ███ ██    ██ ████████  ██████  ██████  ███████   *******************/
  /***   ████   ██ ██    ██        ██    ██   ██ ██   ██ ████   ██ ██      ████  ████ ██    ██    ██    ██    ██ ██   ██ ██        *******************/
  /***   ██ ██  ██ ██    ██        ██    ██████  ███████ ██ ██  ██ ███████ ██ ████ ██ ██    ██    ██    ██    ██ ██████  ███████   *******************/
  /***   ██  ██ ██ ██    ██        ██    ██   ██ ██   ██ ██  ██ ██      ██ ██  ██  ██ ██    ██    ██    ██    ██ ██   ██      ██   *******************/
  /***   ██   ████  ██████         ██    ██   ██ ██   ██ ██   ████ ███████ ██      ██  ██████     ██     ██████  ██   ██ ███████   *******************/
  /***                                                                                                                             *******************/
  /***************************************************************************************************************************************************/
  /******************************************************************************************************************* Source63 *** NO MUTATORS!!! ***/



  __THIS_IS_A_TEMP_TRANSMUTER_FOR_G_G_G_GET_DATA_UNTIL_GET_DATA_MATCHES_NEW_STRUCTURE(oldConfig, templateData)
  {
    var newConfig;
    if (oldConfig.hasOwnProperty('Type'))
    {
      newConfig = $a.jsonCloneObject(this.ElementData[oldConfig.Type]);

      newConfig.Name = oldConfig.Name;
      newConfig.Elements = oldConfig.Elements; // TODO: New data is missing "Elements"

      if (newConfig.hasOwnProperty('Details'))
      {

        newConfig.Details.Rank = oldConfig.Rank; // TODO: New data is missing "Rank"
        
        // TODO: Requires Alignment
        if (oldConfig.hasOwnProperty('UserText') && newConfig.Details.hasOwnProperty('Label')) newConfig.Details.Label = oldConfig.UserText;
        if (oldConfig.hasOwnProperty('Text') && newConfig.Details.hasOwnProperty('Label')) newConfig.Details.Label = oldConfig.Text;
        if (oldConfig.hasOwnProperty('Tooltip') && newConfig.Details.hasOwnProperty('HelpText') && oldConfig.Tooltip !== newConfig.Tooltip) newConfig.Details.HelpText = oldConfig.Tooltip;

        newConfig = this.__PORT_G_G_G_GET_DETAILS(oldConfig, 'HelpText', newConfig, 'HelpText');
        newConfig = this.__PORT_G_G_G_GET_DETAILS(oldConfig, 'Required', newConfig, 'Required');
        newConfig = this.__PORT_G_G_G_GET_DETAILS(oldConfig, 'DateTimeType', newConfig, 'DateTimeType');
        newConfig = this.__PORT_G_G_G_GET_DETAILS(oldConfig, 'SetDefaultValue', newConfig, 'SetDefaultValue');
        newConfig = this.__PORT_G_G_G_GET_DETAILS(oldConfig, 'VideoId', newConfig, 'VideoId');
        newConfig = this.__PORT_G_G_G_GET_DETAILS(oldConfig, 'FileName', newConfig, 'FileName');
        newConfig = this.__PORT_G_G_G_GET_DETAILS(oldConfig, 'UrlLink', newConfig, 'UrlLink');
        newConfig = this.__PORT_G_G_G_GET_DETAILS(oldConfig, 'DecimalNumber', newConfig, 'DecimalNumber');
        newConfig = this.__PORT_G_G_G_GET_DETAILS(oldConfig, 'ArrowDirection', newConfig, 'ArrowDirection');

        newConfig = this.__PORT_G_G_G_GET_DETAILS(oldConfig, 'ExternalTemplateId', newConfig, 'ExternalTemplateId');
        newConfig = this.__PORT_G_G_G_GET_DETAILS(oldConfig, 'Recipients', newConfig, 'Recipients');
        
        // TODO: Requires Alignment
        newConfig = this.__PORT_G_G_G_GET_DETAILS(oldConfig, 'File', newConfig, 'FileId');
        newConfig = this.__PORT_G_G_G_GET_DETAILS(oldConfig, 'FileId', newConfig, 'FileId');
        newConfig = this.__PORT_G_G_G_GET_DETAILS(oldConfig, 'LongText', newConfig, 'Text');

        newConfig = this.__PORT_G_G_G_GET_ITEMSOURCE(oldConfig, newConfig);
        newConfig = this.__PORT_G_G_G_GET_FIELSETTING(oldConfig, newConfig);

        //Marina fix: TODO: Template data is missing new Section "SectionWorkflowVisibilitySettings"
        newConfig = this.__PORT_G_G_G_GET_SECTIONWORKFLOWVISIBILITYSETTINGS(oldConfig, newConfig);

        if (newConfig.Type === 'Section')
        {
          newConfig.Details.Label = oldConfig.Details.Title; // TODO: Section should use "Label" too, instead of "Title"
          newConfig.Details.ShowTitle = oldConfig.Details.ShowTitle;
          newConfig.Details.StartCollapsed = oldConfig.Details.StartCollapsed;
          delete newConfig.Details["Title"];
        }

        if (newConfig.Type === 'Title')
        {
          newConfig.Details.Label = oldConfig.Details.Text;
          newConfig.Label = oldConfig.Details.Text;
        }

        if (newConfig.Type === 'AffinityField')
        {
          if (oldConfig.Details.hasOwnProperty('AffinityField') && oldConfig.Details.AffinityField !== null)
          {
            newConfig = this.__PORT_G_G_G_GET_AFFINITYFIELD_DATA(oldConfig, newConfig);

            if (oldConfig.Details.AffinityField.hasOwnProperty('RequiresKeys')) oldConfig.Details.AffinityField.KeyFields = oldConfig.Details.AffinityField.RequiresKeys;

            if ($a.isArray(oldConfig.Details.AffinityField.KeyFields))
            {
              if (!$a.isArray(newConfig.Details.AffinityField.KeyFields)) newConfig.Details.AffinityField.KeyFields = [];
              if (
                newConfig.Details.AffinityField.KeyFields.length === 0
                && oldConfig.Details.AffinityField.KeyFields.length > 0
              )
              {
                var i = 0, fieldName, j, k, tempConfigFrom, tempConfigTo;
                for (; i < oldConfig.Details.AffinityField.KeyFields.length; i++)
                {
                  fieldName = oldConfig.Details.AffinityField.KeyFields[i];
                  for (j = 0; j < templateData.length; j++)
                  {
                    if (templateData[j].Elements.length > 0)
                    {
                      for (k = 0; k < templateData[j].Elements.length; k++)
                      {
                        if (templateData[j].Elements[k].ElementType === 'AffinityField' && templateData[j].Elements[k].Details.AffinityField.FieldName === fieldName)
                        {
                          tempConfigFrom = {};
                          tempConfigFrom.Detail = {};
                          tempConfigFrom.Details.AffinityField = $a.jsonCloneObject(templateData[j].Elements[k].Details.AffinityField);
                          tempConfigTo = $a.jsonCloneObject(this.ElementData.AffinityField);
                          tempConfigTo = this.__PORT_G_G_G_GET_AFFINITYFIELD_DATA(tempConfigFrom, tempConfigTo);
                          tempConfigTo.Details.AffinityField.KeyFields = [];
                          newConfig.Details.AffinityField.KeyFields.push($a.jsonCloneObject(tempConfigTo.Details.AffinityField));
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          else
          {
            console.warn('trying to parse old AffinityField cofing to new when ther is no AffinityField data', oldConfig);
          }
        }
      }

      return newConfig;
    }
    return oldConfig;
  }

  __PORT_G_G_G_GET_DETAILS(fromConfig, from, toConfig, to)
  {
    if (
      fromConfig.hasOwnProperty('Details')
      && $a.isObject(fromConfig.Details)
      && fromConfig.Details.hasOwnProperty(from)
      && toConfig.hasOwnProperty('Details')
      && $a.isObject(toConfig.Details)
      && toConfig.Details.hasOwnProperty(to)
    )
    {
      toConfig.Details[to] = fromConfig.Details[from];
    }
    return toConfig;
  }

  __PORT_G_G_G_GET_ITEMSOURCE(fromConfig, toConfig)
  {
    if (
      fromConfig.hasOwnProperty('Details')
      && $a.isObject(fromConfig.Details)
      && fromConfig.Details.hasOwnProperty('ItemSource')
      && $a.isObject(fromConfig.Details.ItemSource)
      && fromConfig.Details.ItemSource.hasOwnProperty('Items')
    )
    {
      toConfig.Details.ItemSource = fromConfig.Details.ItemSource;
      if (!fromConfig.Details.ItemSource.hasOwnProperty('TableType')) toConfig.Details.ItemSource.TableType = null;
      //toConfig.Details.ItemSource = {};
      //toConfig.Details.ItemSource.Items = fromConfig.Details.ItemSource.Items;
      //toConfig.Details.AffinityTableType = fromConfig.Details.ItemSource.hasOwnProperty('TableType') ? fromConfig.Details.ItemSource.TableType : null;
      //if (fromConfig.Details.ItemSource.hasOwnProperty('TableType')) toConfig.Details.ItemSourceType = fromConfig.Details.ItemSourceType;
    }
    return toConfig;
  }

  __PORT_G_G_G_GET_FIELSETTING(fromConfig, toConfig)
  {
    if (
      fromConfig.hasOwnProperty('Details')
      && $a.isObject(fromConfig.Details)
      && fromConfig.Details.hasOwnProperty('FileSetting')
      && $a.isObject(fromConfig.Details.FileSetting)
    )
    {
      if (this.DocumentCategories.hasOwnProperty(fromConfig.Details.FileSetting.DocumentCategory))
      {
        this.DocumentCategories.forEach(function (pair)
        {
          if (
            pair
            && pair.hasOwnProperty('Key')
            && pair.hasOwnProperty('Value') && pair['Key'] === fromConfig.Details.FileSetting.DocumentCategory
          )
          {
            toConfig.Details.DocumentCategory = pair['Value'];
          }
        }.bind(this));
        // toConfig.Details.DocumentCategory = this.DocumentCategories[fromConfig.Details.FileSetting.DocumentCategory].Value;
        // Ben this method returns wrong element as it is returning element number 19 which has key=20, rather than key=19. Please review. 
      }
      else
        toConfig.Details.DocumentCategory = fromConfig.Details.FileSetting.DocumentCategory;
      
      toConfig.Details.DocumentType = fromConfig.Details.FileSetting.DocumentType;
      //toConfig.Details.DocumentDescription = fromConfig.Details.FileSetting.DocumentDescription;
      toConfig.Details.SecurityLevel = fromConfig.Details.FileSetting.SecurityLevel;
    }
    if (toConfig.Details.hasOwnProperty('AttachFormOnly')) toConfig.Details.AttachFormOnly = fromConfig.Details.AttachFormOnly;
    return toConfig;
  }

  __PORT_G_G_G_GET_SECTIONWORKFLOWVISIBILITYSETTINGS(fromConfig, toConfig)
  {
    if (
      fromConfig.hasOwnProperty('Details')
      && $a.isObject(fromConfig.Details)
      && fromConfig.Details.hasOwnProperty('SectionWorkflowVisibilitySettings')
    )
    {
      if ($a.isArray(fromConfig.Details.SectionWorkflowVisibilitySettings))
      {
        var i = 0;
        toConfig.Details.SectionWorkflowVisibilitySettings = [];
        for (; i < fromConfig.Details.SectionWorkflowVisibilitySettings.length; i++)
        {
          toConfig.Details.SectionWorkflowVisibilitySettings.push(fromConfig.Details.SectionWorkflowVisibilitySettings[i]);
        }
      }
    }
    return toConfig;
  }

  __PORT_G_G_G_GET_AFFINITYFIELD(fromConfig, from, toConfig, to)
  {
    if (
      fromConfig.hasOwnProperty('Details')
      && $a.isObject(fromConfig.Details)
      && fromConfig.Details.hasOwnProperty('AffinityField')
      && $a.isObject(fromConfig.Details.AffinityField)
      && fromConfig.Details.AffinityField.hasOwnProperty(from)
      && toConfig.hasOwnProperty('Details')
      && $a.isObject(toConfig.Details)
      && toConfig.Details.hasOwnProperty('AffinityField')
      && $a.isObject(toConfig.Details.AffinityField)
      && toConfig.Details.AffinityField.hasOwnProperty(to)
    )
    {
      toConfig.Details.AffinityField[to] = fromConfig.Details.AffinityField[from];
    }
    return toConfig;
  }

  __PORT_G_G_G_GET_AFFINITYFIELD_DATA(oldConfig, newConfig)
  {

    if (!$a.isPropObject(oldConfig, 'Details') || ($a.isPropObject(oldConfig, 'Details') && !$a.isPropObject(oldConfig.Details, 'AffinityField')))
    {
      console.warn('trying to parse old AffinityField cofing to new when ther is no AffinityField data', oldConfig);
      return oldConfig;
    }

    newConfig = this.__PORT_G_G_G_GET_AFFINITYFIELD(oldConfig, 'DataType',                newConfig, 'DataType');
    newConfig = this.__PORT_G_G_G_GET_AFFINITYFIELD(oldConfig, 'FieldDescription',        newConfig, 'FieldDescription');
    newConfig = this.__PORT_G_G_G_GET_AFFINITYFIELD(oldConfig, 'FieldName',               newConfig, 'FieldName');
    newConfig = this.__PORT_G_G_G_GET_AFFINITYFIELD(oldConfig, 'DisplayLabel',            newConfig, 'DisplayLabel');
    newConfig = this.__PORT_G_G_G_GET_AFFINITYFIELD(oldConfig, 'IsKeyField',              newConfig, 'IsKeyField');
    newConfig = this.__PORT_G_G_G_GET_AFFINITYFIELD(oldConfig, 'IsMandatory',             newConfig, 'IsRequired');
    newConfig = this.__PORT_G_G_G_GET_AFFINITYFIELD(oldConfig, 'IsReadOnly',              newConfig, 'IsReadOnly');
    newConfig = this.__PORT_G_G_G_GET_AFFINITYFIELD(oldConfig, 'MaxLength',               newConfig, 'MaxLength');
    newConfig = this.__PORT_G_G_G_GET_AFFINITYFIELD(oldConfig, 'MaxValue',                newConfig, 'MaxValue');
    newConfig = this.__PORT_G_G_G_GET_AFFINITYFIELD(oldConfig, 'MinLength',               newConfig, 'MinLength');
    newConfig = this.__PORT_G_G_G_GET_AFFINITYFIELD(oldConfig, 'MinValue',                newConfig, 'MinValue');
    newConfig = this.__PORT_G_G_G_GET_AFFINITYFIELD(oldConfig, 'MaximumValue',            newConfig, 'MaxValue');
    newConfig = this.__PORT_G_G_G_GET_AFFINITYFIELD(oldConfig, 'MinimumValue',            newConfig, 'MinValue');
    newConfig = this.__PORT_G_G_G_GET_AFFINITYFIELD(oldConfig, 'PropertyType',            newConfig, 'PropertyType');
    newConfig = this.__PORT_G_G_G_GET_AFFINITYFIELD(oldConfig, 'LookupTable',             newConfig, 'LookupTable');
    newConfig = this.__PORT_G_G_G_GET_AFFINITYFIELD(oldConfig, 'GenericGroupId',          newConfig, 'GenericGroupId');
    newConfig = this.__PORT_G_G_G_GET_AFFINITYFIELD(oldConfig, 'LinkedTemplateId',        newConfig, 'LinkedTemplateId');
    newConfig = this.__PORT_G_G_G_GET_AFFINITYFIELD(oldConfig, 'FieldDecimal',            newConfig, 'FieldDecimal');
    newConfig = this.__PORT_G_G_G_GET_AFFINITYFIELD(oldConfig, 'FieldPrecision',          newConfig, 'FieldPrecision');
    newConfig = this.__PORT_G_G_G_GET_AFFINITYFIELD(oldConfig, 'CleverFormsDisplayType',  newConfig, 'CleverFormsDisplayType');
    newConfig = this.__PORT_G_G_G_GET_AFFINITYFIELD(oldConfig, 'Mode',                    newConfig, 'Mode');
    newConfig = this.__PORT_G_G_G_GET_AFFINITYFIELD(oldConfig, 'ModeOptions',             newConfig, 'ModeOptions');
    newConfig = this.__PORT_G_G_G_GET_AFFINITYFIELD(oldConfig, 'KeyFields',               newConfig, 'KeyFields');
    newConfig = this.__PORT_G_G_G_GET_AFFINITYFIELD(oldConfig, 'IsMasterfileData',        newConfig, 'IsMasterfileData');

    // Ensure Min Max vals are integers
    if ($a.isString(newConfig.Details.AffinityField.MaxValue) && !isNaN(parseInt(newConfig.Details.AffinityField.MaxValue))) newConfig.Details.AffinityField.MaxValue = parseInt(newConfig.Details.AffinityField.MaxValue);
    if ($a.isString(newConfig.Details.AffinityField.MinValue) && !isNaN(parseInt(newConfig.Details.AffinityField.MinValue))) newConfig.Details.AffinityField.MinValue = parseInt(newConfig.Details.AffinityField.MinValue);
    if ($a.isString(newConfig.Details.AffinityField.MaxLength) && !isNaN(parseInt(newConfig.Details.AffinityField.MaxLength))) newConfig.Details.AffinityField.MaxLength = parseInt(newConfig.Details.AffinityField.MaxLength);
    if ($a.isString(newConfig.Details.AffinityField.MinLength) && !isNaN(parseInt(newConfig.Details.AffinityField.MinLength))) newConfig.Details.AffinityField.MinLength = parseInt(newConfig.Details.AffinityField.MinLength);

    // TODO: Requires Alignment
    newConfig = this.__PORT_G_G_G_GET_AFFINITYFIELD(oldConfig, 'ModelName',               newConfig, 'ModelName');
    newConfig = this.__PORT_G_G_G_GET_AFFINITYFIELD(oldConfig, 'TableName',               newConfig, 'ModelName');

    if (
      $a.isPropObject(oldConfig, 'Details')
      && $a.isPropObject(oldConfig.Details, 'AffinityField')
      && !$a.isPropString(oldConfig.Details.AffinityField, 'CleverFormsDisplayType')
    )
    {
      newConfig = this.__PORT_G_G_G_GET_AFFINITYFIELD(oldConfig, 'DataType',              newConfig, 'CleverFormsDisplayType');
    }

    if (newConfig.hasOwnProperty('RequiresKeys'))
    {
      newConfig.RequiresKeys = null;
      delete newConfig['RequiresKeys'];
    }

    if (
      $a.isPropObject(oldConfig, 'Details')
      && $a.isPropObject(oldConfig.Details, 'AffinityField')
      && oldConfig.Details.AffinityField.hasOwnProperty('RequiresKeys')
    )
    {
      newConfig.Details.AffinityField.RequiresKeys = null;
      delete newConfig.Details.AffinityField['RequiresKeys'];
    }

    newConfig.Hidden = oldConfig.Hidden;
    newConfig.Disabled = oldConfig.Disabled;

    return newConfig;
  }

  __THIS_IS_A_TEMP_TRANSMUTER_FOR_P_P_P_POST_DATA_UNTIL_POST_DATA_MATCHES_NEW_STRUCTURE (config)
  {
    var node = document.querySelector('.cf-d2-bottom-right ul .item-' + config.Name),
        sectionNode = node ? node.closest('li[data-type="Section"]') : null,
        controller = node ? node.controller : null,
        postType = false,
        postData = {};

    if (node === null || controller === null)
    {
      console.groupEnd();
      if (!config.hasOwnProperty('Name') || config.Name === null || config.Name === false)
      {
        throw new Error('Node was not found because config has no Name');
      }
      throw new Error('Node was not found');s
    }

    if (config.ViewType === 'Section') postType = controller.Delete ? 'delete-section' : controller.Saved ? 'edit-section' : 'create-section';
    else if (config.ViewType === 'Layout') postType = controller.Delete ? 'delete-layout' : controller.Saved ? 'edit-layout' : 'create-layout';
    else if (config.ViewType === 'Question') postType = controller.Delete ? 'delete-question' : controller.Saved ? 'edit-question' : 'create-question';

    postData.TemplateId                 = this.GetTemplateGuid();
    postData.SectionName                = config.Type === 'Section' ? config.Name : sectionNode ? sectionNode.controller.Name : node.controller.SectionName;
    postData.Name                       = config.Name;
    postData.Rank                       = config.Details.Rank;
    postData.ShortText                  = config.Details.Label;
    postData.HelpText                   = config.Details.HelpText;

    postData.Required                   = typeof config.Details.IsRequired === 'boolean' && config.Details.IsRequired === true ? true : false;
    postData.IsRequired                 = typeof config.Details.IsRequired === 'boolean' && config.Details.IsRequired === true ? 'True' : 'False';
    
    //postData.Type                     = config.Type;
    postData.ElementType                = config.Type;

    if (config.Type === 'AffinityField')
    {
      postData.CleverFormsDisplayType   = config.Details.AffinityField.CleverFormsDisplayType;
      postData.DataType                 = config.Details.AffinityField.DataType;
      postData.PropertyType             = config.Details.AffinityField.PropertyType;
      postData.ModelName                = config.Details.AffinityField.ModelName;
      postData.DisplayLabel             = config.Details.AffinityField.DisplayLabel;
      postData.FieldName                = config.Details.AffinityField.FieldName;
      postData.FileId                   = config.Details.AffinityField.FileId;
      postData.GenericGroupId           = config.Details.AffinityField.GenericGroupId;
      postData.LookupTable              = config.Details.AffinityField.LookupTable;
      postData.IsKeyField               = config.Details.AffinityField.IsKeyField;
      postData.IsReadOnly               = config.Details.AffinityField.IsReadOnly;
      postData.IsMasterfileData         = config.Details.AffinityField.IsMasterfileData;
      postData.LinkedTemplateId         = config.Details.AffinityField.LinkedTemplateId;
      postData.KeyFields                = config.Details.AffinityField.KeyFields;
      postData.Mode                     = config.Details.AffinityField.Mode;
      postData.ModeOptions              = config.Details.AffinityField.ModeOptions;

      postData.MaxLength                = config.Details.AffinityField.MaxLength;
      postData.MinLength                = config.Details.AffinityField.MinLength;
      postData.MaxValue                 = config.Details.AffinityField.MaxValue;
      postData.MinValue                 = config.Details.AffinityField.MinValue;

      postData.FieldDecimal             = config.Details.AffinityField.FieldDecimal;
      postData.FieldPrecision           = config.Details.AffinityField.FieldPrecision;

      postData.Hidden                   = config.Hidden;
    }
    else
    {
      postData.DataType                 = config.Type;
      postData.PropertyType             = config.Type;
      postData.ModelName                = null;
      postData.FieldName                = null;
      postData.AffinityField            = null;
      postData.CleverFormsDisplayType   = config.Type;
      //postData.Type                   = config.Type;
    }

    if (postData.HelpText === '') postData.HelpText = null;

    //postData.ElementTypeEnum          = config.ElementTypeEnum;
    //postData.ElementType              = config.Type;

    if (config.Type === 'Title')
    {
      postData.Text = config.Details.Label;
      postData.Label = config.Details.Label;
      postData.LongText = config.Details.Label;
    }

    if (config.Type === 'Section')
    {
      postData.SectionName              = config.Name;
      postData.Title                    = config.Details.Label;
      postData.Label                    = config.Details.Label;
      postData.ShortText                = config.Details.Label;
      postData.Text                     = config.Details.Label;
      postData.ShowTitle                = config.Details.ShowTitle;
      postData.StartCollapsed           = config.Details.StartCollapsed;

      // TODO: URGENT: How should we post workflow settings?
      postData.SectionWorkflowVisibilitySettings = config.Details.SectionWorkflowVisibilitySettings;
    }
    
    if (config.Details.hasOwnProperty('Label'))                         postData.ShortText = config.Details.Label;
    if (config.Details.hasOwnProperty('HelpText'))                      postData.HelpText = config.Details.HelpText;
    if (config.Details.hasOwnProperty('Required'))                      postData.IsRequired = config.Details.Required === true ? 'true' : 'false'
    if (config.Details.hasOwnProperty('Required'))                      postData.Required = config.Details.Required;
    if (config.Details.hasOwnProperty('Text'))                          postData.LongText = config.Details.Text;

    if (config.Details.hasOwnProperty('ItemSource'))
    {
      if (config.Details.ItemSource.hasOwnProperty('CustomList'))       postData.CustomList = config.Details.ItemSource.CustomList;
      //if (config.Details.ItemSource.hasOwnProperty('Items'))          postData.CustomList = config.Details.ItemSource.Items;
      if (config.Details.ItemSource.hasOwnProperty('ItemSourceType'))   postData.ItemSourceType = config.Details.ItemSource.ItemSourceType;
      if (config.Details.ItemSource.hasOwnProperty('TableType'))        postData.AffinityTableType = config.Details.ItemSource.TableType;
      if (
        postData.ItemSourceType === "Custom"
        && (
          postData.CustomList === undefined
          || postData.CustomList === null
          || postData.CustomList === []
        )
        && config.Details.ItemSource.hasOwnProperty('Items')
      )
      {
        postData.CustomList = config.Details.ItemSource.Items;
      }
    }

    if (config.Details.hasOwnProperty('ElementTypeEnum'))               postData.ElementTypeEnum = config.Details.ElementTypeEnum; // ???
    if (config.Details.hasOwnProperty('Type'))                          postData.ElementType = config.Details.Type;

    if (config.Details.hasOwnProperty('DocumentCategory'))              postData.DocumentCategory = config.Details.DocumentCategory;
    if (config.Details.hasOwnProperty('DocumentType'))                  postData.DocumentType = config.Details.DocumentType;
    if (config.Details.hasOwnProperty('SecurityLevel'))                 postData.SecurityLevel = config.Details.SecurityLevel;
    //if (config.Details.hasOwnProperty('DocumentDescription'))           postData.DocumentDescription = config.Details.DocumentDescription; // ??? Missing from data?
    if (config.Details.hasOwnProperty('AttachFormOnly'))                postData.AttachFormOnly = config.Details.AttachFormOnly

    if (config.Details.hasOwnProperty('FileId'))                        postData.FileId = config.Details.FileId;
    if (config.Details.hasOwnProperty('FileName'))                      postData.FileName = config.Details.FileName; // ??? Missing from data?

    if (config.Details.hasOwnProperty('DecimalNumber'))                 postData.DecimalNumber = config.Details.DecimalNumber;

    if (config.Details.hasOwnProperty('ArrowDirection'))                postData.ArrowDirection = config.Details.ArrowDirection;
    if (config.Details.hasOwnProperty('DateTimeType'))                  postData.DateTimeType = config.Details.DateTimeType;
    if (config.Details.hasOwnProperty('SetDefaultValue'))               postData.SetDefaultValue = config.Details.SetDefaultValue;
    if (config.Details.hasOwnProperty('UrlLink'))                       postData.UrlLink = config.Details.UrlLink;
    if (config.Details.hasOwnProperty('VideoId'))                       postData.VideoId = config.Details.VideoId;

    if (config.Details.hasOwnProperty('ExternalTemplateId'))            postData.ExternalTemplateId = config.Details.ExternalTemplateId;
    if (config.Details.hasOwnProperty('Recipients'))                    postData.Recipients = config.Details.Recipients;

    switch (postType)
    {
      case 'edit-section':
        postData.Action = 'Edit';
        postData.ActionType = 'Section';
        break;
      case 'create-section':
        postData.Action = 'Create';
        postData.ActionType = 'Section';
        break;
      case 'delete-section':
        postData.Action = 'Delete';
        postData.ActionType = 'Section';
        break;

      case 'edit-question':
        postData.Action = 'Edit';
        postData.ActionType = 'Question';
        break;
      case 'create-question':
        postData.Action = 'Create';
        postData.ActionType = 'Question';
        break;
      case 'delete-question':
        postData.Action = 'Delete';
        postData.ActionType = 'Question';
        break;

      case 'edit-layout':
        postData.Action = 'Edit';
        postData.ActionType = 'Layout';
        break;
      case 'create-layout':
        postData.Action = 'Create';
        postData.ActionType = 'Layout';
        break;
      case 'delete-layout':
        postData.Action = 'Delete';
        postData.ActionType = 'Layout';
        break;
    }

    console.log(JSON.stringify(postData));

    return postData;
  }

}
;
/***************************************************************************************************************************************************/
/*********************************************************************************************************************************.*? save******************/
/***                                                                                                                       *************************/
/***    ██████ ███████     ██████  ███████ ███████ ██  ██████  ███    ██ ███████ ██████      ███████ ██████  ██ ████████   *************************/
/***   ██      ██          ██   ██ ██      ██      ██ ██       ████   ██ ██      ██   ██     ██      ██   ██ ██    ██      *************************/
/***   ██      █████       ██   ██ █████   ███████ ██ ██   ███ ██ ██  ██ █████   ██████      █████   ██   ██ ██    ██      *************************/
/***   ██      ██          ██   ██ ██           ██ ██ ██    ██ ██  ██ ██ ██      ██   ██     ██      ██   ██ ██    ██      *************************/
/***    ██████ ██          ██████  ███████ ███████ ██  ██████  ██   ████ ███████ ██   ██     ███████ ██████  ██    ██      *************************/
/***                                                                                                                       *************************/
/***************************************************************************************************************************************************/
/***************************************************************************************************************************************************/


/** TODO: only save on cancel if saved === true and modified === true
 *
 * Summary.       CleverForms Designer Edit Popup.
 *
 * Description.   Creates an instance of CleverForms Designer Editor Popup and Affinity Field Search.
 *                Important: Must follow ECMAScript 5 (ES5) standards to support Internet Explorer 11.
 *
 * @author        Ben King, benk at affinityteam.com, ben.king at source63.com, +64 21 2672729.
 *
 *
 * @since         16.06.2020
 * @class         DesignerElementEdit
 * @namespace     Affinity2018.Classes.Apps.CleverForms
 * @memberof      CleverForms
 *
 * @public
 */

if (!('Affinity2018' in window)) Affinity2018 = {};
if (!('Classes' in Affinity2018)) Affinity2018.Classes = {};
if (!('Apps' in Affinity2018.Classes)) Affinity2018.Classes.Apps = {};
if (!('Plugins' in Affinity2018.Classes)) Affinity2018.Classes.Plugins = {};
if (!('CleverForms' in Affinity2018.Classes.Apps)) Affinity2018.Classes.Apps.CleverForms = {};

if (!('Apps' in Affinity2018)) Affinity2018.Apps = {};
if (!('Plugins' in Affinity2018.Apps)) Affinity2018.Apps.Plugins = {};

Affinity2018.Classes.Apps.CleverForms.DesignerElementEdit = class
{

  /**
   * Summary. Sets class scoped variables required for the Designer instance
   * @this    Class scope
   * @access  private
   */
  _options()
  {


    /**
    * Description.    The Designer instance that spawns this instance.
    * @type {String}
    * @public
    */
    this.Designer = null;

    /**
    * Description.    The API end point for searching fieldd items - set by designer.js via constructor params.
    * @type {String}
    * @public
    *
    * @param {String} fieldName (optional)
    * @param {String} tableName (optional)
    * @param {Int}    size      The number of items per page of results (optional)
    * @param {Int}    page      The page number (optional)
    */
    this.SearchApi = null;

    /**
    * Description.    The reference for the implementation of the BigSearch widget
    * @type {BigSearch}
    * @public
    */
    this.Search = null;

    /**
    * Description.    The main Popup DOM node
    * @type {DomElement}
    * @public
    */
    this.PopupNode = null;

    /**
    * Description.    The search container DOM node
    * @type {DomElement}
    * @public
    */
    this.SearchNode = null;

    /**
    * Description.    The edit form container DOM node
    * @type {DomElement}
    * @public
    */
    this.SettingsNode = null;

    /**
    * Description.    The callback when changes are made - set by designer.js via constructor params.
    * @type {function}
    * @public
    */
    this.OnUpdate = function () { };

    /**
    * Description.    The callback when edit is closed (cancelled) - set by designer.js via constructor params.
    * @type {function}
    * @public
    */
    this.OnCancel = function () { };

    /**
    * Description.    The global data Object that holds current user data.
    * @type {Object}
    * @public
    */
    this.data = false;

    /**
    * Description.    The Dom node currently being dragged.
    * @type {DomElement}
    * @public
    */
    this.DragNode = false;

    /**
    * Description.    Default configuration. Updated by designer.js via constructor parameter.
    * @type {Object}
    * @public
    */
    this.defaultConfig = {
      SearchApi: null,
      OnUpdate: function () { },
      OnCancel: function () { }
    };

  }


  /**
   * Summary. Class constructor
   *
   * Description. Initialises DesignerElementEdit instance.
   *
   * @since       09.09.2019
   * @access      public
   *
   * @global
   *
   * @param {Object} defaultConfig  BigSearch api and Edit popup callbacks (see DefaultConfig)
   */
  constructor(config)
  {
    this._options();
    [

      '_init',

      'Set',
      'JumpSearch', 'GotoSearch',
      'JumpSettings', 'GotoSettings',
      'Show', 'Hide', 'Cancel',
      'SearchSelected',

      '_resetSettings', '_populateSettings', '_resetSettings',
      '_searchSelected',
      '_togglePreview',
      '_clearAndSearch',
      '_update', '_updateFromModeSwitch',

      '_checkOkToContinue', '_close'

    ].bindEach(this);
    this._templates();

    // apply passed in config from designer.js
    if (config && Affinity2018.isObject(config))
    {
      // copy and overwrite default config with passed in config
      var cfg, mergedConfig = Affinity2018.objectDeepMerge(this.defaultConfig, config);
      // apply new config to class root
      for (cfg in mergedConfig) { this[cfg] = mergedConfig[cfg]; }
      delete this.defaultConfig;
    }

    this.CleverForms = Affinity2018.Apps.CleverForms.Default;

    this._init();
  }



  /**
   * Summary.     Designer Class initialiser
   *
   * Description. Sets up defaults, reference to important DOM nodes, sets events, and kicks off plugins
   *
   * @since       09.09.2019
   * @access      private
   */
  _init()
  {

    this.body = document.querySelector('body');

    this.PopupNode = document.createElement('div');
    this.PopupNode.classList.add('cf-designer-element-popup', 'popup');
    this.PopupNode.innerHTML = this.Template;
    this.body.appendChild(this.PopupNode);

    this.CloseButtonNode = this.PopupNode.querySelector('.close');

    this.SearchViewNode = this.PopupNode.querySelector('.search');
    this.SettingsViewNode = this.PopupNode.querySelector('.settings');
    this.SearchNode = this.SearchViewNode.querySelector('.search-box');
    this.SettingsNode = this.SettingsViewNode.querySelector('.settings-box');

    this.SettingsNode.innerHTML = this.SettingsTemplate.format({
      nameLabel: $a.Lang.ReturnPath('app.cf.design_items.edit.name_lable'),
      helpLabel: $a.Lang.ReturnPath('app.cf.design_items.edit.help_label'),
      createLabel: $a.Lang.ReturnPath('app.cf.design_items.edit.create_label'),
      selectabel: $a.Lang.ReturnPath('app.cf.design_items.edit.select_label'),
      editLabel: $a.Lang.ReturnPath('app.cf.design_items.edit.edit_label'),
      displayLabel: $a.Lang.ReturnPath('app.cf.design_items.edit.display_label'),
      hiddenLabel: $a.Lang.ReturnPath('app.cf.design_items.edit.hidden_label'),
      formuserLabel: $a.Lang.ReturnPath('app.cf.design_items.edit.formuser_label'),
      hideLabel: $a.Lang.ReturnPath('app.cf.design_items.edit.hide_label'),
      requiredLabel: $a.Lang.ReturnPath('app.cf.design_items.edit.btons.required_label'),
      cancelLabel: $a.Lang.ReturnPath('app.cf.design_items.edit.cancel_label'),
      searchLabel: $a.Lang.ReturnPath('app.cf.design_items.edit.search_label'),
      okLabel: $a.Lang.ReturnPath('app.cf.design_items.edit.ok_label')
    });

    this.PreviewNode = this.PopupNode.querySelector('.example-template');
    this.PreviewToggleNode = this.PreviewNode.querySelector('.toggle-preview');
    this.PreviewBoxNode = this.PreviewNode.querySelector('.preview');

    this.HelptextNode = this.SettingsViewNode.querySelector('.helptext-row');
    this.FiltersNode = this.SettingsViewNode.querySelector('.filters');
    this.FilterRadiosBoxNode = this.FiltersNode.querySelector('.radios');
    this.FilterSelectsBoxNode = this.FiltersNode.querySelector('.selects');
    this.RequiredBoxNode = this.SettingsViewNode.querySelector('.edit-required');
    this.HiddenBoxNode = this.PopupNode.querySelector('.edit-hidden');

    this.FilterModeWrapperCreate = this.FilterRadiosBoxNode.querySelector('.mode-create-wrapper');
    this.filterModeWrapperUpdate = this.FilterRadiosBoxNode.querySelector('.mode-update-wrapper');
    this.FilterModeWrapperEdit = this.FilterRadiosBoxNode.querySelector('.mode-edit-wrapper');
    this.FilterModeWrapperDisplay = this.FilterRadiosBoxNode.querySelector('.mode-display-wrapper');
    this.FilterModeWrapperHidden = this.FilterRadiosBoxNode.querySelector('.mode-hidden-wrapper');

    this.ListSourceSelectNode = false;

    this.BackButtonNode = this.SettingsNode.querySelector('.button.back');
    this.CancelButtonNode = this.SettingsNode.querySelector('.button.cancel');
    this.OkButtonNode = this.SettingsNode.querySelector('.button.ok');

    this.TemplateNode = this.SettingsNode.querySelector('.edit-template');

    this.customList = false;

    this.plugins = [
      'Autocompletes',
      'Calendars',
      'Selects',
      'SelectLookups',
      'Strings',
      'Numbers',
      'BankNumber',
      'TaxNumber',
      'Address',
      'DrawPanel',
      'ListBuilder',
      'FileUpload',
      'Tooltips'
    ];

    this.cfPlugins = [
      // 'DesignerEditYoutube' // DesignerEditYoutube is loaded specifically based on type in _populateSettings (see "// Custom Edit Widgets")
    ];

    this.plugins.forEach(function (plugin)
    {
      if (
        !Affinity2018.Apps.Plugins.hasOwnProperty(plugin)
        && Affinity2018.Classes.Plugins.hasOwnProperty(plugin)
      )
      {
        Affinity2018.Apps.Plugins[plugin] = new Affinity2018.Classes.Plugins[plugin]();
      }
    });

    this.cfPlugins.forEach(function (plugin)
    {
      if (
        !Affinity2018.Apps.Plugins.hasOwnProperty(plugin)
        && Affinity2018.Classes.Apps.CleverForms.hasOwnProperty(plugin)
      )
      {
        Affinity2018.Apps.Plugins[plugin] = new AAffinity2018.Classes.Apps.CleverForms[plugin]();
      }
    });

    this.Search = new Affinity2018.Classes.Plugins.BigSearch();
    this.Search.SetApi(this.SearchApi);
    this.Search.SetResultCallback(this._searchSelected);
    this.Search.SetParams({
      userInput: 'Query',
      pageSize: 'Size',
      pageNumber: 'Page',
      grandTotal: 'Total',
      type: 'Type',
      results: 'Results'
    });
    //this.Search.Insert(this.SearchNode, 'Search for the field you want on your form', [], []);
    this.Search.Insert(this.SearchNode, $a.Lang.ReturnPath('app.cf.design_items.search_message'), [], []);


    this.CloseButtonNode.addEventListener('click', this._close);

    this.PreviewToggleNode.addEventListener('click', this._togglePreview);

    this.BackButtonNode.addEventListener('click', this._clearAndSearch);
    this.OkButtonNode.addEventListener('click', this._update);
    this.CancelButtonNode.addEventListener('click', this.Cancel);
  }



  /***************************************************************************************************************************************************/
  /***************************************************************************************************************************************************/
  /***                                                                                                                  ******************************/
  /***   ██████  ██    ██ ██████  ██      ██  ██████     ███    ███ ███████ ████████ ██   ██  ██████  ██████  ███████   ******************************/
  /***   ██   ██ ██    ██ ██   ██ ██      ██ ██          ████  ████ ██         ██    ██   ██ ██    ██ ██   ██ ██        ******************************/
  /***   ██████  ██    ██ ██████  ██      ██ ██          ██ ████ ██ █████      ██    ███████ ██    ██ ██   ██ ███████   ******************************/
  /***   ██      ██    ██ ██   ██ ██      ██ ██          ██  ██  ██ ██         ██    ██   ██ ██    ██ ██   ██      ██   ******************************/
  /***   ██       ██████  ██████  ███████ ██  ██████     ██      ██ ███████    ██    ██   ██  ██████  ██████  ███████   ******************************/
  /***                                                                                                                  ******************************/
  /***************************************************************************************************************************************************/
  /***************************************************************************************************************************************************/


  /**
   * Summary. Set form field data to edit popup
   *
   * Description. Set form field data to edit popup and populate all templates
   *
   * @since       09.09.2019
   * @access      public
   *
   * @global
   *
   * @param {Object}      data      Form Element Data
   * @param {DomElement}  dragNode  The element dragged into the form designer to edit
   */
  Set(config, dragNode)
  {
    this.Config = config;
    if (dragNode) this.DragNode = dragNode;
    else this.DragNode = false;

    this.SearchViewNode.querySelector('h3').innerHTML = config.Label;
    this.SearchViewNode.querySelector('p').innerHTML = config.Description;

    this.SettingsViewNode.querySelector('h3').innerHTML = config.Label;
    this.SettingsViewNode.querySelector('p').innerHTML = config.Description;

    this._populateSettings();
  }



  /**
   * Summary. ?
   * @this    Class scope
   * @access  private
   */
  JumpSearch()
  {
    this.Search.Reset();
    this.PopupNode.classList.remove('goto-settings', 'settings', 'goto-search', 'search');
    this.PopupNode.classList.add('search');
    this.PopupNode.classList.add('large');
    this.PopupNode.classList.remove('medium');
    this.Search.InputNode.focus();
  }



  /**
   * Summary. ?
   * @this    Class scope
   * @access  private
   */
  GotoSearch()
  {
    this.Search.Reset();
    this.PopupNode.classList.remove('goto-settings', 'settings', 'goto-search', 'search');
    this.PopupNode.classList.add('goto-search');
    this.PopupNode.classList.add('large');
    this.PopupNode.classList.remove('medium');
    this.Search.InputNode.focus();
  }



  /**
   * Summary. ?
   * @this    Class scope
   * @access  private
   */
  JumpSettings()
  {
    this.PopupNode.classList.remove('goto-settings', 'settings', 'goto-search', 'search');
    this.PopupNode.classList.add('settings');
    this.PopupNode.focus();
  }



  /**
   * Summary. ?
   * @this    Class scope
   * @access  private
   */
  GotoSettings()
  {
    this.PopupNode.classList.remove('goto-settings', 'settings', 'goto-search', 'search');
    this.PopupNode.classList.add('goto-settings');
    this.PopupNode.focus();
  }



  /**
   * Summary. ?
   * @this    Class scope
   * @access  private
   */
  Show()
  {
    this.PopupNode.classList.add('show');
    Affinity2018.lockBodyScroll();
  }



  /**
   * Summary. ?
   * @this    Class scope
   * @access  private
   */
  Hide()
  {
    clearTimeout(this._resetOnHideTimer);

    if (this.DragNode) this.DragNode.controller.UnsetDesignEditor();

    if (this.AllFormGroupLookup && this.AllFormGroupLookup.hasOwnProperty('cancelToken')) this.AllFormGroupLookup.cancelToken.source.cancel(true);
    if (this.GenericGroupLookup && this.GenericGroupLookup.hasOwnProperty('cancelToken')) this.GenericGroupLookup.cancelToken.source.cancel(true);

    if (this.PopupNode.querySelector('select.ui-autocomplete'))
    {
      this.PopupNode.querySelectorAll('select.ui-autocomplete').forEach(function (node)
      {
        if (node.hasOwnProperty('widgets') && node.widgets.hasOwnProperty('Autocomplete'))
        {
          node.widgets.Autocomplete.Destroy();
        }
      });
    }

    //this._cleanUpOnClose();
    this._resetOnHideTimer = setTimeout(this._resetSettings, 260);
    this.PopupNode.classList.remove('show');
    Affinity2018.unlockBodyScroll();
  }



  /**
   * Summary. ?
   * @this    Class scope
   * @access  private
   */
  Cancel(ev)
  {
    console.log('cancel - designer.edit');

    // check for uploads to auto-delete on new elements
    if (
      this.DragNode
      && this.DragNode.controller
      && this.DragNode.controller.Saved
      && this.DragNode.controller.IsNewElement
      && this.DragNode.controller.FileWidget
      && this.DragNode.controller.FileWidget.FileIds.length > 0
    )
    {
      this.DragNode.controller.FileWidget.DeleteFiles();
      this.Designer.SetElementForDelete(this.DragNode);
    }

    this._close();
  }



  /**
   * Summary. ?
   * @this    Class scope
   * @access  private
   */
  SearchSelected(data, dontPrompt)
  {
    this._searchSelected(data, dontPrompt);
  }



  /***************************************************************************************************************************************************/
  /***************************************************************************************************************************************************/
  /***                                                                                                                           *********************/
  /***   ██████  ██████  ██ ██    ██  █████  ████████ ███████     ███    ███ ███████ ████████ ██   ██  ██████  ██████  ███████   *********************/
  /***   ██   ██ ██   ██ ██ ██    ██ ██   ██    ██    ██          ████  ████ ██         ██    ██   ██ ██    ██ ██   ██ ██        *********************/
  /***   ██████  ██████  ██ ██    ██ ███████    ██    █████       ██ ████ ██ █████      ██    ███████ ██    ██ ██   ██ ███████   *********************/
  /***   ██      ██   ██ ██  ██  ██  ██   ██    ██    ██          ██  ██  ██ ██         ██    ██   ██ ██    ██ ██   ██      ██   *********************/
  /***   ██      ██   ██ ██   ████   ██   ██    ██    ███████     ██      ██ ███████    ██    ██   ██  ██████  ██████  ███████   *********************/
  /***                                                                                                                           *********************/
  /***************************************************************************************************************************************************/
  /***************************************************************************************************************************************************/
  


  /**
   * Summary. ?
   * @this    Class scope
   * @access  private
   */
  _populateSettings(config)
  {
    if (typeof config === 'undefined') config = this.Config;
    else this.Config = config

    this._resetSettings();

    /**/

    if (this.DragNode)
    {
      this.DragNode.controller.SetDesignEditor(this);
     // if (this.PopupNode.querySelectorAll('.mode-wrapper:not(.hidden)').length <= 1) this.RequiredBoxNode.classList.add('hidden');
    }

    /**/

    clearTimeout(this._enableOkButtonTimer);
    this._enableOkButtonTimer = setTimeout(function ()
    {
      this.OkButtonNode.classList.remove('disabled');
    }.bind(this), 1000);

    // wait for size / position animations to finish
    setTimeout(function ()
    {
      this.plugins.forEach(function (plugin)
      {
        if (Affinity2018.Apps.Plugins.hasOwnProperty(plugin))
        {
          Affinity2018.Apps.Plugins[plugin].Apply();
        }
      });
    }.bind(this), 600);
  }



  /**
   * Summary. ?
   * @this    Class scope
   * @access  private
   */
  _resetSettings()
  {
    clearTimeout(this._enableOkButtonTimer);
    clearTimeout(this._resetOnHideTimer);

    this.PreviewNode.classList.add('hidden');
    this.PreviewBoxNode.classList.add('hide');
    this.PreviewBoxNode.innerHTML = '';
    this.HelptextNode.classList.remove('hidden');
    this.SettingsNode.querySelector('.edit-template').classList.add('hidden');
    this.SettingsNode.querySelector('.edit-template').innerHTML = '';
    this.FiltersNode.classList.remove('hidden');
    this.FilterRadiosBoxNode.classList.add('hidden');
    this.FilterSelectsBoxNode.classList.remove('hidden');

    this.FilterModeWrapperCreate.classList.add('hidden');
    this.FilterModeWrapperCreate.querySelector('input').checked = false;

    this.filterModeWrapperUpdate.classList.add('hidden');
    this.filterModeWrapperUpdate.querySelector('input').checked = false;

    this.FilterModeWrapperEdit.classList.remove('hidden');
    this.FilterModeWrapperEdit.querySelector('input').checked = true;

    this.FilterModeWrapperDisplay.classList.remove('hidden');
    this.FilterModeWrapperDisplay.querySelector('input').checked = false;

    this.FilterModeWrapperHidden.classList.remove('hidden');
    this.FilterModeWrapperHidden.querySelector('input').checked = false;

    this.RequiredBoxNode.classList.remove('hidden');
    this.RequiredBoxNode.querySelector('input').checked = false;
    this.RequiredBoxNode.querySelector('input').disabled = false;

    this.HiddenBoxNode.classList.add('hidden');
    this.HiddenBoxNode.querySelector('input').checked = false;

    this.BackButtonNode.classList.add('hidden');

    this.OkButtonNode.classList.add('disabled');
    
    this.PopupNode.classList.remove('has-list');
    this.PopupNode.classList.remove('medium');
    this.PopupNode.classList.remove('large');
    if (this.ListSourceSelectNode)
    {
      this.ListSourceSelectNode.removeEventListener('change', this._listSourceChanged);
      this.ListSourceSelectNode = false;
    }

    this.SearchViewNode.querySelector('h3').innerHTML = this.CleverForms.ElementData.AffinityField.Label;
    this.SearchViewNode.querySelector('p').innerHTML = this.CleverForms.ElementData.AffinityField.Description;

    this.Search.Reset();
  }



  /**
   * Summary. ?
   * @this    Class scope
   * @access  private
   */
  _searchSelected (data, dontPrompt)
  {
    //dontPrompt = typeof dontPrompt === 'boolean' ? dontPrompt : false;
    dontPrompt = $a.paramOrDefault(dontPrompt, false);

    if (data.hasOwnProperty('data'))
    {
      var config = this.CleverForms.__PORT_G_G_G_GET_AFFINITYFIELD_DATA({ Details: { AffinityField: data.data } }, $a.jsonCloneObject(this.CleverForms.ElementData.AffinityField)), // NO MUTATORS!!!
          AffinityField = config.Details.AffinityField, // NO MUTATORS!!!
          fieldname = AffinityField.FieldName,
          modelName = AffinityField.ModelName,
          query = 'li[data-field="{field}"][data-model="{model}"]'.format(
          {
            field: fieldname,
            model: modelName
          }),
          node = this.DragNode ? this.DragNode : this.CleverForms.Designer.RightListNode.querySelector(query),
          sectionMode = node ? this.CleverForms.Designer.GetElementSectionFilterMode(node) : null;

      if (node)
      {
        if (sectionMode !== null) config.Details.AffinityField.Mode = sectionMode;
        config.Label = AffinityField.DisplayLabel;
        config.Details.Label = AffinityField.DisplayLabel;
        config.Display = this.CleverForms.ElementData[AffinityField.CleverFormsDisplayType];

        config = this.CleverForms.SelectDefaultModeOnFieldSearch(config);

        if (node.hasOwnProperty('controller')) node.controller.Config = config;
        if (this.CleverForms.Designer.CanAllowAffinityField(node, !dontPrompt, true))
        {
          this._populateSettings(config);
          this.GotoSettings();
        }
        return;
      }

      // can't find node, so I guuess we just fail?

      var message = 'It looks like we can\'t use this Affinity Field.';
      message += '<br />'
      message += 'Please try another or contact Affinity for help.';

      Affinity2018.Dialog.Show({
        message: message,
        showOk: true,
        showCancel: true,
        showInput: false,
        textAlign: 'left',
        buttons: {
          ok: { show: true, icon: 'tick', color: 'green', text: 'Search Again' },
        },
        onOk: function ()
        {
          this.JumpSearch();
        }.bind(this)
      });

    }
  }




  /**
   * Summary. ?
   * @this    Class scope
   * @access  private
   */
  _togglePreview ()
  {
    if (this.PreviewBoxNode.classList.contains('hide'))
    {
      this.PreviewBoxNode.classList.remove('hide');
      this.PreviewToggleNode.innerHTML = 'Hide Example';
    }
    else
    {
      this.PreviewBoxNode.classList.add('hide');
      this.PreviewToggleNode.innerHTML = 'Show Example';
    }
  }



  /**
   * Summary. ?
   * @this    Class scope
   * @access  private
   */
  _clearAndSearch ()
  {
    this._resetSettings();
    this.GotoSearch();
  }



  /**
   * Summary. ?
   * @this    Class scope
   * @access  private
   */
  _update ()
  {
    if (this.DragNode)
    {
      if (this.DragNode.controller && this.DragNode.controller.IsNewElement) this.DragNode.controller.IsNewElement = false;
      if (this.DragNode.controller.BackupConfig())
      {
        if (this.DragNode.controller.GetFromDesignEditor(false))
        {
          var buttonCLicked = 'OK';
          if (this._checkOkToContinue(false, buttonCLicked))
          {
            if (this.DragNode.controller.Saved && this.DragNode.controller.Changed)
            {
              this.Designer.CheckSave();
            }

            // update special data

            this.Config = this.DragNode.controller.Config;

            if (this.DragNode.controller.Config.Type === 'AffinityField')
            {

              // NO MUTATORS!!!
              if (!this.DragNode.controller.Config.Details.AffinityField.ModelName && this.DragNode.controller.Config.Details.AffinityField.TableName) this.DragNode.controller.Config.Details.AffinityField.ModelName = this.DragNode.controller.Config.Details.AffinityField.TableName;
              // End bad mutatorness

              this.DragNode.dataset.model = this.Config.Details.AffinityField.ModelName;
              this.DragNode.dataset.field = this.Config.Details.AffinityField.FieldName;
              this.DragNode.dataset.mode = this.Config.Details.AffinityField.Mode;

            }

            this.OnUpdate(this.Config, this.DragNode);
            this.Hide();

          }
          else
          {
            this.DragNode.controller.RestoreBackup();
          }
        }
      }
    }

    /*
    if (this._checkOkToContinue(false))
    {
      if (this.DragNode)
      {
        if (this.DragNode.controller.GetFromDesignEditor())
        {

          // update special data

          this.Config = this.DragNode.controller.Config;
        }
        if (this.DragNode.controller.Config.Type === 'AffinityField')
        {
          // 'get from designer' returned false becasue we have a mode switch
          // when user accepts opr declines Dialog, the related controllers will updated,
          // and 'ModesSwitched' will be fired y the currently editing element controller
          this.DragNode.controller.removeEventListener('ModesSwitched', this._updateFromModeSwitch);
          this.DragNode.controller.addEventListener('ModesSwitched', this._updateFromModeSwitch);
          // NO MUTATORS!!!
          if (!this.DragNode.controller.Config.Details.AffinityField.ModelName && this.DragNode.controller.Config.Details.AffinityField.TableName) this.DragNode.controller.Config.Details.AffinityField.ModelName = this.DragNode.controller.Config.Details.AffinityField.TableName;
          // End bad mutatorness
          if (this.DragNode.controller.Config.Details.AffinityField.ModelName) this.DragNode.dataset.model = this.DragNode.controller.Config.Details.AffinityField.ModelName;
          this.DragNode.dataset.model = this.Config.Details.AffinityField.ModelName;
          this.DragNode.dataset.field = this.Config.Details.AffinityField.FieldName;
          this.DragNode.dataset.mode = this.Config.Details.AffinityField.Mode;
        }
      }
      this.OnUpdate(this.Config, this.DragNode);
      this.Hide();
    }
    */
  }



  /**
   * Summary. ?
   * @this    Class scope
   * @access  private
   */
  _updateFromModeSwitch()
  {
    if (this.DragNode)
    {
      this.DragNode.controller.removeEventListener('ModesSwitched', this._updateFromModeSwitch);
      this.Config = this.DragNode.controller.Config;
      this.OnUpdate(this.Config, this.DragNode);
    }
  }



  /**
   * Summary. ?
   * @this    Class scope
   * @access  private
   */
  _checkOkToContinue(cancelling, button)
  {
    cancelling = $a.paramOrDefault(cancelling, false);

    // TODO: cancel with missing data?

    if (!cancelling)
    {
      if (this.Config.Type === 'AffinityField' && this.DragNode)
      {
        if (!this.CleverForms.Designer.CanAllowAffinityField(this.DragNode, true, false))
        {
          return false;
        }
      }
    }

    // check foir valid list items
    if (this.PopupNode.classList.contains('has-list') && $a.Apps.Plugins.ListBuilder && button === "OK")
    {
      if (!$a.Apps.Plugins.ListBuilder.IsValid() && $a.Apps.Plugins.ListBuilder.InvalidReason)
      {
        Affinity2018.Dialog.Show({
          message: $a.Apps.Plugins.ListBuilder.InvalidReason,
          showOk: true,
          showCancel: false,
          showInput: false,
          textAlign: 'left'
        });
        return false;
      }
    }

    // check for uploads
    var fileNode = this.TemplateNode.querySelector('input[type="file"]') || false, widget, hasFiles
    if ($a.isNode(fileNode))
    {
      widget = fileNode.hasOwnProperty('widgets') && fileNode.widgets.hasOwnProperty('FileUpload') ? fileNode.widgets.FileUpload : false;
      if (widget)
      {
        hasFiles = cancelling ? widget.HasSavedFiles() : widget.HasFiles();
        if (!hasFiles && this.Config.Details.Required)
        {
          Affinity2018.Dialog.Show({
            message: 'You must select a file to attach.',
            showOk: true,
            showCancel: false,
            showInput: false,
            textAlign: 'left'
          });
          return false;
        }
      }
    }
    return true;
  }



  /**
   * Summary. ?
   * @this    Class scope
   * @access  private
   */
  _close ()
  {
    if (this._checkOkToContinue(true))
    {
      this.OnCancel(this.Config, this.DragNode);
      this.Hide();
    }
  }



  /***************************************************************************************************************************************************/
  /***************************************************************************************************************************************************/
  /***                                                                                  **************************************************************/
  /***   ████████ ███████ ███    ███ ██████  ██       █████  ████████ ███████ ███████   **************************************************************/
  /***      ██    ██      ████  ████ ██   ██ ██      ██   ██    ██    ██      ██        **************************************************************/
  /***      ██    █████   ██ ████ ██ ██████  ██      ███████    ██    █████   ███████   **************************************************************/
  /***      ██    ██      ██  ██  ██ ██      ██      ██   ██    ██    ██           ██   **************************************************************/
  /***      ██    ███████ ██      ██ ██      ███████ ██   ██    ██    ███████ ███████   **************************************************************/
  /***                                                                                  **************************************************************/
  /***************************************************************************************************************************************************/
  /***************************************************************************************************************************************************/



  /**
   * Summary. ?
   * @this    Class scope
   * @access  private
   */
  _templates()
  {
    this.Template = `
    <div class="inner">
      <div class="search">
        <h3>Name</h3>
        <p>Description</p>
        <hr />
        <div class="search-box"></div>
      </div>
      <div class="settings">
        <h3>Name</h3>
        <p>Description</p>
        <div class="example-template hidden">
          <a class="toggle-preview" href="javascript:void(0);">Show Example</a>
          <div class="preview hide"></div>
        </div>
        <hr />
        <div class="settings-box scroller"></div>
      </div>
      <div class="close icon-cross"></div>
    </div>
    `;


    this.SettingsTemplate = `
    <div class="form">
      <div class="form-row label-row">
        <label>{nameLabel}</label>
        <input type="text" class="label" name="ShortText" />
      </div>
      <div class="form-row helptext-row">
        <label>{helpLabel}</label>
        <input type="text" class="helptext" name="HelpText" />
      </div>
      <div class="filters">
        <div class="radios hidden">
          <span class="mode-wrapper mode-create-wrapper hidden"><input data-mode="0" id="-mode-create" type="radio" class="mode-create" name="mode" value="0" /><label for="-mode-create">{createLabel}</label></span>
          <span class="mode-wrapper mode-update-wrapper hidden"><input data-mode="4" id="-mode-update" type="radio" class="mode-update" name="mode" value="4" /><label for="-mode-update">{selectabel}</label></span>
          <span class="mode-wrapper mode-edit-wrapper"><input data-mode="1" id="-mode-edit" type="radio" class="mode-edit" name="mode" value="1" checked /><label for="-mode-edit">{editLabel}</label></span>
          <span class="mode-wrapper mode-display-wrapper"><input data-mode="2" id="-mode-display" type="radio" class="mode-display" name="mode" value="2" /><label for="-mode-display">{displayLabel}</label></span>
          <span class="mode-wrapper mode-hidden-wrapper"><input data-mode="3" id="-mode-hidden" type="radio" class="mode-hidden" name="mode" value="3" /><label for="-mode-hidden">{hiddenLabel}</label></span>
          <span class="mode-wrapper mode-initiator-wrapper"><input data-mode="5" id="-mode-initiator" type="radio" class="mode-initiator" name="mode" value="5" /><label for="-mode-initiator">{formuserLabel}</label></span>
        </div>
        <div class="selects hidden">
        </div>
      </div>
    </div>
    <div class="edit-hidden form hidden">
      <div class="check-row">
        <input type="checkbox" class="" id="-hidden" /><label for="-hidden">{hideLabel}</label>
      </div>
    </div>
    <div class="edit-template form hidden"></div>
    <div class="edit-required form hidden">
      <div class="check-row">
        <input type="checkbox" class="required" id="-required" /><label for="-required">{requiredLabel}</label>
      </div>
    </div>
    <div class="buttons">
      <div class="button grey cancel"><span class="icon-cross"></span>{cancelLabel}</div>
      <div class="button blue back hidden"><span class="icon-arrow-left"></span>{searchLabel}</div>
      <div class="button green ok disabled"><span class="icon-tick"></span>{okLabel}</div>
    </div>
    `;


    this.SelectFilterTemplate = `
    <div class="edit-row top">
      <label>Source</label>
      <div class="select">
        <select class=""></select>
      </div>
    </div>
    `;

  }



};;
/***************************************************************************************************************************************************/
/***************************************************************************************************************************************************/
/***                                                                                       *********************************************************/
/***    ██████ ███████     ██████  ███████ ███████ ██  ██████  ███    ██ ███████ ██████    *********************************************************/
/***   ██      ██          ██   ██ ██      ██      ██ ██       ████   ██ ██      ██   ██   *********************************************************/
/***   ██      █████       ██   ██ █████   ███████ ██ ██   ███ ██ ██  ██ █████   ██████    *********************************************************/
/***   ██      ██          ██   ██ ██           ██ ██ ██    ██ ██  ██ ██ ██      ██   ██   *********************************************************/
/***    ██████ ██          ██████  ███████ ███████ ██  ██████  ██   ████ ███████ ██   ██   *********************************************************/
/***                                                                                       *********************************************************/
/***************************************************************************************************************************************************/
/***************************************************************************************************************************************************/


/**
 *
 * Summary.       CleverForms Designer.
 *
 * Description.   Creates an instance of CleverForms Designer for the designer portion of CelverForms.
 *                Important: Must follow ECMAScript 5 (ES5) standards to support Internet Explorer 11.
 *
 * @author        Ben King, benk at affinityteam.com, ben.king at source63.com, +64 21 2672729.
 *
 *
 * @since         16.06.2020
 * @class         Designer
 * @namespace     Affinity2018.Classes.Apps.CleverForms
 * @memberof      CleverForms
 * @constructs    Affinity2018.Classes.Apps.CleverForms.Designer
 *
 * @todo          Fix Edit after insertion or subsequent edit.
 *
 * @todo          Allow global keys to sort to anywhere - update _canDrop to include non Sections of type 'global key'.
 *
 * @todo          Add form template loader and renderer (partly done - maybe complete? Needs testing).
 *
 * @public
 */

if(!('Affinity2018' in window)) Affinity2018 = {};
if(!('Classes' in Affinity2018)) Affinity2018.Classes = {};
if(!('Apps' in Affinity2018.Classes)) Affinity2018.Classes.Apps = {};
if(!('Plugins' in Affinity2018.Classes)) Affinity2018.Classes.Plugins = {};
if(!('CleverForms' in Affinity2018.Classes.Apps)) Affinity2018.Classes.Apps.CleverForms = {};

if(!('Apps' in Affinity2018)) Affinity2018.Apps = {};
if(!('Plugins' in Affinity2018.Apps)) Affinity2018.Apps.Plugins = {};

Affinity2018.Classes.Apps.CleverForms.Designer = class
{

  /**
   * Summary. Sets class scoped variables required for the Designer instance
   * @this    Class scope
   * @access  private
   */
  _options()
  {

    /**
    * Description.    Allows designer to post element creation and edits.
    *                 Set to false while developing and testing code.
    *                 WARNING! If set to false, DO NOT forget to set back 
    *                 to true when you are done :D
    * @type {Boolean}
    * @public
    */
    this.EnablePost = true;

    /**
    * Description.    Enables left list autoscroll to make it easier to 
    *                 get to items if your tight list huge :O
    * @type {Boolean}
    * @public
    */
    this.EnableLeftAutoScroll = true;

    /**
    * Description.    A flag to set whether we POST raw data (false) or
    *                 PostData with headers "Content-Type: multipart/form-data" (true)
    * @type {Boolean}
    * @public
    */
    this.UseFormDataPost = false;

    /**
    * Description.    Sets the Rank order and numbering when building post data (this.State)
    *                 1  = Ascending order where 1 is top
    *                 -1 = Descending order where 1 is bottom
    * @type {number}
    * @public
    */
    this.RankOrder = 1;

    /**
    * Description.    Locks post methods. This is set to false when all "this.postList" elements are posted.
    * @type {Object}
    * @const
    * @public
    */
    this.PostLocked = false;

    /**
    * Description.    The distance in pixels from any view edge before view auto-scrolls
    *                 while dragging an element.
    * @type {number}
    * @public
    */
    this.DragScrollEdge = 100;

    /**
    * Description.    The maximum scroll step taken per animation frame when dragging
    *                 an element within this.DragScrollEdge pixels of any view edge.
    *                 Scroll speed is throttled and calculated as:
    *                 distance from edge / this.DragScrollEdge * this.DragScrollMaxStep
    * @type {number}
    * @public
    */
    this.DragScrollMaxStep = 30;

    /**
    * Description.    The search / editor popup controller (reference).
    * @type {Object}
    * @const
    * @public
    */
    this.Editor = null;

    /**
    * Description.    The 'dragular' drag instance (reference)
    * @type {Object}
    * @const
    * @public
    */
    this.Dragger = null;

    /**
    * Description.    The top details element (reference)
    * @type {DomElement}
    * @const
    * @public
    */
    this.TopNode = null;

    /**
    * Description.    The left list of available form elements (reference)
    * @type {DomElement}
    * @const
    * @public
    */
    this.LeftListNode = null;

    /**
    * Description.    The form elements selected by the user or by a preloaded template (reference)
    * @type {DomElement}
    * @const
    * @public
    */
    this.RightListNode = null;

    /**
    * Description.    If true, the right list 'drop' min height is set to left list full height
    * @type {Boolean}
    * @const
    * @public
    */
    this.MaximiseRightHeight = false;

    /**
    * Description.    If true, the user can add multiple of the same Affinity Field if mode is Display (2)
    * @type {Boolean}
    * @const
    * @public
    */
    this.AllowMultipleDisplayFields = false;

    /**
    * Description.    Open preview in a new tab
    * @type {Boolean}
    * @const
    * @public
    */
    this.OpenPreviewInNewWindow = false;

    /**
    * Description.    Last Update and POST times
    * @type {DateTime}
    * @const
    * @public
    */
    this.LastModifiedTime = Date.now();
    this.LastPostTime = Date.now();

    /**
    * Description.    Status of Form Details (top info) update. 
    *                 none / progress / done / error
    * @type {String}
    * @const
    * @public
    */
    this.FormDetailsProgress = 'none';

    /**
    * Description.    The new element created wafter a lft list item is dropped.
    * @type {HtmlElement}
    * @const
    * @public
    */
    this.ElementDropped = null;
  }



  /**
   * Summary. Class constructor
   * @this    Class
   * @access  private
   */
  constructor(templateModel)
  {

    /** load all options above into class scope.*/
    this._options();

    /**
     * Summary. Array of class method names to be bound to the global Class scope.
     * @access  private
     */
    [

      '_init',

      // public

      'Add',
      'SetElementForDelete',

      'LockAffinityNonMasterFileSection',

      'GetElementSectionNode',
      'GetElementSectionFilterMode', 'GetElementSectionNodelName',
      'CanAllowAffinityField',

      'Save',

      // private

      '_ready',

      '_insertFormElements', '_insertElement',

      '_clearForm',
      '_loadTemplate', '_loadTemplateError', '_processTemplate',

      '_insertFormElement', '_updateFormElement',
      '_updateDroppedElement', '_attemptSetElementAsKey',
      '_setSectionModelNameLabels',
      '_injectDefaultSection',

      '_editElement',
      '_editUpdated',
      '_editCanceled',

      '_editElementClicked',
      '_removeElementClicked', '_clearRemove', '_removeElement', '_setElementForDelete',
      '_disableAllDeleteButtons', '_enableAllDeleteButtons',

      '_updateFormDetails', '_hasCountrySensativeFields', '_checkResetFormCountry',

      '_setupLeftListPositionOnScroll',

      '_loadPreview',

      // Drag and Drop
      '_setupDrag', '_canCopy', '_canDrop', '_dragStart', '_dragMove', '_checkDragScroll', '_adjustDragScroll', '_dragEnd', '_dropped',

      // Save
      '_checkSave', '_checkSaveThrottled',
      '_post', '_postThen', '_postCatch', '_setPosted', '_postComplete', '_postFailed',

      '_download', '_upload', '_uploadAfterDelete', '_saveAfterUpload',

      // html templates
      '_templates'

    ].bindEach(this);

    /** load all object and HTML templates into class scope. */
    this._templates();

    this.CleverForms = Affinity2018.Apps.CleverForms.Default;
    this.CleverForms.Designer = this;

    /** If global RequestQueue does not yet exist, create it. */
    if (!Affinity2018.hasOwnProperty('RequestQueue'))
    {
      Affinity2018.RequestQueue = new Affinity2018.Classes.Plugins.RequestQueue();
    }

    this.Uploading = false;

    /** If Affnity2018 UI is ready, initialise, else initialise when Affnity2018 fires the "MainInit" event (is ready). */
    if (Affinity2018.UiReady) this._init();
    else window.addEventListener('MainInit', this._init);

  }



  /**
   * Summary. Designer Class initialiser
   * @this    Class scope
   * @access  private
   */
  _init()
  {

    /** Builds the Editor instance **/
    this.Editor = new Affinity2018.Classes.Apps.CleverForms.DesignerElementEdit({
      Designer: this,
      SearchApi: this.CleverForms.FielddSearchApi,
      OnUpdate: this._editUpdated,
      OnCancel: this._editCanceled,
    });

    /** Set top DOM node to TopNode reference  */
    this.TopNode = document.querySelector('.cf-d2-top');

    /** Set left list DOM node to LeftListNode reference  */
    this.LeftListNode = document.querySelector('.cf-d2-bottom-left ul');

    /** Set right list DOM node to LeftListNode reference  */
    this.RightListNode = document.querySelector('.cf-d2-bottom-right ul');

    this.DesignerSavingNode = document.querySelector('#loading-toast');

    this.HasMultipleCountries = Affinity2018.Apps.CleverForms.Default.TemplateModel.IsMultiCountry;

    /* Add events to top details */
    this.TopNode.querySelector('input.form-name').addEventListener('blur', this._updateFormDetails);
    this.TopNode.querySelector('input.form-instructions').addEventListener('blur', this._updateFormDetails);
    this.TopNode.querySelector('input.form-revision').addEventListener('blur', this._updateFormDetails);
    this.TopNode.querySelector('select.form-country').addEventListener('change', this._updateFormDetails);
    if (this.TopNode.querySelector('input[type="checkbox"]'))
    {
      this.TopNode.querySelector('input[type="checkbox"]').addEventListener('click', this._updateFormDetails);
    }

    if (!Affinity2018.Numbers) Affinity2018.Numbers = new Affinity2018.Classes.Plugins.Numbers();
    Affinity2018.Numbers.Apply();

    /** Add preview button event */
    this.TopNode.querySelector('.button.preview').addEventListener('click', this._loadPreview);

    if (this.TopNode.querySelector('.button.download') && this.TopNode.querySelector('.button.upload') && this.TopNode.querySelector('input.upload-file'))
    {
      this.TopNode.querySelector('.button.download').addEventListener('click', this._download);
      this.TopNode.querySelector('.button.upload').addEventListener('click', function () { document.querySelector('.cf-d2-top input.upload-file').click(); });
      this.TopNode.querySelector('input.upload-file').addEventListener('change', this._upload);
    }

    /** Kick off data loader ... */
    Affinity2018.ShowPageLoader();
    this._insertFormElements();

    if (this.TopNode.querySelector('input.form-name').value.trim() !== '')
    {
      document.title = 'Design ' + this.TopNode.querySelector('input.form-name').value.trim();
      if (document.querySelector('link[rel="icon"]')) document.querySelector('link[rel="icon"]').href = 'https://cdn.jsdelivr.net/gh/affinityteam/www-assets/v1/favicon1.ico';
    }
  }



  /**
   * Summary. Designer Class set to "ready" state
   * @this    Class scope
   * @access  private
   */
  _ready()
  {
    Affinity2018.Tooltips.Apply();
    this._setupLeftListPositionOnScroll();
    //$a.HidePageLoader();
  }



  /***************************************************************************************************************************************************/
  /***************************************************************************************************************************************************/
  /***                                                                                                                  ******************************/
  /***   ██████  ██    ██ ██████  ██      ██  ██████     ███    ███ ███████ ████████ ██   ██  ██████  ██████  ███████   ******************************/
  /***   ██   ██ ██    ██ ██   ██ ██      ██ ██          ████  ████ ██         ██    ██   ██ ██    ██ ██   ██ ██        ******************************/
  /***   ██████  ██    ██ ██████  ██      ██ ██          ██ ████ ██ █████      ██    ███████ ██    ██ ██   ██ ███████   ******************************/
  /***   ██      ██    ██ ██   ██ ██      ██ ██          ██  ██  ██ ██         ██    ██   ██ ██    ██ ██   ██      ██   ******************************/
  /***   ██       ██████  ██████  ███████ ██  ██████     ██      ██ ███████    ██    ██   ██  ██████  ██████  ███████   ******************************/
  /***                                                                                                                  ******************************/
  /***************************************************************************************************************************************************/
  /***************************************************************************************************************************************************/



  /**
   * Summary. Add an item to the RightList (to the form being designed)
   * @this    Class scope
   * @access  public
   * 
   * @param {Object} config The configuration of the element to add
   * @param {Boolean} autoEdit Automatically open Designer Edit screen on Add
   * @param {Element} targetNode Where to insert the Adding element
   * @param {String} position top (default) | after, Position to inssert
   * @param {Object} referenceNode Optional reference node to Insert above or after
   */
  Add(config, autoEdit, targetNode, position, referenceNode)
  {

    if (this.LeftListNode.querySelector('li[data-type="' + config.Type + '"]'))
    {
      var copyFrom = this.LeftListNode.querySelector('li[data-type="' + config.Type + '"]'),
        node = copyFrom.cloneNode();

      node.innerHTML = copyFrom.innerHTML;

      node = this._updateDroppedElement(node, config, autoEdit);

      /**/

      if (this.CleverForms.PseudoGlobalElementTypes.contains(config.Type))
      {
        if (this.LeftListNode.querySelector('li[data-type="' + config.Type + '"]'))
        {
          this.LeftListNode.querySelector('li[data-type="' + config.Type + '"]').classList.add('disabled');
        }
      }

      /**/

      if (node.hasOwnProperty('controller'))
      {

        switch (position)
        {
          case 'after':
            if (referenceNode)
            {
              targetNode.insertBefore(node, referenceNode.nextSibling);
            }
            else
            {
              Affinity2018.ThrowError('Design Error', 'Blocker', 'Can not Add "' + config.Type + '" element after NULL. A "referenceNode" must be passed in and be a vlaid DOM element.');
              return false;
            }
            break
          case 'top':
          default:
            targetNode.insertBefore(node, targetNode.querySelector('li'));
            break;
        }

        if (config.Type.toLowerCase() === 'section')
        {
          this.Dragger.containers.push(node.querySelector('ul'));
        }

        this.LockAffinityNonMasterFileSection(node);

        if (config.Type.toLowerCase() === 'section') this._setSectionModelNameLabels();
        if (config.Type.toLowerCase() !== 'section') this._setElementModeLabel(node);


        if (config.Type === 'AffinityField' && config.Details.AffinityField.FieldName === 'LINK_ID') node.classList.add('hidden');

        return node;
      }

    }

    return false;
  }




  SetElementForDelete(node)
  {
    if ($a.isNode(node) && node.hasOwnProperty('controller')) this._setElementForDelete(node);
  }



  /**
   * Summary. Lock a section to Affinity Field Model type if model is not masterfile.
   *          No items can be dragged into or out of this section.
   *          Only Affinity Fields of the same model tyoe can be added. 
   * @this    Class scope
   * @access  public
   */
  LockAffinityNonMasterFileSection(node)
  {
    if (node)
    {
      var sectionNode = this.GetElementSectionNode(node),
        nodes = sectionNode ? sectionNode.querySelectorAll('li[data-type="AffinityField"]') : false,
        i = 0;
      if (sectionNode)
      {
        sectionNode.classList.remove('locked');
        if (nodes && nodes.length > 0)
        {
          for (; i < nodes.length; i++)
          {
            if (this.CleverForms.MasterfileTableBlacklist.contains(nodes[i].dataset.model))
            {
              sectionNode.classList.add('locked');
              return;
            }
          }
        }
      }
    }
  }



  /**
   * Summary. Retrun the section node elementNode resides in 
   * @this    Class scope
   * @access  private
   * 
   * @param {Node} elementNode Child node of Section to discover and return
   * @param {Boolean} checkRightList Check if the elementNode or parent Section exists in the Right Designer List
   */
  GetElementSectionNode(elementNode, checkRightList)
  {
    var checkRightList = $a.paramOrDefault(checkRightList, false, 'bool');
    var isDesignerNode = $a.isNode(elementNode) ? elementNode.classList.contains('cf-designer-element') : false;
    var isInRightListNode = true;
    if (checkRightList) isInRightListNode = isNode ? this.RightListNode.querySelector('.cf-designer-element.item-' + elementNode.dataset.name) : false;
    if (
      isDesignerNode // is a Designer element
      && isInRightListNode // Designer element is in the right list
    )
    {
      if (elementNode.closest('li[data-type="Section"]')) // has a 'closest' section 
      {
        return elementNode.closest('li[data-type="Section"]'); // return closest section
      }
    }
    return false;
  }



  /**
   * Summary. Retrun the Affnity Mode of a section, or false 
   * @this    Class scope
   * @access  private
   */
  GetElementSectionFilterMode(elementNode)
  {
    var sectionNode = this.GetElementSectionNode(elementNode);
    if (sectionNode)
    {
      var affinityFieldKeys = sectionNode.querySelectorAll('li[data-type="AffinityField"].is-key-field');
      if (affinityFieldKeys.length > 0)
      {
        return affinityFieldKeys[0].controller.Config.Details.AffinityField.Mode;
      }
      var affinityFields = sectionNode.querySelectorAll('li[data-type="AffinityField"]');
      if (affinityFields.length > 0)
      {
        return affinityFields[0].controller.Config.Details.AffinityField.Mode;
      }
    }
    return false;
  }



  /**
   * Summary. Retrun the Affnity ModelName of a section, or false 
   * @this    Class scope
   * @access  private
   */
  GetElementSectionNodelName(elementNode)
  {
    if (elementNode)
    {
      var sectionNode = this.GetElementSectionNode(elementNode);
      var modelName = elementNode.controller.GetModeName();
      var nodes;
      if (sectionNode)
      {
        // check for any non global key of the same model
        nodes = sectionNode.querySelectorAll('li[data-type="AffinityField"][data-model="' + modelName + '"].is-key-field:not(.is-global-key)');
        if (nodes.length > 0)
        {
          return nodes[0].controller.Config.Details.AffinityField.ModelName;
        }

        // check for any global key of the same model
        nodes = sectionNode.querySelectorAll('li[data-type="AffinityField"][data-model="' + modelName + '"].is-key-field');
        if (nodes.length > 0)
        {
          return nodes[0].controller.Config.Details.AffinityField.ModelName;
        }

        // check for any field of the same model
        nodes = sectionNode.querySelectorAll('li[data-type="AffinityField"][data-model="' + modelName + '"]');
        if (nodes.length > 0)
        {
          return nodes[0].controller.Config.Details.AffinityField.ModelName;
        }

        /**/

        // check for any non global key
        nodes = sectionNode.querySelectorAll('li[data-type="AffinityField"].is-key-field:not(.is-global-key)');
        if (nodes.length > 0)
        {
          return nodes[0].controller.Config.Details.AffinityField.ModelName;
        }

        // check for any global key
        nodes = sectionNode.querySelectorAll('li[data-type="AffinityField"].is-key-field');
        if (nodes.length > 0)
        {
          return nodes[0].controller.Config.Details.AffinityField.ModelName;
        }

        // check for any field
        nodes = sectionNode.querySelectorAll('li[data-type="AffinityField"]');
        if (nodes.length > 0)
        {
          return nodes[0].controller.Config.Details.AffinityField.ModelName;
        }

      }
    }
    return false;
  }



  /**
  * Summary. Can we select / insert / drop this AffinityField node in the Designer list
  * @this    Class scope
  * @access  public
  * 
  * @param {Node} elementNode The Desinger element for whome we are checking
  * @param {Node} toList The destination for the Desinger element
  * @param {String} checkSource Who ias aking for the check (_canDrop, _searchSelected, _canSelectSearch, etc)
  */
  CanAllowAffinityField (node, showMessages, fromSearch, fromDrag, dragToListNode, dragFromListNode)
  {
    if ($a.isNode(node))
    {
      showMessages = $a.paramOrDefault(showMessages, true);
      fromSearch = $a.paramOrDefault(fromSearch, false);
      fromDrag = $a.paramOrDefault(fromDrag, false);

      var config = node.hasOwnProperty('controller') ? node.controller.Config : null,
        AffinityField = config != null && config.Type === 'AffinityField' ? config.Details.AffinityField : null,
        AffinityFieldLabel = config != null && config.Type === 'AffinityField' ? config.Details.Label : null,
        SectionNode, DragToSectionModel,
        SectionMode, SectionModel,
        FieldModel, FieldMode, FieldModeName, FieldName, FieldNameLower, FieldLabel,
        ExisitngKeyNode, ExisitngKeyMode, ExisitngKeyModeName, ExisitngKeyLabel,
        IsNew,
        message, query;

      if (AffinityField != null)
      {
        SectionNode = this.CleverForms.Designer.GetElementSectionNode(node);
        DragToSectionModel = fromDrag ? this.GetElementSectionNodelName(dragToListNode.querySelector('li[data-type="AffinityField"]')) : false;
        if (SectionNode !== null)
        {
          SectionMode = this.GetElementSectionFilterMode(node);
          SectionModel = this.GetElementSectionNodelName(node);
          FieldModel = AffinityField.ModelName;
          FieldMode = AffinityField.Mode;
          FieldModeName = $a.isNumeric(FieldMode) ? this.CleverForms.AffnityFieldModeEnums[FieldMode].Label : null;
          FieldName = AffinityField.FieldName;
          FieldNameLower = FieldName !== null ? FieldName.toLowerCase() : null;
          FieldLabel = config.Details.Label;
          ExisitngKeyNode = this.RightListNode.querySelector('li[data-model="{0}"].is-global-key'.format(FieldMode))
          ExisitngKeyNode = ExisitngKeyNode === null ? this.RightListNode.querySelector('li[data-model="{0}"].is-key-field'.format(FieldModel)) : null;
          ExisitngKeyMode = ExisitngKeyNode !== null ? ExisitngKeyNode.controller.Config.Details.AffinityField.Mode : null;
          ExisitngKeyModeName = ExisitngKeyMode !== null ? this.CleverForms.AffnityFieldModeEnums[ExisitngKeyMode].Label : null;
          ExisitngKeyLabel = ExisitngKeyNode !== null ? ExisitngKeyNode.controller.Config.Details.Label : null;
          IsNew = node.controller.Saved ? false : true;
          message = '';


          // LOGIC START ▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼

          if (!fromDrag) // apply from search or edit, but not when dragging
          {

            if (!fromSearch && AffinityField.IsMasterfileData)
            {

              //-------------------------------------------------------------------------------------------------//
              // If key mode is create, we can only chose create except for Lookup that should be Select --------//
              if (ExisitngKeyMode !== null && FieldMode !== ExisitngKeyMode && ExisitngKeyMode === 0 && FieldMode !== 4)
              {
                if (showMessages)
                {
                  //message = 'Warning! This field has a key which is set as "{0}". This field must be set to "{0}" as well.'.format(ExisitngKeyModeName);
                  message = $a.Lang.ReturnPath('app.cf.designer.error_mix_modes', {
                    fieldLabel: ExisitngKeyLabel,
                    mode: ExisitngKeyModeName
                  });


                  Affinity2018.Dialog.Show({
                    message: message,
                    showOk: true,
                    showCancel: true,
                    showInput: false,
                    textAlign: 'left',
                    buttons: {
                      ok: { show: true, icon: 'tick', text: $a.Lang.ReturnPath('generic.buttons.ok') },
                      cancel: { shoe: false }
                    }
                  });
                }
                return false;
              }
              // END - If key mode is create, we can only chose create except for Lookup that should be Select --//
              //-------------------------------------------------------------------------------------------------//


              //-------------------------------------------------------------------------------------------------//
              // If key mode is NOT create, we can NOT chose create ---------------------------------------------//
              if (ExisitngKeyMode !== null && FieldMode === 0 && ExisitngKeyMode !== 0) // 0 -> create
              {
                if (showMessages)
                {
                  //message = 'Warning! This field can not be "Create" as it has a key that is "{0}".'.format(ExisitngKeyModeName);
                  message = $a.Lang.ReturnPath('app.cf.designer.error_section_not_create',
                    {
                      fieldLabel: ExisitngKeyLabel,
                      mode: ExisitngKeyModeName,
                    }
                  );
                  Affinity2018.Dialog.Show({
                    message: message,
                    showOk: true,
                    showCancel: true,
                    showInput: false,
                    textAlign: 'left',
                    buttons: {
                      ok: { show: true, icon: 'tick', text: $a.Lang.ReturnPath('generic.buttons.ok') },
                      cancel: { shoe: false }
                    }
                  });
                }
                return false;
              }
              // END - If key mode is NOT create, we can NOT chose create ---------------------------------------//
              //-------------------------------------------------------------------------------------------------//

            }


            //-------------------------------------------------------------------------------------------------//
            // Only one of any Affinity field key per Template ------------------------------------------------//
            if (IsNew && AffinityField.IsKeyField)
            {
              var keyExists = false;
              if (this.CleverForms.AllowedGlobalKeys.contains(FieldName))
              {
                query = 'li.is-key-field[data-field="{field}"]'.format(
                  {
                    field: FieldName
                  });
                if (this.RightListNode.querySelector(query) && this.RightListNode.querySelector(query) !== node)
                {
                  keyExists = true;
                  //message = 'You already have this Global Key in the form';
                  message = $a.Lang.ReturnPath('app.cf.designer.error_duplicate_global_key', {
                    fieldLabel: FieldLabel
                  });
                }
              }
              else
              {
                if (AffinityField.IsMasterfileData)
                {
                  query = 'li.is-key-field[data-field="{field}"][data-model="{model}"]'.format(
                    {
                      field: FieldName,
                      model: FieldModel
                    });
                  if (this.RightListNode.querySelector(query))
                  {
                    keyExists = true;
                    //message = 'You already have this key in this form';
                    message = $a.Lang.ReturnPath('app.cf.designer.error_duplicate_key_form');
                  }
                }
                else
                {
                  query = 'li.is-key-field[data-field="{field}"]'.format(
                    {
                      field: FieldName
                    });
                  if (SectionNode && SectionNode.querySelector(query))
                  {
                    keyExists = true;
                    //message = 'You already have this key in this section';
                    message = $a.Lang.ReturnPath('app.cf.designer.error_duplicate_key_section');
                    //
                  }
                }
              }
              if (keyExists)
              {
                if (showMessages)
                {
                  Affinity2018.Dialog.Show({
                    message: message,
                    showOk: true,
                    showCancel: true,
                    showInput: false,
                    textAlign: 'left',
                    buttons: {
                      ok: { show: true, icon: 'tick', text: $a.Lang.ReturnPath('generic.buttons.ok') },
                      cancel: false
                    }
                  });
                }
                return false;
              }
            }
            // END - Only one of any Affinity field key per Template ------------------------------------------//
            //-------------------------------------------------------------------------------------------------//


            //-------------------------------------------------------------------------------------------------//
            // Only one of any MasterFile Affinity field & mode per Template ----------------------------------//
            if (!fromSearch && AffinityField.IsMasterfileData && FieldName !== null && FieldMode !== null && FieldModeName !== null)
            {
              // allow as many display items as you want (see bug #45 in https://affinity.atlassian.net/wiki/spaces/AP/pages/1155499005/CF+Gen+2+-+Templates+Testing+Round+2)
              if (this.AllowMultipleDisplayFields && FieldMode === this.CleverForms.AffnityFieldModeTypes.Display.Enum)
              {
                // this is allowed
                return true;
              }
              else
              {
                query = 'li[data-field="{field}"][data-model="{model}"][data-mode="{mode}"]'.format(
                  {
                    field: FieldName,
                    model: FieldModel,
                    mode: FieldMode
                  });
                if (this.RightListNode.querySelector(query) && this.RightListNode.querySelector(query) !== node)
                {
                  if (showMessages)
                  {
                    var masterfileNode = this.RightListNode.querySelector(query);
                    var mode = masterfileNode.controller.Config.Details.AffinityField.Mode;
                    var modeName = this.CleverForms.AffnityFieldModeEnums[mode].Label
                    //message = 'Warning! You already have a "{0}" version of this field in your form'.format(FieldModeName);
                    message = $a.Lang.ReturnPath('app.cf.designer.error_one_masterfile', {
                      label: masterfileNode.controller.Config.Details.Label,
                      mode: modeName
                    });
                    Affinity2018.Dialog.Show({
                      message: message,
                      showInput: false,
                      textAlign: 'left',
                      buttons: {
                        ok: { show: true, icon: 'tick', text: $a.Lang.ReturnPath('generic.buttons.ok') },
                        cancel: { shoe: false }
                      }
                    });
                  }
                  return false;
                }
              }
            }
            // END - Only one of any Affinity field & mode per Template ---------------------------------------//
            //-------------------------------------------------------------------------------------------------//

          }

          // LOGIC FROM EDITOR SEARCH START ▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼

          if (fromSearch) // apply to search resutls only
          {


            //-------------------------------------------------------------------------------------------------//
            // Can not mix Affinity field Tables --------------------------------------------------------------//
            if (
              IsNew
              && SectionModel
              && SectionModel !== FieldModel
              && !this.CleverForms.AllowedGlobalKeys.contains(FieldName)
            )
            {
              //message = '';
              //message += '<p>You can only have Affinity fields from one table per section.</p>';
              //message += '<p>This section already has Affinity fields for "' + SectionModel + '", but "' + config.Details.Label + '" is from "' + FieldModel + '".</p>';
              //message += '<p>You should create a new section for "' + FieldModel + '" fields, or try a section already using this table.</p>';
              message = $a.Lang.ReturnPath('app.cf.designer.error_duplicate_field', { model: SectionModel });
              Affinity2018.Dialog.Show({
                message: message,
                showOk: true,
                showCancel: false,
                showInput: false,
                textAlign: 'left',
                buttons: {
                  ok: { show: true, icon: 'tick', text: $a.Lang.ReturnPath('generic.buttons.ok') },
                  cancel: { shoe: false }
                }
              });
              return false;
            }
            // END - Can not mix Affinity field Tables --------------------------------------------------------//
            //-------------------------------------------------------------------------------------------------//


            //-------------------------------------------------------------------------------------------------//
            // Can only have one of each pseudo global key in each section ------------------------------------//
            if (
              IsNew
              && this.CleverForms.PseudoGlobalElementTypes.contains(FieldName)
              && SectionNode.querySelector('li[data-name="' + FieldName + '"]')
            )
            {
              Affinity2018.Dialog.Show({
                //message: 'Oops! You can only have one "' + config.Label + '" per section.',
                message: $a.Lang.ReturnPath('app.cf.designer.error_one_pseudo_key_per_section', { label: config.Label }),
                showOk: true,
                showCancel: false,
                showInput: false,
                buttons: {
                  ok: { show: true, icon: 'tick', text: $a.Lang.ReturnPath('generic.buttons.ok') },
                  cancel: { shoe: false }
                }
              });
              return false;
            }
            // END - Can only have one of each pseudo global key in each section ------------------------------//
            //-------------------------------------------------------------------------------------------------//


            //-------------------------------------------------------------------------------------------------//
            // Can only have one of each global key in the form -----------------------------------------------//
            if (
              IsNew
              && AffinityField.IsKeyField
              && this.CleverForms.AllowedGlobalKeys.contains(FieldName)
              && this.RightListNode.querySelector('.is-global-key')
            )
            {
              Affinity2018.Dialog.Show({
                //message: 'Oops! You can only have one "' + config.Label + '" per form.',
                message: $a.Lang.ReturnPath('app.cf.designer.error_one_pseudo_key_per_form', { label: config.Label }),
                showOk: true,
                showCancel: false,
                showInput: false,
                buttons: {
                  ok: { show: true, icon: 'tick', text: $a.Lang.ReturnPath('generic.buttons.ok') },
                  cancel: { shoe: false }
                }
              });
              return false;
            }
            // END - Can only have one of each global key in the form -----------------------------------------//
            //-------------------------------------------------------------------------------------------------//

            //-------------------------------------------------------------------------------------------------//
            // Check for address ------------------------------------------------------------------------------//
            if (
              showMessages
              && FieldNameLower.contains('address')
              && !FieldNameLower.startsWith('complete')
              && !FieldNameLower.endsWith('complete')
            )
            {
              var searchstr = this.Editor.Search.InputNode.value.trim();

              //message = '';
              //message += 'It looks like you have selected an address field.';
              //message += '<br />'
              //message += 'Would you like to find a "Complete Address" instead?';
              //message += '<br />'
              //message += 'A "Complete Address" is a search box that will automatically fill all address fields for you.';

              console.log(config);

              Affinity2018.Dialog.Show({
                message:  $a.Lang.ReturnPath('app.cf.design_items.edit.address_suggestion'),
                showOk: true,
                showCancel: true,
                showInput: false,
                textAlign: 'left',
                buttons: {
                  ok: {
                    show: true,
                    icon: 'tick',
                    color: 'green',
                    text: $a.Lang.ReturnPath('app.cf.design_items.edit.address_button_use_single', { fieldName: config.Details.AffinityField.DisplayLabel })
                  },
                  cancel: {
                    show: true,
                    icon: 'search',
                    color: 'blue',
                    text: $a.Lang.ReturnPath('app.cf.design_items.edit.address_button_use_auto')
                  }
                },
                onOk: function ()
                {
                  this.Editor.SearchSelected({ data: config.Details.AffinityField }, true);
                }.bind(this),
                onCancel: function ()
                {
                  this.Editor.JumpSearch();
                  this.Editor.Search.Search('Complete ' + searchstr);
                }.bind(this),
              });
              return false;
            }
            // END - Check for address ------------------------------------------------------------------------//
            //-------------------------------------------------------------------------------------------------//


          }

          // LOGIC FROM EDITOR SEARCH END ▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲



          // LOGIC FROM DRAG DROP START ▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼

          if (fromDrag && dragToListNode && dragFromListNode) // apply to grag only
          {

            //-------------------------------------------------------------------------------------------------//
            // Global keys can go anywhere  -------------------------------------------------------------------//
            if (this.CleverForms.AllowedGlobalKeys.contains(FieldName))
            {
              this.DragEndMessage = false;
              this.DragEndCallback = false;
              return true;
            }
            // END - Global keys can go anywhere --------------------------------------------------------------//
            //-------------------------------------------------------------------------------------------------//


            //-------------------------------------------------------------------------------------------------//
            // NO drop in or out of locked sections. Only reordering in the same section ----------------------//
            if (!node.classList.contains('is-global-key'))
            {
              if (dragToListNode !== dragFromListNode && dragFromListNode !== this.LeftListNode) // we are not in the same section and we are not new
              {
                if (dragToListNode.parentNode.dataset.type === 'Section' && dragFromListNode.parentNode.dataset.type === 'Section') // from and to lists are sections
                {
                  if ( // either from or to lists are locked
                    dragToListNode.closest('li[data-type="Section"]').classList.contains('locked')
                    || dragFromListNode.closest('li[data-type="Section"]').classList.contains('locked')
                  )
                  {
                    //this.DragEndMessage = 'You can not move items into or out of locked sections';
                    this.DragEndMessage = $a.Lang.ReturnPath('app.cf.designer.error_bad_drag_operation');
                    this.DragEndCallback = false;
                    return false;
                  }
                }
              }
            }
            // END - NO drop in or out of locked sections. Only reordering in the same section ----------------//
            //-------------------------------------------------------------------------------------------------//


            //-------------------------------------------------------------------------------------------------//
            // Only one of any Affinity Field Key per Template ------------------------------------------------//
            if (!node.controller.Saved) // not saved means newly dragged in
            {
              query = 'li.is-key-field[data-field="{field}"][data-model="{model}"]'.format(
                {
                  field: FieldName,
                  model: FieldModel
                }
              );

              if (
                SectionNode
                && config.Details.AffinityField.IsKeyField
                && this.RightListNode.querySelector(fieldQuery)
              )
              {
                //this.DragEndMessage = 'You already have one of these';
                this.DragEndMessage = $a.Lang.ReturnPath('app.cf.designer.error_bad_drag_operation_unique', {
                  label: this.RightListNode.querySelector(fieldQuery).controller.Details.Label
                });
                this.DragEndCallback = false;
                return false;
              }
            }
            // END - Only one of any Affinity Field Key per Template ------------------------------------------//
            //-------------------------------------------------------------------------------------------------//


            //-------------------------------------------------------------------------------------------------//
            // Affinity Field NON MasterFile elements can not move between sections ---------------------------//
            if (
              !this.CleverForms.IsMasterFile(config) // not MasterFile
              && dragToListNode !== dragFromListNode // from and to are not the same list
              // TODO: Global check above, so this next check is not necessary?
              && !this.CleverForms.AllowedGlobalKeys.contains(FieldName)
            )
            {
              if (dragToListNode.classList.contains('items-only')) // TODO: Why do we need this check? items in non-items lists should have been caught above
              {
                //this.DragEndMessage = 'Affinity Fields that are not Masterfile data can not be moved between sections.';
                this.DragEndMessage = $a.Lang.ReturnPath('app.cf.designer.error_bad_drag_operation_non_masterfile');
              }
              this.DragEndCallback = false;
              return false;
            }
            // END - Affinity Field MasterFile elements can not move between sections -------------------------//
            //-------------------------------------------------------------------------------------------------//


            //-------------------------------------------------------------------------------------------------//
            // Can not mix Affinity field Models --------------------------------------------------------------//
            if (
              DragToSectionModel !== false
              && DragToSectionModel !== FieldModel
            )
            {
              //this.DragEndMessage = '';
              //this.DragEndMessage += '<p>You can only have Affinity Fields from one Model per section.</p>';
              //this.DragEndMessage += '<p>This section already has Affinity Fields for Model "' + SectionModel + '", but "' + config.Details.Label + '" is from Model "' + FieldModel + '".</p>';
              //this.DragEndMessage += '<p>You should create a new section for "' + FieldModel + '" fields, or try a section already using this Model.</p>';

              this.DragEndMessage = $a.Lang.ReturnPath('app.cf.designer.error_bad_drag_operation_mix_tables', {
                sectionModel: SectionModel,
                newFieldLabel: config.Details.Label,
                newFieldModel: FieldModel
              });

              this.DragEndCallback = false;
              return false;
            }
            // END - Can not mix Affinity field Models --------------------------------------------------------//
            //-------------------------------------------------------------------------------------------------//


            //-------------------------------------------------------------------------------------------------//
            // A form can only have one of each Pseudo global key ---------------------------------------------//
            if (
              this.CleverForms.PseudoGlobalElementTypes.contains(this.CleverForms.ElementData[node.dataset.type].Type)
              && this.RightListNode.querySelector('.is-pseudo-global-key:not(.gu-transit)')
            )
            {
              //this.DragEndMessage = 'Oops! You can only have one "' + this.CleverForms.ElementData[node.dataset.type].Label + '" per form.';
              this.DragEndMessage = $a.Lang.ReturnPath('app.cf.designer.error_bad_drag_operation_one_pseudo', {
                label: this.CleverForms.ElementData[node.dataset.type].Label
              });
              this.DragEndCallback = this.Editor.Cancel;
              return false;
            }
            // END - A form can only have one of each Pseudo global key ---------------------------------------//
            //-------------------------------------------------------------------------------------------------//


          }

          // LOGIC FROM DRAG DROP END ▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲


          // LOGIC FROM OTHER SCENARIO START ▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼

          if (!fromSearch && !fromDrag)
          {


            //-------------------------------------------------------------------------------------------------//
            // Logical Checke here ----------------------------------------------------------------------------//

            // END - Logical Checke here ----------------------------------------------------------------------//
            //-------------------------------------------------------------------------------------------------//


          }

          // LOGIC FROM OTHER SCENARIO END ▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲


          // LOGIC END ▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲

        }
      }
    }
    return true;
  }



  /**
  * Summary. Check if we have anytihg to save
  * @this    Class scope
  * @access  public
  */
  CheckSave ()
  {
    this._checkSave();
  }



  /**
  * Summary. Save any item changes
  * @this    Class scope
  * @access  public
  * 
  * @param {Nodes} nodes Dom nodes in the Right Desinger list to save
  */
  Save (nodes)
  {
    var consoleColor = '#ff5c00';
    if (nodes && $a.isArray(nodes))
    {
      //this.PostData = {}; // post datat expexts array, not object
      this.PostData = [];

      var config;
      if (nodes.length > 0) console.groupCollapsed('%c🖪 SAVING ...', 'color:' + consoleColor);
      nodes.forEach(function (node)
      {
        config = $a.jsonCloneObject(node.controller.Config);

        console.log('%c  Saving "' + config.Details.Label + '"', 'color:' + consoleColor);
        console.log('%c      node ', 'color:' + consoleColor, node);
        console.log('%c    config ', 'color:' + consoleColor, config);

        config = this.CleverForms.__THIS_IS_A_TEMP_TRANSMUTER_FOR_P_P_P_POST_DATA_UNTIL_POST_DATA_MATCHES_NEW_STRUCTURE(config);

        if (!config.hasOwnProperty('Rank') || (config.hasOwnProperty('Rank') && isNaN(parseInt(config.Rank))))
        {
          config.Rank = this._returnRank(node);
        }

        //this.PostData[config.Name] = config.Details; // for when data layout etc is synced
        //this.PostData[config.Name] = $a.jsonCloneObject(config); // post datat expexts array, not object
        this.PostData.push($a.jsonCloneObject(config));

        if (config.Type === 'Section')
        {
          var sectionNode = this.RightListNode.querySelector('li.item-' + node.UniqueName);
          if (sectionNode)
          {
            sectionNode.querySelectorAll('ul li.is-key-field').forEach(function (n)
            {
              if (n && n.controller && n.controller.Config)
              {
                if (!nodes.contains(n))
                {
                  console.log('%c      this was missing from post data', 'color:' + consoleColor, n);
                  this.PostData.push($a.jsonCloneObject(this.CleverForms.__THIS_IS_A_TEMP_TRANSMUTER_FOR_P_P_P_POST_DATA_UNTIL_POST_DATA_MATCHES_NEW_STRUCTURE(n.controller.Config)));
                }
              }
            });
          }
        }

      }.bind(this));
      if (nodes.length > 0) console.groupEnd();

      //if (Object.keys(this.PostData).length > 0)
      if (this.PostData.length > 0)
      {
        this._post();
      }

    }
    else
    {
      this._checkSave();
    }
  }



  /***************************************************************************************************************************************************/
  /***************************************************************************************************************************************************/
  /***                                                                                                                           *********************/
  /***   ██████  ██████  ██ ██    ██  █████  ████████ ███████     ███    ███ ███████ ████████ ██   ██  ██████  ██████  ███████   *********************/
  /***   ██   ██ ██   ██ ██ ██    ██ ██   ██    ██    ██          ████  ████ ██         ██    ██   ██ ██    ██ ██   ██ ██        *********************/
  /***   ██████  ██████  ██ ██    ██ ███████    ██    █████       ██ ████ ██ █████      ██    ███████ ██    ██ ██   ██ ███████   *********************/
  /***   ██      ██   ██ ██  ██  ██  ██   ██    ██    ██          ██  ██  ██ ██         ██    ██   ██ ██    ██ ██   ██      ██   *********************/
  /***   ██      ██   ██ ██   ████   ██   ██    ██    ███████     ██      ██ ███████    ██    ██   ██  ██████  ██████  ███████   *********************/
  /***                                                                                                                           *********************/
  /***************************************************************************************************************************************************/
  /***************************************************************************************************************************************************/



  /**
   * Summary. Loop through loaded element types and insert each element type into left column
   * @this    Class scope
   * @access  private
   */
  _insertFormElements ()
  {
    var data, cont;
    this.breakAdded = false;

    var elementKey, e, elementData, postCopy;
    var elementArray = [];
    for (elementKey in this.CleverForms.ElementData)
    {
      if (this.CleverForms.ElementData.hasOwnProperty(elementKey))
      {
        var data = $a.jsonCloneObject(this.CleverForms.ElementData[elementKey]);
        if (!data.Cloned)
        {
          data.Key = elementKey;
          if (data.hasOwnProperty('Type') && this.CleverForms.PseudoGlobalElementTypes.contains(data.Type))
          {
            // The element will go to top of he left list along with AffinityField and Section (with a green icon).
            // It will also be tagged as a pseudo global key.
            data.Icon.Color = 'green';
            this.CleverForms.ElementData[data.Key].Icon.Color = 'green';
          }
          if (!elementArray.contains(data)) elementArray.push(data);
        }
      }
    }

    //elementArray.sort(this._sortByLabel);
    elementArray.sort(this._sortByElementRank);

    for (e = 0; e < elementArray.length; e++)
    {
      data = elementArray[e];
      cont = this._insertElement(this.CleverForms.ElementData[data.Key]);
    }
    cont = this._setupDrag();
    cont = this._loadTemplate();
    /**/
    if (this.MaximiseRightHeight) this.RightListNode.style.minHeight = (this.LeftListNode.getBoundingClientRect().height - 50) + 'px';
    /**/
    this._ready();
  }



  /**
   * Summary. Insert element type into left column
   * @this    Class scope
   * @access  private
   */
  _insertElement (data)
  {
    if (this.LeftListNode)
    {
      var component, elementNode;
      if (!this.breakAdded && data.Icon.Color.trim().toLowerCase() === 'blue')
      {
        elementNode = document.createElement('hr');
        this.LeftListNode.appendChild(elementNode);
        this.breakAdded = true;
      }

      elementNode = document.createElement('li');

      if (data.Type.trim().toLowerCase() === 'section')
      {
        var message = $a.Lang.ReturnPath('application.cleverfroms.designer.section_required_fields_message');
        var messageClass = '';
        if (message.trim() === '') messageClass = ' none';

        elementNode.innerHTML = this.sectionTemplate.format({
          edit: $a.Lang.ReturnPath('application.cleverfroms.designer.element_edit_button'),
          message: message,
          messageClass: messageClass
        });
      }
      else
      {
        elementNode.innerHTML = this.elementTemplate.format({
          edit: $a.Lang.ReturnPath('application.cleverfroms.designer.element_edit_button')
        });
      }

      elementNode.dataset.type = data.Type;

      if (data.Icon.Color.trim().toLowerCase() === 'green' && this.breakAdded)
      {
        this.LeftListNode.insertBefore(elementNode, this.LeftListNode.querySelector('hr'));
      }
      else
      {
        this.LeftListNode.appendChild(elementNode);
      }

      if (this.CleverForms.PseudoGlobalElementTypes.contains(data.Type)) elementNode.classList.add('pseudo-global-key');

      elementNode.querySelector('.main-icon').classList.add(data.Icon.Color, 'icon-cf-' + data.Icon.Name.replace('icon-', '').replace('cf-', ''));
      elementNode.querySelector('.label').innerHTML = data.Label;
      elementNode.classList.add('cf-designer-element', 'ui-has-tooltip');
      elementNode.dataset.tooltip = data.Tooltip;
      elementNode.dataset.tooltipDir = 'right';

      if (data.Details.Divide) elementNode.classList.add('divide');

      return true;
    }
    return false;
  }



  /**
  * Summary. Clear form, removing all nodes and removing all references for GC
  * @this    Class scope
  * @access  private
  */
  _clearForm ()
  {
    var sectionNodes = this.RightListNode.querySelectorAll('li[data-type="Section"]'),
      n = 0,
      removed = false;

    if (sectionNodes.length > 0)
    {
      for (; n < sectionNodes.length; n++)
      {
        removed = sectionNodes[n].controller.RemoveDesignerElement(this._removeElement);
      }
    }
    else removed = true;

    if (removed)
    {
      this.RightListNode.innerHTML = '';
      return true;
    }
    return false;
    // TODO: if GC is not clearing removed elements (due to a reference somewhere), then refresh the page instead ... so, memory profile this app and this method please.
  }



  /**
  * Summary. Get Template data
  * @this    Class scope
  * @access  private
  */
  _loadTemplate ()
  {
    this.TemplateData = false;

    $a.ShowPageLoader();

    var gotTemplateTempMethod = function ()
    {
      window.removeEventListener('DesignerGotTemplate', gotTemplateTempMethod);
      if (this.TemplateData)
      {
        this._processTemplate();
        gotTemplateTempMethod = null;
      }
    }.bind(this);
    window.addEventListener('DesignerGotTemplate', gotTemplateTempMethod);

    var templateId = this.CleverForms.GetTemplateGuid(), api;
    if (templateId)
    {
      api = this.CleverForms.GetTemplateApi + '?templateId=' + templateId;
      $a.ShowPageLoader();
      axios({
        method: 'get',
        url: api
      })
        .then(function (response)
        {
          if (response && $a.isObject(response.data))
          {
            var gotTemplate = false;

            // TODO: old - retire once new is used.
            if (response.data.hasOwnProperty('sectionWorkflowVisibilitySettings'))
            {
              this.CleverForms.SectionWorkflowVisibilitySettings = response.data.sectionWorkflowVisibilitySettings;
            }
            
            // new
            if (response.data.hasOwnProperty('SectionWorkflowVisibilitySettings'))
            {
              this.CleverForms.SectionWorkflowVisibilitySettings = response.data.SectionWorkflowVisibilitySettings;
            }

            // TODO: old - retire once new is used.
            if (response.data.hasOwnProperty('elementTemplateMerged') && $a.isArray(response.data.elementTemplateMerged))
            {
              this.TemplateData = response.data.elementTemplateMerged;
              window.dispatchEvent(new Event('DesignerGotTemplate')); // detach from promise for debugging ....
              gotTemplate = true;
            }

            // new
            if (response.data.hasOwnProperty('Data') && $a.isArray(response.data.Data))
            {
              this.TemplateData = response.data.Data;
              window.dispatchEvent(new Event('DesignerGotTemplate')); // detach from promise for debugging ....
              gotTemplate = true;
            }

            if (!gotTemplate)
            {
              this._loadTemplateError($a.Lang.ReturnPath('application.cleverfroms.designer.error_template_not_recognised'));
            }
          }
          else
          {
            this._loadTemplateError($a.Lang.ReturnPath('application.cleverfroms.designer.error_template_not_recognised'));
          }
        }.bind(this))
        .catch(function ()
        {
          this._loadTemplateError($a.Lang.ReturnPath('application.cleverfroms.designer.error_template_fail'));
        }.bind(this));
    }
    return true;
  }



  /**
  * Summary. Template Get operation failed 
  * @this    Class scope
  * @access  private
  */
  _loadTemplateError(error)
  {
    clearInterval(this._tempLoadCheckTimer);
    delete this['_tempLoadCheckTimer'];
    $a.HidePageLoader();
    $a.LogError('Design Error', 'Critical', error + '\n' + this.CleverForms.GetTemplateApi + '?templateId=' + this.CleverForms.GetTemplateGuid());
    $a.Dialog.Show({
      message: $a.Lang.ReturnPath('application.cleverfroms.designer.error_template'),
      showOk: true,
      showCancel: false,
      showInput: false,
      textAlign: 'left'
    });
  }



  /**
  * Summary. Process template and insert sections and items based on this.TemplateData
  * @this    Class scope
  * @access  private
  */
  _processTemplate (showLoader)
  {
    showLoader = showLoader === undefined ? true : showLoader;

    if (showLoader) $a.ShowPageLoader();

    var formEmpty = false;
    var totalElements = 0;

    var displayKeyConversions = [];

    if ($a.isArray(this.TemplateData) && this.TemplateData.length === 0) formEmpty = true;

    if (this._clearForm())
    {

      if (formEmpty)
      {
        this._injectDefaultSection();
        totalElements++;
      }
      else
      {
        var sectionNode, firstElement, keyData, newElementData, updateElement, previouseElement, elements, isAffinityField, requiresKeys;
    
        // reset default auto-add section label
        if (this.TemplateData.length === 1)
        {
          var sectionConfig = this.TemplateData[0];
          //console.info(sectionConfig);
          if (
            sectionConfig.hasOwnProperty('Elements')
            && $a.isArray(sectionConfig.Elements)
            && sectionConfig.Elements.length === 0
            && sectionConfig.Details.Title === 'Default'
          )
          {
            this.TemplateData[0].Details.Title = $a.Lang.ReturnPath('application.cleverfroms.designer.default_form_section_name');
          }
        }

        // build form fields
        this.TemplateData.sort(this._sortByRank);
        this.TemplateData.forEach(function (sectionConfig, sectionIndex)
        {
          sectionConfig = this.CleverForms.BackfillConfig(sectionConfig);

          sectionConfig = this.CleverForms.__THIS_IS_A_TEMP_TRANSMUTER_FOR_G_G_G_GET_DATA_UNTIL_GET_DATA_MATCHES_NEW_STRUCTURE(sectionConfig, this.TemplateData); // NO MUTATORS!!!

          if (sectionConfig.Type === 'Section')
          {
            if (this._sectionRequiresworkflowSettings(sectionConfig))
              sectionConfig.Details.SectionWorkflowVisibilitySettings = $a.jsonCloneObject(this.CleverForms.SectionWorkflowVisibilitySettings);

            // config, autoEdit, targetNode, position, referenceNode
            sectionNode = this.Add(sectionConfig, false, this.RightListNode, 'top');

            if (!this.Uploading)
            {
              sectionNode.controller.Saved = true;
              sectionNode.controller.Changed = false;
              sectionNode.controller.Changes = [];
              sectionNode.controller.ConfigStringCheck = JSON.stringify(sectionNode.controller.Config);
            }
            else
            {
              sectionNode.controller.Saved = false;
            }

            firstElement = true;
            totalElements++;

            if (
              sectionNode
              && sectionConfig.hasOwnProperty('Elements')
              && $a.isArray(sectionConfig.Elements)
              && sectionConfig.Elements.length > 0
            )
            {

              sectionConfig.Elements.sort(this._sortByRank);
              sectionConfig.Elements = sectionConfig.Elements.reverse();
              sectionConfig.Elements.forEach(function (elementConfig, elementIndex)
              {
                elementConfig = this.CleverForms.BackfillConfig(elementConfig);

                elementConfig = this.CleverForms.__THIS_IS_A_TEMP_TRANSMUTER_FOR_G_G_G_GET_DATA_UNTIL_GET_DATA_MATCHES_NEW_STRUCTURE(elementConfig, this.TemplateData); // NO MUTATORS!!!

                if (elementConfig.Type !== 'Section')
                {

                  if ($a.isPropObject(elementConfig.Details, 'ItemSource') && $a.isPropArray(elementConfig.Details.ItemSource, 'Items'))
                  {
                    if (!elementConfig.hasOwnProperty('Display')) elementConfig.Display = {};
                    elementConfig.Display.LastCustomList = elementConfig.Details.ItemSource.Items;
                  }

                  if (elementConfig.Type === 'AffinityField' && $a.isObject(elementConfig.Details.AffinityField))
                  {

                    if (
                      (this.CleverForms.IsGlobalKey(elementConfig) || this.CleverForms.IsKey(elementConfig))
                      && elementConfig.Details.AffinityField.Mode === this.CleverForms.AffnityFieldModeTypes.Display.Enum)
                    {

                      console.log(elementConfig);

                      displayKeyConversions.push({
                        Name: elementConfig.Details.Label,
                        From: this.CleverForms.AffnityFieldModeEnums[elementConfig.Details.AffinityField.Mode].Label,
                        To: this.CleverForms.AffnityFieldModeTypes.Select.Label
                      });

                      elementConfig.Details.AffinityField.Mode = this.CleverForms.AffnityFieldModeTypes.Select.Enum;
                    }

                    elementConfig.Display = $a.jsonCloneObject(this.CleverForms.ElementData[elementConfig.Details.AffinityField.CleverFormsDisplayType]);
                    if (elementConfig.Details.AffinityField.IsKeyField)
                    {
                      elementConfig.Icon.Code = $a.icons.cfAffinityField;
                      elementConfig.Icon.Name = 'cf-affinity-field';
                      elementConfig.Icon.Color = 'green';
                      if (this.CleverForms.AllowedGlobalKeys.contains(elementConfig.Details.AffinityField.FieldName))
                      {
                        elementConfig.Icon.Code = $a.icons.cfAffinityKey;
                        elementConfig.Icon.Name = 'cf-affinity-key';
                        elementConfig.Icon.Color = 'green';
                      }
                    }
                  }

                  if (firstElement)
                  {
                    // config, autoEdit, targetNode, position, referenceNode
                    previouseElement = this.Add(elementConfig, false, sectionNode.querySelector('ul'), 'top');
                    firstElement = false;
                    totalElements++;
                  }
                  else if (!firstElement)
                  {
                    elements = sectionNode.querySelectorAll('li');
                    previouseElement = elements.length > 0 ? elements[elements.length - 1] : false;
                    if (previouseElement)
                    {
                      // config, autoEdit, targetNode, position, referenceNode
                      previouseElement = this.Add(elementConfig, false, sectionNode.querySelector('ul'), 'after', previouseElement);
                      updateElement = previouseElement;
                      totalElements++;
                    }
                    else
                    {
                      // config, autoEdit, targetNode, position, referenceNode
                      previouseElement = this.Add(elementConfig, false, sectionNode.querySelector('ul'), 'top');
                      updateElement = previouseElement;
                      totalElements++;
                    }
                  }

                  if (previouseElement && previouseElement.dataset.type !== 'Section')
                  {
                    
                    if (!this.Uploading)
                    {
                      previouseElement.controller.Saved = true;
                      previouseElement.controller.Changed = false;
                      previouseElement.controller.Changes = [];
                      previouseElement.controller.ConfigStringCheck = JSON.stringify(previouseElement.controller.Config);
                    }
                    else
                    {
                      previouseElement.controller.Saved = false;
                    }

                  }

                }
              }.bind(this));
            }
          }
        }.bind(this));
      }

      if (displayKeyConversions.length > 0)
      {
        var message;
        if (displayKeyConversions.length === 1)
        {
          //message = 'The Key Field "' + displayKeyConversions[0].Name + '" had mode set to "Display".';
          //message += '<br>This is not allowed, so we changed the mode to "' + displayKeyConversions[0].To + '".' ;
          //message += '<br>All fields that require this key will default to this mode.';
          message = $a.Lang.ReturnPath('application.cleverfroms.designer.mode_conversion_message_not_allowed', { name: displayKeyConversions[0].Name, mode: displayKeyConversions[0].To });
        }
        else
        {
          var keylist = '';
          //message = 'We found some Key Fields whose modes were set to "Display"';
          //message += '<br>This is not allowed, so we changed the following:<br><br>';
          for (var i = 0; i < displayKeyConversions.length; i++)
          {
            //message += '"' + displayKeyConversions[i].Name + '" changed to "' + displayKeyConversions[i].To + '"<br>';
            keylist += "'" + displayKeyConversions[i].Name + "' changed to '" + displayKeyConversions[i].To + "'<br>";
          }
          //message += '<br>All fields that require these keys will default to this mode.';
          message = $a.Lang.ReturnPath('application.cleverfroms.designer.mode_conversion_message', { keylist: keylist });

        }
        Affinity2018.Dialog.Show({
          message: message,
          showOk: true,
          showCancel: false,
          showInput: false,
          textAlign: 'left'
        });
      }

      if (!this.Uploading) setTimeout($a.HidePageLoader, 250);
      return true;
    }
    setTimeout($a.HidePageLoader, 250);
    return false;
  }



  /**
   * Summary. Check if section config requires global SectionWorkflowVisibilitySettings
   * @this    Class scope
   * @access  private
   */
  _sectionRequiresworkflowSettings (config)
  {
    if (!$a.isPropObject(config, 'Details')) return false;
    if (!$a.isPropArray(config.Details, 'SectionWorkflowVisibilitySettings')) return true;
    if (config.Details.SectionWorkflowVisibilitySettings.length === 0) return true;
    var w = 0, workflow, s, state;
    for (; w < config.Details.SectionWorkflowVisibilitySettings.length; w++)
    {
      workflow = config.Details.SectionWorkflowVisibilitySettings[w];
      if (workflow.WorkflowDefinitionId !== null) return false;
      if (workflow.WorkflowDefinitionName !== null) return false;
      for (s = 0; s < workflow.WorkflowStateSettings.length; s++)
      {
        state = workflow.WorkflowStateSettings[s];
        if (state.WorkflowStateName !== null) return false;
      }
    }
    return true;
  }



  /**
  * Summary. Auto inject a default section if required.
  * @this    Class scope
  * @access  private
  */
  _injectDefaultSection ()
  {
    var sectionConfig = $a.jsonCloneObject(this.CleverForms.ElementData.Section);

    //sectionConfig.Details.Label = 'Default Section';
    sectionConfig.Details.Label = $a.Lang.ReturnPath('application.cleverfroms.designer.default_form_section_name');
    sectionConfig.Details.Title = $a.Lang.ReturnPath('application.cleverfroms.designer.default_form_section_name');

    //console.info("Lang Check:");
    //console.info("Method: '_injectDefaultSection'");
    //console.info("Set confgi label to value of lang path 'app.cf.designer.default_form_section_name'.");
    //console.info($a.Lang.ReturnPath('application.cleverfroms.designer.default_form_section_name'));
    //console.info(sectionConfig);
    //console.info('');

    // config, autoEdit, targetNode, position, referenceNode
    this.Add(sectionConfig, false, this.RightListNode, 'top');
  }



  /**
  * Summary. Inject "ModelName" message into Section Description.
  * @this    Class scope
  * @access  private
  */
  _setSectionModelNameLabels ()
  {
    this.RightListNode.querySelectorAll('li[data-type="Section"]').forEach(function (sectionNode)
    {
      var node = null;
      var message = '';
      var sectionMessageNode = sectionNode ? sectionNode.querySelector('p.section-message em') : null;
      if (sectionMessageNode != null)
      {
        if (sectionNode.querySelector('li[data-type="AffinityField"]'))
        {
          if (sectionNode.querySelector('li[data-type="AffinityField"]:not(.is-key-field)')) // have a NON key Affinity Field
          {
            node = sectionNode.querySelector('li[data-type="AffinityField"]:not(.is-key-field)');
          }
          else if (sectionNode.querySelector('li[data-type="AffinityField"].is-key-field:not(.is-global-key)')) // no NON key Affinity Field but have a NON Global key
          {
            node = sectionNode.querySelector('li[data-type="AffinityField"].is-key-field:not(.is-global-key)');
          }
          else if (sectionNode.querySelector('li[data-type="AffinityField"].is-global-key')) // no NON key Affinity Field or global key, but have a standard key
          {
            node = sectionNode.querySelector('li[data-type="AffinityField"].is-global-key');
          }
          if (node && node.hasOwnProperty('controller'))
          {
            //message = '<br />This section is using Model <strong>"' + node.controller.Config.Details.AffinityField.ModelName + '"</strong>.';
            message = '<br />' + $a.Lang.ReturnPath('application.cleverfroms.designer.section_mode_message', { model: node.controller.Config.Details.AffinityField.ModelName });
          }
        }
        sectionMessageNode.innerHTML = message;
      }
    }.bind(this));
  }



  /**
   * Summary. Set any Affinty Field Mode label to the Element Label
   * @this    Class scope
   * @access  private
   */
  _setElementModeLabel (node)
  {
    if (node && $a.isNode(node) && node.controller && node.controller.Config.Type === 'AffinityField')
    {
      // Once we have mode switching, we could do this for all Affinty Fields.
      if (node.controller.Config.Details.AffinityField.IsKeyField)
      {
        node.querySelector('.label').innerHTML = node.controller.Config.Details.Label + ' <em>(' + node.controller.GetModeName() + ')</em>';
      }
      else
      {
        // if there are more than one of any affity field of the same model, set mode labels ...
        var query = 'li[data-field="{0}"][data-model="{1}"]',
          field = node.controller.Config.Details.AffinityField.FieldName,
          model = node.controller.Config.Details.AffinityField.ModelName,
          name = node.controller.Name,
          matches = this.RightListNode.querySelectorAll(query.format(field, model, name)),
          maxBeforeSetLabel = 0; // 1

        if (matches.length > maxBeforeSetLabel)
        {
          matches.forEach(function (matchNode)
          {
            matchNode.querySelector('.label').innerHTML = matchNode.controller.Config.Details.Label + ' <em>(' + matchNode.controller.GetModeName() + ')</em>';
          });
        }

      }
    }
  }



  /**/



  /**
   * Summary. Once item has been droopped, setup node
   * @this    Class scope
   * @access  private
   */
  _updateDroppedElement (node, config, edit)
  {
    edit = $a.isBool(edit) ? edit : true;

    if (node.hasOwnProperty('controller'))
    {
      node.controller.SetSection();
      this._attemptSetElementAsKey(node);
      this._setElementModeLabel(node);
      this._setSectionModelNameLabels();
    }
    else
    {
      var delNode = node.querySelector('.del'), editNode = node.querySelector('.edit');
      node.removeAttribute('data-ttid');
      node.classList.remove('tt');
      node.dataset.type = config ? config.Type : node.dataset.type;
      delNode.addEventListener('click', this._removeElementClicked);
      editNode.addEventListener('click', this._editElementClicked);
      if (config === false || config === undefined || !$a.isObject(config)) config = $a.jsonCloneObject(this.CleverForms.ElementData[node.dataset.type]);
      if (config && Affinity2018.Classes.Apps.CleverForms.Elements.hasOwnProperty(config.Type))
      {
        if (config.Type === 'Section' && this._sectionRequiresworkflowSettings(config))
        {
          config.Details.SectionWorkflowVisibilitySettings = $a.jsonCloneObject(this.CleverForms.SectionWorkflowVisibilitySettings);
        }

        node.controller = new Affinity2018.Classes.Apps.CleverForms.Elements[config.Type](config);
        node.classList.add('item-' + node.controller.UniqueName);
        node.dataset.name = node.controller.Name;
        if (
          node.querySelector('.label')
          && config.hasOwnProperty('Details')
          && (
            config.Details.Label !== null
            && (
              $a.isString(config.Details.Label)
              && config.Details.Label.trim() !== ''
            )
          )
        )
        {
          node.querySelector('.label').innerHTML = config.Details.Label;
        }
        else
        {
          node.querySelector('.label').innerHTML = config.Label;
        }

        /**/

        node.controller.SetSection();
        this._attemptSetElementAsKey(node);
        this._setElementModeLabel(node);
        this._setSectionModelNameLabels();
      }
      else
      {
        $a.LogError('Element Error', 'critical', 'Failed to get Element Class for "' + config.Type + '".');
      }
    }

    /**/

    if (node && config && config.Type === 'AffinityField')
    {
      /// NO MUTATORS!!!
      if (!config.Details.AffinityField.ModelName && config.Details.AffinityField.TableName) config.Details.AffinityField.ModelName = config.Details.AffinityField.TableName;
      // END NO MUTATORS!!!

      if (config.Details.AffinityField.ModelName) node.dataset.model = config.Details.AffinityField.ModelName;
      if (config.Details.AffinityField.FieldName) node.dataset.field = config.Details.AffinityField.FieldName;
      if (config.Details.AffinityField.Mode !== null) node.dataset.mode = config.Details.AffinityField.Mode;
    }

    if (edit)
    {
      this._editElement(node, config);
    }
    else
    {
      this._checkSave(true);
    }

    this.LockAffinityNonMasterFileSection(node);

    return node;
  }



  /**
   * Summary. Set item node as Affinity Field key based on node config
   * @this    Class scope
   * @access  private
   */
  _attemptSetElementAsKey (node, isDragger)
  {
    var controller = node.controller, config = controller.Config;
    if (config.Type === 'AffinityField' && config.Details.AffinityField.FieldName !== null)
    {
      if (config.Details.AffinityField.IsKeyField)
      {
        var iconColor = node.controller.Config.Icon.Color,  // this is not accurate ... TODO: Check with Yuri
          icon = node.controller.Config.Icon.Name;          // this is not accurate ... TODO: Check with Yuri

        //iconColor = 'grey';
        iconColor = 'green';
        icon = 'cf-affinity-key';

        if (isDragger) iconColor = 'green';

        node.classList.add('is-key-field');
        if (this.CleverForms.AllowedGlobalKeys.contains(config.Details.AffinityField.FieldName))
        {
          node.classList.add('is-global-key');
          iconColor = 'yellow';
        }
        node.querySelector('.main-icon').className = 'main-icon ' + iconColor + ' icon-' + icon;
      }
    }
    if (this.CleverForms.PseudoGlobalElementTypes.contains(config.Type))
    {
      node.querySelector('.main-icon').className = 'main-icon ' + node.controller.Config.Icon.Color + ' icon-' + node.controller.Config.Icon.Name;
      node.classList.add('is-pseudo-global-key');
    }
    this._setElementModeLabel(node);
    return node;
  }



  /**
   * Summary. Open Edit popup for this node
   * @this    Class scope
   * @access  private
   *
   */
  _editElement (node, data)
  {
    if (node)
    {
      clearTimeout(this.dragScrollTimer);
      if (data && node && node.hasOwnProperty('controller'))
      {
        var controller = node.controller;

        this.Editor.Set(Affinity2018.jsonCloneObject(data), node);
        this.Editor.Show();

        if (data.Type === 'AffinityField' && !controller.Saved) this.Editor.JumpSearch();
        else this.Editor.JumpSettings();

        return;
      }
    }
    Affinity2018.Dialog.Show({
      //message: 'Oops! We could not find the data for this element.<br />Please remove it and add it again.',
      message: $a.Lang.ReturnPath('application.cleverfroms.designer.error_element_data'),
      showOk: true,
      showCancel: false,
      showInput: false
    });
  }



  /**
   * Summary. OK button in editor clicked
   * @this    Class scope
   * @access  private
   *
   */
  _editUpdated (config, node)
  {
    if (!$a.isNode(node) && config.hasOwnProperty('UniqueName'))
    {
      node = this.RightListNode.querySelector('.item-' + config.UniqueName);
    }

    if (node && node.hasOwnProperty('controller'))
    {
      if (node.controller.Changed)
      {

        node.querySelector('.buttons .edit').classList.add('disabled');
        node.querySelector('.buttons .edit').classList.add('disabled');

        if (node.controller.Changed)
        {
          this.LastModifiedTime = Date.now();
          this._checkSave();
        }

        node.querySelector('.buttons .edit').classList.remove('disabled');
        node.querySelector('.buttons .edit').classList.remove('disabled');

      }

    }

    if (this.CleverForms.PseudoGlobalElementTypes.contains(config.Type))
    {
      if (this.LeftListNode.querySelector('li[data-type="' + config.Type + '"]'))
      {
        this.LeftListNode.querySelector('li[data-type="' + config.Type + '"]').classList.add('disabled');
      }
    }

    this._attemptSetElementAsKey(node, true);
    this._setSectionModelNameLabels();
    this.LockAffinityNonMasterFileSection(node);

    this._checkSave();

  }



  /**
   * Summary. Cancel button in Editor clicked
   * @this    Class scope
   * @access  private
   *
   */
  _editCanceled (config, node)
  {
    if (!$a.isNode(node) && $a.isObject(config) && config.hasOwnProperty('UniqueName'))
    {
      node = this.RightListNode.querySelector('.item-' + config.UniqueName);
    }

    if (node && node.hasOwnProperty('controller') && !node.controller.Saved)
    {
      this._removeElement(node);
    }
  }



  /**
   * Summary. Edit button on item clicked
   * @this    Class scope
   * @access  private
   *
   */
  _editElementClicked (ev)
  {
    var node = ev.target.closest('.cf-designer-element');
    if (node)
    {
      this._editElement(node, this._getElementDataFromNode(node));
    }
  }



  /**
   * Summary. Del button on item clicked
   * @this    Class scope
   * @access  private
   *
   */
  _removeElementClicked (ev)
  {
    var node = $a.getEventNode(ev, 'cf-designer-element'); // ev.target.classList.contains('cf-designer-element') ? ev.target : ev.target.closest('.cf-designer-element');
    var config = node.controller.Config;
    var message;
    var dependantNodes = [];
    var dependantNames = [];
    var globalBlocker = false;
    if (node)
    {

      // if empty section, just get rid of it.
      if (node.dataset.type === 'Section' && !node.querySelector('ul li'))
      {
        //this._removeElement(node);
        this._setElementForDelete(node);
        return;
      }

      var globalKey = this.RightListNode.querySelector('.is-global-key');
      if (node.dataset.type === 'Section' && globalKey && globalKey.parentNode === node.querySelector('ul')) // global key is in me!
      {
        //var dependants = this._getDependantFields(globalKey.controller.Config);
        Affinity2018.Dialog.Show({
          //message: 'You can not remove a section with the global field "' + globalKey.controller.Config.Details.Label.replace(' ', '&nbsp;') + '" in it. You will have to remove it first, or move it to another section.',
          message: $a.Lang.ReturnPath('application.cleverfroms.designer.error_section_remove_with_global', { label: globalKey.controller.Config.Details.Label.replace(' ', '&nbsp;') }), 
          showOk: true,
          showCancel: false,
          showInput: false,
          textAlign: 'left'
        });
        return;
      }

      message = '';
      //message += 'Are you sure you want to remove this ' + (node.dataset.type === 'Section' ? 'section' : 'field') + '?';
      message += $a.Lang.ReturnPath('application.cleverfroms.designer.confirm_section_delete', { type: node.dataset.type === 'Section' ? 'section' : 'field' });

      if (node.dataset.type === 'Section')
      {

        if (node.querySelector('.is-global-key'))
        {
          if (node.querySelectorAll('li[data-type="AffinityField"]:not(.is-global-key)').length > 0)
          {
            globalBlocker = true;
          }
          else
          {
            this.RightListNode.querySelectorAll('li[data-type="Section"]').forEach(function (sNode)
            {
              if (sNode !== node && sNode.querySelectorAll('li[data-type="AffinityField"]').length > 0)
              {
                globalBlocker = true;
              }
            });
          }
        }
        if (globalBlocker === true)
        {
          var blockerConfig = node.querySelector('.is-global-key').controller.Config;
          Affinity2018.Dialog.Show({
            //message: 'You can not remove a section with the global field "' + blockerConfig.Display.Label.replace(' ', '&nbsp;') + '" in it. You will have to remove it first, or move it to another section.',
            message: $a.Lang.ReturnPath('application.cleverfroms.designer.error_section_remove_with_global', { label: globalKey.controller.Config.Details.Label.replace(' ', '&nbsp;') }), 
            showOk: true,
            showCancel: false,
            showInput: false,
            textAlign: 'left'
          });
          return;
        }
        else
        {
          if (node.querySelectorAll('.cf-designer-element').length > 0)
          {
            //message += '<p><span class="blue"><strong>Reminder!</strong> This will remove all fields in this section.<br />This can not be undone.</span></p>';
            message += $a.Lang.ReturnPath('application.cleverfroms.designer.confirm_remove_reminder');
          }
        }

      }
      else // NOT a Section
      {

        if (node.dataset.type === 'AffinityField' && (node.classList.contains('is-global-key') || node.classList.contains('is-key-field')))
        {
          var dependants = null;
          if (node.classList.contains('is-key-field')) dependants = this._getDependantFields(node.controller.Config);
          if (node.classList.contains('is-global-key')) dependants = this._getDependantFields(globalKey.controller.Config);
          if (dependants != null)
          {
            dependantNodes = dependants.nodes;
            if (dependants.nodes.length > 0)
            {
              //message = '';
              //message += '<p><span class="red"><strong>Warning!</strong> This is a required field!</span></p>';
              //message += '<p>' + ownersStr + ' need' + plural + ' this field to be used in a form.</p>';
              //message += '<p>Removing this required field will also remove ' + ownersStr + '.</p>';
              //message += '<p>Are you sure you want to remove this required field?</p>';
              message = $a.Lang.ReturnPath('app.cf.designer.confirm_element_remove_with_key', {
                keyField: node.controller.Config.Details.Label,
                fields: dependants.list,
                plural: dependants.plural,
                listPlural: dependants.listPlural
              });
            }
          }
          
        }
      }

      this._disableAllDeleteButtons();

      Affinity2018.Dialog.Show({
        message: message,
        showOk: true,
        showCancel: true,
        showInput: false,
        textAlign: 'left',
        buttons: {
          cancel: { show: true, icon: 'cross', text: $a.Lang.ReturnPath('generic.buttons.cancel') },
          ok: { show: true, icon: 'tick', text: $a.Lang.ReturnPath('generic.buttons.remove') }
        },
        onOk: function ()
        {
          var removed = false;
          if (dependantNodes.length > 0)
          {
            for (var n = 0; n < dependantNodes.length; n++)
            {
              //removed = dependantNodes[n].controller.RemoveDesignerElement(this._removeElement);
              this._setElementForDelete(dependantNodes[n]);
            }
          }
          //removed = node.controller.RemoveDesignerElement(this._removeElement);
          this._setElementForDelete(node);
          this._setSectionModelNameLabels();
        }.bind(this),
        onCancel: this._clearRemove,
        onClose: this._clearRemove
      });
    }
  }



  /**
   * Summary. Return a list string of dependant fields
   * @this    Class scope
   * @access  private
   *
   */
  _getDependantFields(keyConfig)
  {
    var allNodes = this.RightListNode.querySelectorAll('li[data-type="AffinityField"]:not(.is-global-key)'),
        dependantNodes = [],
        dependantNames = [],
        plural = '',
        listPlural = 's',
        ownersStr = '',
        allNodeConfig, a, dependants;
    allNodes.forEach(function (allNode)
    {
      allNodeConfig = allNode.controller.Config;
      if ($a.type(allNodeConfig.Details.AffinityField.KeyFields) === 'array' && allNodeConfig.Details.AffinityField.KeyFields.length > 0)
      {
        for (a = 0; a < allNodeConfig.Details.AffinityField.KeyFields.length; a++)
        {
          if (allNodeConfig.Details.AffinityField.KeyFields[a].FieldName === keyConfig.Details.AffinityField.FieldName)
          {
            dependantNodes.push(allNode);
            dependantNames.push(allNode.controller.Config.Details.Label);
          }
        }
      }
    }.bind(this));

    if (dependantNames.length > 0)
    {
      ownersStr = "'<strong>" + dependantNames.join("</strong>'", "'<strong>") + "</strong>'";
      if (dependantNames.length > 1)
      {
        plural = 's';
        listPlural = '';
        var lastDependant = dependantNames.pop();
        ownersStr = "'<strong>" + dependantNames.join("</strong>', '<strong>") + "</strong>', and '<strong>" + lastDependant + "</strong>'";
      }
    }

    return {
      nodes: dependantNodes,
      list: ownersStr,
      plural: plural,
      listPlural: listPlural
    };
  }



  /**
   * Summary. Reset eleemnts after remove is canceled
   * @this    Class scope
   * @access  private
   *
   */
  _clearRemove ()
  {
    this._enableAllDeleteButtons();
  }



  /**
   * Summary. Physically remove item node from DOM
   * @this    Class scope
   * @access  private
   *
   */
  _removeElement (node)
  {
    if (node)
    {
      var config = node.hasOwnProperty('controller') ? $a.jsonCloneObject(node.controller.Config) : false;
      var sectionNode = this.GetElementSectionNode(node);
      if (node.querySelector('ul'))
      {
        var n = 0, removed = false, nodes = node.querySelectorAll('ul li');
        for (; n < nodes.length; n++)
        {
          if (nodes[n].hasOwnProperty('controller')) removed = nodes[n].controller.RemoveDesignerElement(this._removeElement);
        }
      }
      node.querySelector('.del').removeEventListener('click', this._removeElementClicked);
      node.querySelector('.edit').removeEventListener('click', this._editElementClicked);
      node.innerHTML = '';
      node.parentElement.removeChild(node);

      if (this.CleverForms.PseudoGlobalElementTypes.contains(config.Type))
      {
        if (this.LeftListNode.querySelector('li[data-type="' + config.Type + '"]'))
        {
          this.LeftListNode.querySelector('li[data-type="' + config.Type + '"]').classList.remove('disabled');
        }
      }

      node = null;

      this._setSectionModelNameLabels();
      if (sectionNode) this.LockAffinityNonMasterFileSection(sectionNode);
    }

    this._enableAllDeleteButtons();
  }



  /**
   * Summary. Mark item for deletion on next save pass
   * @this    Class scope
   * @access  private
   *
   */
  _setElementForDelete (node)
  {
    if (node && node.controller)
    {
      if (node.controller.Saved)
      {
        node.controller.Delete = true;
        node.controller.Changed = true;
        node.controller.Hide();
        this._checkSave();
      }
      else
      {
        this._removeElement(node);
      }
    }
  }



  /**
   * Summary. Disabled all item Del buttons
   * @this    Class scope
   * @access  private
   *
   */
  _disableAllDeleteButtons ()
  {
    this.RightListNode.querySelectorAll('li .buttons .del').forEach(function (deleteNode)
    {
      deleteNode.classList.add('disabled');
    });
  }



  /**
   * Summary. Enable all item Del buttons
   * @this    Class scope
   * @access  private
   *
   */
  _enableAllDeleteButtons ()
  {
    this.RightListNode.querySelectorAll('li .buttons .del').forEach(function (deleteNode)
    {
      deleteNode.classList.remove('disabled');
    });
  }



  /**
   * Summary. Disabled all item Del buttons
   * @this    Class scope
   * @access  private
   *
   */
  _disableAllButtons ()
  {
    this.RightListNode.querySelectorAll('li .buttons .del, li .buttons .edit').forEach(function (node)
    {
      node.classList.add('disabled');
    });
    this.TopNode.querySelectorAll('.button').forEach(function (node)
    {
      node.classList.add('disabled');
    });
  }



  /**
   * Summary. Enable all item Del buttons
   * @this    Class scope
   * @access  private
   *
   */
  _enableAllButtons ()
  {
    this.RightListNode.querySelectorAll('li .buttons .del,li .buttons .edit').forEach(function (node)
    {
      node.classList.remove('disabled');
    });
    this.TopNode.querySelectorAll('.button').forEach(function (node)
    {
      node.classList.remove('disabled');
    });
  }



  /**/



  /**
   * Summary. Update form top details (form name, description, version, etc)
   * @this    Class scope
   * @access  private
   */
  _updateFormDetails (ev)
  {
    this.FormDetailsProgress = 'progress';
    var countryNode = this.TopNode.querySelector('select.form-country');
    var formCountry = this.CleverForms.GetCountryCodeVariant(countryNode.value);
    if (formCountry === undefined || formCountry === null || formCountry === 'null' || formCountry === 'NULL' || formCountry === '') formCountry = null;

    if (this._hasCountrySensativeFields())
    {
      if ($a.isNullOrEmpty(countryNode.value))
      {
        countryNode.value = Affinity2018.Apps.CleverForms.Default.TemplateModel.FormCountry;
      }
      this.FormDetailsProgress = 'none';
      window.dispatchEvent(new Event('FormDetailsDone'));
      return;
    }

    var postData = $a.jsonCloneObject(this.CleverForms.TemplateModel);
    postData.Description = this.TopNode.querySelector('input.form-name').value.trim();
    postData.UserInstructions = this.TopNode.querySelector('input.form-instructions').value.trim();
    postData.Revision = this.TopNode.querySelector('input.form-revision').value.trim();
    if (formCountry == null)
    {
      delete postData.FormCountry;
    }
    else
    {
      postData.FormCountry = formCountry;
    }
    if (this.TopNode.querySelector('input[type="checkbox"]'))
    {
      postData.DashboardTemplate = this.TopNode.querySelector('input[type="checkbox"]').checked;
    }
    postData.WorkflowDefinitionIds = [];
    if (
      this.CleverForms.hasOwnProperty('TemplateModel')
      && $a.isObject(this.CleverForms.TemplateModel)
    )
    {
      if ($a.isPropString(this.CleverForms.TemplateModel, 'WorkflowDefinitionIds'))
      {
        postData.WorkflowDefinitionIds = this.CleverForms.TemplateModel.WorkflowDefinitionIds.split(',');
      }
      else if ($a.isPropArray(this.CleverForms.TemplateModel, 'WorkflowDefinitionIds'))
      {
        postData.WorkflowDefinitionIds = this.CleverForms.TemplateModel.WorkflowDefinitionIds;
      }
      postData.WorkflowDefinitionIds = postData.WorkflowDefinitionIds.removeEmpty();
      postData.WorkflowDefinitionIds = postData.WorkflowDefinitionIds.removeDuplicates();
    }
    //if (postData.WorkflowDefinitionIds.length === 0)
    //{
    //  console.warn('Form Details save failed. Could not get WorkflowDefinitionIds.');
    //  return;
    //}
    if (JSON.stringify(postData) !== JSON.stringify(this.lastUpdateFormDetails))
    {
      this.updatingFromDetails = true;
      this.DesignerSavingNode.classList.add('show');
      this.CleverForms.TemplateModel = postData;
      axios({
        method: 'post',
        url: this.CleverForms.FormDetailsApi,
        data: {
          model: this.CleverForms.TemplateModel
        }
      })
        .then(function (response)
        {
          this.lastUpdateFormDetails = postData;
          this.DesignerSavingNode.classList.remove('show');
          this.FormDetailsProgress = 'done';
          window.dispatchEvent(new Event('FormDetailsDone'));
        }.bind(this))
        .catch(function (error)
        {
          this.DesignerSavingNode.classList.remove('show');
          this.FormDetailsProgress = 'error';
          window.dispatchEvent(new Event('FormDetailsDone'));
        }.bind(this));
    }
    else
    {
      this.FormDetailsProgress = 'none';
      window.dispatchEvent(new Event('FormDetailsDone'));
    }
  }



  /**
   * Summary. Update form top details (form name, description, version, etc)
   * @this    Class scope
   * @access  private
   */
  _hasCountrySensativeFields(formCountry)
  {
    //if (!this.HasMultipleCountries) return false;
    let formCountryNode = this.TopNode.querySelector('select.form-country');
    let countries = Affinity2018.Apps.CleverForms.Default.TemplateModel.SupportedCountries; // get supported countries
    var elementNodes = this.RightListNode.querySelectorAll('li.cf-designer-element[data-type="AffinityField"]');
    var checkFeilds = this.CleverForms.CountrySensativeFieldNames;
    var hasSensativeFields = false;
    if (formCountry === undefined)
    {
      formCountry = this.CleverForms.GetCountryCodeVariant(this.TopNode.querySelector('select.form-country').value);
      if (formCountry === undefined || formCountry === null || formCountry === 'null' || formCountry === 'NULL' || formCountry === '') formCountry = null;
    }
    if (formCountry === null)
    {
      elementNodes.forEach(function (elementNode)
      {
        if (elementNode.hasOwnProperty('controller'))
        {
          var elementConfig = elementNode.controller.Config;
          if (
            elementConfig.Details.hasOwnProperty('AffinityField')
            && checkFeilds.contains(elementConfig.Details.AffinityField.FieldName)
          )
          {
            hasSensativeFields = true;
          }
        }
      }.bind(this));
      if (hasSensativeFields)
      {
        if ($a.isNullOrEmpty(formCountryNode.value)) // form contry selector is N/A
        {
          if (countries.length == 1) // is only on, is is NOT multi country
          {
            formCountryNode.value = countries[0]; // set to default ..
            this._updateFormDetails(); // and save :P
            return false; // then return, NO! We do NOT have illegal country sensative fields in a N/A template :P
          }
        }
        let fieldSpecific = false;
        if (this.ElementDropped !== null)
        {
          fieldSpecific = true;
          if (this.ElementDropped.parentNode)
          {
            this.ElementDropped.parentNode.removeChild(this.ElementDropped);
            // TODO:" Do we need to remove keys too?
          }
        }
        let lang = $a.Lang.ReturnPath('application.cleverfroms.designer.' + (fieldSpecific ? 'element-requires-form-country' : 'has-country-sensative-fields'));
        Affinity2018.Dialog.Show({
          message: lang,
          showOk: true,
          showCancel: false,
          showInput: false,
          canBackgroundClose: false,
          textAlign: 'left'
        });
        return true;
      }
    }
    this._checkResetFormCountry();
    return false;
  }



  /**
   * Summary. Check if we should reset Form Country to N/A
   * @this    Class scope
   * @access  private
   */
  _checkResetFormCountry(formCountry)
  {
    let countries = Affinity2018.Apps.CleverForms.Default.TemplateModel.SupportedCountries; // get supported countries
    if (countries.length === 1)
    {
      let formCountryNode = this.TopNode.querySelector('select.form-country');
      var elementNodes = this.RightListNode.querySelectorAll('li.cf-designer-element[data-type="AffinityField"]');
      var checkFeilds = this.CleverForms.CountrySensativeFieldNames;
      var hasSensativeFields = false;
      if (!$a.isNullOrEmpty(formCountryNode.value))
      {
        elementNodes.forEach(function (elementNode)
        {
          if (elementNode.hasOwnProperty('controller'))
          {
            var elementConfig = elementNode.controller.Config;
            if (
              elementConfig.Details.hasOwnProperty('AffinityField')
              && checkFeilds.contains(elementConfig.Details.AffinityField.FieldName)
            )
            {
              hasSensativeFields = true;
              return;
            }
          }
        }.bind(this));
        if (!hasSensativeFields)
        {
          formCountryNode.value = '';
          this._updateFormDetails();
        }
      }
    }
  }



  /***************************************************************************************************************************************************/
  /***************************************************************************************************************************************************/
  /***                                                                                                                              ******************/
  /***   ██      ███████ ███████ ████████      █████  ██    ██ ████████  ██████  ███████  ██████ ██████   ██████  ██      ██        ******************/
  /***   ██      ██      ██         ██        ██   ██ ██    ██    ██    ██    ██ ██      ██      ██   ██ ██    ██ ██      ██        ******************/
  /***   ██      █████   █████      ██        ███████ ██    ██    ██    ██    ██ ███████ ██      ██████  ██    ██ ██      ██        ******************/
  /***   ██      ██      ██         ██        ██   ██ ██    ██    ██    ██    ██      ██ ██      ██   ██ ██    ██ ██      ██        ******************/
  /***   ███████ ███████ ██         ██        ██   ██  ██████     ██     ██████  ███████  ██████ ██   ██  ██████  ███████ ███████   ******************/
  /***                                                                                                                              ******************/
  /***************************************************************************************************************************************************/
  /****************************************************************************************************************** Source63 *** left autoscroll ***/



  /**
  * Summary. Setup scroll events for LeftList auto scroll
  * @this    Class scope
  * @access  private
  */
  _setupLeftListPositionOnScroll ()
  {
    if (!this.EnableLeftAutoScroll) return;

    this.ld = {
      top: $a.getPosition(this.LeftListNode).top,
      viewHeight: 0,
      lastScroll: 0,
      currentScroll: 0,
      locked: false
    };

    ['_windowScroll'].bindEach(this);
    window.addEventListener('scroll', this._windowScroll, Affinity2018.PassiveEventProp);
  }



  /**
  * Summary. On window scroll (passive) calculate, position and scroll LeftList
  * @this    Class scope
  * @access  private
  */
  _windowScroll (ev)
  {
    if (!this.EnableLeftAutoScroll) return;

    //console.groupEnd();
    //console.clear();
    //console.log('left list height     : ', $a.getSize(this.LeftListNode).height);
    //console.log('right list height    : ', $a.getSize(this.RightListNode).height);
    //console.log('page hight           : ', $a.getWindowSize().height);
    //console.log('current scroll       : ', window.pageYOffset || document.documentElement.scrollTop);
    //console.log('left > right (stop)  : ', $a.getSize(this.LeftListNode).height >= $a.getSize(this.RightListNode).height);

    if ($a.getSize(this.LeftListNode).height >= $a.getSize(this.RightListNode).height)
    {
      if ('scrollTo' in this.LeftListNode) this.LeftListNode.scrollTo(0, 0);
      else this.LeftListNode.scrollTop = 0;
      this.LeftListNode.style.position = null;
      this.LeftListNode.style.bottom = null;
      this.LeftListNode.style.height = null;
      this.LeftListNode.style.overflow = null;
      this.ld.locked = false;
      return;
    }

    this.ld.currentScroll = window.pageYOffset || document.documentElement.scrollTop;
    this.ld.viewHeight = $a.getWindowSize().height;

    if (this.ld.currentScroll > this.ld.lastScroll) this.ld.scrollDirection = 'down';
    else this.ld.scrollDirection = 'up';

    var dashFooterOffset = 0;
    if (document.body.classList.contains('dashboard') && document.querySelector('#dashFooter'))
    {
      var dashFooterNode = document.querySelector('#dashFooter');
      var dashFooterHeight = $a.getSize(dashFooterNode).height;
      var totalHeight = $a.getPageSize().height;
      var maxScroll = totalHeight - this.ld.viewHeight;
      if (this.ld.currentScroll > (maxScroll - dashFooterHeight - 10))
      {
        dashFooterOffset = this.ld.currentScroll - (maxScroll - dashFooterHeight - 10);
      }
    }

    if (this.ld.scrollDirection === 'down')
    {
      if (!this.ld.locked && this.ld.currentScroll >= this.ld.top - 15)
      {
        this.LeftListNode.style.position = 'fixed';
        this.LeftListNode.style.bottom = (15 + dashFooterOffset) +  'px';
        this.LeftListNode.style.height = (this.ld.viewHeight - 40) + 'px';
        this.LeftListNode.style.overflow = 'hidden';
        this.ld.locked = true;
      }
      if (this.ld.locked)
      {
        var scroll = this.LeftListNode.scrollTop;
        if ('scrollTo' in this.LeftListNode) this.LeftListNode.scrollTo(0, scroll + (this.ld.currentScroll - this.ld.lastScroll));
        this.LeftListNode.scrollTop = scroll + (this.ld.currentScroll - this.ld.lastScroll);
        this.LeftListNode.style.bottom = (15 + dashFooterOffset) +  'px';
      }
    }
    if (this.ld.scrollDirection === 'up')
    {
      if (this.ld.locked)
      {
        var scroll = this.LeftListNode.scrollTop;
        if (dashFooterOffset === 0)
        {
          if ('scrollTo' in this.LeftListNode) this.LeftListNode.scrollTo(0, scroll - (this.ld.lastScroll - this.ld.currentScroll));
          this.LeftListNode.scrollTop = scroll - (this.ld.lastScroll - this.ld.currentScroll);
        }
        this.LeftListNode.style.bottom = (15 + dashFooterOffset) + 'px';
      }
      if (this.ld.locked && this.ld.currentScroll <= this.ld.top - 15)
      {
        if ('scrollTo' in this.LeftListNode) this.LeftListNode.scrollTo(0, 0);
        else this.LeftListNode.scrollTop = 0;
        this.LeftListNode.style.position = null;
        this.LeftListNode.style.bottom = null;
        this.LeftListNode.style.height = null;
        this.LeftListNode.style.overflow = null;
        this.ld.locked = false;
      }
    }
    this.ld.lastScroll = this.ld.currentScroll <= 0 ? 0 : this.ld.currentScroll;
  }



  /***************************************************************************************************************************************************/
  /***************************************************************************************************************************************************/
  /***                                                                                                        ****************************************/
  /***   ███████ ██      ███████ ███    ███ ███████ ███    ██ ████████     ██████   █████  ████████  █████    ****************************************/
  /***   ██      ██      ██      ████  ████ ██      ████   ██    ██        ██   ██ ██   ██    ██    ██   ██   ****************************************/
  /***   █████   ██      █████   ██ ████ ██ █████   ██ ██  ██    ██        ██   ██ ███████    ██    ███████   ****************************************/
  /***   ██      ██      ██      ██  ██  ██ ██      ██  ██ ██    ██        ██   ██ ██   ██    ██    ██   ██   ****************************************/
  /***   ███████ ███████ ███████ ██      ██ ███████ ██   ████    ██        ██████  ██   ██    ██    ██   ██   ****************************************/
  /***                                                                                                        ****************************************/
  /***************************************************************************************************************************************************/
  /********************************************************************************************************************* Source63 *** element data ***/



  /**
  * Summary. Determnine if an item node ecxists for passed config
  * @this    Class scope
  * @access  private
  */
  _elementExists (config)
  {
    if (this.RightListNode.querySelector('.item-' + config.UniqueName))
    {
      return true;
    }
    return false;
  }



  /**
  * Summary. Return item node from config name
  * @this    Class scope
  * @access  private
  */
  _getElementDataFromName (name)
  {
    if (this.RightListNode.querySelector('.item-' + name))
    {
      return this.RightListNode.querySelector('.item-' + name).controller.Config;
    }
    return false;
  }



  /**
  * Summary. Return config from item node
  * @this    Class scope
  * @access  private
  */
  _getElementDataFromNode (node)
  {
    if (node.hasOwnProperty('controller'))
    {
      return node.controller.Config;
    }
    return false;
  }



  /**/



  /**
   * Summary. Preview button clicked
   * @this    Class scope
   * @access  private
   */
  _loadPreview ()
  {
    // As discussed, open in new window so users can compare elements in designer with preview of those elements
    var templateId = this.CleverForms.GetTemplateGuid(), path, redirectWindow;
    if (templateId)
    {
      path = this.CleverForms.PreviewPath + '/' + templateId;
      if (window.location.hash) path += window.location.hash
      if (this.OpenPreviewInNewWindow)
      {
        redirectWindow = window.open(path, 'Designer'); // 'Designer' in place of '_blank' .. allows new page to access referrer and window title
        redirectWindow.location;
      }
      else
      {
        window.location = path;
      }
    }
  }



  /***************************************************************************************************************************************************/
  /***************************************************************************************************************************************************/
  /***                                                                                                         ***************************************/
  /***   ██████  ██████   █████   ██████       █████  ███    ██ ██████      ██████  ██████   ██████  ██████    ***************************************/
  /***   ██   ██ ██   ██ ██   ██ ██           ██   ██ ████   ██ ██   ██     ██   ██ ██   ██ ██    ██ ██   ██   ***************************************/
  /***   ██   ██ ██████  ███████ ██   ███     ███████ ██ ██  ██ ██   ██     ██   ██ ██████  ██    ██ ██████    ***************************************/
  /***   ██   ██ ██   ██ ██   ██ ██    ██     ██   ██ ██  ██ ██ ██   ██     ██   ██ ██   ██ ██    ██ ██        ***************************************/
  /***   ██████  ██   ██ ██   ██  ██████      ██   ██ ██   ████ ██████      ██████  ██   ██  ██████  ██        ***************************************/
  /***                                                                                                         ***************************************/
  /***************************************************************************************************************************************************/
  /***************************************************************************************************************************************************/



  /**
   * Summary. Setup drag methods and listeners
   * @this    Class scope
   * @access  private
   */
  _setupDrag ()
  {
    var containers = [];
    containers.push(this.LeftListNode);
    containers.push(this.RightListNode);
    this.RightListNode.querySelectorAll('li[data-type="Section"] ul, li[data-type="section"] ul').forEach(function (ulNode) { containers.push(ulNode); });

    this.Dragger = dragula({
      containers: containers,
      copy: this._canCopy,
      accepts: this._canDrop
    });

    this.Dragger.on('drag', this._dragStart);
    this.Dragger.on('dragend', this._dragEnd);
    this.Dragger.on('drop', this._dropped);

    return true;
  }



  /**
   * Summary. Determine if item can be copied
   * @this    Class scope
   * @access  private
   */
  _canCopy (node, fromListNode)
  {
    if (fromListNode === this.LeftListNode)
    {
      return true;
    }
    return false;
  }



  /**
   * Summary. Determine if item can be droped into current section
   * @this    Class scope
   * @access  private
   */
  _canDrop (node, toListNode, fromListNode)
  {
    this.DragEndMessage = false;
    this.DragEndCallback = false;


    // Can not dop to the left - hard fail, no point looking into anything else!
    if (toListNode === this.LeftListNode)
    {
      return false;
    }


    // Sections can be added to sections only lists - is a hard yes, so no point looking into anything else!
    if (
      toListNode
      && node.dataset.type === 'Section'
      && toListNode.classList.contains('sections-only')
    )
    {
      return true;
    }


    // If we are NOT a Section or AffintyField, and we are NOT dropping into a 'sections-only' list, we are always good to drop
    // Eg. This is any 'blue' left List element
    if (!['Section', 'AffinityField'].contains(node.dataset.type) && !toListNode.classList.contains('sections-only'))
    {
      return true;
    }


    // Can only drop sections in 'sections-only' lists
    if (
      toListNode
      && node.dataset.type === 'Section'
      && !toListNode.classList.contains('sections-only')
    )
    {
      return false;
    }


    // Items can be added to items only lists
    if (
      toListNode
      && node.dataset.type !== 'Section'
      && !toListNode.classList.contains('items-only')
    )
    {
      return false;
    }


    // check what an affinity field can do ...
    if (node.dataset.type === 'AffinityField')
    {
      return this.CanAllowAffinityField(node, false, false, true, toListNode, fromListNode);
    }


    // Default is "can not drop"
    this.DragEndMessage = false;
    this.DragEndCallback = false;
    return false;
  }



  /**
   * Summary. Start drag proceedure
   * @this    Class scope
   * @access  private
   */
  _dragStart ()
  {
    if (Affinity2018.supportsPassiveEvents) window.addEventListener('mousemove', this._dragMove, { passive: true });
    else window.addEventListener('mousemove', this._dragMove, false);
    clearTimeout(this.dragScrollTimer);
    this.dragScrollTimer = false;
  }



  /**
   * Summary. While item is being dragged, check proximity to view edges for auto page scroll
   * @this    Class scope
   * @access  private
   */
  _dragMove (ev)
  {
    this.dragScrollData = {};
    this.dragScrollData.viewportX = ev.clientX;
    this.dragScrollData.viewportY = ev.clientY;
    this.dragScrollData.viewportWidth = document.documentElement.clientWidth;
    this.dragScrollData.viewportHeight = document.documentElement.clientHeight;
    this.dragScrollData.edgeTop = this.DragScrollEdge;
    this.dragScrollData.edgeLeft = this.DragScrollEdge;
    this.dragScrollData.edgeBottom = this.dragScrollData.viewportHeight - this.DragScrollEdge;
    this.dragScrollData.edgeRight = this.dragScrollData.viewportWidth - this.DragScrollEdge;
    this.dragScrollData.isInLeftEdge = this.dragScrollData.viewportX < this.dragScrollData.edgeLeft;
    this.dragScrollData.isInRightEdge = this.dragScrollData.viewportX > this.dragScrollData.edgeRight;
    this.dragScrollData.isInTopEdge = this.dragScrollData.viewportY < this.dragScrollData.edgeTop;
    this.dragScrollData.isInBottomEdge = this.dragScrollData.viewportY > this.dragScrollData.edgeBottom;

    if (
      !(
        this.dragScrollData.isInLeftEdge
        || this.dragScrollData.isInRightEdge
        || this.dragScrollData.isInTopEdge
        || this.dragScrollData.isInBottomEdge
      )
    )
    {
      clearTimeout(this.dragScrollTimer);
      this.dragScrollTimer = false;
      return;
    }

    this.dragScrollData.documentWidth = Math.max(
      document.body.scrollWidth,
      document.body.offsetWidth,
      document.body.clientWidth,
      document.documentElement.scrollWidth,
      document.documentElement.offsetWidth,
      document.documentElement.clientWidth
    );

    this.dragScrollData.documentHeight = Math.max(
      document.body.scrollHeight,
      document.body.offsetHeight,
      document.body.clientHeight,
      document.documentElement.scrollHeight,
      document.documentElement.offsetHeight,
      document.documentElement.clientHeight
    );

    this.dragScrollData.maxScrollX = this.dragScrollData.documentWidth - this.dragScrollData.viewportWidth;
    this.dragScrollData.maxScrollY = this.dragScrollData.documentHeight - this.dragScrollData.viewportHeight;

    if (!this.dragScrollTimer) this._checkDragScroll();

  }



  /**
   * Summary. Check if drag item view edge proximity shold scroll page
   * @this    Class scope
   * @access  private
   */
  _checkDragScroll ()
  {
    clearTimeout(this.dragScrollTimer);
    if (this._adjustDragScroll())
    {
      this.dragScrollTimer = setTimeout(this._checkDragScroll, 30);
    }
  }



  /**
   * Summary. Scroll page and adjust scroll speed based on dragged item view edge proximity
   * @this    Class scope
   * @access  private
   */
  _adjustDragScroll ()
  {
    var currentScrollX = window.pageXOffset,
      currentScrollY = window.pageYOffset,
      canScrollUp = currentScrollY > 0,
      canScrollDown = currentScrollY < this.dragScrollData.maxScrollY,
      canScrollLeft = currentScrollX > 0,
      canScrollRight = currentScrollX < this.dragScrollData.maxScrollX,
      nextScrollX = currentScrollX,
      nextScrollY = currentScrollY,
      intensity;

    if (this.dragScrollData.isInLeftEdge && canScrollLeft) // Should we scroll left?
    {
      intensity = (this.dragScrollData.edgeLeft - this.dragScrollData.viewportX) / this.DragScrollEdge;
      nextScrollX = nextScrollX - (this.DragScrollMaxStep * intensity);
    }
    else if (this.dragScrollData.isInRightEdge && canScrollRight) // Should we scroll right?
    {
      intensity = (this.dragScrollData.viewportX - this.dragScrollData.edgeRight) / this.DragScrollEdge;
      nextScrollX = nextScrollX + (this.DragScrollMaxStep * intensity);
    }

    if (this.dragScrollData.isInTopEdge && canScrollUp) // Should we scroll up?
    {
      intensity = (this.dragScrollData.edgeTop - this.dragScrollData.viewportY) / this.DragScrollEdge;
      nextScrollY = nextScrollY - (this.DragScrollMaxStep * intensity);
    }
    else if (this.dragScrollData.isInBottomEdge && canScrollDown) // Should we scroll down?
    {
      intensity = (this.dragScrollData.viewportY - this.dragScrollData.edgeBottom) / this.DragScrollEdge;
      nextScrollY = nextScrollY + (this.DragScrollMaxStep * intensity);
    }

    nextScrollX = Math.max(0, Math.min(this.dragScrollData.maxScrollX, nextScrollX));
    nextScrollY = Math.max(0, Math.min(this.dragScrollData.maxScrollY, nextScrollY));

    if (nextScrollX !== currentScrollX || nextScrollY !== currentScrollY)
    {
      window.scrollTo(nextScrollX, nextScrollY);
      return true;
    }

    return false;
  }



  /**
   * Summary. Drag completed
   * @this    Class scope
   * @access  private
   */
  _dragEnd ()
  {
    clearTimeout(this.dragScrollTimer);
    this.dragScrollTimer = false;
    if (Affinity2018.supportsPassiveEvents) window.removeEventListener('mousemove', this._dragMove, { passive: true });
    else window.removeEventListener('mousemove', this._dragMove, false);
    if (this.DragEndMessage)
    {
      if (this.DragEndCallback && $a.isFunction(this.DragEndCallback)) this.DragEndCallback();
      Affinity2018.Dialog.Show({
        message: this.DragEndMessage,
        showOk: true,
        showCancel: false,
        showInput: false,
        textAlign: 'left',
        buttons: {
          ok: { show: true, icon: 'tick', text: $a.Lang.ReturnPath('generic.buttons.ok') }
        }
      });
      this.DragEndMessage = false;
      this.DragEndCallback = false;
    }
  }



  /**
   * Summary. Process droped item
   * @this    Class scope
   * @access  private
   */
  _dropped (node, toListNode, fromListNode, siblingNode)
  {

    this.ElementDropped = node;

    clearTimeout(this.dragScrollTimer);
    if (toListNode !== null)
    {
      if (node.dataset.type.toLowerCase() === 'section')
      {
        if (!this.Dragger.containers.contains(node.querySelector('ul')))
        {
          this.Dragger.containers.push(node.querySelector('ul'));
        }
      }
      var data = this._getElementDataFromNode(node);
      if (!data)
      {
        this._updateDroppedElement(node, false, true);
        return;
      }
      else
      {
        var data = this._getElementDataFromNode(node);

        this._updateDroppedElement(node, data, false);

        this.lastModifiedTime = Date.now();

      }
    }
  }



  /***************************************************************************************************************************************************/
  /***************************************************************************************************************************************************/
  /***                                      **********************************************************************************************************/
  /***   ███████  █████  ██    ██ ███████   **********************************************************************************************************/
  /***   ██      ██   ██ ██    ██ ██        **********************************************************************************************************/
  /***   ███████ ███████ ██    ██ █████     **********************************************************************************************************/
  /***        ██ ██   ██  ██  ██  ██        **********************************************************************************************************/
  /***   ███████ ██   ██   ████   ███████   **********************************************************************************************************/
  /***                                      **********************************************************************************************************/
  /***************************************************************************************************************************************************/
  /***************************************************************************************************************************** Source63 *** save ***/



  /**
  * Summary. Throttle saves to prevent server overload
  * @this    Class scope
  * @access  private
  */
  _checkSave (fromAutoLoad)
  {
    clearTimeout(this._checkSaveTimer);
    clearTimeout(this._checkSaveTimerAfterDetailsProgress);
    fromAutoLoad = fromAutoLoad === undefined ? false : fromAutoLoad;
    if (this.FormDetailsProgress !== 'progress')
    {
      var checkSensativeFieldsBool = this._hasCountrySensativeFields();
      if (checkSensativeFieldsBool)
      {
        if (!fromAutoLoad && this.ElementDropped === null)
        {
          clearTimeout(this._resetFormDelay);
          this._resetFormDelay = setTimeout(this._processTemplate, 250, false);
        }
        return;
      }
      this._checkSaveTimer = setTimeout(this._checkSaveThrottled, 250);
    }
    else
    {
      window.removeEventListener('FormDetailsDone', this._checkSave);
      window.addEventListener('FormDetailsDone', this._checkSave);
    }
  }



  /**
  * Summary. Return the rank of the provided node
  * @this    Class scope
  * @access  private
  */
  _returnRank (node)
  {
    var rank = -99;
    var foundNode, allNodes;
    if (node.dataset.type === 'Section')
    {
      foundNode = this.RightListNode.querySelector('li.item-' + node.dataset.name);
      if (foundNode)
      {
        allNodes = this.RightListNode.querySelectorAll('li[data-type="Section"]');
        rank = allNodes.indexOf(foundNode);
      }
    }
    else
    {
      foundNode = this.RightListNode.querySelector('li.item-' + node.dataset.name);
      if (foundNode)
      {
        allNodes = this.GetElementSectionNode(node).querySelectorAll('ul li.cf-designer-element');
        rank = allNodes.indexOf(foundNode);
      }
    }
    return rank;
  }



  /**
  * Summary. Check for changes and Save if any are found
  * @this    Class scope
  * @access  private
  */
  _checkSaveThrottled ()
  {
    clearTimeout(this._checkSaveTimer);

    this.ElementDropped = null;

    var changedNodes = [],
      logs = [],
      changedColor = '#8dca35',
      unchangedColor = '#16c1f3',
      deleteColor = '#e33100',
      oldRank, isNew, sectionRank, elementRank,
      changes,
      sectionNodes, childrenNodes;

    sectionNodes = this.RightListNode.querySelectorAll('li.cf-designer-element[data-type="Section"]');
    sectionNodes.forEach(function (sectionNode)
    {
      if (sectionNode.controller)
      {
        oldRank = sectionNode.controller.Config.Details.Rank + 0;
        isNew = oldRank === -99 || !sectionNode.controller.Saved ? true : false;
        sectionRank = this._returnRank(sectionNode);
        changes = sectionNode.controller.ReturnChanges();
        if (!isNew && oldRank !== sectionRank) changes.unshift('"Rank": ' + oldRank.toString().padLeft(' ', 2) + ' => "Rank": ' + sectionRank.toString().padLeft(' ', 2));
        else
        {
          if (changes.length === 0 && sectionNode.controller.Changed === true)
          {
            // force save
            changes.unshift('Force save from Change = true');
          }
        }
        if (changes.length > 0 || sectionNode.controller.Delete)
        {
          sectionNode.controller.Config.Details.Rank = sectionRank;
          sectionNode.controller.Changed = true;
          changedNodes.push(sectionNode);
          logs.push(['%c' + '\t' + 'SECTION "{label}" CHANGED'.format({
            label: sectionNode.controller.Config.Details.Label
          }), 'font-weight:bold;color:' + changedColor]);
          if (isNew) logs.push(['%c' + '\t\tNew Section', 'font-weight:bold;color:' + changedColor]);
          if (sectionNode.controller.Delete) logs.push(['%c' + '\t\tDeleting Section', 'font-weight:bold;color:' + deleteColor]);
          else if (!isNew && changes.length > 0) logs.push(['%c' + '\t\t' + changes.join('\n\t\t'), 'font-weight:bold;color:' + changedColor]);
        }
        else
        {
          //logs.push(['%c' + '\t' + 'SECTION "{label}" Unchanged'.format({
          //  label: sectionNode.controller.Config.Details.Label
          //}), 'color:' + unchangedColor]);
        }

        if (!sectionNode.controller.Delete)
        {
          childrenNodes = sectionNode.querySelectorAll('li.cf-designer-element:not([data-type="Swcrion"])');
          childrenNodes.forEach(function (childNode)
          {
            if (childNode.controller)
            {
              oldRank = childNode.controller.Config.Details.Rank + 0;
              isNew = oldRank === -99 || !childNode.controller.Saved ? true : false;
              elementRank = this._returnRank(childNode);
              changes = childNode.controller.ReturnChanges();
              if (!isNew && oldRank !== elementRank) changes.unshift('"Rank": ' + oldRank.toString().padLeft(' ', 2) + ' => "Rank": ' + elementRank.toString().padLeft(' ', 2));
              else
              {
                if (changes.length === 0 && childNode.controller.Changed === true)
                {
                  // force save
                  changes.unshift('Force save from Change = true');
                }
              }
              if (changes.length > 0 || childNode.controller.Delete)
              {
                childNode.controller.Config.Details.Rank = elementRank;
                childNode.controller.Changed = true;
                changedNodes.push(childNode);
                logs.push(['%c' + '\t' + 'ELEMENT "{label}" CHANGED'.format({
                  label: childNode.controller.Config.Details.Label
                }), 'font-weight:bold;color:' + changedColor]);
                if (isNew) logs.push(['%c' + '\t\tNew Element', 'font-weight:bold;color:' + changedColor]);
                if (childNode.controller.Delete) logs.push(['%c' + '\t\tDeleting Element', 'font-weight:bold;color:' + deleteColor]);
                else if (!isNew && changes.length > 0) logs.push(['%c' + '\t\t' + changes.join('\n\t\t'), 'font-weight:bold;color:' + changedColor]);
              }
              else
              {
                //logs.push(['%c' + '\t' + 'ELEMENT "{label}" Unchanged'.format({
                //  label: childNode.controller.Config.Details.Label
                //}), 'color:' + unchangedColor]);
              }
            }
          }.bind(this));
        }
      }
    }.bind(this));

    /* logs */
    if (changedNodes.length > 0) console.groupCollapsed('%c🖪 We have Changes to Save!', 'font-weight:bold;color:' + changedColor);
    else console.groupCollapsed('%c👍 No Changes to Save', 'color:' + unchangedColor);
    for (var l = 0; l < logs.length; l++) console.log(logs[l][0], logs[l][1]);
    console.groupEnd();
    /**/

    if (changedNodes.length > 0)
    {
      this.Save(changedNodes);
      return true;
    }
    return false;
  }



  /**
  * Summary. Package save data into FormData object
  * @this    Class scope
  * @access  private
  */
  _packageFormData (obj, rootName, ignoreList)
  {
    var formData = new FormData();

    function appendFormData(data, root)
    {
      if (!ignore(root))
      {
        root = root || '';
        if (data instanceof File)
        {
          formData.append(root, data);
        }
        else if (Array.isArray(data))
        {
          for (var i = 0; i < data.length; i++)
          {
            appendFormData(data[i], root + '[' + i + ']');
          }
        }
        else if (data && typeof data === 'object')
        {
          for (var key in data)
          {
            if (data.hasOwnProperty(key))
            {
              if (root === '')
              {
                appendFormData(data[key], key);
              }
              else
              {
                appendFormData(data[key], root + '.' + key);
              }
            }
          }
        }
        else
        {
          if (data !== null && typeof data !== 'undefined')
          {
            formData.append(root, data);
          }
        }
      }
    }

    function ignore(root)
    {
      return Array.isArray(ignoreList) && ignoreList.some(function (x) { return x === root; });
    }

    appendFormData(obj, rootName);

    return formData;
  }



  /**
  * Summary. Post save data to server
  * @this    Class scope
  * @access  private
  */
  _post ()
  {
    if (Object.keys(this.PostData).length > 0)
    {
      this.DesignerSavingNode.classList.add('show');
      this.PostLocked = true;
      this.LastPostTime = Date.now();
      if (this.UseFormDataPost)
      {

        var formData = this._packageFormData(this.PostData, 'FormElements');

        console.groupCollapsed("%c✉ FORM POST DATA =========================================", 'color:#16c1f3');
        for (var pair of this.PostData.entries())
        {
          console.log(pair[0] + ', ' + pair[1]);
        }
        console.groupEnd();

        if (this.EnablePost)
        {
          axios({
            method: 'POST',
            url: this.CleverForms.SaveDataApi,
            data: formData,
            headers: {
              'Content-Type': 'multipart/form-data'
            }
          })
            .then(this._postThen)
            .catch(this._postCatch);
        }
        else
        {
          this._postThen({ status: 200, config: { data: { FormElements: this.PostData } } });
        }

      }
      else
      {
        console.groupCollapsed("%c✉ FORM POST DATA =========================================", 'color:#16c1f3');
        console.log({ formElements: { FormElements: this.PostData } });
        console.log('Post Payload');
        console.log(JSON.stringify({ formElements: { FormElements: this.PostData } }));

        if (this.EnablePost)
        {
          axios({
            method: 'POST',
            url: this.CleverForms.SaveDataApi,
            data: {
              formElements: { FormElements: this.PostData }
            }
          })
            .then(this._postThen)
            .catch(this._postCatch);
        }
        else
        {
          this._postThen({ status: 200, config: { data: { FormElements: this.PostData } } });
        }
      }
    }
  }



  /**
  * Summary. Post XHR request completed
  * @this    Class scope
  * @access  private
  */
  _postThen (response)
  {
    if (typeof response === 'object' && response.hasOwnProperty('status'))
    {
      if (response.status === 205) // Reset Content - do a re-load!
      {
        this.PostLocked = false;
        $a.ShowPageLoader(); // lock UI
        this.DesignerSavingNode.classList.add('show');
        this._loadTemplate();
        return true;
      }
      if ([204, 200].contains(response.status))
      {

        var postData = false, requestData = false;
        if ($a.isPropObject(response, 'config') && response.config.hasOwnProperty('data'))
        {
          if ($a.isPropObject(response.config, 'data')) requestData = response.config.data;
          if ($a.isPropString(response.config, 'data')) requestData = JSON.parse(response.config.data);
          console.log('Response Payload');
          console.log(JSON.stringify(requestData));
        }

        //check for special codes
        if (
          response.hasOwnProperty('data')
          && $a.isNumeric(response.data)
        )
        {
          var code = parseInt(response.data);
          switch(code)
          {
            case 200:
              // all good ..
              break;
            case 400: // bad request - we need a form country
              Affinity2018.Dialog.Show({
                message: $a.Lang.ReturnPath('application.cleverfroms.designer.element-requires-form-country'),
                showOk: true,
                showCancel: false,
                showInput: false,
                canBackgroundClose: false,
                textAlign: 'left'
              });
              this._postComplete();
              return;
          }

        }

        if (requestData)
        {
          if (this._setPosted(requestData))
          {
            this._postComplete();
            return true;
          }
          else
          {
            return true;
          }
        }
        else
        {
          this._postComplete();
          return true;
        }
      }
    }
    this._postFailed(postData, 'unknown error');
  }



  /**
  * Summary. Post XHR has errors
  * @this    Class scope
  * @access  private
  */
  _postCatch (response)
  {
    var postedStr = '', postedData = {}, error = 'unknown error';
    if (typeof response === 'object')
    {
      if (
        response.hasOwnProperty('statusText') // needs exact match on all or partial result
        && response.statusText.toLowerCase().contains('must select the country form') 
      )
      {
        error = $a.Lang.ReturnPath('app.cf.backend_sub_errors.designer-element-requires-form-country');
      }
      if (response.hasOwnProperty('config'))
      {
        postedStr = response.config.data;
        postedData = postedStr === '' ? {} : JSON.parse(postedStr);
      }
      if (response.hasOwnProperty('statusText'))
      {
        error = response.statusText;
      }
    }
    this._postFailed(postedData, error);
  }



  /**
   * Summary. Mark all saved items as saved and update changed state
   * @this    Class scope
   * @access  private
   */
  _setPosted (postedData, error)
  {
    if (this.LastPostTime < this.LastModifiedTime)
    {
      console.log('%c    last mod was ' + (this.LastModifiedTime - this.LastPostTime) + ' ms after last post.. block "modified=true" resets and try posting again...', 'color:#099');
      clearTimeout(this.statePostTimer);
      this.PostLocked = false;
      this._checkSave();
      return false;
    }

    if (!$a.isObject(postedData.formElements)) postedData = { formElements: postedData };
    if (!$a.isArray(postedData.formElements.FormElements)) postedData = { formElements: { FormElements: [postedData.formElements.FormElements] } };

    var data, name, node, i = 0;
    for (; i < postedData.formElements.FormElements.length; i++)
    {
      data = postedData.formElements.FormElements[i];
      name = data.Name;
      node = this.RightListNode.querySelector('li.item-' + name);
      if (node)
      {
        if (node.controller.Delete) this._removeElement(node);
        else
        {
          node.controller.Saved = true;
          node.controller.Changed = false;
          node.controller.Changes = [];
          node.ConfigStringCheck = JSON.stringify(node.controller.Config);
        }
      }
    }

    this.DesignerSavingNode.classList.remove('show');

    return true;
  }



  /**
   * Summary. Post operation is complete
   * @this    Class scope
   * @access  private
   */
  _postComplete ()
  {
    this._checkResetFormCountry();
    this._enableAllButtons();
    if (!this.RightListNode.querySelector('li[data-type="Section"]') && !this.Uploading) this._injectDefaultSection();
    this.PostLocked = false;
    this.DesignerSavingNode.classList.remove('show');
    if (!this.Uploading) $a.HidePageLoader();
    console.groupEnd();
    window.dispatchEvent(new Event('posted'));
    return true;
  }



  /**
   * Summary. Post operation failed
   * @this    Class scope
   * @access  private
   */
  _postFailed (data, errorMessage)
  {
    this._postComplete();
    var message = $a.Lang.ReturnPath('application.cleverfroms.designer.error_save', { error: errorMessage });
    Affinity2018.Dialog.Show({
      //message: 'Oh no! We had trouble saving your changes.<br />Continue working. We will catch up!<!-- ' + errorMessage + ' -->',
      message: message,
      showOk: true,
      showCancel: false,
      showInput: false,
      canBackgroundClose: false,
      textAlign: 'left'
    });
    Affinity2018.LogError('Design Error', 'Blocker', 'Post failed: ' + errorMessage + '.');
    console.groupEnd();
  }



  /***************************************************************************************************************************************************/
  /***************************************************************************************************************************************************/
  /***                                                             ***********************************************************************************/
  /***   ██   ██ ███████ ██      ██████  ███████ ██████  ███████   ***********************************************************************************/
  /***   ██   ██ ██      ██      ██   ██ ██      ██   ██ ██        ***********************************************************************************/
  /***   ███████ █████   ██      ██████  █████   ██████  ███████   ***********************************************************************************/
  /***   ██   ██ ██      ██      ██      ██      ██   ██      ██   ***********************************************************************************/
  /***   ██   ██ ███████ ███████ ██      ███████ ██   ██ ███████   ***********************************************************************************/
  /***                                                             ***********************************************************************************/
  /***************************************************************************************************************************************************/
  /************************************************************************************************************************** Source63 *** helpers ***/



  /**
  * Summary. Sort configs alphabetically by Label
  * @this    Class scope
  * @access  private
  */
  _sortByLabel (a, b)
  {
    if (a.Label < b.Label) return -1;
    if (a.Label > b.Label) return 1;
    return 0;
  }



  /**
  * Summary. Sort configs alphabetically by Name
  * @this    Class scope
  * @access  private
  */
  _sortByName (a, b)
  {
    if (a.Name > b.Name) return -1;
    if (a.Name < b.Name) return 1;
    return 0;
  }



  /**
  * Summary. Sort configs by Date Created
  * @this    Class scope
  * @access  private
  */
  _sortByDate (a, b)
  {
    if (a.Date > b.Date) return -1;
    if (a.Date < b.Date) return 1;
    return 0;
  }



  /**
  * Summary. Sort configs by Rank (display order)
  * @this    Class scope
  * @access  private
  */
  _sortByRank (a, b)
  {
    if (a.hasOwnProperty('Rank'))
    {
      if (a.Rank > b.Rank) return -1;
      if (a.Rank < b.Rank) return 1;
    }
    else if (a.hasOwnProperty('Details') && a.Details.hasOwnProperty('Rank'))
    {
      if (a.Details.Rank > b.Details.Rank) return -1;
      if (a.Details.Rank < b.Details.Rank) return 1;
    }
    return 0;
  }



  /**
  * Summary. Sort configs by Rank (display order)
  * @this    Class scope
  * @access  private
  */
  _sortByElementRank (a, b)
  {
    if (a.Details.Rank > b.Details.Rank) return 1;
    if (a.Details.Rank < b.Details.Rank) return -1;
    return 0;
  }



  /**
  * Summary. Download current template as JSON
  * @this    Class scope
  * @access  private
  */
  _download ()
  {
    var json = JSON.stringify(this.TemplateData, false, 2);
    var name = this.TopNode.querySelector('input.form-name').value.trim() + ' Template.json';
    $a.Dialog.Show({
      message: 'Save as',
      buttons: {
        ok: {
          show: true,
          icon: 'download',
          text: 'Download',
          color: 'blue'
        },
        cancel: {
          show: true,
          icon: 'cross',
          text: 'Cancel',
          color: 'grey'
        }
      },
      input: {
        show: true,
        placeholder: '',
        default: name,
        lines: 1
      },
      textAlign: 'left',
      canBackgroundClose: false,
      onOk: function (name)
      {
        name = name.trim();
        if (name !== '')
        {
          if (name.toLowerCase().substring(name.length - 5, name.length) !== '.json') name = name + '.json';
          var link = document.createElement('a');
          var blob = new Blob([json], { type: 'octet/stream' });
          var url = window.URL.createObjectURL(blob);
          document.body.appendChild(link);
          link.href = url;
          link.download = name;
          link.click();
          window.URL.revokeObjectURL(url);
          document.body.removeChild(link);
          link = null;
        }
      }.bind(this)
    });
  }



  /**
  * Summary. Upload template JSON and replace / insert elements
  * @this    Class scope
  * @access  private
  */
  _upload (ev)
  {
    var file = this.TopNode.querySelector('input.upload-file').files[0], ext, size;
    if (file)
    {
      size = ((file.size / 1024) / 1024).toFixed(4);
      ext = /(?:\.([^.]+))?$/.exec(file.name)[1].toLowerCase();
      if (ext === 'json' && size <= 20)
      {
        $a.Dialog.Show({
          //message: 'This will perminantly delete all exisitng items in your form.<br />Are you sire you want to continue?',
          message: $a.Lang.ReturnPath('application.cleverfroms.designer.upload_template_message'),
          textAlign: 'left',
          buttons: {
            ok: { show: true, icon: 'tick', color: 'green', text: 'Continue' },
            cancel: { show: true, icon: 'cross', color: 'grey', text: 'Cancel' }
          },
          onOk: function ()
          {
            this.Uploading = true;
            this._disableAllButtons();
            this.RightListNode.querySelectorAll('li[data-type="Section"]').forEach(function (node) { node.controller.Delete = true; });
            window.addEventListener('posted', this._uploadAfterDelete);
            this._checkSave();
          }.bind(this)
        });
      }
      else
      {
        //var message = 'Something went wrong on upload';
        var message = $a.Lang.ReturnPath('application.cleverfroms.designer.upload_template_error');
        if (size > 20)
        {
          //message = 'File is too large to upload (is larger than 20MB)';
          message = $a.Lang.ReturnPath('application.cleverfroms.designer.upload_template_error_large');
        }
        else if (ext !== 'json')
        {
          //message = 'File must be a .json plain text file';
          message = $a.Lang.ReturnPath('application.cleverfroms.designer.upload_template_error_format');
        }
        $a.Dialog.Show({
          buttons: { cancel: false },
          message: message
        });
      }
    }
  }
  _uploadAfterDelete ()
  {
    window.removeEventListener('posted', this._uploadAfterDelete);
    var reader = new FileReader();
    reader.onload = function ()
    {
      this.TopNode.querySelector('input.upload-file').value = null;
      var json = reader.result;
      try
      {
        this.TemplateData = JSON.parse(json);
        if (json.contains('AffinityField'))
        {
          $a.Dialog.Show({
            //message: 'Repair Affiinty Field Data?',
            message: $a.Lang.ReturnPath('application.cleverfroms.designer.repair_message'),
            buttons: {
              ok: {
                show: true,
                icon: 'arrow-right',
                //text: 'Continue as is',
                text: $a.Lang.ReturnPath('application.cleverfroms.designer.button_no_repair'),
                color: 'dark-blue'
              },
              cancel: {
                show: true,
                icon: 'incident',
                //text: 'Repair and continue',
                text: $a.Lang.ReturnPath('application.cleverfroms.designer.button_repair'),
                color: 'dark-green'
              }
            },
            textAlign: 'center',
            canBackgroundClose: false,
            onOk: this._saveAfterUpload,
            onCancel: function () { this._saveAfterUpload(true); }.bind(this)
          });
        }
        else this._saveAfterUpload();
      }
      catch (err)
      {
        console.log(err);
        this._enableAllButtons();
      }
    }.bind(this);
    reader.readAsBinaryString(this.TopNode.querySelector('input.upload-file').files[0]);
  }
  _saveAfterUpload(fixData)
  {
    fixData = $a.paramOrDefault(fixData, false);
    var i = 0, j, data, oldMode, newMode, message;
    this.TemplateData = this.TemplateData.reverse();

    this.UploadSectionsDone = [];

    for (; i < this.TemplateData.length; i++)
    {
      this.TemplateData[i].Name = this.TemplateData[i].Type + '-' + $a.uuid();
      if (this.TemplateData[i].Rank === -99) this.TemplateData[i].Rank = i;
      this.TemplateData[i].Details.Rank = this.TemplateData[i].Rank;
      this.TemplateData[i].Elements.sort(this._sortByRank);
      this.TemplateData[i].Elements = this.TemplateData[i].Elements.reverse();
      this.UploadSectionsDone[i] = false;
      for (j = 0; j < this.TemplateData[i].Elements.length; j++)
      {
        this.TemplateData[i].Elements[j].Name = this.TemplateData[i].Elements[j].Type + '-' + $a.uuid();
        this.TemplateData[i].Elements[j].Section = this.TemplateData[i].Name;
        if (this.TemplateData[i].Elements[j].Rank === -99) this.TemplateData[i].Elements[j].Rank = j;
        this.TemplateData[i].Elements[j].Details.Rank = this.TemplateData[i].Elements[j].Rank;
        if (fixData)
        {
          data = this.TemplateData[i].Elements[j];
          if (data.hasOwnProperty('Type') && data.Type === 'AffinityField')
          {
            oldMode = data.Details.AffinityField.Mode;
            data = this.CleverForms.SelectDefaultModeOnFieldSearch(data);
            newMode = data.Details.AffinityField.Mode;
            if (oldMode !== newMode && data.Details.AffinityField.ModeOptions.contains(oldMode)) data.Details.AffinityField.Mode = oldMode;
            if (data.Details.AffinityField.Mode !== oldMode)
            {
              message = '%cChanged {name} Mode from {oldMode} tp {newMode}';
              console.log(message.format({
                name: data.Details.Name,
                oldMode: this.CleverForms.AffnityFieldModeEnums[oldMode].Label,
                newMode: this.CleverForms.AffnityFieldModeEnums[newMode].Label
              }), 'color:#b27e0f;font-weight:bold;');
            }
          }
          this.TemplateData[i].Elements[j] = data;
        }
      }
    }

    var reset = function ()
    {
      window.removeEventListener('posted', reset);
      this.Uploading = false;
      $a.HidePageLoader();
    };
    ['reset'].bindEach(this);
    window.addEventListener('posted', reset);

    this._processTemplate();

  }



  /***************************************************************************************************************************************************/
  /***************************************************************************************************************************************************/
  /***                                                                                  **************************************************************/
  /***   ████████ ███████ ███    ███ ██████  ██       █████  ████████ ███████ ███████   **************************************************************/
  /***      ██    ██      ████  ████ ██   ██ ██      ██   ██    ██    ██      ██        **************************************************************/
  /***      ██    █████   ██ ████ ██ ██████  ██      ███████    ██    █████   ███████   **************************************************************/
  /***      ██    ██      ██  ██  ██ ██      ██      ██   ██    ██    ██           ██   **************************************************************/
  /***      ██    ███████ ██      ██ ██      ███████ ██   ██    ██    ███████ ███████   **************************************************************/
  /***                                                                                  **************************************************************/
  /***************************************************************************************************************************************************/
  /***************************************************************************************************************************************************/



  /**
   * Summary. Define local HTML templates
   * @this    Class scope
   * @access  private
   */
  _templates ()
  {

    this.sectionTemplate = `
      <div class="main-icon"></div>
      <div class="label border"></div>
      <div class="buttons">
        <span class="edit">{edit}</span>
        <span class="del">X</span>
      </div>
      <div class="drag-handle icon-cf-drag"></div>
      <p class="section-message{messageClass}">{message} <em></em><br></p>
      <ul class="droppable items-only"></ul>
    `;

    this.elementTemplate = `
      <div class="main-icon"></div>
      <div class="label"></div>
      <div class="buttons">
        <span class="edit">{edit}</span>
        <span class="del">X</span>
      </div>
      <div class="buttons"></div>
      <div class="drag-handle icon-cf-drag"></div>
    `;

  }


};;
/***************************************************************************************************************************************************/
/***************************************************************************************************************************************************/
/***                                         *******************************************************************************************************/
/***   ███████  ██████  ██████  ███    ███   *******************************************************************************************************/
/***   ██      ██    ██ ██   ██ ████  ████   *******************************************************************************************************/
/***   █████   ██    ██ ██████  ██ ████ ██   *******************************************************************************************************/
/***   ██      ██    ██ ██   ██ ██  ██  ██   *******************************************************************************************************/
/***   ██       ██████  ██   ██ ██      ██   *******************************************************************************************************/
/***                                         *******************************************************************************************************/
/***************************************************************************************************************************************************/
/***************************************************************************************************************************************************/

/**
 *
 * Summary.       CleverForms Form.
 *
 * Description.   Form Renderer. Used by Preview, View and Edit.
 *
 * @author        Ben King, benk at affinityteam.com, ben.king at source63.com, +64 21 2672729.
 *
 *
 * @since         09.09.2019
 * @class         Designer
 * @namespace     Affinity2018.Classes.Apps.CleverForms
 * @memberof      CleverForms
 * @constructs    Affinity2018.Classes.Apps.CleverForms.Form
 *
 * @public
 */

if (!('Affinity2018' in window)) Affinity2018 = {};
if (!('Classes' in Affinity2018)) Affinity2018.Classes = {};
if (!('Apps' in Affinity2018.Classes)) Affinity2018.Classes.Apps = {};
if (!('Plugins' in Affinity2018.Classes)) Affinity2018.Classes.Plugins = {};
if (!('CleverForms' in Affinity2018.Classes.Apps)) Affinity2018.Classes.Apps.CleverForms = {};

if (!('Apps' in Affinity2018)) Affinity2018.Apps = {};
if (!('Plugins' in Affinity2018.Apps)) Affinity2018.Apps.Plugins = {};

Affinity2018.Classes.Apps.CleverForms.Form = class // extends Affinity2018.ClassEvents 
{

  /**
   * Summary. Sets class scoped variables required for the Form instance
   * @this    Class scope
   * @access  private
   */
  _options()
  {


    /**
    * Description.    View type - Form or Preview
    * @type {string}
    * @const
    * @public
    */
    this.ViewType = 'Form';


    /**
    * Description.    The parent Dom Element container for all section elements (reference)
    * @type {DomElement}
    * @const
    * @public
    */
    this.FormNode = null;


    /**
    * Description.    Enable logging of Element Createion.
    * @type {boolean}
    * @const
    * @public
    */
    this.LogElementOutput = false;

    this.RequestCheckCount = 0;
    this.RequestCheckCountMax = 50; // 50 attempts == approx 5 seconds

    this.DashboardHeaderHeight = 0;

    this.Ready = false;

    this.TestErrorStub = false;

    this.PostState = 'none';

  }


  /**
   * Summary. Class constructor
   *
   * Description. Initialises Form instance.
   *
   * @since       09.09.2019
   * @access      public
   *
   * @global
   *
   */
  constructor()
  {
    // super();

    /** load all options above into class scope.*/
    this._options();

    /**
     * Summary. Array of class method names to be bound to the global Class scope.
     * @access  private
     */
    [

      '_init',

      'Add',

      'ResizeSection',

      'Save',

      'GetFormEmployeeNo',

      '_initTemplatesLoaded',

      '_hasValue', '_getValue', '_getLabel',

      '_getTemplateInfo',

      '_initTemplatesLoaded',

      '_loadElementData', '_gotElementData',

      '_loadTemplate', '_processTemplate', '_loadTemplateError',

      '_loadinstance', '_processInstance', '_loadInstanceError',

      '_processHistory',

      '_getWorkflowButtons', '_gotWorkflowButtons', '_getWorkflowButtonsFailed',
      '_checkIdentitySelects',
      '_compileCommentLanguage', '_collpaseComments', '_expandComments', '_toggleComments',

      '_submit',
      '_save',

      '_getPostData', '_post', '_postCatch', '_postThen', '_clearErrors', '_setPosted', '_postComplete', '_postFailed',

      '_submit', '_print', '_close',

      '_ready', '_resizeSection', '_resizeAllSections', '_checkWidgetsLoaded', '_widgetsLoaded', '_checkRequests',

      '_templates'

    ].bindEach(this);

    /** load all object and HTML templates into class scope. */
    this._templates();

    this.CleverForms = Affinity2018.Apps.CleverForms.Default;
    this.CleverForms.Form = this;

    this.ViewType = window.location.href.toString().toLowerCase().contains('/preview') ? 'Preview' : this.ViewType;
    this.ViewType = window.location.href.toString().toLowerCase().contains('/viewonly') ? 'ViewOnly' : this.ViewType;
    this.CleverForms.ViewType = this.ViewType;

    document.body.classList.add('cform', 'v2');

    /** If global RequestQueue does not yet exist, create it. */
    if (!Affinity2018.hasOwnProperty('RequestQueue'))
    {
      Affinity2018.RequestQueue = new Affinity2018.Classes.Plugins.RequestQueue();
    }

    Affinity2018.Apps.Plugins.Strings = new Affinity2018.Classes.Plugins.Strings();
    Affinity2018.Apps.Plugins.Numbers = new Affinity2018.Classes.Plugins.Numbers();
    Affinity2018.Apps.Plugins.Address = new Affinity2018.Classes.Plugins.Address();
    Affinity2018.Apps.Plugins.BankNumber = new Affinity2018.Classes.Plugins.BankNumber();
    Affinity2018.Apps.Plugins.TaxNumber = new Affinity2018.Classes.Plugins.TaxNumber();
    Affinity2018.Apps.Plugins.FileUpload = new Affinity2018.Classes.Plugins.FileUpload();
    Affinity2018.Apps.Plugins.DrawPanel = new Affinity2018.Classes.Plugins.DrawPanel();

    /** If Affnity2018 UI is ready, initialise, else initialise when Affnity2018 fires the "MainInit" event. */
    if (Affinity2018.UiReady) this._init();
    else window.addEventListener('MainInit', this._init);
  }



  /**
   * Summary. Designer Class initialiser
   * @this    Class scope
   * @access  private
   */
  _init()
  {
    Affinity2018.ShowPageLoader();
    if (document.querySelector('#form'))
    {
      this.FormNode = document.querySelector('#form');
      this.ButtonsNode = document.querySelector('#buttons');
      this.CommentNode = this.ButtonsNode.querySelector('.comments');
      if (this.CommentNode)
      {
        this.CommentHistoryNode = this.CommentNode.querySelector('.comment-history');
        this.CommentHistoryCollapserNode = this.CommentHistoryNode.querySelector('.comment-history-collapser');
        this.CommentHistoryListNode = this.CommentHistoryNode.querySelector('.comment-history-list');
        this.CommentInputNode = this.ButtonsNode.querySelector('textarea');
      }
      this.HistoryNode = document.querySelector('#history');
      this.UserInstructionsNode = document.querySelector('.user-instructions');
      this.RequiredMessageNode = document.querySelector('.required-message');

      this.CommentHistoryCollapserNode.addEventListener('click', this._toggleComments);

      this.ButtonsNode.classList.add('locked');

      // TODO: Add AffinityField Key lookup hooks. If Key is EMPLOYEE_NO, fire event 'GotUser' on change and load.

      if (this.ViewType === 'Preview')
      {
        var topButtonsNode = document.querySelector('.preview-top-buttons');
        if (topButtonsNode)
        {
          var placeHolder = document.createElement('div');
          var template = this.buttonTemplate.format({
            "Type": "Button",
            "DestinationStateId": "",
            "SateType": 0,
            "ActionType": "back",
            "Name": $a.Lang.ReturnPath('application.cleverfroms.designer.preview_back_button'),
            "Color": "blue",
            "Icon": "arrow-left",
            "Path": null,
            "visible": true
          });
          placeHolder.innerHTML = template;
          var buttonNode = placeHolder.querySelector('div');
          buttonNode.addEventListener('click', this._close);
          topButtonsNode.appendChild(buttonNode);
          placeHolder = null;
          buttonNode = null;
          topButtonsNode.classList.remove('hidden');
        }

        this._loadTemplate();
      }
      if (this.ViewType === 'Form') this._loadInstance();
      if (this.ViewType === 'ViewOnly') this._loadInstance();

      if (document.querySelector('input.form-name') && document.querySelector('input.form-name').value.trim() !== '')
      {
        document.title = 'Edit ' + document.querySelector('input.form-name').value.trim();
        document.querySelector('link[rel="icon"]').href = 'https://cdn.jsdelivr.net/gh/affinityteam/www-assets/v1/favicon1.ico';
      }
    }
    else
    {
      Affinity2018.HidePageLoader();
      Affinity2018.ThrowError('Form Error', 'Blocker', 'Could not find From DOM Node (<div id="form">). Form init faild.');
      return;
    }
  }




  /***************************************************************************************************************************************************/
  /***************************************************************************************************************************************************/
  /***                                                                                                                  ******************************/
  /***   ██████  ██    ██ ██████  ██      ██  ██████     ███    ███ ███████ ████████ ██   ██  ██████  ██████  ███████   ******************************/
  /***   ██   ██ ██    ██ ██   ██ ██      ██ ██          ████  ████ ██         ██    ██   ██ ██    ██ ██   ██ ██        ******************************/
  /***   ██████  ██    ██ ██████  ██      ██ ██          ██ ████ ██ █████      ██    ███████ ██    ██ ██   ██ ███████   ******************************/
  /***   ██      ██    ██ ██   ██ ██      ██ ██          ██  ██  ██ ██         ██    ██   ██ ██    ██ ██   ██      ██   ******************************/
  /***   ██       ██████  ██████  ███████ ██  ██████     ██      ██ ███████    ██    ██   ██  ██████  ██████  ███████   ******************************/
  /***                                                                                                                  ******************************/
  /***************************************************************************************************************************************************/
  /***************************************************************************************************************************************************/



  /**
   * Summary. Add element into form
   * @this    Class scope
   * @access  public
   */
  Add(type, data, targetNode)
  {
    var node = null, logs = [], hasType = true;
    logs.push('add ' + type + ' element...');
    logs.push(type);
    logs.push(targetNode);
    if (Affinity2018.Classes.Apps.CleverForms.Elements.hasOwnProperty(type))
    {
      logs.push('form has object for ' + type);

      var readonly = data.Details.hasOwnProperty('IsReadOnly') ? data.Details.IsReadOnly : false;
      // NO MUTATORS!!!
      var config = this.CleverForms.BackfillConfig($a.jsonCloneObject(data));
      config = this.CleverForms.__THIS_IS_A_TEMP_TRANSMUTER_FOR_G_G_G_GET_DATA_UNTIL_GET_DATA_MATCHES_NEW_STRUCTURE(config, this.FormData);
      // END MUTATORS
      config.Details.IsReadOnly = readonly;

      if (!config.Details.hasOwnProperty('Value') || (config.Details.hasOwnProperty('Value') && config.Details.Value === null)) config.Details.Value = '';
      if (data.hasOwnProperty('Value') && data.Value !== null) config.Details.Value = data.Value;
      //config.OldData = $a.jsonCloneObject(data);

      logs.push(config);

      var controller = new Affinity2018.Classes.Apps.CleverForms.Elements[type](config);
      node = controller.SetFormRow(targetNode);
    }
    else
    {
      hasType = false;
      logs.push('form does NOT has object for ' + type);
      logs.push('no config');
    }

    if (this.LogElementOutput)
    {
      if (hasType) console.groupCollapsed('%c' + logs[0], 'color:green');
      else console.groupCollapsed('%c' + logs[0], 'color:red');
      console.log(logs[1]);
      console.log(logs[2]);
      if (hasType) console.log('%c' + logs[3], 'color:green');
      else console.log('%c' + logs[3], 'color:red');
      console.log(logs[4]);
      console.groupEnd();
    }
    logs = null;

    return node;
  }



  /**
   * Summary. Set section heights for animated expand / collapse
   * @this    Class scope
   * @access  private
   */
  ResizeSection(formRowNode)
  {
    if (!this.ResizeSectionTimeout) this.ResizeSectionTimeout = {};
    if (formRowNode === undefined)
    {
      this._resizeSection();
    }
    else
    {
      if ($a.isNode(formRowNode))
      {
        var id = formRowNode.dataset.hasOwnProperty('resizeId') ? formRowNode.dataset.resizeId : $a.uuid();
        formRowNode.dataset.resizeId = id;
        clearTimeout(this.ResizeSectionTimeout[id]);
        if (this.ResizeSectionTimeout.hasOwnProperty(id))
        {
          this.ResizeSectionTimeout[id] = setTimeout(this._resizeSection, 250, formRowNode);
        }
        else
        {
          this._resizeSection(formRowNode);
        }
      }
      else
      {
        this._resizeSection();
      }
    }
    //clearTimeout(this.ResizeSectionTimeout);
    //this.ResizeSectionTimeout = setTimeout(this._resizeSection, 250, formRowNode);
  }

  Save(suppressMessgae)
  {
    var buttonData = $a.jsonCloneObject(this.SaveButtonData);
    this._post(buttonData, suppressMessgae);
  }

  GetFormEmployeeNo(emp)
  {
    var emp = emp === undefined ? null : emp === -1 ? null : emp;
    var value = emp;
    if (this.FormNode && this.FormNode.querySelector('.form-row.row-affinityfield.is-global-key.is-employee-no'))
    {
      var rowNode = this.FormNode.querySelector('.form-row.row-affinityfield.is-global-key.is-employee-no');
      if (rowNode && rowNode.querySelector('select'))
      {
        value = rowNode.querySelector('select').value.trim();
        if (isNaN(parseInt(value))) return emp;
        else return parseInt(value);
      }
      if (rowNode && rowNode.querySelector('input'))
      {
        value = rowNode.querySelector('input').value.trim();
        if (isNaN(parseInt(value))) return emp;
        else return parseInt(value);
      }
    }
    return value;
  }



  /***************************************************************************************************************************************************/
  /***************************************************************************************************************************************************/
  /***                                                                                                                           *********************/
  /***   ██████  ██████  ██ ██    ██  █████  ████████ ███████     ███    ███ ███████ ████████ ██   ██  ██████  ██████  ███████   *********************/
  /***   ██   ██ ██   ██ ██ ██    ██ ██   ██    ██    ██          ████  ████ ██         ██    ██   ██ ██    ██ ██   ██ ██        *********************/
  /***   ██████  ██████  ██ ██    ██ ███████    ██    █████       ██ ████ ██ █████      ██    ███████ ██    ██ ██   ██ ███████   *********************/
  /***   ██      ██   ██ ██  ██  ██  ██   ██    ██    ██          ██  ██  ██ ██         ██    ██   ██ ██    ██ ██   ██      ██   *********************/
  /***   ██      ██   ██ ██   ████   ██   ██    ██    ███████     ██      ██ ███████    ██    ██   ██  ██████  ██████  ███████   *********************/
  /***                                                                                                                           *********************/
  /***************************************************************************************************************************************************/
  /***************************************************************************************************************************************************/



  /**
   * Summary. Designer Class set to "ready" state
   * @this    Class scope
   * @access  private
   */
  _ready()
  {
    this.DashboardHeaderHeight = document.querySelector('.ss-dashboard-wrap-main-header') ? document.querySelector('.ss-dashboard-wrap-main-header').getBoundingClientRect().height : 0;
    this.widgetData = [];
    Affinity2018.Tooltips.Apply();
    Affinity2018.SelectLookups.Apply();
    Affinity2018.Apps.Plugins.Numbers.Apply();
    Affinity2018.Apps.Plugins.Strings.Apply();
    Affinity2018.Apps.Plugins.BankNumber.Apply();
    Affinity2018.Apps.Plugins.TaxNumber.Apply();
    Affinity2018.Pagination.Apply();
    this.widgetData[0] = Affinity2018.Autocompletes.Apply();
    this.widgetData[1] = Affinity2018.Calendars.Apply();
    this.widgetData[2] = Affinity2018.Apps.Plugins.Address.Apply();
    this.widgetData[3] = Affinity2018.Apps.Plugins.DrawPanel.Apply();
    this.widgetData[4] = Affinity2018.Apps.Plugins.FileUpload.Apply();
    this._checkWidgetsLoaded();
  }



  /**
   * Summary. Set section height for animated expand / collapse
   * @this    Class scope
   * @access  private
   */
  _resizeSection(formRowNode)
  {
    if ($a.isNode(formRowNode))
    {
      var id = formRowNode.dataset.hasOwnProperty('resizeId') ? formRowNode.dataset.resizeId : false;
      if (id)
      {
        clearTimeout(this.ResizeSectionTimeout[id]);
        delete this.ResizeSectionTimeout[id];
        formRowNode.dataset.resizeId = null;
      }
      var collpase = false;
      var node = formRowNode.closest('div.section');
      if (node.querySelector('.collapser'))
      {
        node.querySelector('.section-body').style.maxHeight = null;
        if (node.classList.contains('collapsed'))
        {
          collpase = true;
          node.classList.remove('collapsed');
        }
        var size = Affinity2018.getSize(node.querySelector('.section-body'));
        if (size.height > 0) node.querySelector('.section-body').style.maxHeight = Math.ceil(size.height + 60) + 'px';
        if (collpase) node.classList.add('collapsed');
      }
    }
    else
    {
      clearTimeout(this.ResizeAllSectionsTimeout);
      this.ResizeAllSectionsTimeout = setTimeout(this._resizeAllSections, 250);
    }
  }



  /**
   * Summary. Set section heights for animated expand / collapse
   * @this    Class scope
   * @access  private
   */
  _resizeAllSections()
  {
    document.querySelectorAll('.section').forEach(function (node)
    {
      if (node.querySelector('.collapser'))
      {
        var size = Affinity2018.getSize(node.querySelector('.section-body'));
        node.querySelector('.collapser').addEventListener('click', this._toggleSection);
        if (size.height > 0) node.querySelector('.section-body').style.maxHeight = Math.ceil(size.height + 60) + 'px';
        if (node.classList.contains('start-collapsed'))
        {
          node.classList.remove('start-collapsed');
          node.classList.add('collapsed');
        }
      }
    }.bind(this));
  }




  /**
   * Summary. Check if widget components are loaded and ready
   * @this    Class scope
   * @access  private
   */
  _checkWidgetsLoaded()
  {
    clearTimeout(this._widgetLoadCheckTimer);
    var total = 0, loaded = 0, i = 0, j = 0;
    for (; i < this.widgetData.length; i++) total += this.widgetData[i].total;
    for (i = 0; i < this.widgetData.length; i++)
    {
      for (j = 0; j < this.widgetData[i].widgets.length; j++)
      {
        if (this.widgetData[i].widgets[j].Ready) loaded++;
      }
    }
    if (loaded !== total)
    {
      this._widgetLoadCheckTimer = setTimeout(this._checkWidgetsLoaded, 100);
      return false;
    }
    this._widgetsLoaded();
    return true;
  }



  /**
   * Summary. All widget components are loaded and ready
   * @this    Class scope
   * @access  private
   */
  _widgetsLoaded()
  {
    clearTimeout(this._widgetLoadCheckTimer);
    this.widgetData = null;
    this.ResizeSection();
    this._checkRequests();
    this._processHistory();
  }

  _checkRequests()
  {
    clearTimeout(this._requestsCheckTimer);
    this.RequestCheckCount++;
    if (Affinity2018.RequestQueue && Affinity2018.RequestQueue.GetStatus() === 'running')
    {
      if (this.RequestCheckCount > this.RequestCheckCountMax)
      {
        console.log('%cRequests took to long', 'color:#ff5c00');
        Affinity2018.HidePageLoader();
        this.ButtonsNode.classList.remove('locked');
        this.Ready = true;
        return;
      }
      else
      {
        this._requestsCheckTimer = setTimeout(this._checkRequests, 100);
        return;
      }
    }
    else
    {
      Affinity2018.HidePageLoader();
      this.ButtonsNode.classList.remove('locked');
      this.Ready = true;
    }
  }



  /**
   * Summary. Load form template
   * @this    Class scope
   * @access  private
   */
  _loadTemplate()
  {
    this.FormData = false;
    this.ButtonData = [];
    var templateId = this.CleverForms.GetTemplateGuid(), api;

    var gotTemplateTempMethod = function ()
    {
      window.removeEventListener('FormGotTemplate', gotTemplateTempMethod);
      if (this.FormData)
      {
        var emp = '';
        for (var s = 0; s < this.FormData.length; s++)
        {
          for (var e = 0; e < this.FormData[s].Elements.length; e++)
          {
            var element = this.FormData[s].Elements[e];
            if (element.Details.hasOwnProperty('AffinityField') && element.Details.AffinityField.FieldName === 'EMPLOYEE_NO')
            {
              emp = element.Value;
              break;
            }
          }
        }
        window.removeEventListener('GotEmployeeData', this._processTemplate);
        window.addEventListener('GotEmployeeData', this._processTemplate);
        this.CleverForms.GetEmployeeData(emp);
      }
    }.bind(this);
    window.addEventListener('FormGotTemplate', gotTemplateTempMethod);

    if (templateId)
    {
      api = this.CleverForms.GetTemplateApi + '?templateId=' + templateId;
      axios({
        method: 'get',
        url: api
      })
        .then(function (response)
        {
          if (
            response
            && (
              Affinity2018.isArray(response.data)
              || Affinity2018.isObject(response.data)
            )
          )
          {
            // TODO: old - retire once new is used.
            if (response.data.hasOwnProperty('elementTemplateMerged') && $a.isArray(response.data.elementTemplateMerged))
            {
              this.FormData = response.data.elementTemplateMerged;
              window.dispatchEvent(new Event('FormGotTemplate')); // detach from promise for debugging ....
            }

            // new
            if (response.data.hasOwnProperty('Data') && $a.isArray(response.data.Data))
            {
              this.FormData = response.data.Data;
              window.dispatchEvent(new Event('FormGotTemplate')); // detach from promise for debugging ....
            }
            return;
          }
          else
          {
            this._loadTemplateError();
          }
        }.bind(this))
        .catch(function (err)
        {
          console.warn(err);
          this._loadTemplateError();
        }.bind(this));
    }
  }



  /**
   * Summary. Template load proceedure failed
   * @this    Class scope
   * @access  private
   */
  _loadTemplateError()
  {
    var message = $a.Lang.ReturnPath('app.cf.form.error_template_get_fail');
    Affinity2018.HidePageLoader();
    Affinity2018.LogError('Form Error', 'Critical', 'Could not load form data. Form init failed.');
    Affinity2018.Dialog.Show({
      //message: 'Oops! We could not load your form. There appears to be something wrong with it. Please contact your admin.',
      message: message,
      showOk: true,
      showCancel: false,
      showInput: false,
      textAlign: 'left',
      buttons: {
        ok: { show: true, icon: 'tick', text: $a.Lang.ReturnPath('generic.buttons.ok') },
        cancel: { show: false }
      }
    });
  }



  /**
   * Summary. Process loaded Template
   * @this    Class scope
   * @access  private
   */
  _processTemplate()
  {
    window.removeEventListener('GotEmployeeData', this._processTemplate);
    if (Affinity2018.isArray(this.FormData))
    {

      var sectionNode, elementNode, anyRequired = false;

      this.FormData.sort(this._sortByRank);
      this.FormData.reverse();
      this.FormData.forEach(function (sectionConfig)
      {
        if (sectionConfig.ElementType === 'Section')
        {
          sectionNode = this.Add('Section', sectionConfig, this.FormNode);
          if (
            sectionNode
            && sectionConfig.hasOwnProperty('Elements')
            && Affinity2018.isArray(sectionConfig.Elements)
            && sectionConfig.Elements.length > 0
          )
          {
            // Loop over section elements
            sectionConfig.Elements.sort(this._sortByRank);
            sectionConfig.Elements = sectionConfig.Elements.reverse();
            sectionConfig.Elements.forEach(function (elementConfig)
            {
              if (elementConfig.ElementType !== 'Section')
              {
                elementNode = this.Add(elementConfig.ElementType, elementConfig, sectionNode.querySelector('.default-form'));
                if (Affinity2018.isPropObject(elementConfig, 'Details') && elementConfig.Details.Required) anyRequired = true;
              }
            }.bind(this))
          }
        }
      }.bind(this));
    }

    if (anyRequired)
    {
      this.RequiredMessageNode.classList.remove('hidden');
      this.UserInstructionsNode.classList.remove('hidden');
    }

    /**/

    this._getWorkflowButtons();

  }



  /**/



  /**
   * Summary. Load form template
   * @this    Class scope
   * @access  private
   */
  _loadInstance()
  {
    this.FormData = false;
    this.ButtonData = [];
    var instanceId = this.CleverForms.GetInstanceGuid(), api;

    var gotTemplateTempMethod = function ()
    {
      window.removeEventListener('FormGotTemplate', gotTemplateTempMethod);
      if (this.FormData)
      {
        var emp = '';
        for (var s = 0; s < this.FormData.length; s++)
        {
          for (var e = 0; e < this.FormData[s].Elements.length; e++)
          {
            var element = this.FormData[s].Elements[e];
            if (element.Details.hasOwnProperty('AffinityField') && element.Details.AffinityField.FieldName === 'EMPLOYEE_NO')
            {
              emp = element.Value;
              break;
            }
          }
        }
        window.removeEventListener('GotEmployeeData', this._processInstance);
        window.addEventListener('GotEmployeeData', this._processInstance);
        this.CleverForms.GetEmployeeData(emp);
      }
    }.bind(this);
    window.addEventListener('FormGotTemplate', gotTemplateTempMethod);

    if (instanceId)
    {
      api = this.CleverForms.GetInstanceApi + '/' + instanceId;
      axios({
        method: 'get',
        url: api
      })
        .then(function (response)
        {
          if (
            response
            && (
              Affinity2018.isArray(response.data)
              || Affinity2018.isObject(response.data)
            )
          )
          {
            if (response.data.hasOwnProperty('Data') && $a.isArray(response.data.Data))
            {
              this.TemplateData = response.data.Template;
              this.FormData = response.data.Data;
              this.ButtonData = response.data.hasOwnProperty('Actions') ? response.data.Actions : [];
              this.HistoryData = response.data.hasOwnProperty('History') ? response.data.History : [];
              window.dispatchEvent(new Event('FormGotTemplate')); // detach from promise for debugging ....
            }
            return;
          }
          else
          {
            this._loadInstanceError();
          }
        }.bind(this))
        .catch(function (err)
        {
          console.warn(err);
          this._loadInstanceError();
        }.bind(this));
    }
  }



  /**
   * Summary. Template load proceedure failed
   * @this    Class scope
   * @access  private
   */
  _loadInstanceError()
  {
    var message = $a.Lang.ReturnPath('app.cf.form.error_template_get_fail');
    Affinity2018.HidePageLoader();
    Affinity2018.LogError('Form Error', 'Critical', 'Could not load form data. Form init failed.');
    Affinity2018.Dialog.Show({
      //message: 'Oops! We could not load your form. There appears to be something wrong with it. Please contact your admin.',
      message: message,
      showOk: true,
      showCancel: false,
      showInput: false,
      textAlign: 'left',
      buttons: {
        ok: { show: true, icon: 'tick', text: $a.Lang.ReturnPath('generic.buttons.ok') },
        cancel: { show: false }
      }
    });
  }



  /**
   * Summary. Process loaded Template
   * @this    Class scope
   * @access  private
   */
  _processInstance()
  {
    window.removeEventListener('GotEmployeeData', this._processInstance);
    if (Affinity2018.isArray(this.FormData))
    {
      var sectionNode, elementNode, anyRequired = false;

      this.FormData.sort(this._sortByRank);
      this.FormData.reverse();
      this.FormData.forEach(function (sectionConfig)
      {
        if (sectionConfig.ElementType === 'Section')
        {
          sectionNode = this.Add('Section', sectionConfig, this.FormNode);
          if (
            sectionNode
            && sectionConfig.hasOwnProperty('Elements')
            && Affinity2018.isArray(sectionConfig.Elements)
            && sectionConfig.Elements.length > 0
          )
          {
            // Loop over section elements
            sectionConfig.Elements.sort(this._sortByRank);
            sectionConfig.Elements = sectionConfig.Elements.reverse();
            sectionConfig.Elements.forEach(function (elementConfig)
            {
              if (elementConfig.ElementType !== 'Section')
              {
                if (this.ViewType === 'ViewOnly' && elementConfig.ElementType === 'AffinityField')
                {
                  elementConfig.Details.AffinityField.Mode = this.CleverForms.AffnityFieldModeTypes.Display.Enum;
                  elementConfig.Details.AffinityField.IsRequired = false;
                  elementConfig.Details.AffinityField.IsReadOnly = true;
                  elementConfig.Details.Required = false;
                  elementConfig.Details.IsReadOnly = true;
                }
                if (this.ViewType === 'ViewOnly' && elementConfig.ElementType !== 'AffinityField')
                {
                  elementConfig.Details.IsReadOnly = true;
                  elementConfig.Details.Required = false;
                }
                elementNode = this.Add(elementConfig.ElementType, elementConfig, sectionNode.querySelector('.default-form'));
                if (Affinity2018.isPropObject(elementConfig, 'Details') && elementConfig.Details.Required) anyRequired = true;

              }
            }.bind(this))
          }
        }
      }.bind(this));
    }

    if (anyRequired)
    {
      this.RequiredMessageNode.classList.remove('hidden');
      this.UserInstructionsNode.classList.remove('hidden');
    }

    if (this.TemplateData)
    {
      var titleStr = this.TemplateData.Description;
      var nameStr = this.TemplateData.Description;
      if (!$a.isNullOrEmpty(this.TemplateData.Revision))
      {
        nameStr += ' <small>V ' + this.TemplateData.Revision + '</small>';
        titleStr += '  v' + this.TemplateData.Revision;
      }
      document.querySelector('.form-name').innerHTML = nameStr;
      document.title = 'Edit ' + titleStr;
      if (document.querySelector('link[rel="icon"]')) document.querySelector('link[rel="icon"]').href = 'https://cdn.jsdelivr.net/gh/affinityteam/www-assets/v1/favicon1.ico';
      if (!$a.isNullOrEmpty(this.TemplateData.UserInstructions)) document.querySelector('.form-instructions').innerHTML = this.TemplateData.UserInstructions;
    }

    /**/

    if (['Form', 'ViewOnly'].contains(this.ViewType)) this._getWorkflowButtons();
    else this._ready();

  }



  /**
   * Summary. Render history
   * @this    Class scope
   * @access  private
   */
  _processHistory()
  {
    if (this.HistoryNode && Affinity2018.isArray(this.HistoryData) && this.HistoryData.length > 0)
    {
      this.CommentHistoryListNode.innerHTML = '';
      this.CommentHistoryListNode.style.height = null;
      this.CommentHistoryNode.classList.add('hidden');
      var commentHistory = [];
      var historyWithComments = [];
      var node, html;
      this.HistoryData.forEach(function (data, index)
      {
        var asDate = $a.getDate(data.EnteredAtUtc, 'dd.MM.yyyy');
        var asTime = $a.getDate(data.EnteredAtUtc, 'h:mma').toLowerCase();
        node = document.createElement('div');
        html = this.historyTemplate.format({
          ActionTaken: data.ActionTaken,
          AssigneeName: data.AssigneeName,
          Comment: data.Comment === null ? '' : data.Comment,
          OriginatorName: data.OriginatorName,
          Date: asDate,
          Time: asTime
        });
        node.innerHTML = html;
        if (data.Originator !== data.Assignee) node.querySelector('.history-to').classList.remove('hidden');
        if ($a.isString(data.Comment) && data.Comment.trim() !== '') node.querySelector('.history-comment').classList.remove('hidden');
        this.HistoryNode.querySelector('.section-body').appendChild(node);
        if (data.Comment !== null && data.Comment.trim() !== '')
        {
          historyWithComments.push(data);
        }
        commentHistory.push(this._compileCommentLanguage(data, (this.HistoryData.length - 1) - index));
      }.bind(this));
      this.HistoryNode.classList.remove('hidden');
      /**/
      if (this.CommentNode)
      {
        commentHistory.reverse();
        this.CommentInputNode.classList.add('hidden');
        this.CommentHistoryNode.classList.remove('hidden');
        this.CommentHistoryListNode.innerHTML = commentHistory.join('');
        var height = this.CommentHistoryListNode.getBoundingClientRect().height;
        var autoShow = historyWithComments.length && historyWithComments[0].Assignee === Affinity2018.UserProfile.UserGuid && historyWithComments[0].Comment !== null && historyWithComments[0].Comment.trim() !== '';
        this.CommentHistoryListNode.dataset.openHeight = height + 'px';
        this.CommentHistoryListNode.dataset.closedHeight = '0px';
        if (this.ViewType !== 'ViewOnly')
        {
          this.CommentInputNode.classList.remove('hidden');
        }
        if (commentHistory.length > 0)
        {
          if (autoShow)
          {
            //TODO: Move comments to the top? (Bruce suggestion)
            this._expandComments();
          }
          else
          {
            this._collpaseComments();
          }
        }
        else
        {
          this._collpaseComments();
        }
      }
    }
  }



  /***************************************************************************************************************************************************/
  /***************************************************************************************************************************************************/
  /***                                                                   *****************************************************************************/
  /***   ██████  ██    ██ ████████ ████████  ██████  ███    ██ ███████   *****************************************************************************/
  /***   ██   ██ ██    ██    ██       ██    ██    ██ ████   ██ ██        *****************************************************************************/
  /***   ██████  ██    ██    ██       ██    ██    ██ ██ ██  ██ ███████   *****************************************************************************/
  /***   ██   ██ ██    ██    ██       ██    ██    ██ ██  ██ ██      ██   *****************************************************************************/
  /***   ██████   ██████     ██       ██     ██████  ██   ████ ███████   *****************************************************************************/
  /***                                                                   *****************************************************************************/
  /***************************************************************************************************************************************************/
  /************************************************************************************************************************** Source63 *** buttons ***/



  /**
   * Summary. Get Workflow Buttons
   * @this    Class scope
   * @access  private
   */
  _getWorkflowButtons()
  {
    var buttons = [];

    if (this.ViewType === 'Form')
    {
      this.SaveButtonData =
      {
        "Name": "Save Form",
        "Name": $a.Lang.ReturnPath('application.cleverfroms.designer.save_button'),
        "Type": "FormButton",
        "ActionType": "save",
        "DestinationStateId": "",
        "SateType": 0,
        "Identities": [],
        "Color": "dark-green",
        "Icon": "save",
        "Path": null,
        "visible": true
      }
      buttons.push(this.SaveButtonData);

      if (this.ButtonData.length > 0)
      {
        buttons.push({});

        var cancelData = null;
        var declineData = null;
        this.ButtonData.forEach(function (buttonData, index)
        {
          var workflowButtonData = {
            "Name": buttonData.hasOwnProperty('Name') ? buttonData.Name : 'Unknown',
            "Type": "WorkflowButton",
            "ActionType": "post",
            "DestinationStateId": buttonData.hasOwnProperty('DestinationStateId') ? buttonData.DestinationStateId : '',
            "SateType": buttonData.hasOwnProperty('StateType') ? buttonData.StateType : 0,
            "Identities": buttonData.hasOwnProperty('Identities') ? buttonData.Identities : [],
            "Color": buttonData.hasOwnProperty('Name') ? 'green' : 'light-grey',
            "Icon": buttonData.hasOwnProperty('Name') ? 'paperplane' : 'cancel',
            "Path": null,
            "visible": true
          };

          for (var key in buttonData)
          {
            if (buttonData.hasOwnProperty(key))
            {
              if (!workflowButtonData.hasOwnProperty(key)) workflowButtonData[key] = buttonData[key];
            }
          }

          if (buttonData.Name.toLowerCase().contains('cancel'))
          {
            workflowButtonData.Color = 'light-grey';
            workflowButtonData.Icon = 'blocked';
            cancelData = workflowButtonData;
          }
          else if (buttonData.Name.toLowerCase().contains('decline'))
          {
            workflowButtonData.Color = 'red';
            workflowButtonData.Icon = 'cross';
            declineData = workflowButtonData;
          }
          else
          {
            buttons.push(workflowButtonData);
          }
        });

        if (cancelData !== null) buttons.push(cancelData);
        if (declineData !== null) buttons.push(declineData);

        if (cancelData !== null || declineData !== null) buttons.push({});

      }
      else
      {
        buttons.push({
          "Type": "WorkflowButton",
          "Name": $a.Lang.ReturnPath('application.cleverfroms.designer.preview_validation_button'),
          "DestinationStateId": "",
          "SateType": 0,
          "ActionType": "post",
          "Color": "green",
          "Icon": "tick",
          "Path": null,
          "visible": true
        });
      }
    }

    if (this.ViewType === 'Preview')
    {
      this.SaveButtonData =
      {
        "Name": $a.Lang.ReturnPath('application.cleverfroms.designer.preview_validation_button'),
        "Type": "FormButton",
        "ActionType": "post",
        "DestinationStateId": "",
        "SateType": 0,
        "Identities": [],
        "Color": "green",
        "Icon": "save",
        "Path": null,
        "visible": true
      }
      buttons.push(this.SaveButtonData);
    }

    buttons.push({
      "Type": "Button",
      "DestinationStateId": "",
      "SateType": 0,
      "ActionType": "print",
      "Name": $a.Lang.ReturnPath('application.cleverfroms.designer.preview_print_button'),
      "Color": "dark-blue",
      "Icon": "print",
      "Path": null,
      "visible": true
    });

    var backData = {
      "Type": "Button",
      "DestinationStateId": "",
      "SateType": 0,
      "ActionType": "back",
      "Name": $a.Lang.ReturnPath('application.cleverfroms.designer.preview_back_button'),
      "Color": "blue",
      "Icon": "arrow-left",
      "Path": null,
      "visible": true
    };

    if (document.referrer !== '') // we have a referrer, so maybe been opened by JS, so lets try close
    {
      if (window.opener !== null)
      {
        backData.Name = $a.Lang.ReturnPath('generic.buttons.close');
        backData.Color = 'orange';
        backData.Icon = 'cross';
        backData.Path = null;
      }
      else
      {
        backData.Name = $a.Lang.ReturnPath('generic.buttons.back');
        backData.Color = 'blue';
        backData.Icon = 'arrow-left';
        backData.Path = null;
      }
    }
    else
    {
      if (['Preview'].contains(this.ViewType))
      {
        backData.Name = $a.Lang.ReturnPath('application.cleverfroms.designer.designer_back_button'),
          backData.Color = 'blue';
        backData.Icon = 'brush';
        backData.Path = null;
      }
      if (['Form', 'ViewOnly'].contains(this.ViewType))
      {
        backData.Name = $a.Lang.ReturnPath('application.cleverfroms.designer.inbox_back_button'),
          backData.Color = 'blue';
        backData.Icon = 'empty-inbox';
        backData.Path = null;
      }
    }

    buttons.push(backData);

    this._gotWorkflowButtons(buttons);

  }



  /**
   * Summary. Workflow buttons data loaded, so render them
   * @this    Class scope
   * @access  private
   */
  _gotWorkflowButtons(buttonData)
  {
    if ($a.isArray(buttonData) && buttonData.length > 0)
    {
      var placeHolder = document.createElement('div'), target, id, template, buttonNode, listNode;
      buttonData.forEach(function (data)
      {
        if (Object.keys(data).length === 0 && target !== null) // splitter
        {
          buttonNode = document.createElement('div');
          buttonNode.classList.add('splitter');
          target.appendChild(buttonNode);
        }
        else // button
        {
          id = 'button-' + $a.uuid();

          if (data.Path === null)
          {
            template = this.buttonTemplate.format(data);
            placeHolder.innerHTML = template;
            buttonNode = placeHolder.querySelector('div');
          }
          else
          {
            if (!data.hasOwnProperty('Target')) data.Target = '_self';
            template = this.buttonLinkTemplate.format(data);
            placeHolder.innerHTML = template;
            buttonNode = placeHolder.querySelector('a');
          }

          target = this.ButtonsNode.querySelector('.section-body .buttons');
          if (['FormButton', 'WorkflowButton'].contains(data.Type) && !['blocked', 'cross'].contains(data.Icon)) target = this.ButtonsNode.querySelector('.section-body .workflow-buttons');

          data.id = id;
          buttonNode.dataset.id = id;

          if (data.ActionType === 'save') buttonNode.addEventListener('click', this._save);
          if (data.ActionType === 'post') buttonNode.addEventListener('click', this._submit);
          if (data.ActionType === 'print') buttonNode.addEventListener('click', this._print);
          if (data.ActionType === 'back') buttonNode.addEventListener('click', this._close);

          target.appendChild(buttonNode);

          if (data.Type === 'WorkflowButton')
          {
            //buttonNode.classList.add('large');
            if (data.Identities)
            {
              var listPlaceHolder = document.createElement('div'), optionNode;
              if (data.Identities.length === 1)
              {
                listPlaceHolder.innerHTML = this.buttonSingleListTemplate.format({
                  guid: data.Identities[0].Identifier,
                  user: data.Identities[0].Name
                });
                listNode = listPlaceHolder.querySelector('div');
                listNode.dataset.refId = id;
                listNode.value = data.Identities[0].Identifier;
                target.appendChild(listNode);
                if (data.Identities[0].Identifier.toLowerCase() === Affinity2018.UserProfile.UserGuid.toLowerCase()) listNode.classList.add('hidden');
              }
              else if (data.Identities.length > 1)
              {
                listPlaceHolder.innerHTML = this.buttonListTemplate;
                listNode = listPlaceHolder.querySelector('div');
                data.Identities.forEach(function (listData)
                {
                  if (
                    listData.hasOwnProperty('Name')
                    && listData.hasOwnProperty('Identifier')
                    && listData.Name.trim() !== ''
                    && listData.Identifier.trim() !== ''
                  )
                  {
                    optionNode = document.createElement('option');
                    optionNode.innerHTML = listData.Name;
                    optionNode.value = listData.Identifier;
                    if (listData.Identifier === Affinity2018.UserProfile.UserGuid) optionNode.selected = true;
                    listNode.querySelector('select').appendChild(optionNode);
                  }
                });

                // TODO: The event listener below was used to show comments only if forms are assigned so asigner can leave comments for asignee.
                //        We now want to make this comment box generic for all forms ..
                //listNode.querySelector('select').addEventListener('change', this._checkIdentitySelects);

                listNode.querySelector('select').dataset.refId = id;
                target.appendChild(listNode);
                if (data.Identities[0].Identifier.toLowerCase() === Affinity2018.UserProfile.UserGuid.toLowerCase()) listNode.classList.add('hidden');
              }
            }
          }
          buttonNode.dataset.id = id;
          buttonNode.buttonData = data;

          if (buttonNode.tagName.toLowerCase() === 'a')
          {
            if (['{target}', '#'].contains(buttonNode.target) || buttonNode.target === '') buttonNode.removeAttribute('target');
            if (['{Path}', '#'].contains(buttonNode.href) || buttonNode.href === '') buttonNode.removeAttribute('href');
          }

        }
      }.bind(this));
      placeHolder.innerHTML = '';
      placeHolder = null;
      this.ButtonsNode.classList.remove('hidden');

      // TODO: The method below was used to show comments only if forms are assigned so asigner can leave comments for asignee.
      //        We now want to make this comment box generic for all forms ..
      //this._checkIdentitySelects();

      var workflowButtonsNode = this.ButtonsNode.querySelector('.section-body .workflow-buttons');
      var formButtonsNode = this.ButtonsNode.querySelector('.section-body .buttons');

      var worflowButtonMargin = Math.round(formButtonsNode.getBoundingClientRect().width) + 20;
      if (!Affinity2018.IsMobile) workflowButtonsNode.style.paddingRight = worflowButtonMargin + 'px';
    }
    this._ready();
  }



  /**
   * Summary. Workflow buttons load failed
   * @this    Class scope
   * @access  private
   */
  _getWorkflowButtonsFailed()
  {
    //this._ready();
    Affinity2018.HidePageLoader();
  }



  /**
   * Summary. IdentitySelect changed
   * @this    Class scope
   * @access  private
   */
  _checkIdentitySelects()
  {
    //var show = false;
    //var selectNodes = document.querySelectorAll('.identity');
    //if (selectNodes.length > 0)
    //{
    //  selectNodes.forEach(function (selectNode)
    //  {
    //    if (selectNode.value !== Affinity2018.UserProfile.UserGuid) show = true;
    //  });
    //}
    //if (show) this._showComments();
  }



  /**
   * Summary. Compile Comment Language
   * @this    Class scope
   * @access  private
   */
  _compileCommentLanguage(data, index)
  {
    index = index === undefined ? -1 : index;
    var hasComment = data.Comment !== null && data.Comment.trim() !== '';
    /**/
    //var str = '';
    //var assignee = data.Originator === Affinity2018.UserProfile.UserGuid ? 'I' : data.OriginatorName;
    //var to = data.Assignee === Affinity2018.UserProfile.UserGuid ? data.OriginatorName === data.AssigneeName ? 'Myself' : 'Me' : data.AssigneeName;
    //str = this.historyCommentSimpleTemplate.format({
    //  ItemClass: data.Assignee === Affinity2018.UserProfile.UserGuid ? 'history-comment to-me' : 'history-comment',
    //  From: assignee,
    //  To: to,
    //  ToClass: data.Assignee === Affinity2018.UserProfile.UserGuid ? 'to me' : 'to',
    //  Date: $a.getDate(data.EnteredAtUtc, 'ccc d MMM yyyy'),
    //  Time: $a.getDate(data.EnteredAtUtc, 'h:mma'),
    //  Action: data.ActionTaken,
    //  ActionClass: 'action ' + data.ActionTaken.split(' ')[0].toLowerCase(),
    //  Comment: hasComment ? data.Comment : '',
    //  CommentClass: hasComment ? 'comment' : 'hidden'
    //});
    /**/
    var complexStr = data.OriginatorName + ' submitted this form to ' + data.AssigneeName;
    if (index === 0) // index of 0 means first history record, which is always the initiator
    {
      complexStr = data.OriginatorName + ' initiated this form.';
    }
    else
    {
      var declienedLikeWords = [
        'declin', 'fail', 'reject', 'abort', 'refus', 'need more', 'needs more'
      ];
      var approvedLikeWords = [
        'approv', 'success'
      ];
      var match = data.ActionTaken
        .toLowerCase() // case insensative
        .replace('/[\W]/g', '') // remove all non-alpha chars
        .split(' ') // split words into array
        .filter(i => i.length > 3) // remove short words from array
        .join(' '); // join back to a sanatised match string
      if (declienedLikeWords.some(function (word) { return match.contains(word); })) // see if any of the declined-like words are in our sanatised match string
      {
        complexStr = data.OriginatorName + ' declined this form and sent it to ' + data.AssigneeName;
      }
      if (approvedLikeWords.some(function (word) { return match.contains(word); })) // see if any of the approved-like words are in our sanatised match string
      {
        complexStr = data.OriginatorName + ' approved this form and sent it to ' + data.AssigneeName;
      }
    }
    var complex = this.historyCommentComplexTemplate.format({
      ItemClass: data.Assignee === Affinity2018.UserProfile.UserGuid ? 'history-comment to-me' : 'history-comment',
      Complex: complexStr,
      Date: $a.getDate(data.EnteredAtUtc, 'ccc d MMM yyyy'),
      Time: $a.getDate(data.EnteredAtUtc, 'h:mma'),
      Comment: hasComment ? data.Comment : '',
      CommentClass: hasComment ? 'comment' : 'hidden'
    });
    /**/
    return complex;
  }


  
  /**
   * Summary. Collapse comment chat section
   * @this    Class scope
   * @access  private
   */
  _collpaseComments()
  {
    this.CommentNode.classList.remove('open');
    this.CommentHistoryCollapserNode.innerHTML = 'Show';
    this.CommentHistoryListNode.style.height = this.CommentHistoryListNode.dataset.closedHeight;
  }



  /**
   * Summary. Expand comment chat section
   * @this    Class scope
   * @access  private
   */
  _expandComments()
  {
    this.CommentNode.classList.add('open');
    this.CommentHistoryCollapserNode.innerHTML = 'Hide';
    this.CommentHistoryListNode.style.height = this.CommentHistoryListNode.dataset.openHeight;
  }



  /**
   * Summary. Toggle comment chat section
   * @this    Class scope
   * @access  private
   */
  _toggleComments()
  {
    if (this.CommentNode.classList.contains('open'))
    {
      this._collpaseComments();
    }
    else
    {
      this._expandComments();
    }
  }



  /***************************************************************************************************************************************************/
  /***************************************************************************************************************************************************/
  /***                                                     *******************************************************************************************/
  /***   ███████ ██    ██ ██████  ███    ███ ██ ████████   *******************************************************************************************/
  /***   ██      ██    ██ ██   ██ ████  ████ ██    ██      *******************************************************************************************/
  /***   ███████ ██    ██ ██████  ██ ████ ██ ██    ██      *******************************************************************************************/
  /***        ██ ██    ██ ██   ██ ██  ██  ██ ██    ██      *******************************************************************************************/
  /***   ███████  ██████  ██████  ██      ██ ██    ██      *******************************************************************************************/
  /***                                                     *******************************************************************************************/
  /***************************************************************************************************************************************************/
  /*************************************************************************************************************************** Source63 *** submit ***/



  /**
   * Summary. Submit (Workflow button clicked)
   * @this    Class scope
   * @access  private
   */
  _submit(ev)
  {

    if ($a.isEvent(ev)) $a.stopEvent(ev);

    var button = $a.getEventNode(ev, 'button'),
      buttonData = button.buttonData,
      firstErrorRow = { row: false, index: 999999 },
      firstRequiredErrorRow = { row: false, index: 999999 },
      scrollTarget = false,
      scrollDelay = 0,
      formElement, elemntRow, key, widget;

    $a.ShowPageLoader();

    document.querySelectorAll('.form-row.error').forEach(function (rowNode)
    {
      rowNode.classList.remove('error', 'flash-error');
      if (rowNode.querySelector('.ui-form-error'))
      {
        rowNode.querySelector('.ui-form-error').classList.remove('show');
      }
    });

    document.querySelectorAll('.form-row.required, .form-row.inline-error, .is-global-key').forEach(function (rowNode, rowIndex)
    {
      var setError = false;
      rowNode.style.marginBottom = null;
      formElement = rowNode.querySelector('input,select,textarea');
      elemntRow = formElement.closest('.form-row');
      if (formElement && !elemntRow.classList.contains('hidden'))
      {
        if (formElement.hasOwnProperty('widgets'))
        {
          var widgets = formElement.widgets;
          if (formElement.widgets.hasOwnProperty('TaxNumber'))
          {
            widgets = { TaxNumber: formElement.widgets.TaxNumber };
          }

          //if (formElement.widgets.hasOwnProperty('SelectLookup'))
          //{
          //  widgets = { SelectLookup: formElement.widgets.SelectLookup };
          //}

          for (key in widgets)
          {
            if (key !== 'Address' && formElement.widgets.hasOwnProperty(key))
            {
              widget = formElement.widgets[key];
              if (widget)
              {
                if (widget.hasOwnProperty('Valid') && $a.isBool(widget.Valid))
                {
                  if (widget.hasOwnProperty('IsValid') && $a.isMethod(widget.IsValid)) widget.IsValid();
                  if (widget.hasOwnProperty('Check') && $a.isMethod(widget.Check)) widget.Check();
                  if (!widget.Valid)
                  {
                    setError = true;
                    rowNode.classList.add('error');
                    if (rowNode.closest('.section').classList.contains('collapsed'))
                    {
                      rowNode.closest('.section').classList.remove('collapsed');
                      scrollDelay = 0.250;
                    }
                    if (!firstErrorRow.row)
                    {
                      firstErrorRow.row = rowNode;
                      firstErrorRow.index = rowIndex;
                    }
                  }
                }
                else
                {
                  if (rowNode.classList.contains('required') && rowNode.querySelector('input[type="file"]'))
                  {
                    if (widget.GetFiles().length === 0)
                    {
                      setError = true;
                      rowNode.classList.add('error');
                      firstErrorRow.row = rowNode;
                      firstErrorRow.index = rowIndex;
                    }
                  }
                }
              }
            }
          }
        }

        /**/

        if (!setError && $a.isMethod(rowNode.controller.IsValid))
        {
          var valid = rowNode.controller.IsValid();
          var reason = $a.isMethod(rowNode.controller.InvalidReason) ? rowNode.controller.InvalidReason() : '';
          if (!valid)
          {
            setError = true;
            if ($a.isMethod(rowNode.controller.SetError))
            {
              rowNode.controller.SetError();
            }
            else
            {
              rowNode.classList.add('error');
              if (rowNode.closest('.section').classList.contains('collapsed'))
              {
                rowNode.closest('.section').classList.remove('collapsed');
                scrollDelay = 0.250;
              }
              if (reason.trim() !== '')
              {
                var errorNode = rowNode.querySelector('.ui-form-error');
                if (!errorNode)
                {
                  errorNode = document.createElement('div');
                  rowNode.appendChild(errorNode);
                }
                errorNode.classList.add('ui-form-error', 'show');
                errorNode.innerHTML = reason.trim();
                rowNode.style.marginBottom = '20px';
                var checkBottom = parseFloat(window.getComputedStyle(errorNode, null).getPropertyValue('bottom').replace('px', ''));
                if (checkBottom < 0)
                {
                  var errorSize = errorNode.getBoundingClientRect().height;
                  var newMargin = Math.max(errorSize - 30, 0) + 50;
                  rowNode.style.marginBottom = newMargin + 'px';
                  errorNode.style.bottom = (0 - (errorSize + 1)) + 'px';
                  Affinity2018.Apps.CleverForms.Form.ResizeSection(rowNode);
                }
              }
            }
            if (!firstErrorRow.row)
            {
              firstErrorRow.row = rowNode;
              firstErrorRow.index = rowIndex;
            }
          }
        }

        if (!setError && rowNode.classList.contains('required'))
        {
          if (!setError && rowNode.querySelectorAll('.radio-label-pair').length > 1)
          {
            if (!rowNode.querySelector('.radio-label-pair input:checked'))
            {
              setError = true;
              rowNode.classList.add('error');
              if (rowNode.closest('.section').classList.contains('collapsed'))
              {
                rowNode.closest('.section').classList.remove('collapsed');
                scrollDelay = 0.250;
              }
              if (rowIndex < firstErrorRow.index)
              {
                firstErrorRow.row = rowNode;
                firstErrorRow.index = rowIndex;
              }
              if (rowIndex < firstRequiredErrorRow.index)
              {
                firstRequiredErrorRow.row = rowNode;
                firstRequiredErrorRow.index = rowIndex;
              }
            }
          }
          if (!setError && rowNode.querySelectorAll('.check-label-pair').length > 1)
          {
            if (!rowNode.querySelector('.check-label-pair input:checked'))
            {
              setError = true;
              rowNode.classList.add('error');
              if (rowNode.closest('.section').classList.contains('collapsed'))
              {
                rowNode.closest('.section').classList.remove('collapsed');
                scrollDelay = 0.250;
              }
              if (rowIndex < firstErrorRow.index)
              {
                firstErrorRow.row = rowNode;
                firstErrorRow.index = rowIndex;
              }
              if (rowIndex < firstRequiredErrorRow.index)
              {
                firstRequiredErrorRow.row = rowNode;
                firstRequiredErrorRow.index = rowIndex;
              }
            }
          }
          if (!setError && rowNode.querySelector('input:not([type="checkbox"]):not([type="radio"]),textarea,select'))
          {
            var inputNode, testValue = '', hasNode = false;
            if (inputNode = rowNode.querySelector('.select.hidden:not(.no-validate)'))
            {
              testValue = rowNode.querySelector('.select.hidden select:not(.no-validate)').value;
              hasNode = true;
            }
            else if (inputNode = rowNode.querySelector('input[type="hidden"]:not(.countrycode):not(.no-validate)'))
            {
              testValue = rowNode.querySelector('input[type="hidden"]:not(.countrycode):not(.no-validate)').value;
              hasNode = true;
            }
            else if (rowNode.querySelector('input:not([type="file"]):not(.no-validate),textarea:not(.no-validate),select:not(.no-validate)'))
            {
              testValue = rowNode.querySelector('input:not([type="file"]):not(.no-validate),textarea:not(.no-validate),select:not(.no-validate)').value;
              hasNode = true;
            }
            if (hasNode && testValue.toString().trim() === '')
            {
              rowNode.classList.add('error');
              if (rowIndex < firstErrorRow.index)
              {
                firstErrorRow.row = rowNode;
                firstErrorRow.index = rowIndex;
              }
              if (rowIndex < firstRequiredErrorRow.index)
              {
                firstRequiredErrorRow.row = rowNode;
                firstRequiredErrorRow.index = rowIndex;
              }
            }
            else
            {
              rowNode.classList.remove('error', 'flash-error');
            }
          }
        }
      }
    });

    if (firstRequiredErrorRow.row || firstErrorRow.row)
    {
      if (firstRequiredErrorRow.row && !firstErrorRow.row)
      {
        scrollTarget = firstRequiredErrorRow.row;
        //firstRequiredErrorRow.row.scrollIntoView(scrollOtions);
      }
      else if (firstErrorRow.row && !firstRequiredErrorRow.row)
      {
        scrollTarget = firstErrorRow.row;
        //firstErrorRow.row.scrollIntoView(scrollOtions);
      }
      else if (firstRequiredErrorRow.row && firstErrorRow.row)
      {
        if (firstRequiredErrorRow.index === firstErrorRow.index)
        {
          scrollTarget = firstRequiredErrorRow.row;
          //firstRequiredErrorRow.row.scrollIntoView(scrollOtions);
        }
        else if (firstRequiredErrorRow.index < firstErrorRow.index)
        {
          scrollTarget = firstRequiredErrorRow.row;
          //firstRequiredErrorRow.row.scrollIntoView(scrollOtions);
        }
        else if (firstErrorRow.index < firstRequiredErrorRow.index)
        {
          scrollTarget = firstErrorRow.row;
          //firstErrorRow.row.scrollIntoView(scrollOtions);
        }
      }

      if (scrollTarget)
      {
        setTimeout(function ()
        {
          var pos = scrollTarget.getBoundingClientRect(window).top;
          pos += window.scrollY;
          pos -= this.DashboardHeaderHeight;
          pos -= 20;
          scrollTarget.classList.add('flash-error');
          window.scrollTo({
            //behavior: 'smooth',
            top: pos
          });
          // TweenLite is all the sucks right now, and is NOT working correctly.
          //TweenLite.to(window, 0.5, {
          //  //scrollTo: pos
          //  scrollTo: scrollTarget
          //});
          setTimeout(function () { scrollTarget.classList.remove('flash-error'); }, 2500);
        }.bind(this), scrollDelay);
      }

      this.PostState = 'invalid';

      $a.HidePageLoader();

    }
    else
    {
      document.querySelectorAll('.form-row.error').forEach(function (rowNode)
      {
        rowNode.classList.remove('error', 'flash-error');
      });
      if (this.ViewType === 'Preview')
      {
        $a.Dialog.Show({
          message: $a.Lang.ReturnPath('application.cleverfroms.designer.preview_test_validation_message'),
          buttons: {
            ok: { show: true, icon: 'tick', text: $a.Lang.ReturnPath('generic.buttons.ok') },
            cancel: { show: false }
          }
        });
        $a.HidePageLoader();
        this._getPostData();
      }
      else this._post(buttonData);
    }
  }



  /***************************************************************************************************************************************************/
  /***************************************************************************************************************************************************/
  /***                                      **********************************************************************************************************/
  /***   ███████  █████  ██    ██ ███████   **********************************************************************************************************/
  /***   ██      ██   ██ ██    ██ ██        **********************************************************************************************************/
  /***   ███████ ███████ ██    ██ █████     **********************************************************************************************************/
  /***        ██ ██   ██  ██  ██  ██        **********************************************************************************************************/
  /***   ███████ ██   ██   ████   ███████   **********************************************************************************************************/
  /***                                      **********************************************************************************************************/
  /***************************************************************************************************************************************************/
  /***************************************************************************************************************************** Source63 *** save ***/



  /**
   * Summary. Submit (Workflow button clicked)
   * @this    Class scope
   * @access  private
   */
  _save(ev)
  {
    if ($a.isEvent(ev)) $a.stopEvent(ev);
    var buttonData = $a.jsonCloneObject(this.SaveButtonData);
    buttonData.Name = $a.Lang.ReturnPath('generic.buttons.save');
    $a.ShowPageLoader();
    this._post(buttonData);
  }



  /***************************************************************************************************************************************************/
  /***************************************************************************************************************************************************/
  /***                                       *********************************************************************************************************/
  /***   ██████   ██████  ███████ ████████   *********************************************************************************************************/
  /***   ██   ██ ██    ██ ██         ██      *********************************************************************************************************/
  /***   ██████  ██    ██ ███████    ██      *********************************************************************************************************/
  /***   ██      ██    ██      ██    ██      *********************************************************************************************************/
  /***   ██       ██████  ███████    ██      *********************************************************************************************************/
  /***                                       *********************************************************************************************************/
  /***************************************************************************************************************************************************/
  /***************************************************************************************************************************** Source63 *** post ***/



  /**
   * Summary. Gather all post data from form
   * @this    Class scope
   * @access  private
   */
  _getPostData()
  {
    this.PostData = {
      Sections: []
    };

    var addedNames = [],
      sectionConfig, sectionData,
      elementConfig, elementData;

    document.querySelectorAll('div.section.row-section').forEach(function (sectionNode)
    {
      if (!addedNames.contains(sectionNode.controller.Name))
      {
        sectionConfig = sectionNode.controller.Config;
        if (sectionConfig.Type === 'Section')
        {
          sectionData = sectionNode.controller.GetFromFormRow();
          sectionNode.querySelectorAll('div.form-row').forEach(function (node)
          {
            if (!addedNames.contains(node.controller.Name))
            {
              elementConfig = node.controller.Config;
              if (elementConfig.Type !== 'Section' && elementConfig.ViewType === 'Question')
              {
                if (elementConfig.Type === 'AffinityField')
                {
                  if (elementConfig.Details.AffinityField.Mode !== this.CleverForms.AffnityFieldModeTypes.Display.Enum)
                  {
                    elementData = node.controller.GetFromFormRow();
                    sectionData.Elements.push(elementData);
                  }
                }
                else
                {
                  elementData = node.controller.GetFromFormRow();
                  sectionData.Elements.push(elementData);
                }
              }
            }
            addedNames.push(node.controller.Name);
          }.bind(this));
          this.PostData.Sections.push(sectionData);
        }
      }
      addedNames.push(sectionNode.controller.Name);
    }.bind(this))


    return this.PostData;
  }



  /**
   * Summary. Post the form
   * @this    Class scope
   * @access  private
   */
  _post(buttonData, suppressMessage)
  {
    //buttonData = $a.paramOrDefault(buttonData, { Name: 'Unknown', DestinationStateId: '', StateType: 0}, 'object');
    buttonData = $a.paramOrDefault(buttonData, { Name: 'Unknown', DestinationStateId: '' }, 'object');

    this.suppressPostMessage = $a.paramOrDefault(suppressMessage, false, 'boolean');

    this.SubmitActionName = buttonData.Name;

    this.PostData = this._getPostData();

    this.PostData.InstanceId = this.CleverForms.GetInstanceGuid();
    this.PostData.Comment = this.CommentInputNode.value.trim();
    this.PostData.ActionName = buttonData.Name;
    this.PostData.DestinationStateId = buttonData.DestinationStateId;
    //this.PostData.StateType = buttonData.StateType;

    if (document.querySelector('.identity[data-ref-id="' + buttonData.id + '"]'))
    {
      var identityNode = document.querySelector('.identity[data-ref-id="' + buttonData.id + '"]');
      if (identityNode.dataset.guid) this.PostData.SelectedIdentity = identityNode.dataset.guid;
      else this.PostData.SelectedIdentity = identityNode.value;
    }

    if (this.ViewType === 'Preview')
    {
      return;
    }

    console.groupEnd();
    console.groupCollapsed("%c✉ FORM POST (" + this.SubmitActionName + ") =========================================", 'color:#16c1f3');
    console.log(this.PostData);

    if (Affinity2018.EnablePost)
    {
      axios({
        method: 'POST',
        url: this.CleverForms.SubmitFormApi,
        data: this.PostData
      })
        .then(this._postThen)
        .catch(this._postCatch);
    }
    else
    {
      this._postThen({ status: 200, config: { data: this.PostData }, data: { Success: true, Data: [] } });
      //this._postThen({status: 200, config: { data: this.PostData }, data: { Success: false, Data: ['Some busted thing!','Some other broken thing.','The last messed up thing,'] }  });
    }
  }



  /**
   * Summary. Post XHR request completed
   * @this    Class scope
   * @access  private
   */
  _postThen(response)
  {
    if (this.CleverForms.IsErrorPage(response))
    {
      console.log('_postThen Error');
      console.log(this.CleverForms.GetErrorPageOutputString(response));
      console.log('');
    }

    if (typeof response === 'object' && response.hasOwnProperty('status'))
    {
      if (response.status === 205) // Reset Content - do a re-load!
      {
        this._postComplete();
        return true;
      }
      if ([204, 200].contains(response.status))
      {
        var postData = false, requestData = false;
        if ($a.isPropObject(response, 'config') && response.config.hasOwnProperty('data'))
        {
          if ($a.isPropObject(response.config, 'data')) requestData = response.config.data;
          if ($a.isPropString(response.config, 'data')) requestData = JSON.parse(response.config.data);
          console.log(JSON.stringify(requestData));
        }
        if (requestData)
        {

          if (this.TestErrorStub) response.data = this.TestErrorStub;

          var checkForError = this.CleverForms.CheckResponseForErrorPage(response.data);
          if (checkForError === 'OK')
          {
            if (this._setPosted(response))
            {
              this._postComplete();
              return true;
            }
            else
            {
              this._postFailed(this.PostData, false, response);
              return true;
            }
          }
          this._postFailed(this.PostData, checkForError);
          return true;
        }
        else
        {
          this._postComplete();
          return true;
        }
      }
    }
    this._postFailed(this.PostData, 'Unknown error');
    return true;
  }



  /**
   * Summary. Form has been submitted
   * @this    Class scope
   * @access  private
   */
  _clearErrors(revalidate)
  {
    revalidate = $a.isBool(revalidate) ? revalidate : false;
    document.querySelectorAll('.form-row.error').forEach(function (rowNode)
    {
      rowNode.classList.remove('error', 'flash-error', 'inline-error');
      if (rowNode.querySelector('.error')) rowNode.querySelector('.error').classList.remove('error');
      if (rowNode.querySelector('.inline-error')) rowNode.querySelector('.inline-error').classList.remove('inline-error');
      if (rowNode.querySelector('.ui-form-error.show')) rowNode.querySelector('.ui-form-error.show').classList.remove('show');
      if (revalidate)
      {
        rowNode.querySelectorAll('input,select,textarea').forEach(function (elementNode)
        {
          if (elementNode.hasOwnProperty('widgets'))
          {
            for (var widget in elementNode.widgets)
            {
              if (elementNode.widgets[widget].hasOwnProperty('IsValid'))
              {
                elementNode.widgets[widget].IsValid();
              }
            }
          }
        }.bind(this));
      }
    });
  }



  /**
   * Summary. Form has been submitted
   * @this    Class scope
   * @access  private
   */
  _setPosted(response)
  {
    this.PostedErrors = [];

    this._clearErrors();

    var message = '';

    /**/

    if (
      $a.isPropObject(response, 'data')
      && $a.isPropBool(response.data, 'Success')
      && !response.data.Success
      && $a.isPropArray(response.data, 'ErrorMessages')
      //&& response.data.ErrorMessages.length > 0
    )
    {
      this.PostedErrors = response.data.ErrorMessages;
      return false;
    }

    if (
      $a.isPropObject(response, 'data')
      && $a.isPropBool(response.data, 'Success')
      && !response.data.Success
      && $a.isPropArray(response.data, 'Data')
      && response.data.Data.length > 0
    ) this.PostedErrors = response.data.Data;

    if (this.PostedErrors.length > 0) return false;

    return true;
  }



  /**
   * Summary. Post operation is complete
   * @this    Class scope
   * @access  private
   */
  _postComplete()
  {
    console.groupEnd();
    
    if (this.ViewType === 'Form' && this.SubmitActionName !== 'Save' && Affinity2018.EnablePost)
    {
      if (this.PostedErrors.length === 0)
      {
        if (Affinity2018.DashboardTemplate)
        {
          Affinity2018.Dialog.Show({
            message: $a.Lang.ReturnPath('app.cf.form.dashboard_submit'),
            showOk: true,
            showCancel: false,
            showInput: false,
            textAlign: 'center'
          });
        }
        else
        {
          var path = this.CleverForms.InboxPath;
          if (window.location.hash) path += window.location.hash
          var redirectWindow = window.open(path, '_self');
          redirectWindow.location;
        }
      }
    }
    if (this.SubmitActionName === 'Save' && this.suppressPostMessage) // && this.PostedErrors.length === 0)
    {
      // saved
      Affinity2018.Dialog.Show({
        message: $a.Lang.ReturnPath('app.cf.form.saved'),
        showOk: true,
        showCancel: false,
        showInput: false,
        textAlign: 'center'
      });
    }

    this.suppressPostMessage = false;

    $a.HidePageLoader();

    this.PostState = 'success';

    return true;
  }


   
  /**
   * Summary. Post XHR has errors
   * @this    Class scope
   * @access  private
   */
  _postCatch(response)
  {
    var postedStr = '', postedData = {}, error = 'unknown error';
    
    if (this.CleverForms.IsErrorPage(response))
    {
      console.log('_postCatch Error');
      console.log(this.CleverForms.GetErrorPageOutputString(response));
      console.log('');
      this._postFailed(this.PostData, this.CleverForms.GetErrorPageOutputString(response));
      return;
    }

    if ($a.type(response) === 'error')
    {
      this._postFailed(this.PostData, response.message);
      return;
    }

    if ($a.type(response) === 'object')
    {
      if (response.hasOwnProperty('config'))
      {
        postedStr = response.config.data;
        postedData = postedStr === '' ? {} : JSON.parse(postedStr);
      }
      if (response.hasOwnProperty('statusText'))
      {
        error = response.statusText;
      }
      this._postFailed(postedData, error);
      return;
    }

    if ($a.type(response) === 'string')
    {
      this._postFailed(this.PostData, response);
      return;
    }

    this._postFailed(this.PostData, 'Unknown error');
  }
  

   
  /**
   * Summary. Form post failed
   * @this    Class scope
   * @access  private
   */
  _postFailed (data, errorMessage, response)
  {
    console.groupEnd();
    clearTimeout(this._postFailedThrottle);

    this._postFailedThrottle = setTimeout(function ()
    {

      var logError = true;

      if (!errorMessage) errorMessage = '';
      else if (this.CleverForms.IsErrorPage(errorMessage))errorMessage = this.CleverForms.GetErrorPageOutputString(response);
      
      var message = $a.Lang.ReturnPath('app.cf.form.error_template_post_fail', { message: errorMessage });

      if (
        response !== null
        && response !== undefined
        && $a.isPropObject(response, 'data')
        && $a.isPropBool(response.data, 'Success')
        && !response.data.Success
      )
      {
        if ($a.isPropArray(response.data, 'ErrorMessages'))
        {
          if (response.data.ErrorMessages.length > 0) this.PostedErrors = response.data.ErrorMessages;
          if (this.PostedErrors.length === 0) message = $a.Lang.ReturnPath('app.cf.form.error_template_post_fail_with_error');
          else message = $a.Lang.ReturnPath('app.cf.form.error_template_post_fail_with_errors') + '<br>' + this.PostedErrors.join('<br>');
          var prefix = '';
          var suffix = ''
          var modelNames = [];
          for (var key in response.data)
          {
            if (
              response.data.hasOwnProperty(key)
              && !['Success', 'ErrorMessages'].contains(key)
              && $a.isArray(response.data[key])
              && response.data[key].length > 0
            )
            {
              var keyLangName = key.toLowerCase().trim();
              if ($a.Lang.CheckPath('app.cf.generic_errors.' + keyLangName)) prefix = $a.Lang.ReturnPath('app.cf.generic_errors.' + keyLangName);
              if (prefix != '') message += '<br><br>' + prefix + '';
              if ($a.Lang.CheckPath('app.cf.generic_errors.' + keyLangName + '_suffix')) suffix = $a.Lang.ReturnPath('app.cf.generic_errors.' + keyLangName + '_suffix');
              for (var m = 0; m < response.data[key].length; m++)
              {
                if (response.data[key][m].hasOwnProperty('ModelName'))
                {
                  var modelName = response.data[key][m].ModelName.toLowerCase();
                  if ($a.Lang.CheckPath('app.cf.backend_sub_names.' + modelName)) modelNames.push($a.Lang.ReturnPath('app.cf.backend_sub_names.' + modelName));
                  else modelNames.push(modelName.toTitleCase());
                }
              }
            }
          }
          if (response.data.ErrorMessages.length > 0 || modelNames.length > 0)
          {
            var tab = '&nbsp;&nbsp;&nbsp;&nbsp;';
            if (modelNames.length > 0)
            {
              message += '<br>';
              var modelNameList = tab + modelNames.join('<br>' + tab);
              if (modelNames.length > 11)
              {
                var names = modelNames.slice(0, 10);
                names.push('...');
                names.push(modelNames[modelNames.length - 1]);
                modelNames = names;
                modelNameList = '<div class="indent">' + modelNames.join(', ') + '</div>';
              }
              message += modelNameList;
            }
            if (modelNames.length > 0 && suffix !== '') message += '<br><br>' + suffix;
            if (modelNames.length === 0 && suffix !== '') message += '<br>' + suffix;
            errorMessage = message;
            logError = false;
          }
        }
        else if ($a.isPropArray(response.data, 'Data') && response.data.Data.length > 0)
        {
          this.PostedErrors = response.data.Data;
          //var message = 'Oops! ' + (this.PostedErrors.length === 0 ? 'There is an error' : 'There are errors') + ' in this form that needs attention:<br /><br />';
      
          if (this.PostedErrors.length === 0) message = $a.Lang.ReturnPath('app.cf.form.error_template_post_fail_with_error');
          else message = $a.Lang.ReturnPath('app.cf.form.error_template_post_fail_with_errors');

          if (this.PostedErrors.length >= 2)
          {
            var reg = new RegExp(/^(.*)\s?[.,:]{1}$/m);
            for (var i = 0; i < this.PostedErrors.length; i++)
            {
              if (reg.test(this.PostedErrors[i])) this.PostedErrors[i] = this.PostedErrors[i].substr(0, this.PostedErrors[i].length - 1);
            }
            var last = this.PostedErrors[this.PostedErrors.length - 1];
            last = last[0].toLowerCase() + last.substr(1);
            var remaining = $a.jsonCloneObject(this.PostedErrors);
            remaining.splice(remaining.indexOf(last), 1);
            message += remaining.join(',<br>');
            message += ',<br>And, ' + last + '<br><br>';
          }
          else
          {
            message += this.PostedErrors[0];
          }
          errorMessage = message;
          logError = false;
        }
      }

      Affinity2018.Dialog.Show({
        message: message,
        showOk: true,
        showCancel: false,
        showInput: false,
        canBackgroundClose: false,
        textAlign: 'left',
        buttons: {
          ok: { show: true, icon: 'tick', text: $a.Lang.ReturnPath('generic.buttons.ok') },
          cancel: { show: false }
        }
      });

      if (logError && data && $a.isObject(data) && !$a.isEmptyObject(data)) console.error(data);
      if (logError) console.error('Form Post ({0})\nError:\n{1}\n '.format(this.SubmitActionName, errorMessage.replace(/\<br\>/g, '\n').replace(/\&nbsp\;/g, ' ')));

      $a.HidePageLoader();

      this.PostState = 'failed';

    }.bind(this), 500);
  }



  /***************************************************************************************************************************************************/
  /***************************************************************************************************************************************************/
  /***                                                                                                        ****************************************/
  /***   ██████  ██    ██ ████████ ████████  ██████  ███    ██     ████████  █████  ███████ ██   ██ ███████   ****************************************/
  /***   ██   ██ ██    ██    ██       ██    ██    ██ ████   ██        ██    ██   ██ ██      ██  ██  ██        ****************************************/
  /***   ██████  ██    ██    ██       ██    ██    ██ ██ ██  ██        ██    ███████ ███████ █████   ███████   ****************************************/
  /***   ██   ██ ██    ██    ██       ██    ██    ██ ██  ██ ██        ██    ██   ██      ██ ██  ██       ██   ****************************************/
  /***   ██████   ██████     ██       ██     ██████  ██   ████        ██    ██   ██ ███████ ██   ██ ███████   ****************************************/
  /***                                                                                                        ****************************************/
  /***************************************************************************************************************************************************/
  /********************************************************************************************************************* Source63 *** button tasks ***/


   
  /**
   * Summary. Submit (Workflow button clicked)
   * @this    Class scope
   * @access  private
   */
  _print (ev)
  {
    if ($a.isEvent(ev)) $a.stopEvent(ev);
    //document.documentElement.classList.add('print');
    window.print();
  }


   
  /**
   * Summary. Submit (Workflow button clicked)
   * @this    Class scope
   * @access  private
   */
  _close (ev)
  {
    if ($a.isEvent(ev)) $a.stopEvent(ev);
    var templateId, instanceId, path, redirectWindow;
    if (document.referrer !== '')
    {
      if (window.opener === null)
      {
        path = document.referrer;
        if (window.location.hash) path += window.location.hash
        redirectWindow = window.open(path, '_self');
        redirectWindow.location;
        return;
      }
      window.close();
      return;
    }
    if (this.ViewType === 'Preview')
    {
      templateId = this.CleverForms.GetTemplateGuid();
      if (templateId)
      {
        path = this.CleverForms.DesignerPath + '?templateId=' + templateId;
        if (window.location.hash) path += window.location.hash
        redirectWindow = window.open(path, '_self');
        redirectWindow.location;
        return;
      }
    }
    if (this.ViewType === 'Form')
    {
      instanceId = this.CleverForms.GetInstanceGuid();
      if (instanceId)
      {
        path = this.CleverForms.InboxPath; // + '?instanceId=' + instanceId;
        if (window.location.hash) path += window.location.hash
        redirectWindow = window.open(path, '_self');
        redirectWindow.location;
        return;
      }
    }
  }



  /***************************************************************************************************************************************************/
  /***************************************************************************************************************************************************/
  /***                                                             ***********************************************************************************/
  /***   ██   ██ ███████ ██      ██████  ███████ ██████  ███████   ***********************************************************************************/
  /***   ██   ██ ██      ██      ██   ██ ██      ██   ██ ██        ***********************************************************************************/
  /***   ███████ █████   ██      ██████  █████   ██████  ███████   ***********************************************************************************/
  /***   ██   ██ ██      ██      ██      ██      ██   ██      ██   ***********************************************************************************/
  /***   ██   ██ ███████ ███████ ██      ███████ ██   ██ ███████   ***********************************************************************************/
  /***                                                             ***********************************************************************************/
  /***************************************************************************************************************************************************/
  /************************************************************************************************************************** Source63 *** helpers ***/



  /**
   * Summary. Sort items by Rank (order)
   * @this    Class scope
   * @access  private
   */
  _sortByRank (a, b)
  {
    if (a.Rank > b.Rank) return -1;
    if (a.Rank < b.Rank) return 1;
    return 0;
  }



  /***************************************************************************************************************************************************/
  /***************************************************************************************************************************************************/
  /***                                                                                  **************************************************************/
  /***   ████████ ███████ ███    ███ ██████  ██       █████  ████████ ███████ ███████   **************************************************************/
  /***      ██    ██      ████  ████ ██   ██ ██      ██   ██    ██    ██      ██        **************************************************************/
  /***      ██    █████   ██ ████ ██ ██████  ██      ███████    ██    █████   ███████   **************************************************************/
  /***      ██    ██      ██  ██  ██ ██      ██      ██   ██    ██    ██           ██   **************************************************************/
  /***      ██    ███████ ██      ██ ██      ███████ ██   ██    ██    ███████ ███████   **************************************************************/
  /***                                                                                  **************************************************************/
  /***************************************************************************************************************************************************/
  /************************************************************************************************************************ Source63 *** templates ***/



  /**
   * Summary. Define local HTML templates
   * @this    Class scope
   * @access  private
   */
  _templates ()
  {

    this.formStartTemplate = `
    <div class="form-starter hidden">
      <form action="/Inbox/Create" method="post" target="_blank">
      <input type="hidden" name="templateAndWorkflowIds" value="" />
      Or start <button type="submit">...</button> form.
      </form>
    <div>
    `;

    this.buttonTemplate = `
    <div class="button {Color}" data-type="{Type}">
      <icon class="icon-{Icon}"></icon>{Name}
    </div>
    `;

    this.buttonLinkTemplate = `
    <a href="{Path}" target="{Target}" class="button {Color}" data-type="{Type}">
      <icon class="icon-{Icon}"></icon>{Name}
    </a>
    `;

    this.buttonListTemplate = `
    <div class="button-list">
      <span>To</span>
      <div class="select">
        <select class="ui-has-autocomplete ui-autocomplete-force-top identity-list identity"></select>
      </div>
    </div>
    `;

    this.buttonSingleListTemplate = `
    <div class="button-list identity" data-guid="{guid}">
      <span>To</span>{user}
    </div>
    `;

    this.historyTemplate = `
    <span class=history-date">On <strong>{Date}</strong> at {Time},</span>
    <strong>{OriginatorName}</strong> selected <strong>{ActionTaken}</strong>
    <span class="history-to hidden"> to {AssigneeName}</span>
    <span class="history-comment hidden">, with comment: <em>{Comment}</em></span>
    `;

    this.historyCommentSimpleTemplate = `
    <div class="{ItemClass}">
      <div class="info"><span class="from">{From}</span> selected <span class="{ActionClass}">{Action}</span> to <span class="{ToClass}">{To}</span> <span class="date-time"><span class="date">{Date}</span> at <span class="time">{Time}</span></span></div>
      <div class="{CommentClass}">{Comment}</div>
    </div>
    `;

    this.historyCommentComplexTemplate = `
    <div class="{ItemClass}">
      <div class="info"><span>{Complex}</span><span class="date-time"><span class="date">{Date}</span> at <span class="time">{Time}</span></span></div>
      <div class="{CommentClass}">{Comment}</div>
    </div>
    `;

  }



};;
/**
 *
 * Summary.       Element Base Class.
 *
 * Description.   All shared functions and features of a CleverForm Element.
 *
 * @author        Ben King, benk at affinityteam.com, ben.king at source63.com, +64 21 2672729.
 *
 *
 * @since         16.06.2020
 * @class         ElementBase
 * @namespace     Affinity2018.Classes.Apps.CleverForms
 * @memberof      CleverForms
 * @constructs    Affinity2018.Classes.Apps.CleverForms.ElementBase
 *
 * @public
 */

if (!('Affinity2018' in window)) Affinity2018 = {};
if (!('Classes' in Affinity2018)) Affinity2018.Classes = {};
if (!('Apps' in Affinity2018.Classes)) Affinity2018.Classes.Apps = {};
if (!('CleverForms' in Affinity2018.Classes.Apps)) Affinity2018.Classes.Apps.CleverForms = {};
if (!('Elements' in Affinity2018.Classes.Apps.CleverForms)) Affinity2018.Classes.Apps.CleverForms.Elements = {};

if (!('Apps' in Affinity2018)) Affinity2018.Apps = {};
if (!('Elements' in Affinity2018.Apps)) Affinity2018.Apps.Elements = {};

Affinity2018.Classes.Apps.CleverForms.Elements.ElementBase = class extends Affinity2018.ClassEvents 
{
  _options()
  {
    // this.Config = null; // set by constructor

    this.Type = null;
    this.SectionName = null;
    this.Saved = false;
    this.Changed = true;
    this.Changes = [];
    this.Delete = false;
    this.IsNewElement = this.IsNewElement || false;

    this.Ready = false;

    this.Designer = false;

    this.DesignerNode = false;
    this.FormRowNode = false;
    this.FormNode = false;
    this.EditNode = false;

    this.BlankLabelSetToDefault = false;

    this.ConfigStringCheck = '';

    this.ConfigBackup = null;

    this.Plugins = {
      Address: '.ui-address',
      Autocompletes: '.ui-autocomplete',
      BankNumber: '.ui-banknumber',
      Calendars: '.ui-calendar',
      DrawPanel: '.ui-drawpanel',
      Numbers: '.nv',
      SelectLookups: '.ui-lookup',
      Strings: '.sv',
      TaxNumber: '.ui-taxnumber'
    };
  }

  constructor(config)
  {
    super();
    [

      'Hide',

      'SetSection',

      'BackupConfig', 'RestoreBackup',

      'SetDesignEditor', 'UnsetDesignEditor', 'GetFromDesignEditor',
      'RemoveDesignerElement',

      'InsertRow',
      'InsertEditForm', 'InsertEditExample', 'InsertFormRow',

      'SetFormRow', 'GetFromFormRow', 'SetFromValue',

      'SetPosted',
      'HasChanged', 'HasSaved',

      'ReturnChanges', 'CheckChanges',

      'CheckLabelOverflow',

      '_getFileIds', '_setupFileNode', '_fileResized', '_fileUploaded', '_fileDeleted', '_fileDeleteFailed', '_fileWidgetReady',

      '_listSourceChanged', '_gotNewSourceList', '_gotNewSourceListFail', '_listBuilderModified',

      '_options', '_templates'

    ].bindEach(this);
    this._options(true);
    this._templates();

    if (config && Affinity2018.isObject(config))
    {
      this.Config = Affinity2018.objectDeepMerge({}, config);
    }
    else
    {
      Affinity2018.ThrowError('No Config', 'critical', 'Form element has no config');
      return false;
    }

    if (Affinity2018.isEmptyObject(config)) return;

    this.CleverForms = Affinity2018.Apps.CleverForms.Default;
    this.Designer = Affinity2018.Apps.CleverForms.Designer !== undefined ? Affinity2018.Apps.CleverForms.Designer : false;

    this.Type = this.Config.Type;
    if (this.Config.Name)
    {
      this.UniqueName = this.Config.Name;
      this.Name = this.Config.Name;
      this.IsNewElement = false;
    }
    else
    {
      this.UniqueName = this.Type + '-' + $a.uuid();
      this.Name = this.UniqueName;
      this.Config.Name = this.Name;
      this.IsNewElement = true;
    }

    if (this.Type === 'Section') this.SectionName = this.Name;

    this.Rank = this.Config.Details.Rank;

    this.IsReadOnly = false;
    if (this.Config.Details.hasOwnProperty('IsReadOnly') && $a.isBool(this.Config.Details.IsReadOnly)) this.IsReadOnly = this.Config.Details.IsReadOnly;

    if (!this.DesignerNode && document.querySelector('.item-' + this.UniqueName)) this.DesignerNode = document.querySelector('.item-' + this.UniqueName);

    this.ItemSourcesTemplate = this.ItemSourcesTemplate.format({
      listLabel: $a.Lang.ReturnPath('generic.list_builder.list_label'),
      listCustom: $a.Lang.ReturnPath('generic.list_builder.custom_label'),
    });


    this.CleverForms.ShowInlineHidden = (node) => { this._showInlineHidden({ target: node }); };

  }


  /***************************************************************************************************************************************************/
  /***************************************************************************************************************************************************/
  /***                                                                                                                  ******************************/
  /***   ██████  ██    ██ ██████  ██      ██  ██████     ███    ███ ███████ ████████ ██   ██  ██████  ██████  ███████   ******************************/
  /***   ██   ██ ██    ██ ██   ██ ██      ██ ██          ████  ████ ██         ██    ██   ██ ██    ██ ██   ██ ██        ******************************/
  /***   ██████  ██    ██ ██████  ██      ██ ██          ██ ████ ██ █████      ██    ███████ ██    ██ ██   ██ ███████   ******************************/
  /***   ██      ██    ██ ██   ██ ██      ██ ██          ██  ██  ██ ██         ██    ██   ██ ██    ██ ██   ██      ██   ******************************/
  /***   ██       ██████  ██████  ███████ ██  ██████     ██      ██ ███████    ██    ██   ██  ██████  ██████  ███████   ******************************/
  /***                                                                                                                  ******************************/
  /***************************************************************************************************************************************************/
  /***************************************************************************************************************************************************/


  /**
   * Summary. ?
   * @this    Class scope
   * @access  private
   */
  Hide()
  {
    if (!this.DesignerNode) this.DesignerNode = document.querySelector('.item-' + this.UniqueName);
    if (this.DesignerNode) this.DesignerNode.classList.add('hidden');
    else console.log('hide what??? (' + this.UniqueName + ')');
  }


  /**
   * Summary. ?
   * @this    Class scope
   * @access  private
   */
  SetSection()
  {
    if (Affinity2018.Apps.CleverForms.Designer !== undefined) this.Designer = Affinity2018.Apps.CleverForms.Designer;
    if (!this.DesignerNode) this.DesignerNode = document.querySelector('.item-' + this.UniqueName);
    if (this.DesignerNode)
    {
      var section = this.Designer.GetElementSectionNode(this.DesignerNode);
      var sectionName = section ? section.dataset.name : false;
      if (sectionName && this.SectionName !== sectionName)
      {
        this.SectionName = sectionName;
        this.Changed = true;
      }
    }
  }


  /**
   * Summary. ?
   * @this    Class scope
   * @access  private
   */
  BackupConfig()
  {
    this.ConfigBackup = $a.jsonCloneObject(this.Config);
    return true;
  }


  /**
   * Summary. ?
   * @this    Class scope
   * @access  private
   */
  RestoreBackup()
  {
    if (this.ConfigBackup !== null) this.Config = $a.jsonCloneObject(this.ConfigBackup);
    this.ConfigBackup = null;
    return true;
  }


  /**
   * Summary. ?
   * @this    Class scope
   * @access  private
   */
  SetDesignEditor()
  {

    var label = this.Config.hasOwnProperty('Details') ? this._isNullOrEmpty(this.Config.Details.Label) ? this.Config.Label : this.Config.Details.Label : '';
    var helpText = this.Config.hasOwnProperty('Details') ? this.Config.Details.HelpText : null;

    if (label === '') label = this.Config.Label;

    this.PopupNode = document.querySelector('.cf-designer-element-popup');

    this.EditNode = document.querySelector('.cf-designer-element-popup');

    this.SearchViewNode = this.PopupNode.querySelector('.search');
    this.SettingsViewNode = this.PopupNode.querySelector('.settings');

    this.LabelNode = this.PopupNode.querySelector('.label-row');
    this.HelptextNode = this.SettingsViewNode.querySelector('.helptext-row');

    this.PreviewNode = this.PopupNode.querySelector('.example-template');
    this.PreviewToggleNode = this.PreviewNode.querySelector('.toggle-preview');
    this.PreviewBoxNode = this.PreviewNode.querySelector('.preview');

    this.TemplateNode = this.SettingsViewNode.querySelector('.edit-template');

    this.FiltersNode = this.SettingsViewNode.querySelector('.filters');
    this.FilterRadiosBoxNode = this.FiltersNode.querySelector('.radios');

    this.RequiredBoxNode = this.SettingsViewNode.querySelector('.edit-required');
    this.BackButtonNode = this.SettingsViewNode.querySelector('.button.back');

    if (!this.DesignerNode) this.DesignerNode = document.querySelector('.item-' + this.UniqueName);

    /* element edit template */

    this.TemplateNode.classList.add('hidden');
    if (this.HtmlEditTemplate && this.HtmlEditTemplate.trim() !== '')
    {
      var templateHtml = this.HtmlEditTemplate.trim().format({
        filterlabel: $a.Lang.ReturnPath('app.cf.design_items.filter_label'),
        editButtonLabel: $a.Lang.ReturnPath('app.cf.design_items.filter_edit_button_label'),
        groupNameLabel: $a.Lang.ReturnPath('app.cf.design_items.filter-edit-name-label'),
        groupDescriptionLabel: $a.Lang.ReturnPath('app.cf.design_items.filter-edit-description-label'),
        downloadGroupCSVTooltip: $a.Lang.ReturnPath('app.cf.design_items.filter_csv_download_tooltip'),
        uploadGroupCSVTooltip: $a.Lang.ReturnPath('app.cf.design_items.filter_csv_upload_tooltip'),
        linkmessage: $a.Lang.ReturnPath('app.cf.design_items.link_message'),
        selectlabel: $a.Lang.ReturnPath('app.cf.design_items.link_select_label'),
        sectionHidetitleLable: $a.Lang.ReturnPath('app.cf.design_items.section_hide_title_lebel'),
        sectionCollapseLable: $a.Lang.ReturnPath('app.cf.design_items.section_collapse_lebel'),
        listLabel: $a.Lang.ReturnPath('generic.list_builder.list_label'),
        listCustom: $a.Lang.ReturnPath('generic.list_builder.custom_label'),
      });
      this.TemplateNode.innerHTML = templateHtml;
      this.TemplateNode.classList.remove('hidden');
      if (this.TemplateNode.querySelector('.show-hidden'))
      {
        this.TemplateNode.querySelector('.show-hidden').addEventListener('click', this._showInlineHidden);
      }
    }

    /* label / help text */

    this.LabelNode.classList.add('hidden');
    this.HelptextNode.classList.add('hidden');
    if (this.Config && this.Config.ViewType !== 'Layout')
    {
      this.LabelNode.classList.remove('hidden');
      this.HelptextNode.classList.remove('hidden');
    }

    /* label for link element */

    if (this.Config && this.Config.Type === 'Link')
    {
      this.LabelNode.classList.remove('hidden');
    }

    /* filters block */

    this.FilterRadiosBoxNode.classList.add('hidden');
    this.BackButtonNode.classList.add('hidden');
    if (this.Config.Type === 'AffinityField')
    {
      this.FilterRadiosBoxNode.classList.remove('hidden');
      this.BackButtonNode.classList.remove('hidden');
    }

    /* required */

    this.RequiredBoxNode.classList.add('hidden');
    if (this.Config.Type !== 'Section' && this.Config.Details.hasOwnProperty('Required'))
    {
      this.RequiredBoxNode.classList.remove('hidden');
      this.RequiredBoxNode.querySelector('input').checked = false;
      this.RequiredBoxNode.querySelector('input').removeAttribute('checked');
      if (this.Config.Details.Required) this.RequiredBoxNode.querySelector('input').checked = true;
    }

    /* preview */

    this.PreviewNode.classList.add('hidden');
    this.PreviewBoxNode.classList.add('hide');
    this.PreviewBoxNode.innerHTML = '';
    this.PreviewToggleNode.innerHTML = 'Show Example';
    if (this.hasOwnProperty('HtmlEditExampleTemplate') && this.HtmlEditExampleTemplate.trim() !== '')
    {
      this.PreviewBoxNode.innerHTML = this.HtmlEditExampleTemplate;
      this.PreviewNode.classList.remove('hidden');
    }

    /* file widget */

    this.FileNode = this.TemplateNode.querySelector('input[type="file"]') ? this.TemplateNode.querySelector('input[type="file"]') : null;
    this.FileWidget = null;
    if (this.FileNode !== null)
    {
      this._setupFileNode();
      if (this.FileNode.hasOwnProperty('widgets') && this.FileNode.widgets.hasOwnProperty('FileUpload')) this._fileWidgetReady();
      else this.FileNode.addEventListener('widgetReady', this._fileWidgetReady);
    }

    /* headers and titles */

    this.SettingsViewNode.querySelector('h3').innerHTML = this.Config.Label;
    this.SettingsViewNode.querySelector('p').innerHTML = this.Config.Description;
    this.SettingsViewNode.querySelector('input.label').value = label;
    this.SettingsViewNode.querySelector('input.helptext').value = helpText !== null ? helpText : '';

    /* items source list */

    this.ListSourceSelectNode = this.TemplateNode.querySelector('select.list-source') ? this.TemplateNode.querySelector('select.list-source') : null;
    if (this.ListSourceSelectNode !== null)
    {
      Affinity2018.Apps.Plugins.ListBuilder.Reset();

      this.customList = [];
      if ($a.isPropObject(this.Config.Details, 'ItemSource') && $a.isPropArray(this.Config.Details.ItemSource, 'Items')) this.customList = this.Config.Details.ItemSource.Items;
      var option;
      this.CleverForms.TableTypes.forEach(function (pair)
      {
        if (
          pair
          && pair.hasOwnProperty('Key')
          && pair.hasOwnProperty('Value')
          && pair.Key.toString().trim() !== ''
          && pair.Value.toString().trim() !== ''
          && !pair.Value.contains('DirectReport')
          && !pair.Value.contains('IndirectReport')
        )
        {
          option = document.createElement('option');
          option.value = pair.Value.trim();
          option.dataset.key = pair.Key.toString().trim();
          if (pair.hasOwnProperty('Display')) option.innerHTML = pair.Display;
          else option.innerHTML = pair.Value.toString().trim().splitCamelCase();
          
          if (
            this.Config.Details.ItemSource.ItemSourceType === 'Affinity'
            && this.Config.Details.ItemSource.TableType !== null
            && (
              this.Config.Details.ItemSource.TableType === pair.Key - 1
              || this.Config.Details.ItemSource.TableType.toString().toLowerCase().trim() === pair.Value.toString().toLowerCase().trim()
            )
          )
          {
            option.selected = 'selected';
          }
          this.ListSourceSelectNode.appendChild(option);
        }
      }.bind(this));
      if ([1, 'Custom'].contains(this.Config.Details.ItemSourceType)) this.ListSourceSelectNode.value = 'custom';

      if (
        this.Config.hasOwnProperty('Display')
        && this.Config.Display.hasOwnProperty('LastCustomList')
        && this.Config.Display.LastCustomList
      )
      {
        Affinity2018.Apps.Plugins.ListBuilder.SetBackup(this.Config.Display.LastCustomList);
      }
      else
      {
        Affinity2018.Apps.Plugins.ListBuilder.SetBackup([]);
      }

      this.ListBuilt = false;

      Affinity2018.Apps.Plugins.ListBuilder.Render(this.TemplateNode, this.customList, function ()
      {
        // do this when list builder has rendered ...
        this.ListSourceSelectNode.removeEventListener('change', this._listSourceChanged);
        this.ListSourceSelectNode.addEventListener('change', this._listSourceChanged);
        Affinity2018.Apps.Plugins.ListBuilder.ModifiedCallback = this._listBuilderModified;
        if (this.Config.Details.ItemSourceType !== 1 /* 1 = custom */) this._listSourceChanged();
        this.ListBuilt = true;
      }.bind(this));

      this.PopupNode.classList.add('large', 'has-list');
    }

    /**/

    return true;
  }


  /**
   * Summary. ?
   * @this    Class scope
   * @access  private
   */
  UnsetDesignEditor()
  {
    if (this.FileNode !== null && this.FileWidget !== null)
    {
      this.FileNode.removeEventListener('widgetReady', this._fileWidgetReady);
      this.FileWidget.removeEventListener('postSuccess', this._fileUploaded);
      this.FileWidget.removeEventListener('deleteSuccess', this._fileDeleted);
      this.FileWidget.removeEventListener('deleteFailed', this._fileDeleteFailed);
      this.FileWidget.Destroy();
    }

    if (this.ListSourceSelectNode !== null)
    {
      Affinity2018.Apps.Plugins.ListBuilder.Reset();
    }

    if (this.TemplateNode)
    {
      for (var pluginName in this.Plugins)
      {
        if (Affinity2018.Apps.Plugins.hasOwnProperty(pluginName) && this.TemplateNode.querySelector(this.Plugins[pluginName]))
        {
          this.TemplateNode.querySelectorAll(this.Plugins[pluginName]).forEach(function (node)
          {
            Affinity2018.Apps.Plugins[pluginName].Remove(node);
          });
        }
      }
    }

    return true;
  }


  /**
   * Summary. ?
   * @this    Class scope
   * @access  private
   */
  GetFromDesignEditor(saveOnChanges) // saveOnChanges = true
  {
    saveOnChanges = $a.paramOrDefault(saveOnChanges, true, 'boolean');

    this.PopupNode = document.querySelector('.cf-designer-element-popup');
    this.SettingsNode = document.querySelector('.cf-designer-element-popup');

    if (this.Config.hasOwnProperty('Details') && this.Config.Details.hasOwnProperty('Label')) this.Config.Details.Label = this.SettingsNode.querySelector('input.label').value.trim();

    this.BlankLabelSetToDefault = false;
    if (this.Config.Details.Label.trim() === '')
    {
      this.BlankLabelSetToDefault = true;
      this.Config.Details.Label = this.Config.Label;
    }

    if (this.Config.hasOwnProperty('Details') && this.Config.Details.hasOwnProperty('HelpText'))
    {
      if (this.SettingsNode.querySelector('input.helptext').value.trim() !== '') this.Config.Details.HelpText = this.SettingsNode.querySelector('input.helptext').value.trim();
      else this.Config.Details.HelpText = null;
    }

    if (this.Config.Details.hasOwnProperty('Required'))
    {
      this.Config.Details.Required = this.RequiredBoxNode.querySelector('input').checked;
    }

    if (this.ListSourceSelectNode !== null)
    {
      this.Config.Details.ItemSource.TableType = this.TemplateNode.querySelector('.list-source').value;
      this.Config.Details.ItemSource.ItemSourceType = ['0', 0].contains(this.Config.Details.ItemSource.TableType.toLowerCase().trim()) ? 'Custom' : 'Affinity';
      var data = Affinity2018.Apps.Plugins.ListBuilder.SanatiseData();
      var backup = Affinity2018.Apps.Plugins.ListBuilder.GetBackup();
      if (!this.Config.hasOwnProperty('Display')) this.Config.Display = {};
      if (this.Config.Details.ItemSource.ItemSourceType !== 'Custom')
      {
        this.Config.Details.ItemSource.Items = null;
        this.Config.Display.LastCustomList = backup;
        this.Config.Details.ItemSource.CustomList = backup;
      }
      else
      {
        this.Config.Details.ItemSource.Items = data;
        this.Config.Display.LastCustomList = data;
        this.Config.Details.ItemSource.CustomList = data;
      }
    }

    if (this.DesignerNode)
    {
      this.DesignerNode.querySelector('.label').innerHTML = this.Config.Details.Label;
    }

    if (this.FileNode !== null && this.FileWidget)
    {
      var files = this.FileWidget.GetFiles();

      var fileNames = [];
      var fileIds = [];

      files.forEach(function (fileData)
      {
        fileNames.push(fileData.FileName);
        fileIds.push(fileData.FileId);
      });

      this.Config.Details.FileName = fileNames.join(',');
      this.Config.Details.FileId = fileIds.join(',');

      if (this.FileWidget.HasUnsavedFiles())
      {
        this.FileWidget.PostFiles();
      }
    }

    if (!this.Config.hasOwnProperty('Name')) this.Config.Name = this.Name;
    if (!this.Config.Details.hasOwnProperty('Rank')) this.Config.Details.Rank = -99;

    if (!this.Saved) this.Changed = true;

    this.CheckChanges(saveOnChanges);

    return this.Config;
  }


  /**/


  /**
   * Summary. ?
   * @this    Class scope
   * @access  private
   */
  RemoveDesignerElement()
  {
    var node = document.querySelector('.item-' + this.UniqueName);
    if (node)
    {
      // TODO: do any removal cleanup here

      node.parentNode.removeChild(node);

      return true;
    }
    return false
  }


  /**/


  /**
   * Summary. ?
   * @this    Class scope
   * @access  private
   */
  SetFormRow(target, html)
  {
    
    var isReadOnly = this.Config.Details.IsReadOnly;
    var isHidden = false;
    if (this.Config.Type === 'AffinityField' && this.Config.Details.AffinityField.Mode === this.CleverForms.AffnityFieldModeTypes.Display.Enum) isReadOnly = true;
    if (this.Config.Type === 'AffinityField' && this.Config.Disabled ) isReadOnly = true;
    if (this.Config.Type === 'AffinityField' && this.Config.Hidden) isHidden = true;

    this.IsReadOnly = isReadOnly;
    this.IsHidden = isHidden;

    var tempNode = document.createElement('div');
    tempNode.innerHTML = html;
    this.FormRowNode = tempNode.querySelector('div');
    this.FormRowNode.dataset.name = this.UniqueName;
    this.FormRowNode.dataset.type = this.Config.Type;
    this.FormRowNode.controller = this;
    target.appendChild(this.FormRowNode);
    tempNode = null;

    /**/

    this.FormRowNode.classList.add('row-' + this.Config.Type.toLowerCase().trim().replace(/ /g, '-'));

    /* is hidden */

    if (isHidden)  this.FormRowNode.classList.add('hidden');

    /**/

    var tooltips = [], helpNode, requiredNode;
    if ($a.isPropObject(this.Config, 'Details'))
    {
      if ($a.isPropString(this.Config.Details, 'HelpText') && this.Config.Details.HelpText.trim() !== '')
      {
        tooltips.push(this.Config.Details.HelpText.trim());
      }
      if (this.Config.Details.Required)
      {
        if ($a.isPropString(this.Config.Details, 'ValidationString') && this.Config.Details.ValidationString.trim() !== '')
        {
          tooltips.push(this.Config.Details.ValidationString);
        }
        else
        {
          tooltips.push(this.Config.Details.Label + ' is required');
        }
      }
    }

    if (this.FormRowNode.querySelector('label'))
    {
      this.FormRowNode.querySelector('label').innerHTML = this.Config.Details.Label;

      if ($a.isPropString(this.Config.Details, 'HelpText') && this.Config.Details.HelpText.trim() !== '')
      {
        helpNode = document.createElement('span');
        helpNode.className = 'help icon-help-round';
        helpNode.dataset.tooltip = this.Config.Details.HelpText.trim();
        helpNode.dataset.tooltipDir = 'top-right';
        helpNode.classList.add('ui-has-tooltip');
        this.FormRowNode.classList.add('hashelp');
        this.FormRowNode.querySelector('label').appendChild(helpNode);
      }

      if (this.Config.Details.Required && !isReadOnly)
      {
        var className = 'required-message required';
        if (document.querySelector('.required-message .required')) className = document.querySelector('.required-message .required').className;
        requiredNode = document.createElement('span');
        requiredNode.className = className;
        if ($a.isPropString(this.Config.Details, 'ValidationString') && this.Config.Details.ValidationString.trim() !== '')
        {
          requiredNode.dataset.tooltip = this.Config.Details.ValidationString;
        }
        else
        {
          requiredNode.dataset.tooltip = this.FormRowNode.querySelector('label').innerText.trim() + ' is required';
        }
        requiredNode.dataset.tooltipDir = 'top-right';
        requiredNode.classList.add('ui-has-tooltip');
        this.FormRowNode.classList.add('required');
        this.FormRowNode.querySelector('label').appendChild(requiredNode);

        if (this.Config.Type && this.Config.Type === 'Text' && this.FormRowNode.querySelector('input'))
        {
          this.FormRowNode.querySelector('input').classList.add('ui-has-sentence');
        }
        if (this.Config.Type && this.Config.Type === 'Memo' && this.FormRowNode.querySelector('textarea'))
        {
          this.FormRowNode.querySelector('textarea').classList.add('ui-has-sentence');
        }

      }

      if (isReadOnly)
      {
        if (this.FormRowNode.querySelector('input')) this.FormRowNode.querySelector('input').disabled = true;
      }

      this.CheckLabelOverflow(this.FormRowNode.querySelector('label'));
    }
    else
    {
      if (tooltips.length > 0)
      {
        this.FormRowNode.dataset.tooltip = tooltips.join('<br />');
        this.FormRowNode.dataset.tooltipDir = 'top-right'; // top
        this.FormRowNode.classList.add('ui-has-tooltip');
      }
    }

    /* file widget */

    this.FileNode = this.FormRowNode.querySelector('input[type="file"]') ? this.FormRowNode.querySelector('input[type="file"]') : null;
    this.FileWidget = null;
    if (this.FileNode !== null)
    {
      this._setupFileNode();
      if (this.FileNode.hasOwnProperty('widgets') && this.FileNode.widgets.hasOwnProperty('FileUpload')) this._fileWidgetReady();
      else this.FileNode.addEventListener('widgetReady', this._fileWidgetReady);
    }

    /**/

    return this.FormRowNode;
  }


  /**
   * Summary. ?
   * @this    Class scope
   * @access  private
   */
  GetFromFormRow()
  {
    this.FormData = {
      Name: this.Name
    };
    if (this.Config.Type === 'Section')
    {
      this.FormData.Elements = [];
    }
    else
    {
      this.FormData.ElementType = this.Config.Type;
      this.FormData.Value = '';
    }
    return this.FormData;
  }


  /**
   * Summary. ?
   * @this    Class scope
   * @access  private
   */
  SetFromValue(value, fromKeyChange)
  {
    fromKeyChange = fromKeyChange === undefined ? false : fromKeyChange;
    value = !$a.isString(value) ? value.toString() : value.trim();
    var form = this.CleverForms.hasOwnProperty('Form') ? this.CleverForms.Form : null;
    if (this.FormRowNode)
    {
      var input = false;
      if (this.FormRowNode.querySelector('input[type="text"]')) input = this.FormRowNode.querySelector('input[type="text"]');
      if (this.FormRowNode.querySelector('input[type="number"]')) input = this.FormRowNode.querySelector('input[type="number"]');
      if (input)
      {
        input.value = value;
        var widgets = input.hasOwnProperty('widgets') ? input.widgets : false;
        var widget = false;
        widget = widgets && widgets.hasOwnProperty('Number') ? widgets.Number : widget;
        widget = widgets && widgets.hasOwnProperty('String') ? widgets.String : widget;
        if (widget)
        {
          var doValidate = fromKeyChange ? false : true;
          doValidate = fromKeyChange && form.PostState !== 'none' ? true : doValidate;
          if (doValidate) widget.IsValid();
          Affinity2018.Apps.CleverForms.Form.ResizeSection(this.FormRowNode);
        }
      }
    }
  }


  /**/


  /**
   * Summary. ?
   * @this    Class scope
   * @access  private
   */
  HasChanged()
  {
    return this.CheckChanges(false);
  }


  /**
   * Summary. ?
   * @this    Class scope
   * @access  private
   */
  HasSaved()
  {
    return this.Saved;
  }


  /**/


  /**
   * Summary. ?
   * @this    Class scope
   * @access  private
   */
  SetPosted()
  {
    this.Saved = true;
    this.Changed = false;
  }


  /**/


  /**
   * Summary. ?
   * @this    Class scope
   * @access  private
   */
  ReturnChanges()
  {
    this.Changes = [];

    var currentConfig = $a.jsonCloneObject(this.Config),
      lastConfig = this.ConfigStringCheck.trim() !== '' ? JSON.parse(this.ConfigStringCheck) : {},
      configLines, lastConfigLines, allLines, filteredLines, uniqueLines,
      doubles, l, from, to, change;

    if (this.Config.Type === 'Section')
    {
      currentConfig.Elements = [];
      if (lastConfig !== {}) lastConfig.Elements = [];
    }

    currentConfig = this.CleverForms.OrderObject(currentConfig);
    lastConfig = this.CleverForms.OrderObject(lastConfig);

    if (Object.keys(lastConfig).length === 0) // no 'lastConfig' 'cos is new
    {
      return ['New Element'];
    }

    var cleanLines = function (lines)
    {
      return lines.filter(function (a)
      {
        var returnIF =
          a.trim() !== '{'
          && a.trim() !== '}'
          && a.trim() !== '},'
          && a.trim() !== '['
          && a.trim() !== ']'
          && a.trim() !== '],'
          && a.trim() !== ''
          && !a.trim().endsWith(': {')
          && !a.trim().endsWith(': [')
          ;
        return returnIF;
      });
    };

    if (JSON.stringify(currentConfig) !== JSON.stringify(lastConfig))
    {
      configLines = JSON.stringify(currentConfig, null, 2).trim().split('\n');
      lastConfigLines = JSON.stringify(lastConfig, null, 2).trim().split('\n');

      allLines = configLines.concat(lastConfigLines);
      filteredLines = cleanLines(allLines);
      uniqueLines = filteredLines.unique();

      doubles = [];
      for (l = 0; l < uniqueLines.length; l++)
      {
        if (configLines.contains(uniqueLines[l]) && lastConfigLines.contains(uniqueLines[l])) { }
        else doubles.push(uniqueLines[l].replace(/,/g, '').trim());
      }

      for (l = 0; l < doubles.length / 2; l++)
      {
        from = doubles[l + doubles.length / 2];
        to = doubles[l];
        change = ($a.isString(from) ? from : '(not set)') + ' -> ' + to;
        if (!this.Changes.contains(change)) this.Changes.push(change);
      }

      if (this.Config.Type === 'Section' && this.Changes.length === 0) // check workflows again
      {
        var sectionWorkflows = currentConfig.Details.SectionWorkflowVisibilitySettings.sort();
        var lastSectionWorkflows = lastConfig.Details.SectionWorkflowVisibilitySettings.sort();
        var workflows = {}, lastWorkflows = {}, w, wo;
        for (w = 0; w < sectionWorkflows.length; w++)
        {
          wo = this.CleverForms.OrderObject(sectionWorkflows[w]);
          workflows[wo.WorkflowDefinitionId] = {
            name: wo.WorkflowDefinitionName,
            lines: cleanLines(JSON.stringify(wo, null, 2).trim().split('\n'))
          };
        }
        for (w = 0; w < lastSectionWorkflows.length; w++)
        {
          wo = this.CleverForms.OrderObject(lastSectionWorkflows[w]);
          lastWorkflows[wo.WorkflowDefinitionId] = {
            name: wo.WorkflowDefinitionName,
            lines: cleanLines(JSON.stringify(wo, null, 2).trim().split('\n'))
          };
        }
        if (Object.keys(workflows).join(",") !== Object.keys(lastWorkflows).join(","))
        {
          change = "Workflow config changed";
          if (!this.Changes.contains(change)) this.Changes.push(change);
        }
        else
        {
          var keys = Object.keys(workflows);
          for (w = 0; w < keys.length; w++)
          {
            var key = keys[w];
            for (var l = 0; l < workflows[key].lines.length; l++)
            {
              var l1 = workflows[key].lines[l].trim();
              var l2 = lastWorkflows[key].lines[l].trim();
              if (l1 !== l2)
              {
                from = "(" + lastWorkflows[key].name + ") " + l2;
                to = l1;
                change = "Workflow " + from + ' -> ' + to;
                if (!this.Changes.contains(change)) this.Changes.push(change);
              }
            }
          }
        }
      }
    }
    return this.Changes;
  }


  /**
   * Summary. ?
   * @this    Class scope
   * @access  private
   */
  CheckChanges(saveOnChange)
  {
    saveOnChange = $a.paramOrDefault(saveOnChange, true);
    return this._checkChanges(saveOnChange);
  }


  /***************************************************************************************************************************************************/
  /***************************************************************************************************************************************************/
  /***                                                                                                                           *********************/
  /***   ██████  ██████  ██ ██    ██  █████  ████████ ███████     ███    ███ ███████ ████████ ██   ██  ██████  ██████  ███████   *********************/
  /***   ██   ██ ██   ██ ██ ██    ██ ██   ██    ██    ██          ████  ████ ██         ██    ██   ██ ██    ██ ██   ██ ██        *********************/
  /***   ██████  ██████  ██ ██    ██ ███████    ██    █████       ██ ████ ██ █████      ██    ███████ ██    ██ ██   ██ ███████   *********************/
  /***   ██      ██   ██ ██  ██  ██  ██   ██    ██    ██          ██  ██  ██ ██         ██    ██   ██ ██    ██ ██   ██      ██   *********************/
  /***   ██      ██   ██ ██   ████   ██   ██    ██    ███████     ██      ██ ███████    ██    ██   ██  ██████  ██████  ███████   *********************/
  /***                                                                                                                           *********************/
  /***************************************************************************************************************************************************/
  /***************************************************************************************************************************************************/


  /**
   * Summary. ?
   * @this    Class scope
   * @access  private
   */
  _getFileIds ()
  {
    var fileIds;

    if (Affinity2018.Apps.CleverForms.Designer === undefined)
      fileIds = this.Config.Details.Value == null ? [] : $a.isStringifiedObject(this.Config.Details.Value) ? $a.stringToObject(this.Config.Details.Value) : this.Config.Details.Value;
    else
      fileIds = [this.Config.Details.FileId];

    if ($a.isString(fileIds) && fileIds.contains(',')) fileIds = fileIds.split(',');
    if ($a.isString(fileIds) && !fileIds.contains(',')) fileIds = [fileIds];
    if (!$a.isArray(fileIds)) fileIds = [];
    return fileIds;

    /*
    var fileIds = $a.isPropInt(this.Config.Details, 'FileId') || $a.isPropString(this.Config.Details, 'FileId') ? this.Config.Details.FileId.toString().trim() : '';
    if (fileIds === '' && $a.isPropString(this.Config.Details, 'Value') && this.Config.Details.Value.trim() !== '') fileIds = this.Config.Details.Value.trim();
    fileIds = $a.isString(fileIds) && fileIds.startsWith(',') ? fileIds.substring(1) : fileIds;
    fileIds = $a.isString(fileIds) && fileIds.endsWith(',') ? fileIds.substring(0, fileIds.length - 1) : fileIds;
    if ($a.isStringifiedObject(fileIds)) fileIds = $a.stringToObject(fileIds);
    else fileIds = [fileIds];

    var fileNames = $a.isPropString(this.Config.Details, 'FileName') ? this.Config.Details.FileName.toString().trim() : '';
    fileNames = $a.isString(fileNames) && fileNames.startsWith(',') ? fileNames.substring(1) : fileNames;
    fileNames = $a.isString(fileNames) && fileNames.endsWith(',') ? fileNames.substring(0, fileNames.length - 1) : fileNames;
    if ($a.isStringifiedObject(fileNames)) fileNames = $a.stringToObject(fileNames);
    else fileNames = [fileNames];
    */
  }


  /**
   * Summary. ?
   * @this    Class scope
   * @access  private
   */
  _setupFileNode()
  {
    if (this.FileNode)
    {
      var fileIds = this._getFileIds();

      this.FileNode.dataset.fileIds = fileIds.removeEmpty().removeDuplicates().join(',');
      this.FileNode.dataset.fileNames = [];

      this.FileNode.dataset.getApi = this.CleverForms.FileGetApi;
      this.FileNode.dataset.getIdParam = 'fileIds';
      $a.setObjectToDataset(this.FileNode, 'getParams', { fileIds: [] });
      
      this.FileNode.dataset.getInfoApi = this.CleverForms.FileGetInfoApi;
      this.FileNode.dataset.getInfoIdParam = 'fileIds';
      $a.setObjectToDataset(this.FileNode, 'getInfoParams', { fileIds: [] });

      this.FileNode.dataset.downloadApi = this.CleverForms.FileGetApi;
      this.FileNode.dataset.downloadIdParam = 'documentId';
      $a.setObjectToDataset(this.FileNode, 'downloadParams', { documentId: '' });

      this.FileNode.dataset.postApi = false;
      $a.setObjectToDataset(this.FileNode, 'postParams', { fileTag: this.CleverForms.GetTemplateGuid() === false ? this.CleverForms.GetInstanceGuid() : this.CleverForms.GetTemplateGuid(), questionName: this.Config.Name, securityLevel: this.Config.Details.SecurityLevel })

      if (Affinity2018.Apps.CleverForms.Designer === undefined)
      {
        this.FileNode.dataset.deleteApi = this.CleverForms.FileDeleteApi;
        this.FileNode.dataset.deleteIdParam = 'fileId';
        $a.setObjectToDataset(this.FileNode, 'deleteParams', { fileId: [], instanceId: this.CleverForms.GetInstanceGuid(), questionName: this.Config.Name });
      }
      else
      {
        this.FileNode.dataset.deleteApi = this.CleverForms.FileDeleteApi;
        this.FileNode.dataset.deleteIdParam = 'fileId';
        $a.setObjectToDataset(this.FileNode, 'deleteParams', { fileId: [] });
      }
      
      this.FileNode.dataset.allowMultiple = false;
      if ($a.isPropBool(this.Config.Details, 'AllowMultiple'))
      {
        this.FileNode.dataset.allowMultiple = this.Config.Details.AllowMultiple;
      }

      if ($a.isPropString(this.Config.Details, 'RestrictTypes') && Affinity2018.FileTypeGroupData.hasOwnProperty(this.Config.Details.RestrictTypes))
      {
        this.FileNode.dataset.allowTypes = Affinity2018.FileTypeGroupData[this.Config.Details.RestrictTypes].Name;
      }

    }
  }


  /**
   * Summary. ?
   * @this    Class scope
   * @access  private
   */
  _fileUploaded (ev)
  {
    var uploadIds = [], saveIds = [], i;

    if (ev && 'detail' in ev && 'dispatchObject' in ev.detail)
    {
      uploadIds = ev.detail.dispatchObject.FileId;
      if ($a.isString(uploadIds)) uploadIds = uploadIds.split(',');
    }
    
    uploadIds = uploadIds.map(function (x) { return x + ''; }); // stringify ids
    //uploadIds = uploadIds.removeDuplicates().removeEmpty();

    if (this.CleverForms.hasOwnProperty('Designer') && this.Config.Details.FileId !== null && this.Config.Details.FileId !== '') saveIds = this.Config.Details.FileId.split(',');
    if (this.CleverForms.hasOwnProperty('Form')) saveIds = this.Config.Details.Value;
    if ($a.isString(saveIds))
    {
      saveIds = saveIds.split(',');
      saveIds = saveIds.map(function (x) { return x + ''; }); // stringify ids
      //saveIds = saveIds.removeDuplicates().removeEmpty();
    }
    saveIds = saveIds.concat(uploadIds).removeDuplicates().removeEmpty();

    if (this.CleverForms.hasOwnProperty('Designer'))
    {
      this.Config.Details.FileId = saveIds.join(',');
      this.CleverForms.Designer.Save([this.DesignerNode]);
    }
    if (this.CleverForms.hasOwnProperty('Form'))
    {
      this.Config.Details.Value = saveIds;
      this.CleverForms.Form.ResizeSection(this.FormRowNode);
    }
  }

  /**
   * Summary. ?
   * @this    Class scope
   * @access  private
   */
  _fileDeleted (ev)
  {
    var deletedIds = [], saveIds, i;

    if (ev && 'detail' in ev && 'dispatchObject' in ev.detail)
    {
      deletedIds = ev.detail.dispatchObject.FileId;
      if ($a.isString(deletedIds)) deletedIds = deletedIds.split(',');
    }
    
    deletedIds = deletedIds.map(function (x) { return x + ''; });
    deletedIds = deletedIds.removeDuplicates().removeEmpty();

    if (this.CleverForms.hasOwnProperty('Designer')) saveIds = this.Config.Details.FileId.split(',');
    if (this.CleverForms.hasOwnProperty('Form')) saveIds = this.Config.Details.Value;
    if ($a.isString(saveIds)) saveIds = saveIds.split(',');
    
    saveIds = saveIds.map(function (x) { return x + ''; });
    saveIds = saveIds.removeDuplicates().removeEmpty();

    for (i = 0; i < deletedIds.length; i++)
    {
      if (saveIds.contains(deletedIds[i])) saveIds.splice(saveIds.indexOf(deletedIds[i]), 1);
    }

    if (this.CleverForms.hasOwnProperty('Designer'))
    {
      this.Config.Details.FileId = saveIds.join(',');
      this.CleverForms.Designer.Save([this.DesignerNode]);
    }

    if (this.CleverForms.hasOwnProperty('Form'))
    {
      this.Config.Details.Value = saveIds;
      this.CleverForms.Form.ResizeSection(this.FormRowNode);
    }

  }
  /**
   * Summary. ?
   * @this    Class scope
   * @access  private
   */
  _fileDeleteFailed(ev)
  {
    var message = 'Oops! Something went wrong deleting this file.';
    if (ev && 'detail' in ev && 'Success' in ev.detail && !ev.detail.Success) message = 'You are not allowed to delete this file.';
    $a.HidePageLoader();
    Affinity2018.Dialog.Show({
      message: message,
      showCancel: false,
      buttons: {
        ok: {
          text: 'Ok',
        }
      }
    });
  }
  /**
   * Summary. ?
   * @this    Class scope
   * @access  private
   */
  _fileResized ()
  {
    if (this.CleverForms.hasOwnProperty('Form'))
    {
      this.CleverForms.Form.ResizeSection(this.FormRowNode);
    }
  }


  /**
   * Summary. ?
   * @this    Class scope
   * @access  private
   */
  _fileWidgetReady ()
  {
    if (this.FileNode !== null)
    {
      this.FileWidget = this.FileNode.widgets.FileUpload;
      if (this.FileWidget)
      {
        this.FileWidget.PostApi = this.CleverForms.FilePostApi;
        this.FileWidget.addEventListener('resized', this._fileResized);
        this.FileWidget.addEventListener('postSuccess', this._fileUploaded);
        this.FileWidget.addEventListener('deleteSuccess', this._fileDeleted);
        this.FileWidget.addEventListener('deleteFailed', this._fileDeleteFailed);
      }
    }
  }


  /**
   * Summary. ?
   * @this    Class scope
   * @access  private
   */
  _showInlineHidden(ev)
  {
    var node = ev.target.classList.contains('show-hidden') ? ev.target : ev.target.closest('.show-hidden');
    if (
      node.dataset.hiddenTarget 
      && node.dataset.hiddenTargetClass 
      && node.dataset.hiddenTargetLabels
      && node.closest(node.dataset.hiddenTarget)
    )
    {
      var labels = node.dataset.hiddenTargetLabels.split(',');
      var target = node.closest(node.dataset.hiddenTarget);
      if (target.classList.contains(node.dataset.hiddenTargetClass))
      {
        target.classList.remove(node.dataset.hiddenTargetClass);
        if (labels.length >= 2) node.innerHTML = labels[0].trim();
        return;
      }
      target.classList.add(node.dataset.hiddenTargetClass);
      if (labels.length >= 2) node.innerHTML = labels[1].trim();

      if (target.querySelector('label') && target.closest('.scroller'))
      {
        let parentNode = target.closest('.scroller');
        let childNode = target.querySelector('label');
        let parent = parentNode.getBoundingClientRect();
        let child = childNode.getBoundingClientRect();
        //let scroll = child.top - parent.top;
        let scroll = (child.top - parent.top) + parentNode.scrollTop;
        let start = null;
        let lasttime = null;
        let done = false;
        let doscroll = (timestamp) =>
        {
          if (start === null) start = timestamp;
          let elapsed = timestamp - start;
          if (lasttime !== timestamp)
          {
            let newscroll = Math.min(2 * elapsed, scroll);
            target.closest('.scroller').scrollTop = newscroll;
            if (newscroll === scroll) done = true;
          }
          if (elapsed < 2000)
          {
            lasttime = timestamp;
            if (!done) window.requestAnimationFrame(doscroll);
          }
        };
        window.requestAnimationFrame(doscroll);
      }
    }
  }

  /***************************************************************************************************************************************************/
  /***************************************************************************************************************************************************/
  /***                                                                                         *******************************************************/
  /***   ██      ██ ███████ ████████     ██████  ██    ██ ██ ██      ██████  ███████ ██████    *******************************************************/
  /***   ██      ██ ██         ██        ██   ██ ██    ██ ██ ██      ██   ██ ██      ██   ██   *******************************************************/
  /***   ██      ██ ███████    ██        ██████  ██    ██ ██ ██      ██   ██ █████   ██████    *******************************************************/
  /***   ██      ██      ██    ██        ██   ██ ██    ██ ██ ██      ██   ██ ██      ██   ██   *******************************************************/
  /***   ███████ ██ ███████    ██        ██████   ██████  ██ ███████ ██████  ███████ ██   ██   *******************************************************/
  /***                                                                                         *******************************************************/
  /***************************************************************************************************************************************************/
  /********************************************************************************************************************* Source63 *** List Builder ***/


  /**
   * Summary. ?
   * @this    Class scope
   * @access  private
   */
  _listSourceChanged ()
  {
    var tableName = this.ListSourceSelectNode.value,
        employeeNo = this.CleverForms.GetFormEmployeeNo(),
        instanceId = this.CleverForms.GetInstanceGuid(),
        lookupApi = '{api}?modelName={modelName}&employeeNo={employeeNo}&instanceId={instanceId}'.format({
          api: this.CleverForms.GetLookupApi,
          modelName: tableName,
          employeeNo: employeeNo,
          instanceId: instanceId || ''
        });
    if (this.ListSourceSelectNode.value === '0')
    {
      Affinity2018.Apps.Plugins.ListBuilder.RestoreBackup();
      this.ListSourceSelected = this.ListSourceSelectNode.value;
      return;
    }
    else
    {
      $a.ShowPageLoader();
      $a.RequestQueue.Add(lookupApi, this._gotNewSourceList, this._gotNewSourceListFail, 1);
    }

  }


  /**
   * Summary. ?
   * @this    Class scope
   * @access  private
   */
  _gotNewSourceList (data)
  {
    if (
      $a.isArray(data)
      && $a.Apps.Plugins.hasOwnProperty('ListBuilder')
    )
    {
      $a.Apps.Plugins.ListBuilder.ModifiedCallback = this._listBuilderModified;
      if (this.ListSourceSelected === 'custom') $a.Apps.Plugins.ListBuilder.Backup();
      $a.Apps.Plugins.ListBuilder.Render(this.TemplateNode, data);
      $a.Apps.Plugins.ListBuilder.ResetModified();
      $a.HidePageLoader();
      this.ListSourceSelected = this.ListSourceSelectNode.value;
    }
    else
    {
      if ($a.type(data) === 'string') this._gotNewSourceListFail('Response is string "' + data + '" (not a list)');
      else this._gotNewSourceListFail('Response is not a list', data);
    }
  }


  /**
   * Summary. ?
   * @this    Class scope
   * @access  private
   */
  _gotNewSourceListFail (error, data)
  {
    var rtn = error;
    if (data)
    {
      rtn = data;
      if ($a.type(data) === 'string')
      {
        rtn = this.CleverForms.CheckResponseForErrorPage(data);
        if (rtn === 'OK' && data.length < 1000) rtn = data.trim();
      }
    }
    console.warn('List Source Lookup failed.', rtn);
    $a.HidePageLoader();
  }


  /**
   * Summary. ?
   * @this    Class scope
   * @access  private
   */
  _listBuilderModified(modifiedBy)
  {
    if ($a.Apps.Plugins.ListBuilder)
    {
      if (['clear','manipulation','csv'].contains(modifiedBy))
      {
        if (this.ListSourceSelectNode)
        {
          this.ListSourceSelectNode.selectedIndex = 0;
          this.ListSourceSelectNode.value = 'custom';
          if ('widgets' in this.ListSourceSelectNode && this.ListSourceSelectNode.widgets.hasOwnProperty('Autocomplete'))
          {
            this.ListSourceSelectNode.widgets.Autocomplete.setValue('custom', false);
          }
        }
      }
    }
  }


  /***************************************************************************************************************************************************/
  /***************************************************************************************************************************************************/
  /***                                                             ***********************************************************************************/
  /***   ██   ██ ███████ ██      ██████  ███████ ██████  ███████   ***********************************************************************************/
  /***   ██   ██ ██      ██      ██   ██ ██      ██   ██ ██        ***********************************************************************************/
  /***   ███████ █████   ██      ██████  █████   ██████  ███████   ***********************************************************************************/
  /***   ██   ██ ██      ██      ██      ██      ██   ██      ██   ***********************************************************************************/
  /***   ██   ██ ███████ ███████ ██      ███████ ██   ██ ███████   ***********************************************************************************/
  /***                                                             ***********************************************************************************/
  /***************************************************************************************************************************************************/
  /************************************************************************************************************************** Source63 *** helpers ***/


  /**
   * Summary. ?
   * @this    Class scope
   * @access  private
   */
  CheckLabelOverflow (node)
  {
    var text = this.Config.Details.Label;
    //console.log(this.Config.Details.Label);
    //console.log(node.innerText);
    //console.log(node.scrollWidth, ' vs ', node.clientWidth);
    //console.log($a.getSize(node).width);
    //console.log('');
    if (node.scrollHeight > node.clientHeight || node.scrollWidth > node.clientWidth)
    {
      node.dataset.tooltip = text;
      node.dataset.tooltipDir = 'top-right';
      node.classList.add('ui-has-tooltip');
      node.classList.add('overflow');
      node.parentNode.classList.add('overflow');
      var icons = node.querySelectorAll('span');
      if (icons.length > 0) for (var i = icons.length - 1; i > -1; i--) node.parentNode.insertBefore(icons[i], node.nextSibling);
    }
  }


  /**
   * Summary. ?
   * @this    Class scope
   * @access  private
   */
  _isNullOrEmpty (mixed)
  {
    if (mixed === null) return true;
    if (mixed === undefined) return true;
    if (typeof mixed === 'string' && mixed.trim() === '') return true;
    return false;
  }


  /**
   * Summary. ?
   * @this    Class scope
   * @access  private
   */
  _getErrorValue (value)
  {
    var type = Affinity2018.Type(value).toLowerCase();
    switch (type)
    {
      case 'string':
      case 'number':
      case 'int':
      case 'float':
        return value;
        break;
      default:
        return type;
        break;
    }
  }


  /**
   * Summary. ?
   * @this    Class scope
   * @access  private
   */
  _checkChanges (saveOnChange) // saveOnChanges = true
  {
    saveOnChange = $a.paramOrDefault(saveOnChange, true, 'boolean');
    if (this.ReturnChanges().length > 0)
    {
      this.Changed = true;
      if (saveOnChange) this.CleverForms.Designer.CheckSave();
    }
    return this.Changed;
  }


  /***************************************************************************************************************************************************/
  /***************************************************************************************************************************************************/
  /***                                                                                  **************************************************************/
  /***   ████████ ███████ ███    ███ ██████  ██       █████  ████████ ███████ ███████   **************************************************************/
  /***      ██    ██      ████  ████ ██   ██ ██      ██   ██    ██    ██      ██        **************************************************************/
  /***      ██    █████   ██ ████ ██ ██████  ██      ███████    ██    █████   ███████   **************************************************************/
  /***      ██    ██      ██  ██  ██ ██      ██      ██   ██    ██    ██           ██   **************************************************************/
  /***      ██    ███████ ██      ██ ██      ███████ ██   ██    ██    ███████ ███████   **************************************************************/
  /***                                                                                  **************************************************************/
  /***************************************************************************************************************************************************/
  /************************************************************************************************************************ Source63 *** templates ***/


  /**
   * Summary. ?
   * @this    Class scope
   * @access  private
   */
  _templates ()
  {
    this.ItemSourcesTemplate = `
    <div class="edit-row">
      <label>{listLabel}</label>
      <div class="select">
        <select class="list-source ui-has-autocomplete">
          <option value="0" selected>{listCustom}</option>
        </select>
      </div>
    </div>
    <div class="edit-row">
      <div class="list-builder"></div>
    </div>
    <input type="hidden" name="ListData" />
    `;
  }

};;
/**
 *
 * Summary.       Element Address Class.
 *
 * Description.   Element Address functions and features.
 *
 * @author        Ben King, benk at affinityteam.com, ben.king at source63.com, +64 21 2672729.
 *
 *
 * @since         16.06.2020
 * @class         Address
 * @namespace     Affinity2018.Classes.Apps.CleverForms.Elements
 * @memberof      CleverForms.Elements
 * @constructs    Affinity2018.Classes.Apps.CleverForms.Elements.Address
 *
 * @public
 */

if (!('Affinity2018' in window)) Affinity2018 = {};
if (!('Classes' in Affinity2018)) Affinity2018.Classes = {};
if (!('Apps' in Affinity2018.Classes)) Affinity2018.Classes.Apps = {};
if (!('CleverForms' in Affinity2018.Classes.Apps)) Affinity2018.Classes.Apps.CleverForms = {};
if (!('Elements' in Affinity2018.Classes.Apps.CleverForms)) Affinity2018.Classes.Apps.CleverForms.Elements = {};

if (!('Apps' in Affinity2018)) Affinity2018.Apps = {};
if (!('Elements' in Affinity2018.Apps)) Affinity2018.Apps.Elements = {};

Affinity2018.Classes.Apps.CleverForms.Elements.Address = class extends Affinity2018.Classes.Apps.CleverForms.Elements.ElementBase
{
  _options()
  {
    super._options();
  }

  constructor(config)
  {
    super(config, 'Address');
    [
      '_options', '_templates',
      
      'SetDesignEditor', 'UnsetDesignEditor', 'GetFromDesignEditor', 'RemoveDesignerElement',
      'RemoveDesignerElement',
      'SetFormRow', 'GetFromFormRow', 'SetFromValue',
      'IsValid', 'InvalidReason', 'CheckValid', 'SetError', 'ClearError'

    ].bindEach(this);

    this._options();
    this._templates();

    return this;
  }

  /**/

  SetDesignEditor()
  {
    this.HtmlEditExampleTemplate = this.HtmlEditExampleTemplate.format({
      label: this.CleverForms.ElementData.hasOwnProperty(this.Config.Type) ? this.CleverForms.ElementData[this.Config.Type].Label : 'Address',
      placeholder: $a.Lang.ReturnPath('app.cf.design_items.address_placeholder')
    });

    if (super.SetDesignEditor())
    {
      // set special html / values

      this.PopupNode.classList.add('large');

      return true;
    }
    return false;
  }

  UnsetDesignEditor ()
  {
    if (super.UnsetDesignEditor())
    {
      // unset special html / values

      return true;
    }
    return false;
  }

  GetFromDesignEditor()
  {
    this.Config = super.GetFromDesignEditor();

    // update special values

    return this.Config;
  }

  RemoveDesignerElement (callback)
  {
    if (super.RemoveDesignerElement())
    {

      // do any removal stuff here
      
      var node = document.querySelector('.item-' + this.UniqueName);
      if (node && $a.isFunction(callback))
      {
        callback(node);
      }

      return true;
    }
  }

  /**/

  SetFormRow (target)
  {
    var address = this.Config.Details.Value, addressObject = null, html = '';
    if ($a.isObject(address))
    {
      addressObject = address;
      address = '';
    }
    else if ($a.isStringifiedObject(address))
    {
      addressObject = $a.stringToObject(address);
      address = this._objectToAdressString(addressObject);
    }
    if (addressObject == null)
    {
      addressObject = {};
      address = '';
    }
    if (this.IsReadOnly)
    {
      html = this.HtmlRowReadOnlyTemplate.format({
        label: this.Config.Details.Label,
        value: this._objectToAdressString(addressObject)
      });
    }
    else
    {
      html = this.HtmlRowTemplate.format({
        label: this.Config.Details.Label,
        placeholder: $a.Lang.ReturnPath('app.cf.design_items.address_placeholder'),
        value: address
      });
    }

    this.FormRowNode = super.SetFormRow(target, html);

    if (!this.IsReadOnly && addressObject !== null)
    {
      $a.setObjectToDataset(this.FormRowNode.querySelector('input'), 'address', addressObject);
    }

    if (this.FormRowNode)
    {

      var input = this.FormRowNode.querySelector('input');
      if (this.Config.Type === 'AffinityField' && input)
      {
        input.dataset.validate = 'lengths';
        input.addEventListener('LengthValidated', this.SetError);
      }

      // set any special elements

      return this.FormRowNode;
    }
  }

  GetFromFormRow()
  {
    if (super.GetFromFormRow())
    {

      // get any special elements

      var inputNode = this.FormRowNode.querySelector('input.ui-address');
      var inputWidget = inputNode.widgets.Address;

      this.FormData.Value = JSON.stringify(inputWidget.GetAddressData());

      return this.FormData;
    }
    throw '{0} "{1}" ({2}) could not get base post data for form post'.format(this.Config.Type, this.Config.Details.Label, this.Config.UniqueName);
  }

  SetFromValue(value, fromKeyChange)
  {
    fromKeyChange = fromKeyChange === undefined ? false : fromKeyChange;

    var inputNode = this.FormRowNode.querySelector('input.ui-address');
    var inputWidget = inputNode.widgets.Address;
    if (!this.IsReadOnly && inputWidget)
    {
      if (value === null || ($a.isString(value) && (value.trim() === '' || value === 'null')))
      {
        inputWidget.SetAddress({ Street: '', Suburb: '', City: '', State: '', Country: '', Postcode: ''});
      }
      else
      {
        inputWidget.SetAddress(value);
      }
    }
  }

  IsValid()
  {
    var required = this.Config.Details.Required, value = false;
    if (this.Config.ElementType === 'AffinityField' && this.Config.Details.AffinityField.IsRequired) required = true;
    var inputNode = this.FormRowNode.querySelector('input.ui-address');
    var inputWidget = inputNode.widgets.Address;
    if (required || inputWidget.ValidateLengths)
    {
      //var valid = inputWidget.IsValid();
      var valid = inputWidget.IsLenghtsValid();
      if (valid) this.ClearError();
      return valid;
    }
    this.ClearError();
    return true;
  }

  InvalidReason()
  {
    var inputNode = this.FormRowNode.querySelector('input.ui-address');
    var inputWidget = inputNode.widgets.Address;
    var errors = [];
    inputWidget.ValidationErrors.forEach(error => errors.push(error[1]));
    return errors.length > 0 ? errors.join('<br>') : inputWidget.Valid ? '' : 'You must enter a valid address';
  }

  CheckValid()
  {
    if (this.IsValid()) this.ClearError();
  }

  SetError()
  {
    var inputNode = this.FormRowNode.querySelector('input.ui-address');
    var inputWidget = inputNode.widgets.Address;
    var rowNode = Affinity2018.getParent(inputNode, 'form-row');
    var reason = this.InvalidReason();
    if (rowNode)
    {
      var errorNode = rowNode.querySelector('.ui-form-error');
      if (inputWidget.Valid)
      {
        if (errorNode) errorNode.classList.remove('show');
        rowNode.classList.remove('error', 'inline-error');
        rowNode.style.marginBottom = '20px';
        Affinity2018.Apps.CleverForms.Form.ResizeSection(rowNode);
      }
      else
      {
        rowNode.classList.add('error', 'inline-error');
        if (reason.trim() !== '')
        {
          var errorNode = rowNode.querySelector('.ui-form-error');
          if (!errorNode)
          {
            errorNode = document.createElement('div');
            rowNode.appendChild(errorNode);
          }
          errorNode.innerHTML = this.InvalidReason();
          errorNode.classList.add('ui-form-error', 'show');
          var checkBottom = parseFloat(window.getComputedStyle(errorNode, null).getPropertyValue('bottom').replace('px', ''));
          if (checkBottom < 0)
          {
            var errorSize = errorNode.getBoundingClientRect().height;
            var newMargin = Math.max(errorSize - 30, 0) + 50;
            rowNode.style.marginBottom = newMargin + 'px';
            errorNode.style.bottom = (0 - (errorSize + 1)) + 'px';
          }
          Affinity2018.Apps.CleverForms.Form.ResizeSection(rowNode);
        }
      }
    }
  }

  ClearError()
  {
    if (this.FormRowNode)
    {
      this.FormRowNode.classList.remove('error', 'flash-error');
      if (this.FormRowNode.querySelector('.ui-form-error'))
      {
        this.FormRowNode.querySelector('.ui-form-error').classList.remove('show');
      }
      Affinity2018.Apps.CleverForms.Form.ResizeSection(this.FormRowNode);
    }
  }

  /**/

  _objectToAdressString(addressObject)
  {
    var strings = [];
    var keys = Object.keys(addressObject);
    for (var k = 0; k < keys.length; k++)
    {
      if (addressObject.hasOwnProperty(keys[k]) && (addressObject[keys[k]] + '').trim() !== '')
      {
        strings.push((addressObject[keys[k]] + '').trim());
      }
    }
    return strings.join(', ');
  }

  /**/

  _templates ()
  {
    super._templates();

    this.HtmlEditExampleTemplate = `
    <div class="default-form">
      <div class="form-row">
        <label>{label}</label>
        <input type="text" class="ui-has-address" data-position="fixed" placeholder="{placeholder}" />
      </div>
    </div>
    `;

    this.HtmlRowTemplate = `
    <div class="form-row">
      <label>{label}</label>
      <input type="text" class="ui-has-address" placeholder="{placeholder}" value="{value}" />
    </div>
    `;

    this.HtmlRowReadOnlyTemplate =  `
    <div class="form-row">
      <label>{label}</label>
      <input type="text" disabled value="{value}" />
    </div>
    `;

  }

};;
/**
 *
 * Summary.       Element AffinityField Class.
 *
 * Description.   Element AffinityField functions and features.
 *
 * @author        Ben King, benk at affinityteam.com, ben.king at source63.com, +64 21 2672729.
 *
 *
 * @since         16.06.2020
 * @class         AffinityField
 * @namespace     Affinity2018.Classes.Apps.CleverForms.Elements
 * @memberof      CleverForms.Elements
 * @constructs    Affinity2018.Classes.Apps.CleverForms.Elements.AffinityField
 *
 * @public
 */

if (!('Affinity2018' in window)) Affinity2018 = {};
if (!('Classes' in Affinity2018)) Affinity2018.Classes = {};
if (!('Apps' in Affinity2018.Classes)) Affinity2018.Classes.Apps = {};
if (!('CleverForms' in Affinity2018.Classes.Apps)) Affinity2018.Classes.Apps.CleverForms = {};
if (!('Elements' in Affinity2018.Classes.Apps.CleverForms)) Affinity2018.Classes.Apps.CleverForms.Elements = {};

if (!('Apps' in Affinity2018)) Affinity2018.Apps = {};
if (!('Elements' in Affinity2018.Apps)) Affinity2018.Apps.Elements = {};

Affinity2018.Classes.Apps.CleverForms.Elements.AffinityField = class extends Affinity2018.Classes.Apps.CleverForms.Elements.ElementBase
{
  _options()
  {
    super._options();

    this.DoDeepDiveLogic = false; // no depp dive option logic untill we have more info
    this.EnableModeSwitching = false; // no mode switching untill we have more info

    // TODO: Add a "force OFF" for generic group edit
    this.ForceDisableGenericGroupEditor = false;
    this.ForceGerenicGroupEditorEnabled = true;
    this.GerenicGroupEditButtonColors = { Visible: 'blue', Hidden: 'orange' };

    this.MaxDialogListSize = 5;
    this.MaxDialogListTab = '&nbsp;&nbsp;&nbsp;&nbsp;';

    this.DefaultFilterOptions = {}; // will get from CleverForms.AffnityFieldModeTypes
    this.FilterOptions = {};

    this.GenericFileReader = new FileReader();

  }

  constructor(config)
  {
    super(config, 'AffinityField');
    [
      '_options', '_templates',

      'SetDesignEditor', 'UnsetDesignEditor', 'GetFromDesignEditor', 'RemoveDesignerElement',
      'RemoveDesignerElement',

      'SetFormRow', 'GetFromFormRow',

      'SetFromValue',

      'GetModelName',

      '_filterSelected',
      
      '_genericListChanged', '_gotGenericList', '_getGenericListFailed', '_buildGenericListForEdit',
      '_gotGenericListForEdit', '_gotGenericListForEditFailed', '_genericListEditClicked', '_rebuildGenericEditList', '_doRrebuildGenericEditList',
      '_downloadGenericEditListCSV', '_uploadGenericEditListCSV', 
      '_gotFormList', '_getFormListFailed',

      '_modeSelected', '_continueModeSelect',

      '_insertDesignerKey',

      '_formRowLookupChanged', '_payPointChanged',
      '_lookupModelLoaded', '_lookupModelDispatch', '_lookupModelFailed', '_modelLookupChanged', '_globalKeyChanged', '_updateNonAffintyFields'

    ].bindEach(this);

    this._options();
    this._templates();

    this.CleverForms = Affinity2018.Apps.CleverForms.Default;

    return this;
  }

  /**/

  SetDesignEditor()
  {
    if (super.SetDesignEditor())
    {
      // set special html / values

      this._showInlineHidden = super._showInlineHidden;

      this.PopupNode.classList.add('large');

      this.RightListNode = document.querySelector('.cf-d2-bottom-right ul');

      this.PopupNode = document.querySelector('.cf-designer-element-popup');
      this.SettingsViewNode = this.PopupNode.querySelector('.settings');

      this.FiltersNode = this.SettingsViewNode.querySelector('.filters');
      this.FilterRadiosBoxNode = this.FiltersNode.querySelector('.radios');
      this.FilterModeWrapperCreate = this.FilterRadiosBoxNode.querySelector('.mode-create-wrapper');
      this.FilterModeWrapperSelect = this.FilterRadiosBoxNode.querySelector('.mode-update-wrapper');
      this.FilterModeWrapperEdit = this.FilterRadiosBoxNode.querySelector('.mode-edit-wrapper');
      this.FilterModeWrapperDisplay = this.FilterRadiosBoxNode.querySelector('.mode-display-wrapper');
      this.FilterModeWrapperHidden = this.FilterRadiosBoxNode.querySelector('.mode-hidden-wrapper');
      this.FilterModeWrapperInitiator = this.FilterRadiosBoxNode.querySelector('.mode-initiator-wrapper');

      this.TemplateNode = this.SettingsViewNode.querySelector('.edit-template');
      
      this.GenericFilterLables = {
        Create: $a.Lang.ReturnPath('app.cf.design_items.filter_create_button_label'),
        CreateClose:$a.Lang.ReturnPath('app.cf.design_items.filter_create_button_close_label'),
        Edit: $a.Lang.ReturnPath('app.cf.design_items.filter_edit_button_label'),
        EditClose: $a.Lang.ReturnPath('app.cf.design_items.filter_edit_button_close_label')
      };
      this.GenericGroupNode = this.TemplateNode.querySelector('.affinity-generic-group');
      this.GenericGroupSelectNode = this.GenericGroupNode.querySelector('select');
      this.GenericEditToggle = this.GenericGroupNode.querySelector('.generic-group-editor .show-hidden');
      this.GenericEditToggle.innerHTML = this.GenericFilterLables.Edit;
      this.GenericEditToggle.dataset.hiddenTargetLabels = `${this.GenericFilterLables.Edit},${this.GenericFilterLables.EditClose}`;
      if (Affinity2018.isNullOrEmpty(this.GenericGroupSelectNode.value))
      {
        this.GenericEditToggle.innerHTML = this.GenericFilterLables.Create;
        this.GenericEditToggle.dataset.hiddenTargetLabels = `${this.GenericFilterLables.Create},${this.GenericFilterLables.CreateClose}`;
      }
      this.GenericGroupLoaderNode = this.GenericGroupNode.querySelector('.generic-group-loader');
      
      this.FormLinkNode = this.TemplateNode.querySelector('.affinity-form-link');
      this.FormLinkSelectNode = this.FormLinkNode.querySelector('select');

      this.RequiredBoxNode = this.SettingsViewNode.querySelector('.edit-required');

      this.HiddenBoxNode = this.PopupNode.querySelector('.edit-hidden');

      /* if field is required, always tick and disable required. */

      if (this.Config.Details.AffinityField.IsRequired && this.CleverForms.IsMasterFile(this.Config))
      {
        this.RequiredBoxNode.classList.remove('hidden');
        this.RequiredBoxNode.querySelector('input').disabled = true;
      }

      /* if is global or a key, always tick and disable required. */

      this.RequiredBoxNode.classList.remove('hidden');
      if (this.CleverForms.IsMasterFile(this.Config) && (
        this.CleverForms.PseudoGlobalElementTypes.contains(this.Config.Type)
        || this.CleverForms.IsGlobalKey(this.Config)
        || this.CleverForms.IsKey(this.Config)
        || this.Config.Details.AffinityField.IsRequired)
      )
      {
        this.Config.Details.Required = true;
        this.RequiredBoxNode.classList.remove('hidden');
        this.RequiredBoxNode.querySelector('input').checked = true;
        this.RequiredBoxNode.querySelector('input').disabled = true;
      }

      /* generic group select */

      this.GenericGroupNode.classList.add('hide');
      this.GenericGroupNode.classList.add('hidden');
      if (this.CleverForms.IsLookup(this.Config) || this.CleverForms.IsGlobalKey(this.Config))
      {
        var api = this.CleverForms.GetGenericGroupLookupApi + '?ModelName=' + this.Config.Details.AffinityField.ModelName + '&PropertyName=' + this.Config.Details.AffinityField.FieldName;
        //Affinity2018.RequestQueue.Add(api, this._gotGenericList, this._getGenericListFailed); // api, onSuccess, onFail, priority
        if(!this.ForceDisableGerenicGroupEditor &&this.TemplateNode.querySelector('.generic-group-editor') && this.ForceGerenicGroupEditorEnabled)
        {
          this.GroupEditorNode = this.TemplateNode.querySelector('.generic-group-editor');
          this.GroupEditorNode.classList.remove('hidden');
          this.GenericGroupSelectNode.addEventListener('change', this._genericListChanged);
        }
        this.GenericGroupLoaderNode.classList.add('show');
        axios.get(api).then(((response) => { this._gotGenericList(response.data); }).bind(this)).catch(((error) => { this._getGenericListFailed(error); }).bind(this));
      }

      /* form link select */

      if (
        this.FormLinkNode.querySelector('select')
        && this.Config.Details.hasOwnProperty('AffinityField')
        && this.Config.Details.AffinityField.FieldName !== null
      )
      {
        this.FormLinkNode.classList.add('hidden');
        Affinity2018.RequestQueue.Add(this.CleverForms.GetAllAvaiableForms, this._gotFormList, this._getFormListFailed); // api, onSuccess, onFail, priority
      }

      /* hidden */
      
      this.HiddenBoxNode.querySelector('input').checked = false;
      if (this.CleverForms.IsGlobalKey(this.Config))
      {
        if (this.Config.Details.AffinityField.Mode === this.CleverForms.AffnityFieldModeTypes.Initiator.Enum) this.HiddenBoxNode.classList.remove('hidden');
        if (this.Config.Hidden) this.HiddenBoxNode.querySelector('input').checked = true;
      }

      /* preview */
      
      if (this.Config.Details.AffinityField.hasOwnProperty('CleverFormsDisplayType'))
      {
        var affinityField = this.Config.Details.AffinityField,
            elements = Affinity2018.Classes.Apps.CleverForms.Elements,
            exampleController = null;
        
        if (elements.hasOwnProperty(affinityField.CleverFormsDisplayType))
        {
          exampleController = new elements[affinityField.CleverFormsDisplayType]({});
          switch (affinityField.CleverFormsDisplayType)
          {
            case 'Address':
            case 'TaxNumber':
              this.PopupNode.classList.add('large');
              break;
          }
        }

        if (exampleController === null && this.CleverForms.IsLookup(this.Config))
        {
          exampleController = new elements.SingleSelectDropdown({});
        }

        if (exampleController !== null && exampleController.hasOwnProperty('HtmlEditExampleTemplate') && exampleController.HtmlEditExampleTemplate.trim() !== '')
        {
          var emptyRequired = this.RequiredBoxNode.querySelector('input').checked;
          var emptyOption = this.CleverForms.GetEmptyListOption(emptyRequired, true);
          this.PreviewBoxNode.innerHTML = exampleController.HtmlEditExampleTemplate.format({
            Empty: emptyOption
          });
          this.PreviewNode.classList.remove('hidden');
        }
      }

      /* set headers and labels */

      if (this.Config.hasOwnProperty('Display'))
      {
        var label = this._isNullOrEmpty(this.Config.Details.Label) ? this.Config.Label : this.Config.Details.Label;
        //label += ' - ' + this.Config.Display.Label + ' <small>(AffiinityField - ' + this.Config.Details.AffinityField.FieldName + ')</small>';
        //label += ' <small>(AffiinityField - ' + this.Config.Details.AffinityField.FieldName + ')</small>';

        var affinityFieldDesc = this.CleverForms.ElementData.AffinityField.Description;
        var displayDescription = this.Config.Display ? this.Config.Display.Description.charAt(0).toLowerCase() + this.Config.Display.Description.substr(1) : affinityFieldDesc;

        var descText = affinityFieldDesc.substring(0, affinityFieldDesc.indexOf('.'));
        descText += ' (' + (displayDescription.endsWith('.') ? displayDescription.substring(0, displayDescription.length - 1) : displayDescription) + ').';
        descText += '<br /><br />';
        //descText += '<em>This is the Affinity Field <strong>' + this.Config.Details.AffinityField.FieldName + '</strong>';

        var descSuffix = $a.Lang.ReturnPath('app.cf.design_items.affinity_field_desc', {
          fieldName: this.Config.Details.AffinityField.FieldName
        });
        if (this.Config.Details.AffinityField.ModelName !== null)
        {
          descSuffix = $a.Lang.ReturnPath('app.cf.design_items.affinity_field_desc_with_table', {
            fieldName: this.Config.Details.AffinityField.FieldName,
            tableName: this.Config.Details.AffinityField.ModelName
          });
          //descText += ' from ' + (this.Config.Details.AffinityField.ModelName.toLowerCase().contains('employee') ? 'model' : 'table');
          //descText += ' <strong>' + this.Config.Details.AffinityField.ModelName + '</strong>';
        }
        //descText += '.<em>';
        descText += descSuffix;

        this.SettingsViewNode.querySelector('.settings h3').innerHTML = label;
        this.SettingsViewNode.querySelector('.settings p').innerHTML = descText;
      }

      /* Mode options */

      var defaultFilterOptions = $a.jsonCloneObject(this.CleverForms.AffnityFieldModeTypes),
          fieldModelName = this.Config.Details.AffinityField.ModelName,
          fieldMode = this.Config.Details.AffinityField.Mode,
          fieldModeName = this.CleverForms.AffnityFieldModeEnums[fieldMode].Label,
          availableModes = this.Config.Details.AffinityField.ModeOptions,
          existingKeyNode = this.CleverForms.ReturnExisitingModelKeyNode(fieldModelName, this.DesignerNode),
          existingKeyMode = existingKeyNode !== null ? existingKeyNode.controller.Config.Details.AffinityField.Mode : null,
          exisitngKeyModeName = existingKeyMode !== null ? this.CleverForms.AffnityFieldModeEnums[existingKeyMode].Label : null,
          isFieldLookup = this.Config.Details.AffinityField.LookupTable === null ? false : true;

      for (var key in defaultFilterOptions)
      {
        var filterOption = defaultFilterOptions[key],
            checkWrapperNode = this['FilterModeWrapper' + key],
            radioNode;

        if ($a.isNode(checkWrapperNode) && checkWrapperNode.querySelector('input') !== null)
        {
          checkWrapperNode.classList.add('hidden');
          radioNode = checkWrapperNode.querySelector('input');
          radioNode.removeEventListener('click', this._modeSelected);
          radioNode.removeAttribute('disabled');
          radioNode.checked = false;

          // no more hidden please
          if (existingKeyMode === this.CleverForms.AffnityFieldModeTypes.Hidden.Enum) existingKeyMode = this.CleverForms.AffnityFieldModeTypes.Display.Enum;
          if (key !== filterOption.Enum)
          {
            if (existingKeyMode === this.CleverForms.AffnityFieldModeTypes.Create.Enum) // special case for create -> if key is create, ALL should be create
            {
              if (availableModes.contains(filterOption.Enum))
              {
                if (fieldMode === filterOption.Enum) radioNode.checked = true;
                checkWrapperNode.classList.remove('hidden');
                if (key !== 'Create' && !isFieldLookup && fieldMode !== 4) radioNode.setAttribute('disabled', 'disabled'); //if it is not look up we want to still have Select option
                else if (key !== 'Select' && isFieldLookup) radioNode.setAttribute('disabled', 'disabled'); //if it look up but key is Create we want to disable any other options apart from Select
                else
                {
                  radioNode.checked = true;
                  radioNode.addEventListener('click', this._modeSelected);
                }
              }
            }
            else
            {
              // no create key, so business as usual
              if (availableModes.contains(filterOption.Enum))
              {
                checkWrapperNode.classList.remove('hidden');
                radioNode.addEventListener('click', this._modeSelected);
                if (fieldMode == filterOption.Enum) radioNode.checked = true;
              }
            }
          }
        }
      }
      if (!this.FiltersNode.querySelector('input:checked:not(:disabled)'))
      {
        // nothig could be checked :O
        if (this.FiltersNode.querySelector('input:checked:disabled'))
        {
          // somthing you can't have is selected
          this.FiltersNode.querySelector('input:checked').checked = false;
          this["FilterModeWrapper" + exisitngKeyModeName].querySelector('input').checked = true;

          var warningMessage = 'Warning! You currenty have "{0}" selected.<br />Becuase you have the key "{1}" set as "{2}", you must select "{2}" here too.'.format(
            fieldModeName,
            existingKeyNode.controller.Config.Details.Label,
            exisitngKeyModeName
          );

          var matchingField = this.RightListNode.querySelector('li[data-field="{0}"][data-mode="{1}"]'.format(this.Config.Details.AffinityField.FieldName, existingKeyMode));
          if (matchingField !== null)
          {
            warningMessage = 'Warning! You currenty have "{0}" selected.<br />There is already a "{1}" field set to "{2}". You can only have one of each field as "{2}", so delete this or one of the others.'.format(
              fieldModeName,
              this.Config.Details.AffinityField.FieldName,
              exisitngKeyModeName
            );
          }

          Affinity2018.Dialog.Show({
            message: warningMessage,
            textAlign: 'left',
            buttons: {
              cancel: false
            }
          });
        }
        else
        {
          // nothing is selected
          var errorMessage = 'ERROR! Affinity Field "{0}" ({1}) can not select Mode "{2}" ({3}). Option is Hidden.'.format(
            this.Config.Details.Label,
            this.Config.Details.AffinityField.FieldName,
            filterOption.Name,
            filterOption.Enum
          );
          console.groupCollapsed('%c' + errorMessage, 'color:#e33100;font-weight:bold');
          console.log(this.Config);
          console.groupEnd();
          Affinity2018.ThrowError('Mode Error', 'critical', errorMessage);
        }
      }

      if (this.PopupNode.querySelectorAll('.mode-wrapper:not(.hidden)').length <= 1) this.RequiredBoxNode.classList.add('hidden');

      if (fieldMode === this.CleverForms.AffnityFieldModeTypes.Display.Enum) this.RequiredBoxNode.classList.add('hidden');
      else this.RequiredBoxNode.classList.remove('hidden');

      this.FilterModeWrapperHidden.classList.add('hidden'); // always hide Hidden now please

      /**/

      return true;
    }
    return false;
  }

  UnsetDesignEditor()
  {
    if (super.UnsetDesignEditor())
    {
      // unset special html / values

      this.FiltersNode.querySelectorAll('.radios input').forEach(function (radioNode)
      {
        radioNode.removeEventListener('click', this._modeSelected);
      }.bind(this));

      return true;
    }
    return false;
  }

  GetFromDesignEditor(saveOnChanges) // saveOnChanges = true
  {
    saveOnChanges = $a.paramOrDefault(saveOnChanges, true, 'boolean');

    this.Config = super.GetFromDesignEditor(saveOnChanges);

    // update special values

    if (this.Config.Details.Label.trim() === '' || this.BlankLabelSetToDefault)
    {
      this.Config.Details.Label = this.Config.Details.AffinityField.DisplayLabel;
      if (this.DesignerNode)
      {
        this.DesignerNode.querySelector('.label').innerHTML = this.Config.Details.Label;
      }
    }

    if (this.Config.Details.AffinityField.CleverFormsDisplayType === 'Date')
    {
      if (this.Config.Details.AffinityField.hasOwnProperty('DataType')) this.Config.Details.DateTimeType = this.Config.Details.AffinityField.DataType.toLowerCase();
      else this.Config.Details.DateTimeType = 'date';
      this.Config.Details.SetDefaultValue = false;
    }

    // Get mode
    var mode = 1; // Edit by default
    this.FilterRadiosBoxNode.querySelectorAll('input[type="radio"]').forEach(function (node)
    {
      if (node === this.FilterModeWrapperCreate.querySelector('input')    && node.checked) mode = 0; // Create
      if (node === this.FilterModeWrapperEdit.querySelector('input')      && node.checked) mode = 1; // Edit
      if (node === this.FilterModeWrapperDisplay.querySelector('input')   && node.checked) mode = 2; // Display
      if (node === this.FilterModeWrapperHidden.querySelector('input')    && node.checked) mode = 3; // Hidden
      if (node === this.FilterModeWrapperSelect.querySelector('input')    && node.checked) mode = 4; // Select (Select from a list)
      if (node === this.FilterModeWrapperInitiator.querySelector('input') && node.checked) mode = 5; // Initato (Form User)
    }.bind(this));

    //this.Config.Details.AffinityField.FieldType = mode; // TODO: Depricated. Use Mode:
    this.Config.Details.AffinityField.Mode = mode;

    // Get generic group
    if (this.TemplateNode.querySelector('.affinity-generic-group:not(.hide) select'))
    {
      this.Config.Details.AffinityField.GenericGroupId = this.TemplateNode.querySelector('.affinity-generic-group select').value;
      if ($a.isString(this.Config.Details.AffinityField.GenericGroupId) && $a.isNumeric(this.Config.Details.AffinityField.GenericGroupId))
        this.Config.Details.AffinityField.GenericGroupId = parseInt(this.Config.Details.AffinityField.GenericGroupId);
    }

    // Get linked template
    if (this.TemplateNode.querySelector('.affinity-form-link select'))
    {
      var linkedTemplateIdValue = this.TemplateNode.querySelector('.affinity-form-link select').value;
      if (linkedTemplateIdValue === '0') linkedTemplateIdValue = null;
      this.Config.Details.AffinityField.LinkedTemplateId = linkedTemplateIdValue;
    }

    // hidden
    this.Config.Hidden = false;
    if (this.CleverForms.IsGlobalKey(this.Config))
    {
      this.Config.Hidden = this.HiddenBoxNode.querySelector('input').checked;
    }

    /* insert required keys */

    // NOTE: TODO: We can now have multiple sections of the SAME Model,
    // so we need to look for keys in ALL sections, not just the section we are dropping into.

    var k = 0, canInsert, keyData, key, classKey, isGlobal, lookIn, targetNode, position, referenceNode;
    if (
      this.Config.Details.AffinityField.hasOwnProperty('KeyFields')
      && $a.isArray(this.Config.Details.AffinityField.KeyFields)
      && this.Config.Details.AffinityField.KeyFields.length > 0
    )
    {
      for (; k < this.Config.Details.AffinityField.KeyFields.length; k++)
      {
        canInsert = true;

        keyData = this.Config.Details.AffinityField.KeyFields[k];

        // TODO: These should be in the search return. NO MUTATORS!!!
        if (keyData.hasOwnProperty('TableName') && keyData.TableName !== null && keyData.TableName.trim() !== '') keyData.ModelName = keyData.TableName;
        // End bad mutatorness

        key = keyData.FieldName;
        classKey = this.CleverForms.ReturnClassSafeString(key);

        if (this.CleverForms.AllowedGlobalKeys.contains(key))
        {
          isGlobal = true;
          lookIn = this.CleverForms.Designer.RightListNode;
        }
        else
        {
          isGlobal = false;
          lookIn = this.DesignerNode.closest('li[data-type="Section"] ul');
        }

        if // check for globals first
        ( 
          keyData.IsKeyField
          && this.CleverForms.AllowedGlobalKeys.contains(keyData.FieldName)
          && this.CleverForms.Designer.RightListNode.querySelector('li.is-key-field[data-field="' + keyData.FieldName + '"]')
        )
        {
          canInsert = false;
        }
        else if // check for keys next
        (  
          keyData.IsKeyField
          && this.DesignerNode.closest('li[data-type="Section"] ul').querySelector('li.is-key-field[data-field="' + keyData.FieldName + '"]')
        )
        {
          canInsert = false;
        }

        if (canInsert)
        {
          targetNode = this.CleverForms.AllowedGlobalKeys.contains(key) ? this.CleverForms.Designer.RightListNode.querySelector('li[data-type="Section"] ul') : lookIn;
          referenceNode = this.DesignerNode;
          if (isGlobal) position = 'top';
          else position = 'above';
          this._insertDesignerKey(key, targetNode, position, referenceNode, keyData);
        }
      }
    }

    this.CheckChanges(saveOnChanges);

    return this.Config;
  }

  RemoveDesignerElement(callback)
  {
    if (super.RemoveDesignerElement())
    {

      // do any removal stuff here
      
      var node = document.querySelector('.item-' + this.UniqueName);
      if (node && $a.isFunction(callback))
      {
        callback(node);
      }
    }
  }

  /**/

  SetFormRow(target)
  {
    var displayType = this.Config.Details.AffinityField.CleverFormsDisplayType;
    var value = this.Config.Details.Value;
    var isGlobalKey = this.CleverForms.IsGlobalKey(this.Config);
    var isLookup = this.CleverForms.IsLookup(this.Config);
    var isHidden = false;
    var isReadOnly = this.Config.Details.IsReadOnly || this.Config.Disabled || this.Config.Details.AffinityField.Mode === this.CleverForms.AffnityFieldModeTypes.Display.Enum;

    this.IsReadOnly = isReadOnly;
    this.Config.Details.IsReadOnly = isReadOnly;

    // no more hidden please
    if (this.Config.Details.AffinityField.Mode == this.CleverForms.AffnityFieldModeTypes.Hidden.Enum)
    {
      this.Config.Details.AffinityField.Mode = this.CleverForms.AffnityFieldModeTypes.Display.Enum;
      isReadOnly = true;
    }

    if (isGlobalKey || isLookup)
    {
      // edit or select
      if (
        [
          this.CleverForms.AffnityFieldModeTypes.Edit.Enum,
          this.CleverForms.AffnityFieldModeTypes.Select.Enum
        ].contains(this.Config.Details.AffinityField.Mode)
      ) displayType = 'SingleSelectDropdown';
      else if (this.Config.Details.AffinityField.Mode === this.CleverForms.AffnityFieldModeTypes.Display.Enum) displayType = 'Text';
      else displayType = 'Integer';
    }

    if (!isLookup && this.CleverForms.IskeyWithNoRequiredKeys(this.Config))
    {
      // edit or select
      if (
        [
          this.CleverForms.AffnityFieldModeTypes.Edit.Enum,
          this.CleverForms.AffnityFieldModeTypes.Select.Enum
        ].contains(this.Config.Details.AffinityField.Mode)
      ) displayType = 'SingleSelectDropdown';
    }

    var elements = Affinity2018.Classes.Apps.CleverForms.Elements;

    if (!elements.hasOwnProperty(displayType))
    {
      if (this.CleverForms.ElementControllerMap.hasOwnProperty(displayType)) displayType = this.CleverForms.ElementControllerMap[displayType];
    }

    if (this.Config.Details.AffinityField.Mode === this.CleverForms.AffnityFieldModeTypes.Display.Enum)
    {
      var doNotOverride = ['Address', 'BankNumber', 'TaxNumber', 'Date'];
      if (!doNotOverride.contains(displayType)) displayType = 'Text';
    }

    if (this.CleverForms.GenderFields.contains(this.Config.Details.AffinityField.FieldName))
    {
      displayType = 'SingleSelectRadio';
      this.Config.Details.ItemSource = {
        Inline: true,
        DefaultNone: null,
        Items: [
          ['Male', 'M'],
          ['Female', 'F'],
          ['Other', 'O']
        ]
      };
    }

    if (this.CleverForms.BooleanToRadioFields.contains(this.Config.Details.AffinityField.FieldName))
    {
      displayType = 'SingleSelectRadio';
      this.Config.Details.ItemSource = {
        Inline: true,
        DefaultNone: 'false',
        Items: [
          ['True', 'true'],
          ['False', 'false']
        ]
      };
    }

    // check for rates and use Float with 5 decimal places
    //if (/^RATE[1-9]{1}$/.test(this.Config.Details.AffinityField.FieldName))
    if (/^RATE[1-9]{1}$/.test(this.Config.Details.AffinityField.FieldName) || /( Rate [1-9]{1})/gi.test(this.Config.Details.Label))
    {
      if (!this.Config.Details.AffinityField.hasOwnProperty('FieldDecimal') || this.Config.Details.AffinityField.FieldDecimal === null)
      {
        displayType = 'Float';
        this.Config.Details.AffinityField.FieldDecimal = 5;
        this.Config.Details.AffinityField.FieldPrecision = 5;
      }
    }
    if (this.Config.Details.AffinityField.FieldName.indexOf('STD_HOURS_') === 0)
    {
      displayType = 'Float';
      this.Config.Details.AffinityField.FieldDecimal = 2;
      this.Config.Details.AffinityField.FieldPrecision = 2;
    }

    /////////////////////////////////////////////////////////

    if (elements.hasOwnProperty(displayType))
    {
      if (displayType === 'Date')
      {
        if (!$a.isString(this.Config.Details.DateTimeType) || ($a.isString(this.Config.Details.DateTimeType) && !['date', 'time', 'datetime'].contains(this.Config.Details.DateTimeType)))
          this.Config.Details.DateTimeType = 'date';
        if (!$a.isBool(this.Config.Details.SetDefaultValue))
          this.Config.Details.SetDefaultValue = false;
      }

      this.ElementControllerType = displayType;
      this.ElementController = new elements[displayType](this.Config);
      this.FormRowNode = this.ElementController.SetFormRow(target);

      if (displayType === 'Address')
      {
        if (this.FormRowNode.querySelector('input'))
        {
          this.FormRowNode.querySelector('input').dataset.validate = 'lengths';
        }
      }

      if (
        displayType === 'SingleSelectDropdown'
        && (this.Config.Details.AffinityField.IsKeyField || this.Config.Details.AffinityField.IsGlobalKey)
        && this.Config.Details.AffinityField.LookupTable === null
      )
      {
        if (!this.IsReadOnly) this.FormRowNode.querySelector('select').addEventListener('change', this._formRowLookupChanged);
      }
      else
      {
        if (!isGlobalKey) window.addEventListener('ModelLookupChanged', this._modelLookupChanged);
      }
    }

    if (this.FormRowNode)
    {
      if (displayType) this.FormRowNode.classList.add('row-' + displayType.toLowerCase().trim().replace(/ /g, '-'));

      if (isGlobalKey)
      { 
        this.FormRowNode.classList.add('is-global-key');
        if (this.Config.Details.AffinityField.FieldName === "EMPLOYEE_NO")
        {
          this.FormRowNode.classList.add('is-employee-no');
          if (displayType && displayType === 'SingleSelectDropdown')
          {
            this.FormRowNode.querySelector('select').addEventListener('change', this._globalKeyChanged);
          }
        }
      }

      /* form link select */
      
      var linkedTemplateId = this.Config.Details.AffinityField.LinkedTemplateId;
      var linkIds = $a.isString(linkedTemplateId) ? linkedTemplateId.split(';') : [''];
      var linkId = linkIds[0].trim();
      var workflowId = linkIds.length === 2 ? linkIds[1].trim() : '';
      var linkName = '';
      var workflowName = ''
      if ($a.isString(linkId) && linkId.trim() !== '')
      {
        Affinity2018.RequestQueue.Add(this.CleverForms.GetAllAvaiableForms, function (response)
        {
          for (var f = 0; f < response.length; f++)
          {
            if (workflowId === '')
            {
              if (response[f].TemplateId === linkId)
              {
                linkName = response[f].TemplateDescription;
                workflowName = response[f].WorkflowName;
                workflowId = response[f].WorkflowDefinitionId;
                break;
              }
            }
            else
            {
              if (response[f].TemplateId === linkId && response[f].WorkflowDefinitionId === workflowId)
              {
                linkName = response[f].TemplateDescription;
                workflowName = response[f].WorkflowName;
                workflowId = response[f].WorkflowDefinitionId;
                break;
              }
            }
          }
          if (linkName !== '')
          {
            var linkBoxNode = document.createElement('div');
            linkBoxNode.classList.add('start-link');
            linkBoxNode.innerHTML = this.HTMLLinkFormTemplate.format({
              url: Affinity2018.Path + 'Inbox/Create/?templateAndWorkflowIds=' + linkId + ';' + workflowId,
              label: linkName + ' - ' + workflowName
            });
            linkBoxNode.querySelector('a').addEventListener('click', function (ev) { ev.target.closest('form').submit(); });
            this.FormRowNode.appendChild(linkBoxNode);
            Affinity2018.Apps.CleverForms.Form.ResizeSection(this.FormRowNode);
          }
        }.bind(this), function () { }); // api, onSuccess, onFail, priority
      }
      
      this.FormRowNode.dataset.model = this.Config.Details.AffinityField.ModelName;

      if (this.Config.Details.AffinityField.Mode === this.CleverForms.AffnityFieldModeTypes.Create.Enum && this.CleverForms.IsGlobalKey(this.Config))
      {
        if (value == null || ($a.isString(value) && value.trim() === '')) this.FormRowNode.querySelector('input').value = 0;
      }

      // limits

      if (!isReadOnly)
      {
        if (this.FormRowNode.querySelector('input') && ['number', 'text'].contains(this.FormRowNode.querySelector('input').type.toLowerCase()))
        {
          var validationObj = {
            MaxLength: !isNaN(parseFloat(this.Config.Details.AffinityField.MaxLength)) ? parseFloat(this.Config.Details.AffinityField.MaxLength) : Number.MAX_SAFE_INTEGER,
            MinLength: !isNaN(parseFloat(this.Config.Details.AffinityField.MinLength)) ? parseFloat(this.Config.Details.AffinityField.MinLength) : 0,
            MaxValue: !isNaN(parseFloat(this.Config.Details.AffinityField.MaxValue)) ? parseFloat(this.Config.Details.AffinityField.MaxValue) : Number.MAX_SAFE_INTEGER,
            MinValue: !isNaN(parseFloat(this.Config.Details.AffinityField.MinValue)) ? parseFloat(this.Config.Details.AffinityField.MinValue) : Number.MIN_SAFE_INTEGER
          };
          if (validationObj.MaxLength !== Number.MAX_SAFE_INTEGER || validationObj.MinLength !== 0)
          {
            this.FormRowNode.querySelector('input').classList.add('ui-has-sentence');
            this.FormRowNode.querySelector('input').classList.add('ui-has-length');
            this.FormRowNode.querySelector('input').dataset.maxLength = validationObj.MaxLength;
            this.FormRowNode.querySelector('input').dataset.minLength = validationObj.MinLength;
          }
          if (validationObj.MaxValue !== Number.MAX_SAFE_INTEGER || validationObj.MinValue !== Number.MIN_SAFE_INTEGER)
          {
            this.FormRowNode.querySelector('input').classList.add('ui-has-minmax');
            this.FormRowNode.querySelector('input').dataset.maxValue = validationObj.MaxValue;
            this.FormRowNode.querySelector('input').dataset.minValue = validationObj.MinValue;
          }
        }
      }

      if (this.Config.Details.AffinityField.FieldName === 'LINK_ID')
      {
        this.FormRowNode.classList.add('hidden');
      }

      // set any special elements

      /* custom behaviour for PAY_POINT */
      if (
        this.Config.Details.AffinityField.FieldName === 'PAY_POINT'
        && this.FormRowNode.querySelector('select')
        && this.Config.Details.AffinityField.Mode !== this.CleverForms.AffnityFieldModeTypes.Create.Enum
      )
      {
        this.PayPointInfo = {};
        this.PayPointInfo.DefaultValue = this.Config.Details.Value;
        this.PayPointInfo.CurrentValue = this.Config.Details.Value;
        this.FormRowNode.querySelector('select').addEventListener('change', this._payPointChanged);
      }

      if (Object.keys(this.CleverForms.CountrySensativeFields).contains(this.Config.Details.AffinityField.FieldName))
      {
        this.CountryWarningNode = document.createElement('div');
        this.CountryWarningNode.classList.add('country-warning', 'hidden');
        this.FormRowNode.appendChild(this.CountryWarningNode);
        if (this.FormRowNode.querySelector('select'))
        {
          var inserter = function ()
          {
            this.FormRowNode.appendChild(this.CountryWarningNode);
            if (this.FormRowNode.querySelector('select')) this.FormRowNode.querySelector('select').removeEventListener('ready', inserter);

            this._checkCountrySensative(this.Config.Details.Value);

          }.bind(this);
          this.FormRowNode.querySelector('select').addEventListener('ready', inserter);
        }
      }

      

      return this.FormRowNode;
    }
  }

  GetFromFormRow()
  {
    if (super.GetFromFormRow())
    {

      // get any special elements

      this.FormData = this.ElementController.GetFromFormRow();

      return this.FormData;
    }
    throw '{0} "{1}" ({2}) could not get base post data for form post'.format(this.Config.Type, this.Config.Details.Label, this.Config.UniqueName);
  }

  SetFromValue(value)
  {
    console.log('this should never get hit');
    console.log(value);
  }

  /**/

  GetModelName()
  {
    if (this.Config.Details.hasOwnProperty('AffinityField'))
    {
      if (
        this.Config.Details.AffinityField.hasOwnProperty('ModelName')
        && this.Config.Details.AffinityField.ModelName !== null
      ) return this.Config.Details.AffinityField.ModelName;
      if (
        this.Config.Details.AffinityField.hasOwnProperty('TableName')
        && this.Config.Details.AffinityField.TableName !== null
      ) return this.Config.Details.AffinityField.TableName;
    }
    return false;
  }

  GetModeName ()
  {
    if (this.Config.Details.hasOwnProperty('AffinityField'))
    {
      for (var key in this.CleverForms.AffnityFieldModeTypes)
      {
        if (this.CleverForms.AffnityFieldModeTypes[key].Enum === this.Config.Details.AffinityField.Mode)
        {
          return this.CleverForms.AffnityFieldModeTypes[key].Label;
        }
      }
    }
  }

  /**/

  _filterSelected (ev)
  {
    console.log(ev.detail);
    ev.stopPropagation();
    ev.preventDefault();
  }

  _modeSelected(ev)
  {
    var orignalMode = this.Config.Details.AffinityField.Mode;
    var mode = parseInt(ev.target.dataset.mode);

    if (
      this.CleverForms.IsKey(this.Config)
      && orignalMode !== mode
      && orignalMode === this.CleverForms.AffnityFieldModeTypes.Create.Enum
      && mode === this.CleverForms.AffnityFieldModeTypes.Select.Enum
    )
    {
      var modelName = this.Config.Details.AffinityField.ModelName;
      var query = 'li[data-model="' + modelName + '"]:not(.is-key-field)';
      var dependantFields = document.querySelectorAll(query);
      var warnNodes = [];
      for (var n = 0; n < dependantFields.length; n++) if (dependantFields[n].controller.Config.Details.AffinityField.Mode !== mode) warnNodes.push(dependantFields[n]);

      if (warnNodes.length > 0)
      {
        //var nodeLabels = [];
        //for (n = 0; n < warnNodes.length; n++) nodeLabels.push('&nbsp;&nbsp;&nbsp;&nbsp;' + warnNodes[n].controller.Config.Details.Label);
        //var message = 'You are changing "' + this.CleverForms.AffnityFieldModeEnums[orignalMode].Label + '" to "' + this.CleverForms.AffnityFieldModeEnums[mode].Label + '"';
        //message += '<br /><br >Please review the fields below to match your change:';
        //message += '<br /><br />' + nodeLabels.join('<br />');
        //message += '<br /><br >Do you wish to continue?';

        var nodeLabels = [];
        for (n = 0; n < warnNodes.length; n++) nodeLabels.push(warnNodes[n].controller.Config.Details.Label);
        var tab = '&nbsp;&nbsp;&nbsp;&nbsp;';
        var nodeLablesList = tab + nodeLabels.join('<br>' + tab);
        if (nodeLabels.length > 11)
        {
          var fields = nodeLabels.slice(0, 10);
          fields.push('...');
          fields.push(nodeLabels[nodeLabels.length - 1]);
          nodeLabels = fields;
          nodeLablesList = '<div class="indent">' + nodeLabels.join(', ') + '</div>';
        }
        
        var message = $a.Lang.ReturnPath('app.cf.designer.affinityfield_mode_switch_keys', {
          modeFrom: this.CleverForms.AffnityFieldModeEnums[orignalMode].Label,
          modeTo: this.CleverForms.AffnityFieldModeEnums[mode].Label,
          keylist: nodeLablesList
        });

        Affinity2018.Dialog.Show({
          message: message,
          textAlign: 'left',
          buttons: {
            ok: {
              show: true,
              icon: 'tick',
              text: 'Continue',
              color: 'blue'
            },
            cancel: {
              show: true,
              icon: 'cross',
              text: 'Cancel',
              color: 'grey'
            }
          },
          onOk: function () { this._continueModeSelect(mode); }.bind(this),
          onCancel: function ()
          {
            var modeData = this.CleverForms.AffnityFieldModeEnums[orignalMode];
            this['FilterModeWrapper' + modeData.Name].querySelector('input').checked = true;
          }.bind(this)
        });
      }
      else
      {
        this._continueModeSelect(mode);
      }       
    }
    else
    {
      this._continueModeSelect(mode);
    }
  }

  _continueModeSelect(mode)
  {
    var filterOption = this.CleverForms.AffnityFieldModeEnums[mode];

    if (this.CleverForms.IsLookup(this.Config) || this.CleverForms.IsGlobalKey(this.Config))
    {
      if (filterOption.Enum === this.CleverForms.AffnityFieldModeTypes.Select.Enum)
      {
        this.GenericGroupNode.classList.remove('hide');
      }
      else
      {
        this.GenericGroupNode.classList.add('hide');
      }
    }
    if (filterOption.Enum === this.CleverForms.AffnityFieldModeTypes.Display.Enum)
    {
      this.RequiredBoxNode.classList.add('hidden');
    }
    else
    {
      this.RequiredBoxNode.classList.remove('hidden');
    }
    
    this.HiddenBoxNode.classList.add('hidden');
    if (this.CleverForms.IsGlobalKey(this.Config) && filterOption.Enum === this.CleverForms.AffnityFieldModeTypes.Initiator.Enum)
    {
      this.HiddenBoxNode.classList.remove('hidden');
    }

  }

  /**/

  _insertDesignerKey (keyName, targetNode, position, referenceNode, keyData)
  {
    var consoleColor = '#ffb515';

    if ($a.isObject(keyData))
    {
      var config = $a.jsonCloneObject(this.CleverForms.ElementData.AffinityField);
      config = this._setAffinityFieldConfigFromKeyConfig(config, keyData);
      config = this.CleverForms.SelectDefaultModeOnFieldSearch(config);

      var exists = false, lookup = '';
      if (this.CleverForms.IsMasterFile(this.Config))
      {
        lookup = 'li.is-key-field[data-field="' + config.Details.AffinityField.FieldName + '"][data-model="' + keyData.ModelName + '"]';
        exists = this.CleverForms.Designer.RightListNode.querySelector(lookup) !== null;
      }
      else
      {
        lookup = '.item-' + keyName;
        exists = targetNode.querySelector(lookup) !== null;
      }

      if (exists) return;

      console.groupCollapsed('%c🔑 AUTO INSERT REQUIRED KEY', 'color:' + consoleColor);
      console.log('%c  keyName         ', 'color:' + consoleColor, keyName);
      console.log('%c  targetNode      ', 'color:' + consoleColor, targetNode);
      console.log('%c  position        ', 'color:' + consoleColor, position);
      console.log('%c  referenceNode   ', 'color:' + consoleColor, referenceNode);
      console.log('%c  keyData         ', 'color:' + consoleColor, keyData);
      console.log('%c  Already exists? ', 'color:' + consoleColor, exists);
      console.groupEnd();

      var refernceConfig = referenceNode.controller.Config;
      var referenceMode = refernceConfig.Details.AffinityField.Mode;

      //var createMode = this.CleverForms.AffnityFieldModeTypes.Create.Enum;
      var editMode = this.CleverForms.AffnityFieldModeTypes.Edit.Enum;
      var selectMode = this.CleverForms.AffnityFieldModeTypes.Select.Enum;
      var createMode = this.CleverForms.AffnityFieldModeTypes.Create.Enum;
      var displayMode = this.CleverForms.AffnityFieldModeTypes.Display.Enum;

      // TODO: Temp fix - we need "RequiresKeys" arrays in each of a "RequiresKeys" array's children (list of names rather than full obejcts will do)
      // so if the referenceMode is Edit, I can check if we are a lookup or a "key with no requires keys" to determine if we should be a select.
      // SO!! for now, let's assume all MasterFile KEYS are selesct if reference mode is Edit.
      //if we added Display field we set SELECT of the key as we dont have Display mode on the key anymore
      if (referenceMode === editMode && this.CleverForms.IsMasterFile(refernceConfig) || this.CleverForms.IsKey(config) && referenceMode === displayMode) referenceMode = selectMode;
      else if (!this.CleverForms.IsMasterFile(refernceConfig) && (this.CleverForms.IsLookup(config) || this.CleverForms.IsGlobalKey(config)) && referenceMode === createMode) referenceMode = selectMode;
      //if ([createMode, editMode].contains(referenceMode) && this.CleverForms.IsLookup(config)) referenceMode = selectMode;
      //else if (referenceMode === editMode && this.CleverForms.IsGlobalKey(config)) referenceMode = selectMode;

      config.Details.AffinityField.Mode = referenceMode;

      this.CleverForms.Designer.Add(config, false, targetNode, position, referenceNode);

    }
  }

  _setAffinityFieldConfigFromKeyConfig (config, keyConfig)
  {
    for (var key in config.Details.AffinityField)
    {
      if (config.Details.AffinityField.hasOwnProperty(key) && keyConfig.hasOwnProperty(key))
      {
        config.Details.AffinityField[key] = keyConfig[key];
      }
    }

    if (
      !this.CleverForms.AllowedGlobalKeys.contains(keyConfig.FieldName)
      && keyConfig.FieldName !== this.Config.Details.AffinityField.FieldName
      && keyConfig.KeyFields === null
    )
    {
      var copyOwnerConfig = $a.jsonCloneObject(this.Config.Details.AffinityField);
      keyConfig.KeyFields = [];
      for (var k = 0; k < copyOwnerConfig.KeyFields.length; k++)
      {
        if (
          copyOwnerConfig.KeyFields[k].FieldName !== this.Config.Details.AffinityField.FieldName
          && copyOwnerConfig.KeyFields[k].FieldName !== keyConfig.FieldName
        )
        {
          keyConfig.KeyFields.push(copyOwnerConfig.KeyFields[k]);
        }
      }
      if (copyOwnerConfig.IsKeyField) keyConfig.KeyFields.push(copyOwnerConfig);
      config.Details.AffinityField.KeyFields = keyConfig.KeyFields;
    }
      
    // TODO: These should be in the search return. NO MUTATORS!!!
    config = this.CleverForms.__PORT_G_G_G_GET_AFFINITYFIELD_DATA({ Details: { AffinityField: keyConfig } }, config);
    // End bad mutatorness

    config.Details.AffinityField.TableName = keyConfig.TableName;
    config.Label = keyConfig.DefaultLabel;
    config.Details.Label = keyConfig.DefaultLabel;
    config.Details.HelpText = keyConfig.FieldHint;
    config.Details.Required = this.CleverForms.IsMasterFile(keyConfig) ? keyConfig.IsMandatory : this.Config.Details.Required;
    config.Details.IsReadOnly = keyConfig.IsReadOnly;
    if (config.Details.AffinityField.IsKeyField)
    {
      config.Icon.Code = Affinity2018.icons.cfAffinityKey;
      config.Icon.Name = 'cf-affinity-key';
      config.Icon.Color = 'grey';
    }
    return config;
  }
  
  /**/

  _genericListChanged(ev)
  {
    if (this.GenericGroupSelectNode.value !== this.GenericGroupSelectValue)
    {
      this.GenericGroupSelectValue = this.GenericGroupSelectNode.value;
      let model = this.Config.Details.AffinityField.ModelName;
      let property = this.Config.Details.AffinityField.FieldName;
      let apiBase = this.CleverForms.GetLookupApi;
      let api = `${apiBase}?ModelName=${model}&PropertyName=${property}`;
      if (!$a.isNullOrEmpty(this.GenericGroupSelectValue))
      {
        apiBase = this.CleverForms.GetGenericGroupCodesLookupApi; 
        api = `${apiBase}?ModelName=${model}&PropertyName=${property}&genericGroupId=${this.GenericGroupSelectValue.trim()}`;
      }
      this.GenericGroupLoaderNode.classList.add('show');

      if (this.GenericGroupNode.classList.contains('show-edit'))
      {
        let parentNode = this.GenericGroupNode.closest('.scroller');
        let childNode = this.GenericGroupNode.querySelector('label');
        let parent = parentNode.getBoundingClientRect();
        let child = childNode.getBoundingClientRect();
        let scroll = (child.top - parent.top) + parentNode.scrollTop;
        this.GenericGroupNode.closest('.scroller').scrollTo(0, scroll);
      }

      axios.get(api).then(((response) => { this._gotGroupFilter(response); }).bind(this)).catch(((error) => { this._gotGenericListForEditFailed(error); }).bind(this));
    }
  }

  _gotGroupFilter(response)
  {
    this.GroupEditorNode.querySelector('input[type="text"]').value = '';
    this.GroupEditorNode.querySelectorAll('input[type="text"]')[1].value = '';
    /**/
    let data = [];
    let value = null;
    let name = null;
    let description = null;
    if (response.hasOwnProperty('data') && response.data.hasOwnProperty('Code')) value = response.data.Code;
    if (response.hasOwnProperty('data') && response.data.hasOwnProperty('GroupName')) name = response.data.GroupName;
    if (response.hasOwnProperty('data') && response.data.hasOwnProperty('Description')) description = response.data.Description;
    if (response.hasOwnProperty('data') && response.data.hasOwnProperty('Codes')) data = response.data.Codes;
    if (response.hasOwnProperty('data') && Array.isArray(response.data)) data = response.data;
    if (Array.isArray(response)) data = response;
    if(value === null && !$a.isNullOrEmpty(this.GenericGroupSelectNode.value))
    {
      value = this.GenericGroupSelectNode.value;
    }
    if (name === null && description === null && !$a.isNullOrEmpty(this.GenericGroupSelectNode.value))
    {
      let nameDescParts = this.GenericGroupSelectNode.querySelectorAll('option')[this.GenericGroupSelectNode.selectedIndex].innerText.trim().split(' - ');
      if (nameDescParts.length === 2)
      {
        name = nameDescParts[0];
        description = nameDescParts[1];
      }
      else
      {
        let index = Math.round(nameDescParts.length / 2);
        name = nameDescParts.slice(0, index).join(' - ');
        description = nameDescParts.slice(index, nameDescParts.length).join(' - ');
      }
    }
    if (value !== null)
    {
      this.GenericGroupSelectNode.removeEventListener('change', this._genericListChanged);
      this.GenericGroupSelectValue = response.data.Id;
      this.GenericGroupSelectNode.value = this.GenericGroupSelectValue;
      this.GroupEditorNode.querySelector('input[type="text"]').value = name == null ? '' : name;
      this.GroupEditorNode.querySelectorAll('input[type="text"]')[1].value = description == null ? '' : description;
      setTimeout(_this => { _this.GenericGroupSelectNode.addEventListener('change', _this._genericListChanged); }, 100, this);
    }
    this._gotGenericListForEdit(data);
  }

  _gotGenericList(response)
  {
    if (
      $a.isArray(response)
      && this.GenericGroupNode.querySelector('select')
    )
    {
      Affinity2018.Apps.Plugins.Autocompletes.Remove(this.GenericGroupSelectNode);
      this.GenericGroupSelectNode.innerHTML = '';
      var i = 0, addedCount = 0, selected = null, selectedIndex = -1, pair, optionNode;
      if (!this.ForceDisableGenericGroupEditor && (response.length > 0 || this.ForceGerenicGroupEditorEnabled))
      {
        optionNode = document.createElement('option');
        optionNode.value = '';
        optionNode.innerHTML = 'None';
        this.GenericGroupSelectNode.appendChild(optionNode);
        for (; i < response.length; i++)
        {
          pair = response[i];
          if ($a.isObject(pair))
          {
            let key = pair.hasOwnProperty('Value') ? pair.Value : pair.hasOwnProperty('Description') ? pair.Description : null;
            let value = pair.hasOwnProperty('Key') ? pair.Key : pair.hasOwnProperty('Code') ? pair.Code : null;
            if (!$a.isNullOrEmpty(key) && !$a.isNullOrEmpty(value))
            {
              optionNode = document.createElement('option');
              optionNode.innerHTML = key;
              optionNode.value = value;
              if (this.Config.Details.AffinityField.GenericGroupId.toString() === value.toString() && selected === null) 
              {
                optionNode.selected = 'selected';
                optionNode.setAttribute('selected', 'selected');
                selected = value.toString();
                selectedIndex = addedCount + 0;
              }
              this.GenericGroupSelectNode.appendChild(optionNode);
              addedCount++;
            }
          }
        }
        if (selected !== null)
        {
          this.GenericGroupSelectNode.selectedIndex = selectedIndex;
          this.GenericGroupSelectNode.value = selected;
          this.GenericGroupSelectNode.dataset.defaultValue = selected;
        }
        if (!this.ForceDisableGenericGroupEditor && (addedCount > 0 || this.ForceGerenicGroupEditorEnabled))
        {
          this.GenericGroupSelectNode.classList.add('ui-has-autocomplete');
          if (!Affinity2018.IsMobile) this.GenericGroupSelectNode.classList.add('ui-autocomplete-force-top');
          Affinity2018.Autocompletes.Apply(this.GenericGroupSelectNode);
          this.GenericGroupNode.classList.remove('hidden');
          if (this.Config.Details.AffinityField.Mode === this.CleverForms.AffnityFieldModeTypes.Select.Enum)
          {
            this.GenericGroupNode.classList.remove('hide');
          }
          this.GenericGroupLoaderNode.classList.remove('show');
          this._genericListChanged();
        }
        else
        {
          this.GenericGroupSelectNode.innerHTML = '';
          this.GenericGroupNode.classList.add('hidden');
          this.GenericGroupLoaderNode.classList.remove('show');
        }
      }
      else
      {
        this.GenericGroupSelectNode.innerHTML = '';
        this.GenericGroupNode.classList.add('hidden');
        this.GenericGroupLoaderNode.classList.remove('show');
      }
    }
    else
    {
      this._getGenericListFailed(resposne);
    }
  }
  _getGenericListFailed (resposne)
  {
    // TODO: Do we show the editor anyway? 
    //this.GenericGroupNode.classList.add('hide');
    //this.GenericGroupNode.classList.add('hidden');
    if (!this.ForceDisableGenericGroupEditor && this.ForceGerenicGroupEditorEnabled)
    {
      console.log('%cGeneric Group List failed', 'color: orange', resposne);
      this.GenericGroupLoaderNode.classList.remove('show');
      this.GenericGroupNode.classList.remove('hidden');
      this.GenericGroupNode.classList.remove('hide');
      this._gotGenericList([]);
      this._buildGenericListForEdit([]);
    }
  }

  _gotGenericListForEdit(response)
  {
    clearTimeout(this._buildGenericListForEditTimeout);
    this._buildGenericListForEditTimeout = setTimeout(this._buildGenericListForEdit, 100, response);
  }
  _gotGenericListForEditFailed(response)
  {
    console.log('%c' + response, 'color: orange');
  }

  _buildGenericListForEdit(data)
  {
    if (Array.isArray(data))
    {
      let groupId = !Affinity2018.isNullOrEmpty(this.GenericGroupSelectNode.value) ? this.GenericGroupSelectNode.value : null;
      var html = '';
      for (let pair of data)
      {
        if (
          (pair.hasOwnProperty('Key') && pair.hasOwnProperty('Value'))
          || (pair.hasOwnProperty('Id') && pair.hasOwnProperty('Description'))
        )
        {
          let key = pair.hasOwnProperty('Key') ? pair.Key : pair.hasOwnProperty('Description') ? pair.Description : null;
          let value = pair.hasOwnProperty('Value') ? pair.Value : pair.hasOwnProperty('Code') ? pair.Code : null;
          let isHidden = pair.hasOwnProperty('IsHidden') && pair.IsHidden;
          html += this.GenericRowTemplate.format({
            key: key !== null ? key.toString().trim() : '',
            value: value !== null ? value.toString().trim() : '',
            color: isHidden ? this.GerenicGroupEditButtonColors.Hidden : this.GerenicGroupEditButtonColors.Visible,
            rowClass: isHidden ? 'hide' : ''
          });
        }
      }
      if (!$a.isNullOrEmpty(this.GroupEditorNode.querySelector('tbody').innerHTML.trim()))
      {
        this.GroupEditorTableNode.removeEventListener('click', this._genericListEditClicked);
        this.GroupEditorNode.querySelector('button.download').removeEventListener('click', this._downloadGenericEditListCSV);
        this.GroupEditorNode.querySelector('button.upload input[type="file"]').removeEventListener('change', this._uploadGenericEditListCSV);
        this.GroupEditorNode.querySelector('button.save').removeEventListener('click', this._rebuildGenericEditList);
      }
      this.GroupEditorNode.querySelector('tbody').innerHTML = html;
      this.GroupEditorTableNode = this.GroupEditorNode.querySelector('tbody');
      this.GroupEditorTableNode.addEventListener('click', this._genericListEditClicked);
      this.GroupEditorNode.querySelector('button.download').addEventListener('click', this._downloadGenericEditListCSV);
      this.GroupEditorNode.querySelector('button.upload input[type="file"]').addEventListener('change', this._uploadGenericEditListCSV);
      this.GroupEditorNode.querySelector('button.save').addEventListener('click', this._rebuildGenericEditList);
      /**/
      let labels = [this.GenericFilterLables.Edit, this.GenericFilterLables.EditClose];
      let isOpen = this.GenericGroupNode.classList.contains('show-edit')
      if (Affinity2018.isNullOrEmpty(this.GenericGroupSelectNode.value))
      {
        labels = [this.GenericFilterLables.Create, this.GenericFilterLables.CreateClose];
      }
      this.GenericEditToggle.innerHTML = isOpen ? labels[1] : labels[0];
      this.GenericEditToggle.dataset.hiddenTargetLabels = labels.join(',');
      this.LastGenericListData = data;
    }
    this.GenericGroupLoaderNode.classList.remove('show');
  }

  _genericListEditClicked(ev)
  {
    let button = $a.isNode(ev) ? ev : ev.target.classList.contains('div.button') ? ev.target : ev.target.closest('div.button');
    if (button)
    {
      let row = button.closest('tr');
      if (row.classList.contains('hide'))
      {
        row.classList.remove('hide');
        button.classList.remove('icon-eye', this.GerenicGroupEditButtonColors.Hidden);
        button.classList.add('icon-eye-block', this.GerenicGroupEditButtonColors.Visible);
      }
      else
      {
        row.classList.add('hide');
        button.classList.add('icon-eye', this.GerenicGroupEditButtonColors.Hidden);
        button.classList.remove('icon-eye-block', this.GerenicGroupEditButtonColors.Visible);
      }

      /**/

      this._rebuildGenericEditList();
    }
  }

  _rebuildGenericEditList(ev)
  {
    clearTimeout(this._rebuildGenericEditListTimer);
    this._rebuildGenericEditListTimer = setTimeout(this._doRrebuildGenericEditList, 100, ev);
  }
  
  _doRrebuildGenericEditList(ev)
  {
    clearTimeout(this._rebuildGenericEditListTimer);
    if (this.GroupEditorTableNode)
    {
      let groupId = !Affinity2018.isNullOrEmpty(this.GenericGroupSelectNode.value) ? this.GenericGroupSelectNode.value : null;
      this.GenericListEdited = {
        Name: this.GroupEditorNode.querySelector('input[type="text"]').value.trim(),
        Description: this.GroupEditorNode.querySelectorAll('input[type="text"]')[1].value.trim(),
        List: []
      };
      let cells = this.GroupEditorTableNode.querySelectorAll('tr');
      for (let cell of cells)
      {
        this.GenericListEdited.List.push({
          Code: cell.querySelectorAll('td')[1].innerText.trim(),
          Description: cell.querySelector('td').innerText.trim(),
          IsHidden: cell.closest('tr').classList.contains('hide')
        });
      }
      let totalRows = cells.length;
      let visibleRows = this.GroupEditorTableNode.querySelectorAll('tr:not(.hide)').length;
      if (this.GenericListEdited.List.length > 0 && totalRows === visibleRows)
      {
        this._disableButtons();
      }
      else
      {
        this._enableButtons();
      }
      //console.group('Write to config:');
      //console.log(this.GenericListEdited);
      //console.groupEnd();
      if (ev)
      {
        let button = $a.isNode(ev) ? ev : ev.target.classList.contains('button.save') ? ev.target : ev.target.closest('button.save');
        if (button)
        {
          let errors = [];
          if (this.GenericListEdited.Name.trim() === '')
          {
            errors.push($a.Lang.ReturnPath('app.cf.design_items.filter-edit-name-label-error'));
          }
          if (this.GenericListEdited.Description.trim() === '')
          {
            errors.push($a.Lang.ReturnPath('app.cf.design_items.filter-edit-description-label-error'));
          }
          if (this.GenericListEdited.List.length === 0)
          {
            errors.push($a.Lang.ReturnPath('app.cf.design_items.filter-edit-list-max-error'));
          }
          if(totalRows === visibleRows)
          {
            errors.push($a.Lang.ReturnPath('app.cf.design_items.filter-edit-list-min-error'));
          }
          if (errors.length > 0)
          {
            Affinity2018.Dialog.Show({
              message: `${$a.Lang.ReturnPath('app.cf.design_items.filter-edit-error')}<ul><li>${errors.join('</li><li>')}</li></ul>`,
              textAlign: 'left',
              buttons: {
                cancel: false
              }
            });
          }
          else
          {
            let postData = {
              ModelName: this.Config.Details.AffinityField.ModelName,
              PropertyName: this.Config.Details.AffinityField.FieldName,
              GroupName: this.GenericListEdited.Name,
              Description: this.GenericListEdited.Description,
              Id: groupId,
              Codes: this.GenericListEdited.List
            };
            //console.groupCollapsed('Do save ..');
            //console.log(JSON.stringify(postData, null, 2));
            //console.groupEnd();
            axios.post(this.CleverForms.GetGenericGroupSave, postData)
              .then(function(response)
              {
                this._enableButtons();
                this.Config.Details.AffinityField.GenericGroupId = response.data.Id;
                this.GroupEditorNode.querySelector('input[type="text"]').value = response.data.GroupName;
                this.GroupEditorNode.querySelectorAll('input[type="text"]')[1].value = response.data.Description;
                this._buildGenericListForEdit(response.data.Codes);
                if (postData.Id === null)
                {
                  let optionNodes = this.GenericGroupSelectNode.querySelectorAll('option:checked');
                  if (optionNodes.length > 0)
                  {
                    for (var node of optionNodes)
                    {
                      node.selected = null;
                      node.removeAttribute('selected');
                    }
                  }
                  let optionNode = document.createElement('option');
                  optionNode.innerHTML = response.data.Description;
                  optionNode.value = response.data.Id;
                  optionNode.selected = 'selected';
                  optionNode.setAttribute('selected', 'selected');
                  this.GenericGroupSelectNode.appendChild(optionNode);
                  this.GenericGroupSelectNode.selectedIndex = this.GenericGroupSelectNode.querySelectorAll('option').length - 1;
                  this.GenericGroupSelectNode.value = response.data.Id.toString();
                  this.GenericGroupSelectNode.dataset.defaultValue = response.data.Id.toString();
                  this.GenericGroupSelectNode.widgets.Autocomplete.refreshFromSelect();
                }
                Affinity2018.Dialog.Show({
                  message: $a.Lang.ReturnPath('app.cf.design_items.filter-edit-saved-message'),
                  showOk: true,
                  showCancel: false,
                  showInput: false,
                  textAlign: 'center'
                });
              }.bind(this))
              .catch(function(error)
              {
                this._disableButtons();
                console.log('%cGeneric Group Post failed', 'color: orange', error);
              }.bind(this));
          }
        }
      }
    }
  }

  _downloadGenericEditListCSV()
  {
    let csvContent = 'data:text/csv;charset=utf-8,Key,Value,IsHidden\r\n';
    let cells = this.GroupEditorTableNode.querySelectorAll('tr');
    for (let cell of cells)
    {
      let key = cell.querySelector('td').innerText.trim().replaceAll(',', '%2C');
      let value = cell.querySelectorAll('td')[1].innerText.trim();
      let isHidden = cell.classList.contains('hide');
      csvContent += `${key},${value},${isHidden}\r\n`;
    }
    let encodedUri = encodeURI(csvContent);
    let fileName = $a.Lang.ReturnPath('app.cf.design_items.filter-edit-label').trim().toLowerCase().replaceAll(' ', '_') + '_data.csv';
    $a.Dialog.Show({
      message: 'Save as',
      buttons: {
        ok: {
          show: true,
          icon: 'download',
          text: 'Download',
          color: 'blue'
        },
        cancel: {
          show: true,
          icon: 'cross',
          text: 'Cancel',
          color: 'grey'
        }
      },
      input: {
        show: true,
        placeholder: '',
        default: fileName,
        lines: 1
      },
      textAlign: 'left',
      canBackgroundClose: false,
      onOk: function (name)
      {
        name = name.trim();
        if (name !== '')
        {
          if (name.toLowerCase().substring(name.length - 4, name.length) !== '.csv') name = name + '.csv';
          let link = document.createElement('a');
          link.setAttribute('href', encodedUri);
          link.setAttribute('download', name);
          document.body.appendChild(link);
          link.click();
          document.body.removeChild(link);
          link = null;
        }
      }.bind(this)
    });
  }

  _uploadGenericEditListCSV()
  {
    let newData = [];
    let fileNode = this.GroupEditorNode.querySelector('button.upload input[type="file"]');
    if (fileNode && fileNode.files && fileNode.files.length > 0)
    {
      let file = fileNode.files[0];
      if (file)
      {
        let size = ((file.size / 1024) / 1024).toFixed(4);
        let ext = /(?:\.([^.]+))?$/.exec(file.name)[1].toLowerCase().trim();
        if (ext === 'csv' && size <= 20) // less than or equal too 20MB
        {
          this.GenericFileReader.onload = (() =>
          {
            let rows = this.GenericFileReader.result.split(/\r\n|\n/);
            if (rows.length > 0)
            {
              for (let row of rows)
              {
                let rawValues = row.split(',');
                if (rawValues.length === 3)
                {
                  if (
                    rawValues[0].trim() !== 'Key'
                    && rawValues[0].trim() !== 'Value'
                    && rawValues[0].trim() !== 'IsHidden'
                  )
                  {
                    newData.push({
                      Key: rawValues[0].trim().replaceAll('%2C', ','),
                      Value: rawValues[1].trim(),
                      IsHidden: rawValues[2].trim().toLowerCase() === 'true' ? true : false
                    });
                  }
                }
              }
            }
            if (newData.length > 0)
            {
              this._buildGenericListForEdit(newData);
            }
            else
            {
              $a.Dialog.Show({
                message: errors.join('We could not find any usable data in "' + file.name + '".')
              });
            }
            this.GenericFileReader.onload = null;
          }).bind(this);
          this.GenericFileReader.readAsBinaryString(file);
        }
      }


    }

    /* reset file node */

    try
    {
      fileNode.value = '';
    }
    catch { }
    try
    {
      if (fileNode.value)
      {
        fileNode.type = "text";
        fileNode.type = "file";
      }
    }
    catch { }
  }

  /**/

  _gotFormList (response)
  {
    if (
      $a.isArray(response)
      && this.FormLinkNode.querySelector('select')
    )
    {
      var addedCount = 0, optionSelected = false, f = 0, optionData, optionNode;
      if (response.length > 0)
      {
        var linkedTemplateId = this.Config.Details.AffinityField.LinkedTemplateId;
        var linkIds = $a.isString(linkedTemplateId) ? linkedTemplateId.split(';') : [''];
        var linkId = linkIds[0].trim();
        var workflowId = linkIds.length === 2 ? linkIds[1].trim() : '';

        optionNode = document.createElement('option');
        optionNode.innerHTML = 'None';
        optionNode.value = 0;
        if (linkId === '')
        {
          optionNode.selected = 'selected';
          optionSelected = true;
        }
        this.FormLinkSelectNode.appendChild(optionNode);

        for ( ; f < response.length; f++)
        {
          optionData = response[f];
          if (workflowId === '')
          {
            workflowId = optionData.WorkflowDefinitionId;
            optionNode = document.createElement('option');
            optionNode.innerHTML = optionData.TemplateDescription + ' - ' + optionData.WorkflowName;
            optionNode.value = optionData.TemplateId + ';' + optionData.WorkflowDefinitionId;
            if (!optionSelected && optionData.TemplateId === linkId)
            {
              optionNode.selected = 'selected';
              optionNode.setAttribute('selected', 'selected');
              this.FormLinkSelectNode.dataset.defaultValue = linkId + ';' + workflowId;
              optionSelected = true;
            }
            this.FormLinkSelectNode.appendChild(optionNode);
            addedCount++;
          }
          else
          {
            optionNode = document.createElement('option');
            optionNode.innerHTML = optionData.TemplateDescription + ' - ' + optionData.WorkflowName;
            optionNode.value = optionData.TemplateId + ';' + optionData.WorkflowDefinitionId;
            if (!optionSelected && optionData.TemplateId === linkId && optionData.WorkflowDefinitionId === workflowId)
            {
              optionNode.selected = 'selected';
              optionNode.setAttribute('selected', 'selected');
              this.FormLinkSelectNode.dataset.defaultValue = linkId + ';' + workflowId;
              optionSelected = true;
            }
            this.FormLinkSelectNode.appendChild(optionNode);
            addedCount++;
          }
        }
        if (addedCount > 0)
        {
          this.FormLinkNode.classList.remove('hidden');
          this.FormLinkSelectNode.classList.add('ui-has-autocomplete');
          if (!Affinity2018.IsMobile) this.FormLinkSelectNode.classList.add('ui-autocomplete-force-top');
          Affinity2018.Autocompletes.Apply(this.FormLinkSelectNode);
        }
        else
        {
          this.FormLinkSelectNode.innerHTML = '';
          this.FormLinkNode.classList.add('hidden');
        }
      }
      else
      {
        this.FormLinkSelectNode.innerHTML = '';
        this.FormLinkNode.classList.add('hidden');
      }
    }
    else
    {
      this._getFormListFailed(response);
    }
  }

  _getFormListFailed (response)
  {
    this.FormLinkNode.classList.add('hidden');

    console.log(response);
  }

  /**/

  _formRowLookupChanged (ev)
  {
    var select = this.FormRowNode.querySelector('select');

    var modelName = this.Config.Details.AffinityField.ModelName;

    if (document.querySelectorAll('div[data-model="' + modelName + '"].row-affinityfield').length > 0)
    {
      $a.ShowPageLoader();
      var key = encodeURIComponent(select.value.trim());
      this.FormLookupApi = '{api}?modelName={modelName}&key={key}&instanceId={instanceId}'.format({
        api: this.CleverForms.GetModelApi.trim(),
        modelName: this.Config.Details.AffinityField.ModelName,
        key,
        instanceId: this.CleverForms.GetInstanceGuid()
      });

      console.clear();
      if (this.CleverForms.IsGlobalKey(this.Config)) this.CleverForms.LockEmployeeSelect();
      this.CleverForms.ModelStatus = this.CleverForms.LoadStatusEnum.Loading;
      $a.RequestQueue.Add(this.FormLookupApi, this._lookupModelLoaded, this._lookupModelFailed);
    }
  }

  _payPointChanged(ev)
  {
    var value = this.FormRowNode.querySelector('select').value;
    this.PayPointInfo.CurrentValue = value;
    var payPointModeIsCreate = this.Config.Details.AffinityField.Mode === this.CleverForms.AffnityFieldModeTypes.Create.Enum;
    var globalModeIsCreate = this.CleverForms.ReturnExisitingModelKeyNode('EMPLOYEE') ? this.CleverForms.ReturnExisitingModelKeyNode('EMPLOYEE').controller.Config.Details.AffinityField.Mode === this.CleverForms.AffnityFieldModeTypes.Create.Enum : false;
    if (!globalModeIsCreate && !payPointModeIsCreate)
    {
      var defaultValue = this.PayPointInfo.DefaultValue !== null && this.PayPointInfo.DefaultValue !== undefined ? this.PayPointInfo.DefaultValue.toString() : this.PayPointInfo.DefaultValue;
      var currentValue = this.PayPointInfo.CurrentValue !== null && this.PayPointInfo.CurrentValue !== undefined ? this.PayPointInfo.CurrentValue.toString() : this.PayPointInfo.CurrentValue;
      if (currentValue !== defaultValue && defaultValue !== undefined)
      {
        Affinity2018.Dialog.Show({
          message: $a.Lang.ReturnPath('app.cf.form.country_popup_warning'),
          textAlign: 'left',
          buttons: {
            ok: {
              show: true,
              icon: 'tick',
              text: 'Continue',
              color: 'blue'
            },
            cancel: false
          },
          onOk: function ()
          {
            // Do nothing yet .. keep it simple ..
          }.bind(this)
        });
      }
    }
  }

  _lookupModelLoaded(data)
  { 
    this.ModelData = data;
    this.CleverForms.ModelStatus = this.CleverForms.LoadStatusEnum.Complete;
    if (!this.CleverForms.IsEmployeeDataReady())
    {
      window.removeEventListener('GotEmployeeData', this._lookupModelDispatch);
      window.addEventListener('GotEmployeeData', this._lookupModelDispatch);
    }
    else
    {
      this._lookupModelDispatch();
    }
  }

  _lookupModelDispatch()
  {
    // becuase setting AffinityFields will validate, also validate NON AffinityFields
    /*
    if (this.CleverForms.IsGlobalKey(this.Config))
    {
      document.querySelectorAll('#form .form-row.required:not(.row-affinityfield)').forEach(function (rowNode)
      {
        var node = rowNode.querySelector('select,input,textarea');
        var widgets = node ? node.widgets : {};
        for (var widget in widgets)
        {
          if (widgets[widget].hasOwnProperty('IsValid')) widgets[widget].IsValid();
        }
      });
    }
    */
    // Fire event to set (and validate) AffinityFields
    var event = new CustomEvent('ModelLookupChanged', {
      detail: {
        FieldKey: this.FormRowNode.querySelector('select').value,
        Model: this.Config.Details.AffinityField.ModelName,
        Data: this.ModelData,
        FromKeyChange: this.CleverForms.IsGlobalKey(this.Config)
      }
    });
    $a.HidePageLoader();
    if (this.CleverForms.IsGlobalKey(this.Config)) this.CleverForms.ReleaseEmployeeSelect();
    window.dispatchEvent(event);
  }

  _lookupModelFailed (error)
  {
    this.CleverForms.ModelStatus = this.CleverForms.LoadStatusEnum.Error;
    $a.HidePageLoader();
    if (this.CleverForms.IsGlobalKey(this.Config)) this.CleverForms.ReleaseEmployeeSelect();
    var color = '#ffb515';
    console.group('%cForm Lookup Hook Failed', 'color:' + color + ';font-weight:bold;');
    console.log('%c' + this.FormLookupApi, 'color:' + color);
    var errorData = this.CleverForms.GetDetailsFromErrorPage(error);
    if (errorData !== null)
    {
      if (errorData.Title !== '') console.log('%cTitle: ' + errorData.Title, 'color:' + color);
      if (errorData.Source !== '') console.log('%cSource: ' + errorData.Source, 'color:' + color);
      if (errorData.Description !== '') console.log('%cDescription: ' + errorData.Description, 'color:' + color);
      if (errorData.Details !== '') console.log('%cDetails: ' + errorData.Details, 'color:' + color);
      if (errorData.Lines.length > 0) errorData.Lines.forEach(function (line) { console.log('%c\t' + line, 'color:' + color); })
    }
    console.groupEnd();
  }

  _modelLookupChanged (ev)
  {
    let fromKeyChange = 'detail' in ev && 'FromKeyChange' in ev.detail ? ev.detail.FromKeyChange : false;
    var color, messageStr, messgae;
    var model = ev.detail.Model;
    var data = ev.detail.Data;
    var key = ev.detail.FieldKey;
    var checkValue = null;
    var to = null;
    var from = this.ElementController.GetFromFormRow();
    if ($a.isObject(from) && from.hasOwnProperty('Value')) from = from.Value;
    if (!$a.isString(from) && isNaN(parseInt(from))) from = JSON.stringify(from);
    if (this.Config.Details.AffinityField.ModelName === model && Object.keys(data).contains(this.Config.Name))
    {
      if (data[this.Config.Name] !== null)
      {
        to = data[this.Config.Name];
        if ($a.isObject(to) && to.hasOwnProperty('Value')) to = to.Value;
        if (!$a.isString(to) && isNaN(parseInt(to))) to = JSON.stringify(to);
        color = '#8dca35';
        messageStr = 'Change "{Label}" ({FieldName} - {Type} Element) from "{From}" to "{To}"';
        messgae = messageStr.format({
          Label: this.Config.Details.Label,
          FieldName: this.Config.Details.AffinityField.FieldName,
          Type: this.ElementControllerType,
          From: from,
          To: to
        });
        //console.groupCollapsed('%c' + messgae, 'color:' + color + ';font-weight:bold;');
        //console.log(data);
        console.log('%c' + messgae, 'color:' + color + ';font-weight:bold;');

        this.ElementController.SetFromValue(data[this.Config.Name], fromKeyChange);

        checkValue = data[this.Config.Name];

      }
      else
      {
        if (key === '')
        {
          color = '#8dca35';
          messageStr = 'Change "{Label}" ({FieldName} - {Type} Element) was cleared because value is null';
        }
        else
        {
          //color = '#ff5c00';
          //messageStr = 'Change "{Label}" ({FieldName} - {Type} Element) was not set because value is null';
          color = '#8dca35';
          messageStr = 'Change "{Label}" ({FieldName} - {Type} Element) was cleared because value is null';
        }
        messgae = messageStr.format({
          Label: this.Config.Details.Label,
          FieldName: this.Config.Details.AffinityField.FieldName,
          Type: this.ElementControllerType
        });
        //console.groupCollapsed('%c' + messgae, 'color:' + color + ';font-weight:bold;');
        //console.log(data);
        console.log('%c' + messgae, 'color:' + color + ';font-weight:bold;');

        if (key === '') this.ElementController.SetFromValue('', fromKeyChange);
        else this.ElementController.SetFromValue('', fromKeyChange);

        checkValue = '';

      }
      //console.groupEnd();


      if (checkValue !== null) this._checkCountrySensative(checkValue, fromKeyChange);

      if (this.Config.Details.AffinityField.FieldName === 'PAY_POINT')
      {
        this.PayPointInfo.DefaultValue = data[this.Config.Name];
        this.PayPointInfo.CurrentValue = data[this.Config.Name];
      }

    }
  }

  _checkCountrySensative(newValue, fromKeyChange)
  {
    fromKeyChange = fromKeyChange === undefined ? false : fromKeyChange;
    if (Object.keys(this.CleverForms.CountrySensativeFields).contains(this.Config.Details.AffinityField.FieldName))
    {
      var label = this.FormRowNode.querySelector('label').innerText.trim();
      var dataValue = newValue.toString().trim();
      var formValue = this.ElementController.GetFromFormRow().Value.toString().trim();
      var formCountry = $a.isNullOrEmpty(this.CleverForms.FormCountry) ? null : this.CleverForms.GetCountryDisplayVariant(this.CleverForms.FormCountry);
      var profileCountry = $a.isNullOrEmpty(Affinity2018.FormProfile.Country) || Affinity2018.FormProfile.Country.toString().trim().toUpperCase() === 'NULL' ? null : this.CleverForms.GetCountryDisplayVariant(Affinity2018.FormProfile.Country);
      //console.log('Check Sensatives: data value: ', dataValue, ' , from value: ', formValue);
      if (
        !$a.isNullOrEmpty(Affinity2018.FormProfile.PayPoint)
        && !$a.isNullOrEmpty(formCountry)
        && (dataValue !== formValue || $a.isNullOrEmpty(formValue))
      )
      {
        if (formCountry === profileCountry)
        {
          console.log('%cTried to load "' + label + '" with failed values ("' + dataValue + '" vs "' + formValue + '") but countries match. Is this user broken?', 'color:yellow');
          this.CountryWarningNode.classList.add('hidden');
        }
        else
        {
          this.CountryWarningNode.innerHTML = $a.Lang.ReturnPath('app.cf.form.country_sensative_inline_warning', {
            fieldName: label,
            formCountry: formCountry,
            country: profileCountry
          });
          this.CountryWarningNode.classList.remove('hidden');
        }
      }
      else
      {
        this.CountryWarningNode.innerHTML = '';
        this.CountryWarningNode.classList.add('hidden');
        if ($a.isNullOrEmpty(formCountry))
        {
          if ($a.isNullOrEmpty(formValue))
          {
            console.log('%cTried to load "' + label + '" with saved value NULL', 'color:yellow');
          }
          else
          {
            console.log('%cTried to load "' + label + '" with saved value "' + formValue + '"', 'color:yellow');
          }
        }
      }
      this.FormRowNode.appendChild(this.CountryWarningNode);
      Affinity2018.Apps.CleverForms.Form.ResizeSection(this.FormRowNode);
    }
  }

  _globalKeyChanged(ev)
  {
    this.CleverForms.ProfileStatus = this.CleverForms.LoadStatusEnum.Loading;
    window.removeEventListener('GotEmployeeData', this._updateNonAffintyFields);
    window.addEventListener('GotEmployeeData', this._updateNonAffintyFields);
    this.CleverForms.GetEmployeeData(this.CleverForms.GetFormEmployeeNo());
  }

  _updateNonAffintyFields()
  {
    window.removeEventListener('GotEmployeeData', this._updateNonAffintyFields);
    if (
      Affinity2018.hasOwnProperty('FormProfile')
      && Affinity2018.FormProfile.hasOwnProperty('Country')
      //&& !['', 'null', 'undefined'].contains(Affinity2018.toString(Affinity2018.FormProfile.Country))
    )
    {
      var nodes = document.querySelectorAll('.form-row.row-banknumber:not(.row-affinityfield), .form-row.row-taxnumber:not(.row-affinityfield)');
      nodes.forEach(function (row)
      {
        var inputNode = row.querySelector('input');
        if (inputNode && inputNode.hasOwnProperty('widgets'))
        {
          for (var key in inputNode.widgets)
          {
            if (inputNode.widgets[key].hasOwnProperty('SetCountry')) inputNode.widgets[key].SetCountry(Affinity2018.FormProfile.Country);
          }
        }
      });
    }
  }

  /**/


  _disableButtons()
  {
    let okButton = this.PopupNode.querySelector('div.button.ok');
    okButton.parentNode.classList.add('disabled');
    okButton.parentNode.classList.remove('disabled');
  }
  _enableButtons()
  {
    let okButton = this.PopupNode.querySelector('div.button.ok');
    okButton.parentNode.classList.remove('disabled');
  }

  /**/

  _templates ()
  {
    super._templates();

    this.HtmlEditTemplate = `
    <div class="edit-row top affinity-generic-group hidable hide hidden">
      <label>{filterlabel}</label>
      <div class="select working">
        <select class="ui-autocomplete-force-bottom"></select>
      </div>
      <div class="generic-group-editor hidden">
        <a class="show-hidden" data-hidden-target=".affinity-generic-group" data-hidden-target-class="show-edit" data-hidden-target-labels="">{editButtonLabel}</a>
        <div class="generic-group-editor-list">
          <div class="inner-edit-row">
            <label>{groupNameLabel}</label>
            <input type="text" />
          </div>
          <div class="inner-edit-row">
            <label>{groupDescriptionLabel}</label>
            <input type="text" />
          </div>
          <div class="shadow-wrapper">
            <div class="grid-wrapper flat-bottom">
              <table class="grid">
                <thead>
                  <tr>
                    <th>Option Description <icon class="icon-help-round ui-has-tooltip" data-tooltip="The name of the option"></icon></th>
                    <th>Reference <icon class="icon-help-round ui-has-tooltip" data-tooltip="A unique reference for each item"></icon></th>
                    <th></th>
                  </tr>
                </thead>
                <tbody>
                </tbody>
              </table>
            </div>
            <div class="group-edit-buttons">
              <button class="blue download no-label ui-has-tooltip" data-tooltip="{downloadGroupCSVTooltip}"><icon class="icon-download"></icon></button>
              <button class="green upload no-label ui-has-tooltip" data-tooltip="{uploadGroupCSVTooltip}">
                <icon class="icon-upload"></icon>
                <input type="file" accept=".csv" />
              </button>
              <button class="green save"><icon class="icon-save"></icon><text>Save</text></button>
            </div>
          </div>
          <div class="generic-group-loader"></div>
        </div>
      </div>
    </div>
    <p class="affinity-form-link-desc hidden">{linkmessage}</p>
    <div class="edit-row affinity-form-link hidden">
      <label>{selectlabel}</label><span class="help icon-help-round ui-has-tooltip" data-tooltip="{linkmessage}"></span>
      <div class="select working">
        <select class=""></select>
      </div>
    </div>
    `;

    this.GenericRowTemplate = `
      <tr class="{rowClass}">
        <td>{key}</td>
        <td>{value}</td>
      <td><div class="button {color} icon-eye-block"></div></td>
      </tr>
    `;

    this.HtmlEditExampleTemplate = `

    `;

    this.HtmlRowTemplate = `
    `;

    this.HTMLLinkFormTemplate = `
    <form action="{url}" method="post" target="_blank">
      Start form <a href="#">{label}</a>
    </form>
    `;

  }

};;
/**
 *
 * Summary.       Element AttachInstructions Class.
 *
 * Description.   Element AttachInstructions functions and features.
 *
 * @author        Ben King, benk at affinityteam.com, ben.king at source63.com, +64 21 2672729.
 *
 *
 * @since         16.06.2020
 * @class         AttachInstructions
 * @namespace     Affinity2018.Classes.Apps.CleverForms.Elements
 * @memberof      CleverForms.Elements
 * @constructs    Affinity2018.Classes.Apps.CleverForms.Elements.AttachInstructions
 *
 * @public
 */

if (!('Affinity2018' in window)) Affinity2018 = {};
if (!('Classes' in Affinity2018)) Affinity2018.Classes = {};
if (!('Apps' in Affinity2018.Classes)) Affinity2018.Classes.Apps = {};
if (!('CleverForms' in Affinity2018.Classes.Apps)) Affinity2018.Classes.Apps.CleverForms = {};
if (!('Elements' in Affinity2018.Classes.Apps.CleverForms)) Affinity2018.Classes.Apps.CleverForms.Elements = {};

if (!('Apps' in Affinity2018)) Affinity2018.Apps = {};
if (!('Elements' in Affinity2018.Apps)) Affinity2018.Apps.Elements = {};

Affinity2018.Classes.Apps.CleverForms.Elements.AttachInstructions = class extends Affinity2018.Classes.Apps.CleverForms.Elements.ElementBase
{
  _options()
  {
    super._options();

  }

  constructor(config)
  {
    super(config, 'AttachInstructions');
    [
      '_options', '_templates',
      
      'SetDesignEditor', 'UnsetDesignEditor', 'GetFromDesignEditor', 'RemoveDesignerElement',
      'RemoveDesignerElement',
      'SetFormRow', 'GetFromFormRow', 'SetFromValue',

      '_setLink'

    ].bindEach(this);

    this._options();
    this._templates();

    return this;
  }

  /**/

  SetDesignEditor()
  {
    this.HtmlEditTemplate = this.HtmlEditTemplate.format({
      label: $a.Lang.ReturnPath('generic.buttons.uploadfile'),
      choose: $a.Lang.ReturnPath('generic.buttons.choosefile')
    });

    if (super.SetDesignEditor())
    {
      // set special html / values

      this.PopupNode.classList.add('large', 'has-list');

      this.SettingsViewNode.querySelector('.edit-required').classList.add('hidden');

      return true;
    }
    return false;
  }

  UnsetDesignEditor ()
  {
    if (super.UnsetDesignEditor())
    {
      // unset special html / values

      return true;
    }
    return false;
  }

  GetFromDesignEditor()
  {
    this.Config = super.GetFromDesignEditor();

    // update special values

    return this.Config;
  }

  RemoveDesignerElement (callback)
  {
    if (super.RemoveDesignerElement())
    {

      // do any removal stuff here
      
      var node = document.querySelector('.item-' + this.UniqueName);
      if (node && $a.isFunction(callback))
      {
        callback(node);
      }
    }
  }

  /**/

  SetFormRow (target)
  {
    var label, html, link;
    if (this.Config.Details.FileId == null || this.Config.Details.FileId == '')
    {
      html = this.HtmlRowTemplate.format(this.Config.Details.Label, '#');
    }
    else
    {
      label = this.Config.Details.Label ? this.Config.Details.Label : 'Attachment';
      link = this.Config.Details.FileId !== null ? this.CleverForms.FileGetApi + '?documentId=' + this.Config.Details.FileId : '#';
      html = this.HtmlRowTemplate.format(label, link);
      var url = this.CleverForms.FileGetInfoApi + '?fileIds=' + this.Config.Details.FileId;
      axios({
        method: 'GET',
        url: url,
      }).then(function (response)
      {
        if (
          $a.isObject(response)
          && $a.isPropObject(response, 'data')
          && $a.isPropObject(response.data, 'data')
        )
        {
          if (response.data.data.hasOwnProperty(this.Config.Details.FileId)) this._setLink(response.data.data[this.Config.Details.FileId], link, label);
        }
      }.bind(this)).catch(function () { });
    }

    this.FormRowNode = super.SetFormRow(target, html);

    if (this.Config.Details.FileId == null || this.Config.Details.FileId == '')
    {
      this._setLink('File Name Here', '#');
    }

    if (this.FormRowNode)
    {

      // set any special elements

      return this.FormRowNode;
    }
  }

  GetFromFormRow()
  {
    if (super.GetFromFormRow())
    {

      // get any special elements

      return this.FormData;
    }
    throw '{0} "{1}" ({2}) could not get base post data for form post'.format(this.Config.Type, this.Config.Details.Label, this.Config.UniqueName);
  }

  SetFromValue (value)
  {

  }

  /**/

  _setLink (name, link, label)
  {
    label = label ? label : this.Config.Details.Label;
    this.FormRowNode.innerHTML = this.HtmlRowLinkTemplate.format({
      label: label,
      link: link,
      name: name
    });
    //if (link == '#')
    //{
    //  this.FormRowNode.querySelector('a').href = 'javascript:void(0)';
    //}
  }

  /**/

  _templates ()
  {
    super._templates();

    this.HtmlEditTemplate = `
    <div class="edit-row">
      <label>{label}</label>
      <label class="ui-has-file">
        <input type="file" name="FileId" data-allow-multiple="false" />
        <div class="button blue upload"><span class="icon-file-black"></span>{choose}</div>
      </label>
    </div>
    `;

    this.HtmlEditExampleTemplate = `
    <div class="default-form">
      <div class="form-row">
        <a href="#">Download Document</a>
      </div>
    </div>
    `;

    this.HtmlRowTemplate = `
    <div class="form-row">
      <a href="{1}">{0}</a>
    </div>
    `;

    this.HtmlRowLinkTemplate = `
    <div class="edit-row">
      <label>{label}</label>
      <div class="row-content">
        <a href="{link}">{name}</a>
      </div>
    </div>
    `;

  }

};;
/**
 *
 * Summary.       Element BankNumber Class.
 *
 * Description.   Element BankNumber functions and features.
 *
 * @author        Ben King, benk at affinityteam.com, ben.king at source63.com, +64 21 2672729.
 *
 *
 * @since         16.06.2020
 * @class         BankNumber
 * @namespace     Affinity2018.Classes.Apps.CleverForms.Elements
 * @memberof      CleverForms.Elements
 * @constructs    Affinity2018.Classes.Apps.CleverForms.Elements.BankNumber
 *
 * @public
 */

if (!('Affinity2018' in window)) Affinity2018 = {};
if (!('Classes' in Affinity2018)) Affinity2018.Classes = {};
if (!('Apps' in Affinity2018.Classes)) Affinity2018.Classes.Apps = {};
if (!('CleverForms' in Affinity2018.Classes.Apps)) Affinity2018.Classes.Apps.CleverForms = {};
if (!('Elements' in Affinity2018.Classes.Apps.CleverForms)) Affinity2018.Classes.Apps.CleverForms.Elements = {};

if (!('Apps' in Affinity2018)) Affinity2018.Apps = {};
if (!('Elements' in Affinity2018.Apps)) Affinity2018.Apps.Elements = {};

Affinity2018.Classes.Apps.CleverForms.Elements.BankNumber = class extends Affinity2018.Classes.Apps.CleverForms.Elements.ElementBase
{
  _options()
  {
    super._options();

    this.CountryCodes = ['AU', 'NZ', 'A', 'N'];
    this.DefaultCountryCode = 'AU';
    this.CountryCodeMap = {
      'A': 'AU',
      'N': 'NZ'
    };

  }

  constructor(config)
  {
    super(config, 'BankNumber');
    [
      '_options', '_templates',
      
      'SetDesignEditor', 'UnsetDesignEditor', 'GetFromDesignEditor', 'RemoveDesignerElement',
      'RemoveDesignerElement',
      'SetFormRow', 'GetFromFormRow', 'SetFromValue',

      '_getFormRowHtml',
      '_gotNewUserProfile'

    ].bindEach(this);

    this._options();
    this._templates();

    window.addEventListener('GotUser', this._gotNewUserProfile);

    return this;
  }

  /**/

  SetDesignEditor()
  {
    if (super.SetDesignEditor())
    {
      // set special html / values

      return true;
    }
    return false;
  }

  UnsetDesignEditor ()
  {
    if (super.UnsetDesignEditor())
    {
      // unset special html / values

      return true;
    }
    return false;
  }

  GetFromDesignEditor()
  {
    this.Config = super.GetFromDesignEditor();

    // update special values

    return this.Config;
  }

  RemoveDesignerElement (callback)
  {
    if (super.RemoveDesignerElement())
    {

      // do any removal stuff here
      
      var node = document.querySelector('.item-' + this.UniqueName);
      if (node && $a.isFunction(callback))
      {
        callback(node);
      }
    }
  }

  /**/

  SetFormRow (target)
  {
    var fromFormCountry = false;
    var countryCode = this.DefaultCountryCode;

    if (
      Affinity2018.hasOwnProperty('FormProfile')
      && Affinity2018.FormProfile.hasOwnProperty('Country')
      //&& this.CountryCodes.contains(Affinity2018.FormProfile.Country)
      && this.CountryCodes.contains(this.CleverForms.FormCountry)
    )
    {
      //countryCode = Affinity2018.FormProfile.Country;
      countryCode = this.CleverForms.FormCountry;
      fromFormCountry = true;
    }
    var value = $a.isArray(this.Config.Details.Value) && this.Config.Details.Value.length === 2 ? this.Config.Details.Value[0] : '';
    var country = $a.isArray(this.Config.Details.Value) && this.Config.Details.Value.length === 2 && this.CountryCodes.contains($a.toString(this.Config.Details.Value[1]).trim().toUpperCase()) ? this.Config.Details.Value[1].trim().toUpperCase() : countryCode;
    if (country.length === 1 && this.CountryCodeMap.hasOwnProperty(country.toUpperCase()))
    {
      country = this.CountryCodeMap[country.toUpperCase()];
    }
    var html = '';
    if (this.IsReadOnly || this.CleverForms.ViewType === 'ViewOnly')
    {
      var display = value + ', ' + country;
      if (value === null || value === 'null') display = '';
      html = this.HtmlRowReadOnlyTemplate.format({
        label: this.Config.Details.Label,
        value: display
      });
    }
    else
    {
      html = this._getFormRowHtml(value, country, fromFormCountry);
    }
    this.FormRowNode = super.SetFormRow(target, html);
    if (this.FormRowNode)
    {

      // set any special elements

      if (this.FormRowNode.querySelector('input'))
      {
        this.FormRowNode.querySelector('input').addEventListener('validated', function ()
        {
          Affinity2018.Apps.CleverForms.Form.ResizeSection(this.FormRowNode);
        }.bind(this));
      }

      Affinity2018.Apps.CleverForms.Form.ResizeSection(this.FormRowNode);

      return this.FormRowNode;
    }
  }

  GetFromFormRow()
  {
    if (super.GetFromFormRow())
    {

      // get any special elements

      var inputNode = this.FormRowNode.querySelector('input.ui-banknumber');
      var inputWidget = inputNode ? inputNode.widgets.BankNumber : null;
      if (inputWidget)
      {
        this.FormData.Value = inputWidget.GetData();
      }
      else
      {
        if (this.Config.Details.hasOwnProperty('AffinityField'))
        {
          console.warn('tried to read from {0} ({1}) when it is not yet rendered.'.format(this.Config.Details.Label, this.Config.Details.AffinityField.FieldName));
        }
        else
        {
          console.warn('tried to read from {0} when it is not yet rendered.'.format(this.Config.Details.Label));
        }
      }
      return this.FormData;
    }
    throw '{0} "{1}" ({2}) could not get base post data for form post'.format(this.Config.Type, this.Config.Details.Label, this.Config.UniqueName);
  }

  SetFromValue(value, fromKeyChange)
  {
    fromKeyChange = fromKeyChange === undefined ? false : fromKeyChange;
    var inputNode = this.FormRowNode.querySelector('input.ui-banknumber');
    var inputWidget = inputNode.widgets.BankNumber;
    if (!this.IsReadOnly && inputWidget)
    {
      if (value === null || ($a.isString(value) && (value.trim() === '' || value === 'null')))
      {
        inputWidget.Set('');
      }
      else inputWidget.Set(value);
      Affinity2018.Apps.CleverForms.Form.ResizeSection(this.FormRowNode);
    }
  }

  /**/

  _showCountrySelect()
  {

  }

  _getFormRowHtml(value, country, fromFormCountry)
  {
    var showCountrySelect = this.CountryCodes.contains(country) ? false : fromFormCountry ? false : true;
    return this.HtmlRowTemplate.format({
      label: this.Config.Details.Label,
      value: value,
      country: country,
      status: showCountrySelect ? 'show' : 'hide'
    });
  }

  _gotNewUserProfile(profile)
  {
    if (this.FormRowNode && $a.isPropObject(Affinity2018.UserProfile, 'Selected'))
    {
      var inputNode = this.FormRowNode.querySelector('input.ui-taxnumber');
      var inputWidget = inputNode.widgets.TaxNumber;
      var data = inputWidget.GetData();
      var value = data[0];
      var country = data[1];
      var html = this._getFormRowHtml(value, country);

      inputWidget.Destroy();
      this.FormRowNode.innerHTML = html;

      Affinity2018.Apps.Plugins.BankNumber.Apply();
    }
  }

  /**/

  _templates ()
  {
    super._templates();

    this.HtmlEditTemplate = `
      
    `;

    this.HtmlEditExampleTemplate = `
    <div class="default-form">
      <div class="form-row">
        <label>Bank Account</label>
        <input type="text" class="ui-has-banknumber" />
      </div>
    </div>
    `;

    this.HtmlRowTemplate = `
    <div class="form-row">
      <label>{label}</label>
      <input type="text" class="ui-has-banknumber" value="{value}" data-country="{country}" data-country-status="{status}" />
    </div>
    `;

    this.HtmlRowReadOnlyTemplate =  `
    <div class="form-row">
      <label>{label}</label>
      <input type="text" disabled value="{value}" />
    </div>
    `;

  }

};;
/**
 *
 * Summary.       Element CheckBox Class.
 *
 * Description.   Element CheckBox functions and features.
 *
 * @author        Ben King, benk at affinityteam.com, ben.king at source63.com, +64 21 2672729.
 *
 *
 * @since         16.06.2020
 * @class         CheckBox
 * @namespace     Affinity2018.Classes.Apps.CleverForms.Elements
 * @memberof      CleverForms.Elements
 * @constructs    Affinity2018.Classes.Apps.CleverForms.Elements.CheckBox
 *
 * @public
 */

if (!('Affinity2018' in window)) Affinity2018 = {};
if (!('Classes' in Affinity2018)) Affinity2018.Classes = {};
if (!('Apps' in Affinity2018.Classes)) Affinity2018.Classes.Apps = {};
if (!('CleverForms' in Affinity2018.Classes.Apps)) Affinity2018.Classes.Apps.CleverForms = {};
if (!('Elements' in Affinity2018.Classes.Apps.CleverForms)) Affinity2018.Classes.Apps.CleverForms.Elements = {};

if (!('Apps' in Affinity2018)) Affinity2018.Apps = {};
if (!('Elements' in Affinity2018.Apps)) Affinity2018.Apps.Elements = {};

Affinity2018.Classes.Apps.CleverForms.Elements.CheckBox = class extends Affinity2018.Classes.Apps.CleverForms.Elements.ElementBase
{
  _options()
  {
    super._options();

  }

  constructor(config)
  {
    super(config, 'CheckBox');
    [
      '_options', '_templates',
      
      'SetDesignEditor', 'UnsetDesignEditor', 'GetFromDesignEditor', 'RemoveDesignerElement',
      'RemoveDesignerElement',
      'SetFormRow', 'GetFromFormRow', 'SetFromValue', 'IsValid', 'CheckValid'

    ].bindEach(this);

    this._options();
    this._templates();

    return this;
  }

  /**/

  SetDesignEditor()
  {
    this.HtmlEditExampleTemplate = this.HtmlEditExampleTemplate.format({
      example: $a.Lang.ReturnPath('app.cf.design_items.checkbox_example')
    });

    if (super.SetDesignEditor())
    {
      // set special html / values

      return true;
    }
    return false;
  }

  UnsetDesignEditor ()
  {
    if (super.UnsetDesignEditor())
    {
      // unset special html / values

      return true;
    }
    return false;
  }

  GetFromDesignEditor()
  {
    this.Config = super.GetFromDesignEditor();

    // update special values

    return this.Config;
  }

  RemoveDesignerElement (callback)
  {
    if (super.RemoveDesignerElement())
    {

      // do any removal stuff here
      
      var node = document.querySelector('.item-' + this.UniqueName);
      if (node && $a.isFunction(callback))
      {
        callback(node);
      }
    }
  }

  /**/

  SetFormRow (target)
  {
    var val = this.Config.Details.Value;
    var checked = $a.isString(val) && val.toLowerCase().trim() == 'true' ? 'checked' : '';
    var html = this.HtmlRowTemplate.format(
      val,
      'check-' + this.Config.Name,
      this.Config.Details.Label,
      checked
    );
    this.FormRowNode = super.SetFormRow(target, html);
    if (this.Config.Details.Required) this.FormRowNode.querySelector('input').addEventListener('change', this.CheckValid);

    if (this.FormRowNode)
    {

      // set any special elements

      return this.FormRowNode;
    }
  }

  GetFromFormRow()
  {
    if (super.GetFromFormRow())
    {

      // get any special elements

      this.FormData.Value = this.FormRowNode.querySelector('input').checked ? true : false;

      return this.FormData;
    }
    throw '{0} "{1}" ({2}) could not get base post data for form post'.format(this.Config.Type, this.Config.Details.Label, this.Config.UniqueName);
  }

  SetFromValue(value, fromKeyChange)
  {
    fromKeyChange = fromKeyChange === undefined ? false : fromKeyChange;
    this.CheckValid();
  }

  IsValid()
  {
    if (!this.Config.Details.Required) return true;
    var inputNode = this.FormRowNode.querySelector('input[type="checkbox"]');
    return inputNode.checked;
  }

  InvalidReason()
  {
    if (!this.IsValid())
    {
      return '\'' + this.CleverForms.ShortenString(this.Config.Details.Label, 50) + '\' must be ticked.';
    }
    return '';
  }

  CheckValid()
  {
    if (this.FormRowNode.querySelector('.ui-form-error') && this.IsValid())
    {
      this.FormRowNode.querySelector('.ui-form-error').classList.remove('show');
      this.FormRowNode.classList.remove('error', 'flash-error');
    }
    Affinity2018.Apps.CleverForms.Form.ResizeSection(this.FormRowNode);
  }

  /**/

  _templates ()
  {
    super._templates();

    this.HtmlEditTemplate = `
      
    `;

    this.HtmlEditExampleTemplate = `
    <div class="default-form">
      <div class="form-row">
        <div class="check-label-pair">
          <input type="checkbox" id="_SingleCheckExample" /><label for="_SingleCheckExample" class="right">{example}</label>
        </div>
      </div>
    </div>
    `;

    this.HtmlRowTemplate = `
    <div class="form-row">
      <div class="check-label-pair">
        <input type="checkbox" value="{0}" id="{1}" {3}/><label for="{1}" class="right">{2}</label>
      </div>
    </div>
    `;

  }

};;
/**
 *
 * Summary.       Element Currency Class.
 *
 * Description.   Element Currency functions and features.
 *
 * @author        Ben King, benk at affinityteam.com, ben.king at source63.com, +64 21 2672729.
 *
 *
 * @since         16.06.2020
 * @class         Currency
 * @namespace     Affinity2018.Classes.Apps.CleverForms.Elements
 * @memberof      CleverForms.Elements
 * @constructs    Affinity2018.Classes.Apps.CleverForms.Elements.Currency
 *
 * @public
 */

if (!('Affinity2018' in window)) Affinity2018 = {};
if (!('Classes' in Affinity2018)) Affinity2018.Classes = {};
if (!('Apps' in Affinity2018.Classes)) Affinity2018.Classes.Apps = {};
if (!('CleverForms' in Affinity2018.Classes.Apps)) Affinity2018.Classes.Apps.CleverForms = {};
if (!('Elements' in Affinity2018.Classes.Apps.CleverForms)) Affinity2018.Classes.Apps.CleverForms.Elements = {};

if (!('Apps' in Affinity2018)) Affinity2018.Apps = {};
if (!('Elements' in Affinity2018.Apps)) Affinity2018.Apps.Elements = {};

Affinity2018.Classes.Apps.CleverForms.Elements.Currency = class extends Affinity2018.Classes.Apps.CleverForms.Elements.ElementBase
{
  _options()
  {
    super._options();

  }

  constructor(config)
  {
    super(config, 'Currency');
    [
      '_options', '_templates',
      
      'SetDesignEditor', 'UnsetDesignEditor', 'GetFromDesignEditor', 'RemoveDesignerElement',
      'RemoveDesignerElement',
      'SetFormRow', 'GetFromFormRow', 'SetFromValue'

    ].bindEach(this);

    this._options();
    this._templates();

    return this;
  }

  /**/

  SetDesignEditor()
  {
    this.HtmlEditExampleTemplate = this.HtmlEditExampleTemplate.format({
      label: $a.Lang.ReturnPath('app.cf.design_items.currency_example_label'),
      value: $a.Lang.ReturnPath('app.cf.design_items.currency_example_value')
    });

    this.HtmlEditTemplate = this.HtmlEditTemplate.format({
      label: $a.Lang.ReturnPath('app.cf.design_items.currency_decimal_label')
    });

    if (super.SetDesignEditor())
    {
      // set special html / values

      this.TemplateNode.querySelector('select.DecimalNumber').value = 2;
      if (this.Config.Details.hasOwnProperty('DecimalNumber'))
      {
        this.TemplateNode.querySelector('select.DecimalNumber').value = this.Config.Details.DecimalNumber;
      }
      if (this.Config.Details.hasOwnProperty('AffinityField'))
      {
        this.TemplateNode.querySelector('select.DecimalNumber').value = this.Config.Details.AffinityField.FieldDecimal;
      }

      return true;
    }
    return false;
  }

  UnsetDesignEditor ()
  {
    if (super.UnsetDesignEditor())
    {
      // unset special html / values

      return true;
    }
    return false;
  }

  GetFromDesignEditor()
  {
    this.Config = super.GetFromDesignEditor();

    // update special values

    if (this.TemplateNode.querySelector('select.DecimalNumber'))
    {
      var decimals = !isNaN(parseInt(this.TemplateNode.querySelector('select.DecimalNumber').value)) ? parseInt(this.TemplateNode.querySelector('select.DecimalNumber').value) : 2;
      if (this.Config.Details.hasOwnProperty('AffinityField'))
      {
        this.Config.Details.AffinityField.FieldDecimal = decimals;
      }
      if (this.Config.Details.hasOwnProperty('DecimalNumber'))
      {
        this.Config.Details.DecimalNumber = decimals;
      }
    }

    this.CheckChanges(true);

    return this.Config;
  }

  RemoveDesignerElement (callback)
  {
    if (super.RemoveDesignerElement())
    {

      // do any removal stuff here
      
      var node = document.querySelector('.item-' + this.UniqueName);
      if (node && $a.isFunction(callback))
      {
        callback(node);
      }
    }
  }

  /**/

  SetFormRow (target)
  {
    //var html = this.HtmlRowTemplate.format(this.Config.Details.Label, this.Config.Details.Value);

    var fieldDecimal = 2;
    var fieldPrecision = 2;
    if (this.Config.Details.hasOwnProperty('DecimalNumber'))
    {
      fieldDecimal = this.Config.Details.DecimalNumber;
    }
    if (this.Config.Details.hasOwnProperty('AffinityField'))
    {
      fieldDecimal = this.Config.Details.AffinityField.FieldDecimal ? this.Config.Details.AffinityField.FieldDecimal : fieldDecimal;
      //fieldPrecision = !isNaN(parseInt(this.Config.Details.AffinityField.FieldPrecision)) ? parseInt(this.Config.Details.AffinityField.FieldPrecision) : fieldPrecision;
      fieldPrecision = fieldDecimal;
    }

    var html = this.HtmlRowTemplate.format({
      label: this.Config.Details.Label,
      decimals: fieldDecimal,
      rounding: fieldPrecision > 0 ? 'round' : 'none',
      value: this._formatCurrency(this.Config.Details.Value)
    });

    this.FormRowNode = super.SetFormRow(target, html);
    if (this.FormRowNode)
    {

      // set any special elements

      return this.FormRowNode;
    }
  }

  GetFromFormRow()
  {
    if (super.GetFromFormRow())
    {

      // get any special elements

      if (this.FormRowNode && !isNaN(parseFloat(this.FormRowNode.querySelector('input.nv').value)))
      {
        this.FormData.Value = parseFloat(this.FormRowNode.querySelector('input.nv').value.replaceAll(',', ''));
      }
      else
      {
        this.FormData.Value = null;
      }

      return this.FormData;
    }
    throw '{0} "{1}" ({2}) could not get base post data for form post'.format(this.Config.Type, this.Config.Details.Label, this.Config.UniqueName);
  }

  SetFromValue(value, fromKeyChange)
  {
    fromKeyChange = fromKeyChange === undefined ? false : fromKeyChange;
    super.SetFromValue(this._formatCurrency(value), fromKeyChange);
  }

  /**/

  _formatCurrency(value)
  {
    if (value == undefined || value === null || isNaN(parseFloat(value))) return value;
    value = value.toString();
    //var hasComma = value.contains(',');
    value = parseFloat(value).toLocaleString('en-GB', { style: "currency", currency: "AUD" }).trim();
    value = value.contains('$') ? value.split('$')[1] : value;
    //if (!hasComma) value = value.replaceAll(',', '');
    return value;
  }

  _templates ()
  {
    super._templates();

    this.HtmlEditTemplate = `
    <div class="edit-row">
      <label>{label}</label>
      <div class="select">
        <select class="DecimalNumber">
          <option selected value="2">2</option>
          <option value="3">3</option>
          <option value="4">4</option>
          <option value="5">5</option>
        </select>
      </div>
    </div>
    `;

    this.HtmlEditExampleTemplate = `
    <div class="default-form">
      <div class="form-row">
        <label>{label}</label>
        <div class="currencybox">
          <div class="symbol"><strong>$</strong></div>
          <input type="text" class="ui-has-currency" value="{value}" />
        </div>
      </div>
    </div>
    `;

    this.HtmlRowTemplate = `
    <div class="form-row">
      <label>{label}</label>
      <div class="currencybox">
        <div class="symbol"><strong>$</strong></div>
        <input type="text" class="ui-has-currency" data-decimals="{decimals}" data-rounding="{rounding}" value="{value}" />
      </div>
    </div>
    `;

    //this.HtmlRowTemplate = `
    //<div class="form-row">
    //  <label>{0}</label>
    //  <div class="currencybox">
    //    <div class="symbol"><strong>$</strong></div>
    //    <input type="text" class="ui-has-currency" value="{1}" />
    //  </div>
    //</div>
    //`;

  }

};;
/**
 *
 * Summary.       Element Date Class.
 *
 * Description.   Element Date functions and features.
 *
 * @author        Ben King, benk at affinityteam.com, ben.king at source63.com, +64 21 2672729.
 *
 *
 * @since         16.06.2020
 * @class         Date
 * @namespace     Affinity2018.Classes.Apps.CleverForms.Elements
 * @memberof      CleverForms.Elements
 * @constructs    Affinity2018.Classes.Apps.CleverForms.Elements.Date
 *
 * @public
 */

if (!('Affinity2018' in window)) Affinity2018 = {};
if (!('Classes' in Affinity2018)) Affinity2018.Classes = {};
if (!('Apps' in Affinity2018.Classes)) Affinity2018.Classes.Apps = {};
if (!('CleverForms' in Affinity2018.Classes.Apps)) Affinity2018.Classes.Apps.CleverForms = {};
if (!('Elements' in Affinity2018.Classes.Apps.CleverForms)) Affinity2018.Classes.Apps.CleverForms.Elements = {};

if (!('Apps' in Affinity2018)) Affinity2018.Apps = {};
if (!('Elements' in Affinity2018.Apps)) Affinity2018.Apps.Elements = {};

Affinity2018.Classes.Apps.CleverForms.Elements.Date = class extends Affinity2018.Classes.Apps.CleverForms.Elements.ElementBase
{
  _options()
  {
    super._options();

  }

  constructor(config)
  {
    super(config, 'Date');
    [
      '_options', '_templates',

      'SetDesignEditor', 'UnsetDesignEditor', 'GetFromDesignEditor', 'RemoveDesignerElement',
      'RemoveDesignerElement',
      'SetFormRow', 'GetFromFormRow', 'SetFromValue'

    ].bindEach(this);

    this._options();
    this._templates();

    return this;
  }

  /**/

  SetDesignEditor()
  {
    this.HtmlEditExampleTemplate = this.HtmlEditExampleTemplate.format({
      label: $a.Lang.ReturnPath('app.cf.design_items.date_example_label')
    });

    this.HtmlEditTemplate = this.HtmlEditTemplate.format({
      showDateLabel: $a.Lang.ReturnPath('app.cf.design_items.date_show_date_label'),
      showTimeLabel: $a.Lang.ReturnPath('app.cf.design_items.date_show_time_label'),
      currentLabel: $a.Lang.ReturnPath('app.cf.design_items.date_default_current_label')
    });

    if (super.SetDesignEditor())
    {
      // set special html / values

      this.ShowDateNode = this.TemplateNode.querySelector('#_DateTimeTypeAndDate');
      this.ShowTimeNode = this.TemplateNode.querySelector('#_DateTimeTypeAndTime');
      this.DefaultValueNode = this.TemplateNode.querySelector('#_DateTimeDefaultValue');

      /**/

      this.ShowDateNode.checked = null;
      this.ShowTimeNode.checked = null;
      if (this.Config.Details.DateTimeType !== null)
      {
        if (this.Config.Details.DateTimeType.toLowerCase().contains('date')) this.ShowDateNode.checked = 'checked';
        if (this.Config.Details.DateTimeType.toLowerCase().contains('time')) this.ShowTimeNode.checked = 'checked';
      }

      if (
        this.Config.Details.SetDefaultValue === true
        ||
        (
          $a.type(this.Config.Details.SetDefaultValue) === 'string'
          && this.Config.Details.SetDefaultValue.toString().toLowerCase().trim() === 'true'
        )
      ) this.DefaultValueNode.checked = 'checked';
      else this.DefaultValueNode.checked = null;

      // if nothing set, set 'date' as default
      if (!this.ShowDateNode.checked && !this.ShowTimeNode.checked)
      {
        this.ShowDateNode.checked = 'checked';
      }

      return true;
    }
    return false;
  }

  UnsetDesignEditor()
  {
    if (super.UnsetDesignEditor())
    {
      // unset special html / values

      return true;
    }
    return false;
  }

  GetFromDesignEditor()
  {
    this.Config = super.GetFromDesignEditor();

    // update special values

    var showDate = this.ShowDateNode.checked;
    var showTime = this.ShowTimeNode.checked;

    if (showDate && showTime) this.Config.Details.DateTimeType = 'datetime';
    if (showDate && !showTime) this.Config.Details.DateTimeType = 'date';
    if (!showDate && showTime) this.Config.Details.DateTimeType = 'time';

    this.Config.Details.SetDefaultValue = this.DefaultValueNode.checked;

    this.CheckChanges(true);

    return this.Config;
  }

  RemoveDesignerElement(callback)
  {
    if (super.RemoveDesignerElement())
    {

      // do any removal stuff here

      var node = document.querySelector('.item-' + this.UniqueName);
      if (node && $a.isFunction(callback))
      {
        callback(node);
      }
    }
  }

  /**/

  SetFormRow(target)
  {
    var format = '', date = '', dataset = '', html = '';

    if (
      this.Config.Type === 'AffinityField'
      && this.Config.Details.AffinityField.Mode === this.CleverForms.AffnityFieldModeTypes.Display.Enum
    )
    {
      this.IsReadOnly = true;
      this.Config.Details.IsReadOnly = true;
    }

    var date = null;
    if (
      ($a.isPropString(this.Config.Details, 'SetDefaultValue') && this.Config.Details.SetDefaultValue.toLowerCase().trim() === 'true')
      || ($a.isPropBool(this.Config.Details, 'SetDefaultValue') && this.Config.Details.SetDefaultValue === true)
    )
    {
      date = Date.today().clearTime();
      //date = new Date(2022, 2, 4, 10, 30, 0, 0); // For Testing: (month is index 0, date is index 1) 4th march
    }
    if ($a.isPropString(this.Config.Details, 'Value') && this.Config.Details.Value.trim() !== '')
    {
      window.dateLogStart = true;
      console.groupCollapsed('Parse Read Only Date:');
      //console.log();
      console.log('Label:            ', this.Config.Details.Label);
      console.log('Instance ID:      ', this.CleverForms.GetInstanceGuid());
      console.log('Template ID:      ', this.CleverForms.Form.FormData[0].TemplateId);
      console.log('Question Name:    ', this.Config.Name);
      console.log('Server Value:     ', this.Config.Details.Value);
      date = $a.getDate(this.Config.Details.Value);
    }

    //var originalDate = date;
    var dateObj = Affinity2018.getDate(date);
    var dateStr = Affinity2018.getDate(dateObj, format);
    var value = '';

    if (this.IsReadOnly)
    {
      if (date !== null)
      {
        format = '';
        if (this.Config.Details.DateTimeType.toLowerCase().contains('date')) format += 'ddd dS MMM, yyyy'; //date = Date.today().toString('dd.MM.yyyy');
        if (this.Config.Details.DateTimeType.toLowerCase().contains('date') && this.Config.Details.DateTimeType.toLowerCase().contains('time')) format += ' - ';
        if (this.Config.Details.DateTimeType.toLowerCase().contains('time')) format += 'h:mm:ss tt';
        //dateStr = Affinity2018.getDate(dateObj, format); // requires luxon format where "ddd" = "EEE", and no "S" in "dS" (luxon "S" is trimmed milliseconds)
        dateStr = dateObj.toString(format);
        value = dateStr;
      }
      html = this.HtmlRowReadOnlyTemplate.format({
        label: this.Config.Details.Label,
        value: value
      });
    }
    else
    {
      format = '';
      if (this.Config.Details.DateTimeType.toLowerCase().contains('date')) format += 'dd/MM/yyyy';
      if (this.Config.Details.DateTimeType.toLowerCase().contains('time')) format += ' HH:mm:ss';
      if (format.trim() !== '') dataset += ' data-calendar-return-format="' + format + '"';

      if (date !== null)
      {
        //dateStr = Affinity2018.getDate(dateObj, format);
        dateStr = dateObj.toString(format);
        value = dateStr
        dataset += ' data-start-date="' + value + '"';
        date = value;
      }

      dataset += ' data-calendar-nullable="true"';

      html = this.HtmlRowTemplate.format({
        label: this.Config.Details.Label,
        type: this.Config.Details.DateTimeType,
        date: date,
        dataset: dataset.trim()
      });

    }

    // methodName, input, parsed, format, output, color1, color2
    //Affinity2018.DateLog('SetFormRow', this.Config.Details.Value || 'null', originalDate || 'null', format, value || 'null');

    this.FormRowNode = super.SetFormRow(target, html);
    if (this.FormRowNode)
    {

      // set any special elements

      //this.FormRowNode.querySelector('input').value = date;
      //if (date !== '') this.FormRowNode.querySelector('input').dataset.startDate = date;

      return this.FormRowNode;
    }
  }

  GetFromFormRow()
  {
    if (super.GetFromFormRow())
    {

      // get any special elements

      var inputNode = this.FormRowNode.querySelector('input.ui-calendar');
      if (inputNode && inputNode.hasOwnProperty('widgets') && inputNode.widgets.hasOwnProperty('DateTime'))
      {
        var inputWidget = inputNode.widgets.DateTime;
        var date = inputWidget.getRawDate();
        if (inputNode.value.trim() !== '' && date !== false) this.FormData.Value = date.toString(inputWidget.outputFormat);
        else this.FormData.Value = '';
        // methodName, input, parsed, format, output, color1, color2
        //Affinity2018.DateLog('GetFromFormRow', date, date, inputWidget.outputFormat, this.FormData.Value);
      }

      return this.FormData;
    }
    throw '{0} "{1}" ({2}) could not get base post data for form post'.format(this.Config.Type, this.Config.Details.Label, this.Config.UniqueName);
  }

  SetFromValue(value)
  {
    var originalValue = value;
    var format = '';
    var inputNode = this.IsReadOnly ? this.FormRowNode.querySelector('input') : this.FormRowNode.querySelector('input.ui-calendar');
    var inputWidget = this.IsReadOnly ? false : inputNode.widgets.DateTime;

    if (
      $a.isString(value) &&
      (
        value.trim() === '' || value.trim() === 'null'
      )
    )
    {
      if (inputWidget) inputWidget.setNone();
      else inputNode.value = '';
      return;
    }

    if ($a.isString(value) && $a.isDateValid($a.stringToDate(value)))
    {
      value = $a.stringToDate(value);
    }

    if ($a.isDateValid(value))
    {
      if (inputWidget) inputWidget.setDate(value);
      else
      {
        if (this.Config.Details.DateTimeType.toLowerCase().contains('date')) format += 'ddd dS MMM, yyyy';
        if (this.Config.Details.DateTimeType.toLowerCase().contains('date') && this.Config.Details.DateTimeType.toLowerCase().contains('time')) format += ' -';
        if (this.Config.Details.DateTimeType.toLowerCase().contains('time')) format += ' h:mm a';
        //if (format.trim() !== '') inputNode.value = Affinity2018.getDate(value, format); // requires luxon format where "ddd" = "EEE", and no "S" in "dS" (luxon "S" is trimmed milliseconds)
        if (format.trim() !== '') inputNode.value = value.toString(format);
        else inputNode.value = '';
      }
    }

    // methodName, input, parsed, format, output, color1, color2
    //Affinity2018.DateLog('SetFromValue', originalValue, value || '', format, inputNode.value);

  }

  /**/

  _templates()
  {
    super._templates();

    this.HtmlEditTemplate = `
    <div class="edit-row inline-check">
      <input type="checkbox" id="_DateTimeTypeAndDate" data-task="updateDateTimeType" checked />
      <label for="_DateTimeTypeAndDate">{showDateLabel}</label>
    </div>
    <div class="edit-row inline-check">
      <input type="checkbox" id="_DateTimeTypeAndTime" data-task="updateDateTimeType" />
      <label for="_DateTimeTypeAndTime">{showTimeLabel}</label>
    </div>
    <div class="edit-row inline-check">
      <input type="checkbox" id="_DateTimeDefaultValue" name="SetDefaultValue" checked />
      <label for="_DateTimeDefaultValue">{currentLabel}</label>
    </div>
    <input type="hidden" name="DateTimeType" value="date" />
    `;

    this.HtmlEditExampleTemplate = `
    <div class="default-form">
      <div class="form-row calendar">
        <label>{label}</label>
        <input type="text" class="ui-has-calendar" data-type="datetime" />
      </div>
    </div>
    `;

    this.HtmlRowTemplate = `
    <div class="form-row calendar">
      <label>{label}</label>
      <input type="text" class="ui-has-calendar" data-type="{type}" {dataset} value="{date}" />
    </div>
    `;

    this.HtmlRowReadOnlyTemplate = `
    <div class="form-row">
      <label>{label}</label>
      <input type="text" disabled value="{value}" />
    </div>
    `;

  }

};;
/**
 *
 * Summary.       Element DocumentSigning Class.
 *
 * Description.   Element DocumentSigning (HelloSign) functions and features.
 *
 * @author        Ben King, benk at affinityteam.com, ben.king at source63.com, +64 21 2672729.
 *
 *
 * @since         04.03.2021
 * @class         DocumentSigning
 * @namespace     Affinity2018.Classes.Apps.CleverForms.Elements
 * @memberof      CleverForms.Elements
 * @constructs    Affinity2018.Classes.Apps.CleverForms.Elements.DocumentSigning
 *
 * @public
 */

if (!('Affinity2018' in window)) Affinity2018 = {};
if (!('Classes' in Affinity2018)) Affinity2018.Classes = {};
if (!('Apps' in Affinity2018.Classes)) Affinity2018.Classes.Apps = {};
if (!('CleverForms' in Affinity2018.Classes.Apps)) Affinity2018.Classes.Apps.CleverForms = {};
if (!('Elements' in Affinity2018.Classes.Apps.CleverForms)) Affinity2018.Classes.Apps.CleverForms.Elements = {};

if (!('Apps' in Affinity2018)) Affinity2018.Apps = {};
if (!('Elements' in Affinity2018.Apps)) Affinity2018.Apps.Elements = {};

Affinity2018.Classes.Apps.CleverForms.Elements.DocumentSigning = class extends Affinity2018.Classes.Apps.CleverForms.Elements.ElementBase
{
  _options()
  {
    super._options();

    this.FormMode = false;

    this.IsOnlyRow = false;

    this.SectionTitle = '';

    this.DocSignSelectNode = false;
    this.DocSignSelectWrapperNode = false;
    this.DocSignDescNode = false;
    this.DocSignErrorNode = false;

    this.LastPostedDocsignTemplateId = null;

    this.LastPostState = '';

    this.CanSend = true;

    this.ValidOnlyIfSent = true;

    this.ShortenFieldLists = false;
  }

  constructor(config)
  {
    super(config);
    [
      '_options', '_templates',
      
      'SetDesignEditor', 'UnsetDesignEditor', 'GetFromDesignEditor', 'RemoveDesignerElement',
      'RemoveDesignerElement',
      'SetFormRow', 'GetFromFormRow', 'SetFromValue',
      'IsValid', 'InvalidReason', 'CheckValid',

      'GetSigningTemplateId', 'GetSigningRecipients',

      '_loadIds', '_idsLoaded', '_idsFailed', '_idChanged',
      '_postDoc', '_postedDoc', '_postDocError',
      '_postDocCancel', '_postDocCanceled', '_postDocCancelError',
      '_setReadyOnly', '_unsetReadyOnly', '_checkRecipientValidation', 
      '_checkDocSignButtons'

    ].bindEach(this);

    this._options();
    this._templates();

    if (Affinity2018.Apps.CleverForms.hasOwnProperty('Form')) this.FormMode = true;

    if (this.FormMode)
    {
      var form = Affinity2018.Apps.CleverForms.Form.FormData, section, element;
      if (form && $a.isArray(form))
      {
        for (var a = 0; a < form.length; a++)
        {
          section = form[a];
          if (
            section
            && $a.isObject(section)
            && section.hasOwnProperty('Elements')
            && $a.isArray(section.Elements)
            && section.Elements.length > 0
          )
          {
            for (var b = 0; b < section.Elements.length; b++)
            {
              element = section.Elements[b];
              if (
                element
                && $a.isObject(element)
                && element.hasOwnProperty('Name')
                && $a.isString(element.Name)
              )
              {
                if (element.Name == this.Config.Name)
                {
                  if (section.Elements.length === 1) this.IsOnlyRow = true;
                  this.SectionTitle = section.Details.Title;
                  break;
                }
              }
            }
          }
        }
      }
    }
    
    this.Config.Details.ValidationString = $a.Lang.ReturnPath('app.cf.design_items.docsign_generic_validation', {
      button: $a.Lang.ReturnPath('app.cf.design_items.docsign_send_label')
    });

    return this;
  }

  /**/

  SetDesignEditor()
  {
    this.HtmlEditTemplate = this.HtmlEditTemplate.format({
      templateLabel: $a.Lang.ReturnPath('app.cf.design_items.docsign_template_label')
    });

    this.HtmlEditExampleTemplate = this.HtmlEditExampleTemplate.format({
      blockClass: this.IsOnlyRow ? '' : 'form-row-block grey-block',
      label: this.CleverForms.ElementData.hasOwnProperty(this.Config.Type) ? this.CleverForms.ElementData[this.Config.Type].Label : 'Document Signing',
      templateLabel: $a.Lang.ReturnPath('app.cf.design_items.docsign_template_label'),
      recipientLabel: $a.Lang.ReturnPath('app.cf.design_items.docsign_recipient_label'),
      cancelLabel: $a.Lang.ReturnPath('app.cf.design_items.docsign_cancel_label'),
      sendLabel: $a.Lang.ReturnPath('app.cf.design_items.docsign_send_label')
    });

    if (super.SetDesignEditor())
    {
      // set special html / values

      this.PopupNode.classList.add('large');

      this._loadIds();

      return true;
    }
    return false;
  }

  UnsetDesignEditor ()
  {
    if (super.UnsetDesignEditor())
    {
      // unset special html / values

      return true;
    }
    return false;
  }

  GetFromDesignEditor ()
  {
    if (super.GetFromDesignEditor())
    {

      // update special values

      if (this.DocSignSelectNode)
      {
        this.Config.Details.ExternalTemplateId = this.GetSigningTemplateId();
      }

    }

    return this.Config;
  }

  SetFromValue(value, fromKeyChange)
  {
    fromKeyChange = fromKeyChange === undefined ? false : fromKeyChange;

  }

  RemoveDesignerElement (callback)
  {
    if (super.RemoveDesignerElement())
    {

      // do any removal stuff here
      
      var node = document.querySelector('.item-' + this.UniqueName);
      if (node && $a.isFunction(callback))
      {
        callback(node);
      }
    }
  }

  /**/

  SetFormRow (target)
  {
    var status = '';
    var statusClass = ' hidden';
    switch (this.Config.Details.Value.SignatureRequestStatus)
    {
      case 1:
        status = $a.Lang.ReturnPath('app.cf.design_items.docsign_status_pending');
        statusClass = '';
        break;
      case 2:
        status = $a.Lang.ReturnPath('app.cf.design_items.docsign_status_completed');
        statusClass = '';
        break;
      case 4:
        status = $a.Lang.ReturnPath('app.cf.design_items.docsign_status_declined');
        statusClass = '';
        break;
    }

    var html = this.HtmlRowTemplate.format({
      templateLabel: $a.Lang.ReturnPath('app.cf.design_items.docsign_template_label'),
      recipientLabel: $a.Lang.ReturnPath('app.cf.design_items.docsign_recipient_label'),
      status: status,
      statusClass: statusClass,
      required: this.Config.Details.Required ? '<span class="required icon-star-full"></span>' : '',
      cancelLabel: $a.Lang.ReturnPath('app.cf.design_items.docsign_cancel_label'),
      sendLabel: $a.Lang.ReturnPath('app.cf.design_items.docsign_send_label')
    });
    this.FormRowNode = super.SetFormRow(target, html);
    if (this.FormRowNode)
    {

      // set any special elements

      if (this.IsOnlyRow && this.Config.Details.Label.toLowerCase().trim() === this.SectionTitle.toLowerCase().trim())
      {
        this.FormRowNode.querySelector('label').classList.add('hidden');
        if (this.FormRowNode.querySelector('.help')) this.FormRowNode.querySelector('.help').classList.add('hidden');
      }
      if (!this.IsOnlyRow) this.FormRowNode.classList.add('indent') //, 'box');

      this._loadIds();

      return this.FormRowNode;
    }
  }

  GetFromFormRow()
  {
    if (super.GetFromFormRow())
    {

      // get any special elements
      
      var signatureRequestId = this.Config.Details.Value.hasOwnProperty('SignatureRequestId') && this.Config.Details.Value.SignatureRequestId ? this.Config.Details.Value.SignatureRequestId : null;

      this.FormData.Value = JSON.stringify({
        ExternalTemplateId: this.GetSigningTemplateId(),
        Recipients: this.GetSigningRecipients(),
        CanSend: this.CanSend,
        SignatureRequestId: signatureRequestId
      });

      return this.FormData;
    }
    throw '{0} "{1}" ({2}) could not get base post data for form post'.format(this.Config.Type, this.Config.Details.Label, this.Config.UniqueName);
  }

  IsValid()
  {
    if (!this.Config.Details.Required) return true; // if not required, this does not need to be sent or have reciepients, etc, so is always valid
    // if this IS required ....
    if (this.GetSigningTemplateId() !== '' && this.GetSigningRecipients().length > 0) // we must have a seelcted template and valid recipients ...
    {
      if (this.ValidOnlyIfSent) // if we have a template id and valid recipients, and this MUST be sent to be valid (if is required) .....
      {

        if (!this.Config.Details.Value.hasOwnProperty('CanSend'))
        {
          return false; // CanSend does not exist, so must not have been sent yet - this must be sent first, so fail
        }
        else
        {
          if (this.Config.Details.Value.CanSend) return false; // CanSend is there, but is true - this must be sent first, so fail
          else return true; // CanSend is false, which means it has been sent, so all good
        }
      }
      else
      {
        return true;
      }
    }
    return false;
  }

  InvalidReason()
  {
    if (!this.IsValid())
    {
      var error = this.CleverForms.ShortenString(this.Config.Details.Label, 50) + ' is required';
      if (this.GetSigningTemplateId() !== '' && this.GetSigningRecipients().length > 0) // we must have a seelcted template and valid recipients ...
      {
        if (this.ValidOnlyIfSent) // if we have a template id and valid recipients, and this MUST be sent to be valid (if is required) .....
        {
          if (!this.Config.Details.Value.hasOwnProperty('CanSend'))
          {
            error = $a.Lang.ReturnPath('app.cf.design_items.docsign_validation_not_sent');
          }
          else
          {
            if (this.Config.Details.Value.CanSend)
            {
              error = $a.Lang.ReturnPath('app.cf.design_items.docsign_validation_not_sent');
            }
          }
        }
      }
      if (error.contains('s is ')) error = error.replace('s is ', 's sre ');
      return error;
    }
    return '';
  }

  CheckValid()
  {
    if (this.FormRowNode.querySelector('.ui-form-error') && this.IsValid())
    {
      this.FormRowNode.querySelector('.ui-form-error').classList.remove('show');
      this.FormRowNode.classList.remove('error', 'flash-error');
    }
  }

  /**/

  GetSigningTemplateId()
  {
    if (this.DocSignSelectNode) return this.DocSignSelectNode.value;
    if (
      this.FormMode
      && this.CleverForms.Form.ViewType === 'Form'
      && this.Config.Details.hasOwnProperty('Value')
      && $a.isObject(this.Config.Details.Value)
      && this.Config.Details.Value.hasOwnProperty('ExternalTemplateId')
      && this.Config.Details.Value.hasOwnProperty('Recipients')
    ) return this.Config.Details.Value.ExternalTemplateId;
    return this.Config.Details.ExternalTemplateId;
  }

  GetSigningRecipients()
  {
    var recipients = [];
    if (this.FormRowNode && this.FormRowNode.querySelector('.docsign-row input.sv'))
    {
      this.FormRowNode.querySelectorAll('.docsign-row input.sv').forEach(function (node)
      {
        if (node && node.value.trim() !== '' && !node.classList.contains('error')) 
        { 
          recipients.push({
            'EmailAddress': node.value.trim()
          });
        }
      });
    }
    if (recipients.join('').trim() === '') return [];
    return recipients;
  }

  /**/

  _loadIds()
  {
    $a.ShowPageLoader();

    var baseNode = this.FormRowNode;
    if (this.Designer) baseNode = this.EditNode;

    this.DocSignSelectNode = baseNode.querySelector('select.docsign-template-ids') || false;
    this.DocSignDescNode = baseNode.querySelector('p.docsign-template-desc') || false;
    this.DocSignSelectWrapperNode = this.DocSignSelectNode ? this.DocSignSelectNode.closest('.select') : false;
    this.DocSignErrorNode = this.Designer && this.DocSignSelectNode ? this.DocSignSelectNode.closest('.edit-row').querySelector('.docsign-error') : false;
    this.DocSignErrorNode = !this.Designer && this.DocSignSelectNode ? this.DocSignSelectNode.closest('.form-row').querySelector('.docsign-error') : this.DocSignErrorNode;
    this.DocSignFieldsNode = !this.Designer ? baseNode.querySelector('.docsign-fields') : false;

    $a.RequestQueue.Get(this.CleverForms.GetDocumentSigningTemplatesApi, this._idsLoaded, this._idsFailed, 1);

    //this._idsLoaded([]);

    //this._idsLoaded([
    //{
    //  "ExternalTemplateId": "b6c35fcf-2b01-4cea-bd5c-8bddd0a8957e",
    //  "Description": "Classic Ben's Template",
    //  "Title": "Ben Tilte"
    //},
    //{
    //  "ExternalTemplateId": "54c936a2ddb065c1626e7992c13a2ca459a0c190",
    //  "Description": "Vimz Template",
    //  "Title": "Vimz Tilte"
    //}
    //]);

  }

  _idsLoaded(response)
  {
    //console.log('_idsLoaded');
    //console.log(response);
    // TODO: Check and process errors

    if ($a.isArray(response))
    {
      if (this.DocSignSelectNode)
      {
        var templateId = this.Config.Details.ExternalTemplateId || null;
        var recipientValues = [];

        if (
          this.FormMode
          && this.CleverForms.Form.ViewType === 'Form'
          && this.Config.Details.hasOwnProperty('Value')
          && $a.isObject(this.Config.Details.Value)
          && this.Config.Details.Value.hasOwnProperty('ExternalTemplateId')
          && this.Config.Details.Value.hasOwnProperty('Recipients')
        )
        {
          templateId = this.Config.Details.Value.ExternalTemplateId;
          recipientValues = this.Config.Details.Value.Recipients;
          if (
            this.Config.Details.Value.hasOwnProperty('CanSend')
            && !this.Config.Details.Value.CanSend
          )
          {
            this.CanSend = false;
          }
        }
        else if (
          this.FormMode
          && this.CleverForms.Form.ViewType === 'ViewOnly'
          && this.Config.Details.Value.hasOwnProperty('Recipients')
        )
        {
          recipientValues = this.Config.Details.Value.Recipients;
        }

        this.DocSignSelectWrapperNode.classList.remove('hidden');
        this.DocSignErrorNode.classList.add('hidden');
        this.DocSignErrorNode.innerHTML = '';
        if (this.DocSignFieldsNode) this.DocSignFieldsNode.classList.remove('hidden');
        if (response.length > 0)
        {
          this.DocSignSelectNode.removeEventListener('change', this._idChanged);
          if (this.DocSignSelectNode) this.DocSignSelectNode.addEventListener('change', this._idChanged);
          var autocomplete = false, optionNode;
          if (this.DocSignSelectNode.hasOwnProperty('widgets') && this.DocSignSelectNode.widgets.hasOwnProperty('Autocomplete')) autocomplete = this.DocSignSelectNode.widgets.Autocomplete;
          this.DocSignSelectNode.innerHTML = '';
          optionNode = document.createElement('option');
          optionNode.innerHTML = $a.Lang.ReturnPath('app.cf.design_items.docsign_select_default');
          optionNode.value = '';
          this.DocSignSelectNode.appendChild(optionNode);
          response.forEach(function (data)
          {
            if (
              data.Enabled
              && data.ExternalTemplateId !== null
              && $a.isString(data.ExternalTemplateId)
              && data.ExternalTemplateId.trim() !== ''
            )
            {
              optionNode = document.createElement('option');
              optionNode.innerHTML = data.Title;
              optionNode.value = data.ExternalTemplateId;
              optionNode.data = data;
              if (data.ExternalTemplateId === templateId) optionNode.setAttribute('selected', 'selected');
              this.DocSignSelectNode.appendChild(optionNode);
            }
          }.bind(this));
          if (this.DocSignSelectNode) this._idChanged();
          if (autocomplete)
          {
            autocomplete.refreshFromSelect();
          }
          else
          {
            if (Affinity2018.hasOwnProperty('Autocompletes')) Affinity2018.Autocompletes.Apply(this.DocSignSelectNode);
            else Affinity2018.Apps.Plugins.Autocompletes.Apply(this.DocSignSelectNode);
          }
        }
        else
        {
          if (this.DocSignFieldsNode) this.DocSignFieldsNode.classList.add('hidden');
          this.DocSignSelectWrapperNode.classList.add('hidden');
          this.DocSignErrorNode.classList.remove('hidden');
          this.DocSignErrorNode.innerHTML = $a.Lang.ReturnPath('app.cf.design_items.docsign_not_signed_up');
        }

        /**/

        if (this.FormMode)
        {
          Affinity2018.Apps.Plugins.Strings.Apply();

          this.PostDocCancelButtonNode = this.FormRowNode.querySelector('.button.send-doc-cancel');
          this.PostDocButtonNode = this.FormRowNode.querySelector('.button.send-doc');

          this.PostDocCancelButtonNode.removeEventListener('click', this._postDocCancel);
          this.PostDocButtonNode.removeEventListener('click', this._postDoc);

          this.PostDocCancelButtonNode.addEventListener('click', this._postDocCancel);
          this.PostDocButtonNode.addEventListener('click', this._postDoc);

          var recipientNodes = this.FormRowNode.querySelectorAll('.docsign-row input.sv');
          if (recipientNodes.length === 4)
          {
            for (var r = 0; r < recipientNodes.length; r++)
            {
              recipientNodes[r].removeEventListener('keyup', this._checkDocSignButtons);
              recipientNodes[r].addEventListener('keyup', this._checkDocSignButtons);
              if (recipientValues[r])
              {
                recipientNodes[r].value = recipientValues[r].EmailAddress;
                recipientNodes[r].recipientData = recipientValues[r];
              }
            }

            this.DocSignSelectNode.removeEventListener('change', this._checkDocSignButtons);
            this.DocSignSelectNode.addEventListener('change', this._checkDocSignButtons);

            this._checkDocSignButtons();
          }
        }

      }
    }
    else
    {
      this._idsFailed(response);
    }
    $a.HidePageLoader();
  }

  _idsFailed(error)
  {
    var message = $a.Lang.ReturnPath('app.cf.design_items.docsign_load_failed');
    var errorStr = '';
    if (this.CleverForms.IsErrorPage(error)) errorStr = this.CleverForms.GetDetailsFromErrorPage(error).Description;
    else errorStr = $a.isPropString(response.data, 'ErrorMessage') && response.data.ErrorMessage.trim() !== '' ? response.data.ErrorMessage : errorStr;
    message = this._returnBackendErrors(errorStr, message);

    if (this.DocSignFieldsNode) this.DocSignFieldsNode.classList.add('hidden');
    this.DocSignSelectWrapperNode.classList.add('hidden');
    this.DocSignErrorNode.classList.remove('hidden');
    this.DocSignErrorNode.innerHTML = message;
    $a.HidePageLoader();
  }

  _idChanged(ev)
  {
    if (this.DocSignSelectNode)
    {
      if (!$a.isObject(this.Config.Details.Value)) this.Config.Details.Value = { ExternalTemplateId: '', Recipients: [] };
      var node = this.DocSignSelectNode.options[this.DocSignSelectNode.selectedIndex];
      var data = node.hasOwnProperty('data') ? node.data : false;
      if (data && data.hasOwnProperty('Description'))
      {
        if (this.DocSignDescNode)
        {
          this.DocSignDescNode.innerHTML = data.Description;
          this.DocSignDescNode.classList.remove('hidden');
        }
      }
      else
      {
        if (this.DocSignDescNode)
        {
          this.DocSignDescNode.innerHTML = '';
          this.DocSignDescNode.classList.add('hidden');
        }
      }
    }
  }

  /**/

  _postDoc()
  {
    if (this.CleverForms.Form.ViewType !== 'Form') return;

    if (this.DocSignSelectNode.value !== '')
    {
      var recipients = this.GetSigningRecipients();
      if (JSON.stringify(recipients.sort()) !== JSON.stringify(recipients.unique().sort()))
      {
        $a.Dialog.Show({
          //message: $a.Lang.ReturnPath('app.cf.design_items.docsign_duplicate_emails',
          //  {
          //    recipientLabel: $a.Lang.ReturnPath('app.cf.design_items.docsign_recipient_label').toLowerCase(),
          //    filedLabel: this.Config.Details.Label
          //  }
          //),
          message: $a.Lang.ReturnPath('app.cf.design_items.docsign_duplicate_emails'),
          showOk: true,
          showCancel: false,
          showInput: false,
          textAlign: 'left'
        });
        return;
      }

      if (recipients.length > 0)
      {
        $a.ShowPageLoader();

        this.PostDocCancelButtonNode.classList.remove('hidden');
        this.PostDocCancelButtonNode.classList.add('disabled');
        this.PostDocButtonNode.classList.remove('hidden');
        this.PostDocButtonNode.classList.add('disabled');

        this.LastPostedDocsignTemplateId = this.GetSigningTemplateId();
        this.LastPostedDocsignRecipients = this.GetSigningRecipients();

        this.LastPostedDocsignRecipients = this.LastPostedDocsignRecipients.map(recipients =>
        {
          if (typeof recipients === 'string')
          {
            return {
              'EmailAddress': recipients
            }
          }
          else
          {
            return recipients;
          }
        });

        axios({
          method: 'post',
          url: this.CleverForms.DocumentSigningPostApi,
          data: {
            InstanceId: this.CleverForms.GetInstanceGuid(),
            ExternalTemplateId: this.LastPostedDocsignTemplateId,
            QuestionName: this.Config.Name,
            Recipients: this.LastPostedDocsignRecipients
          }
        })
          .then(this._postedDoc)
          .catch(this._postDocError);
      }
    }
  }

  _postedDoc(response)
  {
    //console.log('_postedDoc');
    //console.log(response);
    //console.log('');

    if (this.CleverForms.Form.ViewType !== 'Form') return;

    var message = $a.Lang.ReturnPath('app.cf.design_items.docsign_send_success');
    if (
      $a.isObject(response.data)
      && response.data.hasOwnProperty('Success')
    )
    {
      if (response.data.Success)
      {
        message = $a.Lang.ReturnPath('app.cf.design_items.docsign_send_success');
        this.CanSend = false;
        this.Config.Details.Value.CanSend = false;
        this.Config.Details.Value.Recipients = this.LastPostedDocsignRecipients;
        if ($a.isPropString(response.data, 'SignatureRequestId') && response.data.SignatureRequestId.trim() !== '') this.Config.Details.Value.SignatureRequestId = response.data.SignatureRequestId;

        if (this.FormRowNode && this.FormRowNode.classList.contains('error')) this.FormRowNode.classList.remove('error');
        // TODO: Remove error marks
      }
      else
      {
        var errorStr = $a.isPropString(response.data, 'ErrorMessage') && response.data.ErrorMessage.trim() !== '' ? response.data.ErrorMessage : '';
        message = this._returnBackendErrors(errorStr, $a.Lang.ReturnPath('app.cf.design_items.docsign_generic_send_error'));

        if (
          response.data.hasOwnProperty('MissingCustomFields')
          && $a.isArray(response.data.MissingCustomFields)
          && response.data.MissingCustomFields.length > 0
        )
        {
          this.CanSend = true;
          message = this._getMissingFieldsMessage(response.data.MissingCustomFields);
          // TODO: mark missing fields
        }
      }
    }
    else
    {
      message = $a.Lang.ReturnPath('app.cf.design_items.docsign_generic_send_error');
      this.CanSend = true;
    }
    
    $a.HidePageLoader();

    $a.Dialog.Show({
      message: message,
      showOk: true,
      showCancel: false,
      showInput: false,
      textAlign: 'left'
    });

    this._checkDocSignButtons();
  }

  _postDocError(error)
  {
    var message = $a.Lang.ReturnPath('app.cf.design_items.docsign_generic_send_error');
    var errorStr = '';
    if (this.CleverForms.IsErrorPage(error)) errorStr = this.CleverForms.GetDetailsFromErrorPage(error).Description;
    else errorStr = $a.isPropString(response.data, 'ErrorMessage') && response.data.ErrorMessage.trim() !== '' ? response.data.ErrorMessage : errorStr;
    message = this._returnBackendErrors(errorStr, message);

    $a.HidePageLoader();

    this.CanSend = true;


    $a.Dialog.Show({
      message: message,
      showOk: true,
      showCancel: false,
      showInput: false,
      textAlign: 'left'
    });
    this._checkDocSignButtons();
  }

  _postDocCancel()
  {
    if (this.CleverForms.Form.ViewType !== 'Form') return;

    $a.ShowPageLoader();
    
    this.PostDocCancelButtonNode.classList.remove('hidden');
    this.PostDocCancelButtonNode.classList.add('disabled');
    this.PostDocButtonNode.classList.remove('hidden');
    this.PostDocButtonNode.classList.add('disabled');

    axios({
      method: 'post',
      url: this.CleverForms.DocumentSigningCancelApi,
      data: {
        InstanceId: this.CleverForms.GetInstanceGuid(),
        QuestionName: this.Config.Name
      }
    })
    .then(this._postDocCanceled)
    .catch(this._postDocCancelError);
    
  }

  _postDocCanceled(response)
  {
    //console.log('_postDocCanceled');
    //console.log(response);
    //console.log('');

    // TODO: Check and process errors

    if (this.CleverForms.Form.ViewType !== 'Form') return;

    var message = $a.Lang.ReturnPath('app.cf.design_items.docsign_cancel_success');
    if (
      $a.isObject(response.data)
      && response.data.hasOwnProperty('Success')
    )
    {
      if (response.data.Success)
      {
        message = $a.Lang.ReturnPath('app.cf.design_items.docsign_cancel_success');
        this.CanSend = true;

        if ($a.isPropBool(response.data, 'CanSend')) this.Config.Details.Value.CanSend = true;
        this.Config.Details.Value.Recipients = this.LastPostedDocsignRecipients;

        if (this.FormRowNode && this.FormRowNode.classList.contains('error')) this.FormRowNode.classList.remove('error');
        // TODO: Remove error marks
      }
      else
      {
        var errorStr = $a.isPropString(response.data, 'ErrorMessage') && response.data.ErrorMessage.trim() !== '' ? response.data.ErrorMessage : '';
        message = this._returnBackendErrors(errorStr, $a.Lang.ReturnPath('app.cf.design_items.docsign_generic_cancel_error'));

        if (
          response.data.hasOwnProperty('MissingCustomFields')
          && $a.isArray(response.data.MissingCustomFields)
          && response.data.MissingCustomFields.length > 0
        )
        {
          message = this._getMissingFieldsMessage(response.data.MissingCustomFields);
          this.CanSend = false;
        }
      }
    }
    else
    {
      message = $a.Lang.ReturnPath('app.cf.design_items.docsign_generic_cancel_error');

      this.CanSend = false;
    }

    $a.HidePageLoader();
    
    $a.Dialog.Show({
      message: message,
      showOk: true,
      showCancel: false,
      showInput: false,
      textAlign: 'left'
    });

    this._checkDocSignButtons();
  }

  _postDocCancelError(error)
  {
    if (this.CleverForms.IsErrorPage(error))
    {
      console.log('_postDocCancelError');
      console.log(this.CleverForms.GetErrorPageOutputString(error));
      console.log('');
    }

    // TODO: Check and process errors

    $a.HidePageLoader();

    this.CanSend = false;
    
    console.log(error); // TODO: add error messgae string here
    var errorStr = $a.Lang.ReturnPath('app.cf.design_items.docsign_generic_cancel_error');
    var message = this._returnBackendErrors(errorStr); // TODO: add error messgae string here

    $a.Dialog.Show({
      message: message,
      showOk: true,
      showCancel: false,
      showInput: false,
      textAlign: 'left'
    });

    this._checkDocSignButtons();
  }

  /**/

  _getMissingFieldsMessage(fields)
  {
    var invalidFields = [],
        missingFields = [],
        message = '',
        tab = '&nbsp;&nbsp;&nbsp;&nbsp;',
        invalidList = null,
        missingList = null,
        fields,
        fieldRow,
        fieldLabel,
        fieldNode;

    fields.forEach(function (fieldData)
    {
      if (document.querySelector('div[data-name="{0}"]'.format(fieldData.QuestionName)))
      {
        fieldRow = document.querySelector('div[data-name="{0}"]'.format(fieldData.QuestionName));
        fieldLabel = fieldRow.querySelector('label') ? fieldRow.querySelector('label').innerText.trim() : '';
        fieldNode = fieldRow.querySelector('input, select, textarea');
        fieldRow.classList.add('error');
        if (fieldLabel !== '') invalidFields.push(fieldLabel);
        else invalidFields.push(fieldData.FieldName);
      }
      else
      {
        missingFields.push(fieldData.FieldName);
      }
    }.bind(this));

    if (invalidFields.length + missingFields.length > 0)
    {
      if (invalidFields.length + missingFields.length > 14)
      {
        if (invalidFields.length > 0)
        {
          invalidList = '<div class="indent">' + invalidFields.join(', ') + '</div>';
        }
        if (missingFields.length > 0)
        {
          missingList = '<div class="indent">' + missingFields.join(', ') + '</div>';
        }
      }
      else
      {
        if (this.ShortenFieldLists)
        {
          if (invalidFields.length > 7)
          {
            fields = invalidFields.slice(0, 5);
            fields.push('...');
            fields.push(invalidFields[invalidFields.length - 1]);
            invalidFields = fields;
          }
          if (missingFields.length > 7)
          {
            fields = missingFields.slice(0, 5);
            fields.push('...');
            fields.push(missingFields[missingFields.length - 1]);
            missingFields = fields;
          }
        }
        if (invalidFields.length > 0)
        {
          invalidList = invalidFields.join('<br>' + tab);
        }
        if (missingFields.length > 0)
        {
          missingList = missingFields.join('<br>' + tab);
        }
      }
    }

    if (invalidList !== null)
    {
      message += '{prefix}<br>{tab}{list}<br>{suffix}'.format({
        tab: tab,
        prefix: $a.Lang.ReturnPath('app.cf.design_items.docsign_generic_invalid_fields'),
        list: invalidList,
        suffix: $a.Lang.ReturnPath('app.cf.design_items.docsign_generic_invalid_fields_message')
      });
    }

    if (missingList !== null)
    {
      if (invalidList !== null) message += '<br><br>';
      message += '{prefix}<br>{tab}{list}<br>{suffix}'.format({
        tab: tab,
        prefix: $a.Lang.ReturnPath('app.cf.design_items.docsign_generic_missing_fields'),
        list: missingList,
        suffix: $a.Lang.ReturnPath('app.cf.design_items.docsign_generic_missing_fields_message'),
      });
    }

    return message;
  }

  _returnBackendErrors(error, fallback)
  {
    var errorStr = $a.isString(error) ? error : '';
    var errorCheck = errorStr.toLowerCase().trim();
    var num, max, langPath;

    if (
      errorCheck == 'send error'
      || errorCheck.contains('Error while sending signature request') // og
      || errorCheck.contains('send your request. Please try again later') // jody
    )
    {
      langPath = 'app.cf.backend_sub_errors.send_error';
      errorStr = $a.Lang.ReturnPath(langPath);
    }

    if (
      errorCheck == 'deleted'
      || errorCheck.contains('This resource has been deleted') // og
      || errorCheck.contains('already been cancelled') // jody
    )
    {
      langPath = 'app.cf.backend_sub_errors.deleted';
      errorStr = $a.Lang.ReturnPath(langPath);
    }

    if (
      errorCheck == 'cancel error: already completed'
      || errorCheck.contains('???') // og
      || errorCheck.contains('???') // jody
    )
    {
      langPath = 'app.cf.backend_sub_errors.cancel_error_already_completed';
      errorStr = $a.Lang.ReturnPath(langPath);
    }

    if (
      errorCheck.startsWith('not enough recipients. required:')
      || errorCheck.contains('you need to provide ') // og
      //|| errorCheck.contains('???') // jody
    )
    {
      num = 1;
      if (!isNaN(parseInt(errorCheck.replace(/\D/g, '')))) num = parseInt(errorCheck.replace(/\D/g, ''));
      if (errorCheck.contains(':')) num = parseInt(errorCheck.split(':')[1]);
      langPath = 'app.cf.backend_sub_errors.not_enough_recipients';
      errorStr = $a.Lang.ReturnPath(langPath, { num: num });
    }

    if (
      errorCheck.startsWith('too many recipients. max required:')
      || errorCheck.contains('you have entered more than the required') // og
      || errorCheck.contains('please remove the extra signatories') // jody
    )
    {
      max = 1;
      if (!isNaN(parseInt(errorCheck.replace(/\D/g, '')))) max = parseInt(errorCheck.replace(/\D/g, ''));
      if (errorCheck.contains(':')) max = parseInt(errorCheck.split(':')[1]);
      langPath = 'app.cf.backend_sub_errors.too_many_recipients_1_required';
      if (max > 1) langPath = 'app.cf.backend_sub_errors.too_many_recipients_n_required';
      errorStr = $a.Lang.ReturnPath(langPath, { max: max });
    }

    if ($a.isString(error) && errorStr === error && $a.isString(fallback))
    {
      errorStr = fallback;
    }

    return errorStr;
  }

  _setReadyOnly()
  {
    //if (this.FormRowNode && this.FormRowNode.classList.contains('error')) this.FormRowNode.classList.remove('error');
    if (this.DocSignSelectNode)
    {
      this.DocSignSelectNode.setAttribute('disabled', 'disabled');
      if (
        this.DocSignSelectNode.hasOwnProperty('widgets')
        && this.DocSignSelectNode.widgets.hasOwnProperty('Autocomplete')
        && $a.isNode(this.DocSignSelectNode.widgets.Autocomplete.displayNode)
      )
      {
        this.DocSignSelectNode.widgets.Autocomplete.displayNode.setAttribute('disabled', 'disabled');
      }
    }
    if (this.FormRowNode && this.FormRowNode.querySelector('.docsign-row input.sv'))
    {
      this.FormRowNode.querySelectorAll('.docsign-row input.sv').forEach(function (node)
      {
        node.setAttribute('disabled', 'disabled');
      });
    }
  }

  _unsetReadyOnly()
  {
    if (this.DocSignSelectNode)
    {
      this.DocSignSelectNode.removeAttribute('disabled');
      if (
        this.DocSignSelectNode.hasOwnProperty('widgets')
        && this.DocSignSelectNode.widgets.hasOwnProperty('Autocomplete')
        && $a.isNode(this.DocSignSelectNode.widgets.Autocomplete.displayNode)
      )
      {
        this.DocSignSelectNode.widgets.Autocomplete.displayNode.removeAttribute('disabled');
      }
    }
    if (this.FormRowNode && this.FormRowNode.querySelector('.docsign-row input.sv'))
    {
      this.FormRowNode.querySelectorAll('.docsign-row input.sv').forEach(function (node)
      {
        node.removeAttribute('disabled');
      });
    }
    this._checkRecipientValidation();
  }

  _checkRecipientValidation()
  {
    if (this.FormRowNode && this.DocSignSelectNode.value !== '') // hanlde email and id validation
    {
      var hasError = false;
      var hasGoodRecipient = false;
      var recipientNodes = this.FormRowNode.querySelectorAll('.docsign-row input.sv');
      for (var r = 0; r < recipientNodes.length; r++)
      {
        if (recipientNodes[r] && recipientNodes[r].value.trim() !== '' && recipientNodes[r].classList.contains('error'))
        {
          hasError = true;
          break;
        }
        if (recipientNodes[r] && recipientNodes[r].value.trim() !== '' && !recipientNodes[r].classList.contains('error'))
        {
          hasGoodRecipient = true;
        }
      }
      if (hasError || !hasGoodRecipient)
      {
        this.PostDocButtonNode.classList.add('disabled');
        return;
      }
      if (!hasError && hasGoodRecipient)
      {
        this.PostDocButtonNode.classList.remove('disabled');
      }
    }
    if (this.FormRowNode && this.DocSignSelectNode.value === '')
    {
      this.PostDocButtonNode.classList.add('disabled');
    }
  }

  _checkDocSignButtons()
  {
    if (this.CleverForms.Form.ViewType === 'ViewOnly')
    {
      this.PostDocCancelButtonNode.classList.add('disabled');
      this.PostDocCancelButtonNode.classList.remove('hidden');
      this.PostDocButtonNode.classList.add('disabled');
      this.PostDocButtonNode.classList.remove('hidden');
      this._setReadyOnly();
    }
    else if (this.CanSend)
    {
      this.PostDocCancelButtonNode.classList.add('disabled');
      this.PostDocCancelButtonNode.classList.remove('hidden');
      this.PostDocButtonNode.classList.remove('disabled');
      this.PostDocButtonNode.classList.remove('hidden');
      this._unsetReadyOnly();
    }
    else
    {
      this.PostDocCancelButtonNode.classList.remove('disabled');
      this.PostDocCancelButtonNode.classList.remove('hidden');
      this.PostDocButtonNode.classList.add('disabled');
      this.PostDocButtonNode.classList.add('hidden');
      this._setReadyOnly();
    }
  }

  /**/

  _templates ()
  {
    super._templates();

    this.HtmlEditTemplate = `
    <div class="edit-row">
      <label>{templateLabel}</label>
      <div class="select working">
        <select class="docsign-template-ids"></select>
      </div>
      <span class="docsign-error red inline hidden"></span>
      <p class="desc docsign-template-desc"></p>
    </div>
    `;

    this.HtmlRowTemplate = `
    <div class="form-row">
      <label>{0}</label>
      <div class="docsign-fields">
        <div class="docsign-status{statusClass}">{status}</div>
        <div class="docsign-row">
          <label>{templateLabel}</label>
          <div class="select">
            <select class="docsign-template-ids"></select>
          </div>
        </div>
        <div class="docsign-row">
          <label>{recipientLabel} 1{required}</label>
          <input type="text" class="ui-has-email no-row-error" value="" />
        </div>
        <div class="docsign-row">
          <label>{recipientLabel} 2</label>
          <input type="text" class="ui-has-email required-override no-row-error" value="" />
        </div>
        <div class="docsign-row">
          <label>{recipientLabel} 3</label>
          <input type="text" class="ui-has-email required-override no-row-error" value="" />
        </div>
        <div class="docsign-row">
          <label>{recipientLabel} 4</label>
          <input type="text" class="ui-has-email required-override no-row-error" value="" />
        </div>
        <div class="docsign-row">
          <label></label>
          <div class="row-inline-buttons">
            <div class="button grey send-doc-cancel hidden"><span class="icon-cross"></span>{cancelLabel}</div>
            <div class="button dark-blue send-doc hidden"><span class="icon-mail-tick"></span>{sendLabel}</div>
          </div>
      </div>
      <span class="docsign-error red inline hidden"></span>
    </div>
    `;

    this.HtmlEditExampleTemplate = `
    <div class="default-form">
      <div class="form-row row-documentsigning">
        <label class="solo">{label}</label>
        <div class="docsign-fields">
          <div class="docsign-row">
            <label>{templateLabel}</label>
            <div class="select">
              <select class="">
                <option>Employee Contract</option>
              </select>
            </div>
          </div>
          <div class="docsign-row">
            <label>{recipientLabel} 1</label>
            <input type="text" class="ui-has-email no-row-error" value="name@email.com" />
          </div>
          <div class="docsign-row">
            <label>{recipientLabel} 2</label>
            <input type="text" class="ui-has-email no-row-error" value="name@email.com" />
          </div>
          <div class="docsign-row">
            <label>{recipientLabel} 3</label>
            <input type="text" class="ui-has-email no-row-error" value="name@email.com" />
          </div>
          <div class="docsign-row">
            <label>{recipientLabel} 4</label>
            <input type="text" class="ui-has-email no-row-error" value="name@email.com" />
          </div>
          <div class="docsign-row">
            <label></label>
            <div class="row-inline-buttons">
              <div class="button grey send-doc-cancel"><span class="icon-cross"></span>{cancelLabel}</div>
              <div class="button dark-blue send-doc"><span class="icon-mail-tick"></span>{sendLabel}</div>
            </div>
          </div>
        <div>
      </div>
    `;

  }

};;
/**
 *
 * Summary.       Element Drawpanel Class.
 *
 * Description.   Element Drawpanel functions and features.
 *
 * @author        Ben King, benk at affinityteam.com, ben.king at source63.com, +64 21 2672729.
 *
 *
 * @since         16.06.2020
 * @class         Drawpanel
 * @namespace     Affinity2018.Classes.Apps.CleverForms.Elements
 * @memberof      CleverForms.Elements
 * @constructs    Affinity2018.Classes.Apps.CleverForms.Elements.Drawpanel
 *
 * @public
 */

if (!('Affinity2018' in window)) Affinity2018 = {};
if (!('Classes' in Affinity2018)) Affinity2018.Classes = {};
if (!('Apps' in Affinity2018.Classes)) Affinity2018.Classes.Apps = {};
if (!('CleverForms' in Affinity2018.Classes.Apps)) Affinity2018.Classes.Apps.CleverForms = {};
if (!('Elements' in Affinity2018.Classes.Apps.CleverForms)) Affinity2018.Classes.Apps.CleverForms.Elements = {};

if (!('Apps' in Affinity2018)) Affinity2018.Apps = {};
if (!('Elements' in Affinity2018.Apps)) Affinity2018.Apps.Elements = {};

Affinity2018.Classes.Apps.CleverForms.Elements.Drawpanel = class extends Affinity2018.Classes.Apps.CleverForms.Elements.ElementBase
{
  _options()
  {
    super._options();

  }

  constructor(config)
  {
    super(config, 'Drawpanel');
    [
      '_options', '_templates',
      
      'SetDesignEditor', 'UnsetDesignEditor', 'GetFromDesignEditor', 'RemoveDesignerElement',
      'RemoveDesignerElement',
      'SetFormRow', 'GetFromFormRow', 'SetFromValue',

      '_imageSet'

    ].bindEach(this);

    this._options();
    this._templates();

    return this;
  }

  /**/

  SetDesignEditor()
  {
    this.HtmlEditExampleTemplate = this.HtmlEditExampleTemplate.format({
      label: $a.Lang.ReturnPath('app.cf.design_items.drawpanel_example_label')
    });

    this.HtmlEditTemplate = this.HtmlEditTemplate.format({
      label: $a.Lang.ReturnPath('generic.buttons.uploadimages'),
      choose: $a.Lang.ReturnPath('generic.buttons.chooseimages')
    });

    if (super.SetDesignEditor())
    {
      // set special html / values

      this.PopupNode.classList.add('large');

      return true;
    }
    return false;
  }

  UnsetDesignEditor ()
  {
    if (super.UnsetDesignEditor())
    {
      // unset special html / values

      return true;
    }
    return false;
  }

  GetFromDesignEditor()
  {
    this.Config = super.GetFromDesignEditor();

    // update special values

    return this.Config;
  }

  RemoveDesignerElement (callback)
  {
    if (super.RemoveDesignerElement())
    {

      // do any removal stuff here
      
      var node = document.querySelector('.item-' + this.UniqueName);
      if (node && $a.isFunction(callback))
      {
        callback(node);
      }
    }
  }

  /**/

  SetFormRow (target)
  {
    var html;

    if (this.IsReadOnly)
    {
      var state =  this.Config.Details.Value === null || this.Config.Details.Value.trim() === '' ? 'hidden' : '';
      html = this.HtmlRowReadOnlyTemplate.format({
        label: this.Config.Details.Label,
        src: state === 'hidden' ? '' : this.Config.Details.Value,
        state: state
      });
      this.FormRowNode = super.SetFormRow(target, html);
      this.FormRowNode.querySelector('img').onload = function ()
      {
        if (this.FormRowNode && this.CleverForms.Form) this.CleverForms.Form.ResizeSection(this.FormRowNode);
      }.bind(this);
      //setTimeout(this.CleverForms.Form.ResizeSection, 1000, this.FormRowNode);
    }
    else
    {
      html = this.HtmlRowTemplate.format({
        label: this.Config.Details.Label,
        value: $a.isString(this.Config.Details.Value) && this.Config.Details.Value.startsWith('data:image') ? this.Config.Details.Value : '',
        fileIds: this.Config.Details.FileId !== null ? this.Config.Details.FileId : '',
        fileNames: this.Config.Details.FileName !== null ? this.Config.Details.FileName : '',
        getApi: this.CleverForms.FileGetInfoApi,
        downloadApi: this.CleverForms.FileGetApi
      });
      this.FormRowNode = super.SetFormRow(target, html);
      this.FormRowNode.querySelector('input').addEventListener('imageSet', this._imageSet);
    }


    if (this.FormRowNode)
    {

      // set any special elements

      var input = this.FormRowNode.querySelector('input');
      var checkPanelLoaded = function ()
      {
        if (input.hasOwnProperty('widgets') && input.widgets.hasOwnProperty('DrawPanel') && input.widgets.DrawPanel.hasOwnProperty('CanvasNode'))
        {
          input.widgets.DrawPanel.CanvasNode.addEventListener('CanvasReady', function () { Affinity2018.Apps.CleverForms.Form.ResizeSection(this.FormRowNode); }.bind(this));
          if (input.widgets.DrawPanel.Ready) Affinity2018.Apps.CleverForms.Form.ResizeSection(this.FormRowNode);
          return;
        }
        setTimeout(checkPanelLoaded, 100);
      }.bind(this);
      checkPanelLoaded();

      // TODO: add files for background images and stuff ....

      return this.FormRowNode;
    }
  }

  GetFromFormRow()
  {
    if (super.GetFromFormRow())
    {

      // get any special elements

      var inputNode = this.FormRowNode.querySelector('input.ui-drawpanel');
      var inputWidget = inputNode.widgets.DrawPanel;

      this.FormData.Value = inputWidget.Get();

      return this.FormData;
    }
    throw '{0} "{1}" ({2}) could not get base post data for form post'.format(this.Config.Type, this.Config.Details.Label, this.Config.UniqueName);
  }

  SetFromValue(value, fromKeyChange)
  {
    fromKeyChange = fromKeyChange === undefined ? false : fromKeyChange;

  }

  /**/

  _imageSet (ev)
  {
    if (this.FormRowNode && Affinity2018.Apps.CleverForms.Form)
    {
      Affinity2018.Apps.CleverForms.Form.ResizeSection(this.FormRowNode);
    }
  }

  /**/

  _templates ()
  {
    super._templates();

    this.HtmlEditTemplate = `
    <div class="edit-row">
      <label>{label}</label>
      <label class="ui-has-file">
        <input type="file" name="FileId" data-allow-multiple="true" data-file-ids="" />
        <div class="button blue upload"><span class="icon-file-black"></span>{choose}</div>
      </label>
    </div>
    `;

    this.HtmlEditExampleTemplate = `
    <div class="default-form">
      <div class="form-row">
        <label>{label}</label>
        <input type="text" value="" class="ui-has-drawpanel" />
      </div>
      </div>
    `;

    this.HtmlRowTemplate = `
    <div class="form-row">
      <label>{label}</label>
      <input type="text" value="{value}" class="ui-has-drawpanel" data-file-ids="{fileIds}" data-file-names="{fileNames}" data-get-api="{getApi}" data-download-api="{downloadApi}" />
    </div>
    `;

    this.HtmlRowReadOnlyTemplate = `
    <div class="form-row">
      <label>{label}</label>
      <img src="{src}" class="{state}" />
    </div>
    `;

  }

};;
/**
 *
 * Summary.       Element EffectiveDate Class.
 *
 * Description.   Element EffectiveDate functions and features.
 *
 * @author        Ben King, benk at affinityteam.com, ben.king at source63.com, +64 21 2672729.
 *
 *
 * @since         16.06.2020
 * @class         EffectiveDate
 * @namespace     Affinity2018.Classes.Apps.CleverForms.Elements
 * @memberof      CleverForms.Elements
 * @constructs    Affinity2018.Classes.Apps.CleverForms.Elements.EffectiveDate
 *
 * @public
 */

if (!('Affinity2018' in window)) Affinity2018 = {};
if (!('Classes' in Affinity2018)) Affinity2018.Classes = {};
if (!('Apps' in Affinity2018.Classes)) Affinity2018.Classes.Apps = {};
if (!('CleverForms' in Affinity2018.Classes.Apps)) Affinity2018.Classes.Apps.CleverForms = {};
if (!('Elements' in Affinity2018.Classes.Apps.CleverForms)) Affinity2018.Classes.Apps.CleverForms.Elements = {};

if (!('Apps' in Affinity2018)) Affinity2018.Apps = {};
if (!('Elements' in Affinity2018.Apps)) Affinity2018.Apps.Elements = {};

Affinity2018.Classes.Apps.CleverForms.Elements.EffectiveDate = class extends Affinity2018.Classes.Apps.CleverForms.Elements.ElementBase
{
  _options()
  {
    super._options();

  }

  constructor(config)
  {
    super(config, 'EffectiveDate');
    [
      '_options', '_templates',
      
      'SetDesignEditor', 'UnsetDesignEditor', 'GetFromDesignEditor', 'RemoveDesignerElement',
      'RemoveDesignerElement',
      'SetFormRow', 'GetFromFormRow', 'SetFromValue'

    ].bindEach(this);

    this._options();
    this._templates();

    return this;
  }

  /**/

  SetDesignEditor()
  {
    if (super.SetDesignEditor())
    {
      // set special html / values

      return true;
    }
    return false;
  }

  UnsetDesignEditor ()
  {
    if (super.UnsetDesignEditor())
    {
      // unset special html / values

      return true;
    }
    return false;
  }

  GetFromDesignEditor()
  {
    this.Config = super.GetFromDesignEditor();

    // update special values

    return this.Config;
  }

  RemoveDesignerElement (callback)
  {
    if (super.RemoveDesignerElement())
    {

      // do any removal stuff here
      
      var node = document.querySelector('.item-' + this.UniqueName);
      if (node && $a.isFunction(callback))
      {
        callback(node);
      }
    }
  }

  /**/

  SetFormRow (target)
  {
    var format = '', date = '', dataset = '', html = '';

    if (
      this.Config.Type === 'AffinityField'
      && this.Config.Details.AffinityField.Mode === this.CleverForms.AffnityFieldModeTypes.Display.Enum
    )
    {
      this.IsReadOnly = true;
      this.Config.Details.IsReadOnly = true;
    }

    var date = null;
    if ($a.isPropString(this.Config.Details, 'Value') && this.Config.Details.Value.trim() !== '') date = $a.stringToDate(this.Config.Details.Value); 

    if (this.IsReadOnly)
    {
      var value = '';
      if (date !== null)
      {
        value = date.toString('ddd dS MMM, yyyy');
      }
      html = this.HtmlRowReadOnlyTemplate.format({
        label: this.Config.Details.Label,
        value: value
      });
    }
    else
    {
      format = 'dd/MM/yyyy';
      dataset += ' data-calendar-return-format="' + format + '"';
      if (date !== null)
      {
        dataset += ' data-start-date="' + date.toString(format) + '"';
        date = date.toString(format);
      }
      dataset += ' data-calendar-nullable="true"';
      html = this.HtmlRowTemplate.format(
        {
          label: this.Config.Details.Label,
          type: this.Config.Details.DateTimeType,
          date: date,
          dataset: dataset.trim()
        }
      );
    }

    this.FormRowNode = super.SetFormRow(target, html);
    if (this.FormRowNode)
    {

      // set any special elements

      //this.FormRowNode.querySelector('input').value = date;
      //if (date !== '') this.FormRowNode.querySelector('input').dataset.startDate = date;

      return this.FormRowNode;
    }
  }

  GetFromFormRow()
  {
    if (super.GetFromFormRow())
    {

      // get any special elements

      var inputNode = this.FormRowNode.querySelector('input.ui-calendar');

      var fromRow = inputNode.parentNode.parentNode;

      var inputWidget = inputNode.widgets.DateTime;
      var date = inputWidget.getRawDate();

      if (inputNode.value.trim() !== '' && date !== false) this.FormData.Value = date.toString(inputWidget.outputFormat);
      else this.FormData.Value = '';
      return this.FormData;
    }
    throw '{0} "{1}" ({2}) could not get base post data for form post'.format(this.Config.Type, this.Config.Details.Label, this.Config.UniqueName);
  }

  SetFromValue(value, fromKeyChange)
  {
    fromKeyChange = fromKeyChange === undefined ? false : fromKeyChange;
    var format = '';
    var inputNode = this.IsReadOnly ? this.FormRowNode.querySelector('input') : this.FormRowNode.querySelector('input.ui-calendar');
    var inputWidget = this.IsReadOnly ? false : inputNode.widgets.DateTime;

    if (
      $a.isString(value) &&
      (
        value.trim() === '' || value.trim() === 'null'
      )
    )
    {
      if (inputWidget) inputWidget.setNone();
      else inputNode.value = '';
      return;
    }

    if ($a.isString(value) && $a.isDateValid($a.stringToDate(value)))
    {
      value = $a.stringToDate(value);
    }

    if ($a.isDateValid(value))
    {
      if (inputWidget) inputWidget.setDate(value);
      else
      {
        format = '';
        format += 'ddd dS MMM, yyyy';
        //format += ' h:mm tt';
        inputNode.value = value.toString(format);
      }
    }
  }

  /**/

  _templates ()
  {
    super._templates();

    this.HtmlEditTemplate = `
    `;

    this.HtmlEditExampleTemplate = `
    <div class="default-form">
      <div class="form-row">
        <label>Date</label>
        <input type="text" class="ui-has-calendar effective-date" data-type="date" data-start-date="now" />
      </div>
    </div>
    `;

    this.HtmlRowTemplate = `
    <div class="form-row calendar">
      <label>{label}</label>
      <input type="text" class="ui-has-calendar" data-type="{type}" {dataset} value="{date}" />
    </div>
    `;

    this.HtmlRowReadOnlyTemplate =  `
    <div class="form-row">
      <label>{label}</label>
      <input type="text" disabled value="{value}" />
    </div>
    `;

  }

};;
/**
 *
 * Summary.       Element Email Class.
 *
 * Description.   Element Email functions and features.
 *
 * @author        Ben King, benk at affinityteam.com, ben.king at source63.com, +64 21 2672729.
 *
 *
 * @since         16.06.2020
 * @class         Email
 * @namespace     Affinity2018.Classes.Apps.CleverForms.Elements
 * @memberof      CleverForms.Elements
 * @constructs    Affinity2018.Classes.Apps.CleverForms.Elements.Email
 *
 * @public
 */

if (!('Affinity2018' in window)) Affinity2018 = {};
if (!('Classes' in Affinity2018)) Affinity2018.Classes = {};
if (!('Apps' in Affinity2018.Classes)) Affinity2018.Classes.Apps = {};
if (!('CleverForms' in Affinity2018.Classes.Apps)) Affinity2018.Classes.Apps.CleverForms = {};
if (!('Elements' in Affinity2018.Classes.Apps.CleverForms)) Affinity2018.Classes.Apps.CleverForms.Elements = {};

if (!('Apps' in Affinity2018)) Affinity2018.Apps = {};
if (!('Elements' in Affinity2018.Apps)) Affinity2018.Apps.Elements = {};

Affinity2018.Classes.Apps.CleverForms.Elements.Email = class extends Affinity2018.Classes.Apps.CleverForms.Elements.ElementBase
{
  _options()
  {
    super._options();

  }

  constructor(config)
  {
    super(config, 'Email');
    [
      '_options', '_templates',
      
      'SetDesignEditor', 'UnsetDesignEditor', 'GetFromDesignEditor', 'RemoveDesignerElement',
      'RemoveDesignerElement',
      'SetFormRow', 'GetFromFormRow', 'SetFromValue'

    ].bindEach(this);

    this._options();
    this._templates();

    return this;
  }

  /**/

  SetDesignEditor()
  {
    if (super.SetDesignEditor())
    {
      // set special html / values

      return true;
    }
    return false;
  }

  UnsetDesignEditor ()
  {
    if (super.UnsetDesignEditor())
    {
      // unset special html / values

      return true;
    }
    return false;
  }

  GetFromDesignEditor()
  {
    this.Config = super.GetFromDesignEditor();

    // update special values

    return this.Config;
  }

  RemoveDesignerElement (callback)
  {
    if (super.RemoveDesignerElement())
    {

      // do any removal stuff here
      
      var node = document.querySelector('.item-' + this.UniqueName);
      if (node && $a.isFunction(callback))
      {
        callback(node);
      }
    }
  }

  /**/

  SetFormRow (target)
  {
    var html = this.HtmlRowTemplate.format(this.Config.Details.Label, this.Config.Details.Value);
    this.FormRowNode = super.SetFormRow(target, html);
    if (this.FormRowNode)
    {

      // set any special elements

      return this.FormRowNode;
    }
  }

  GetFromFormRow()
  {
    if (super.GetFromFormRow())
    {

      // get any special elements

      this.FormData.Value = this.FormRowNode.querySelector('input.sv').value;

      return this.FormData;
    }
    throw '{0} "{1}" ({2}) could not get base post data for form post'.format(this.Config.Type, this.Config.Details.Label, this.Config.UniqueName);
  }

  SetFromValue(value, fromKeyChange)
  {
    fromKeyChange = fromKeyChange === undefined ? false : fromKeyChange;
    super.SetFromValue(value, fromKeyChange);
  }

  /**/

  _templates ()
  {
    super._templates();

    this.HtmlEditTemplate = `
      
    `;

    this.HtmlEditExampleTemplate = `
    <div class="default-form">
      <div class="form-row">
        <label>Email</label>
        <input type="text" value="name@email.com" class="ui-has-email" />
      </div>
    </div>
    `;

    this.HtmlRowTemplate = `
    <div class="form-row">
      <label>{0}</label>
      <input type="text" class="ui-has-email" value="{1}"/>
    </div>
    `;

  }

};;
/**
 *
 * Summary.       Element Explanation Class.
 *
 * Description.   Element Explanation functions and features.
 *
 * @author        Ben King, benk at affinityteam.com, ben.king at source63.com, +64 21 2672729.
 *
 *
 * @since         16.06.2020
 * @class         Explanation
 * @namespace     Affinity2018.Classes.Apps.CleverForms.Elements
 * @memberof      CleverForms.Elements
 * @constructs    Affinity2018.Classes.Apps.CleverForms.Elements.Explanation
 *
 * @public
 */

if (!('Affinity2018' in window)) Affinity2018 = {};
if (!('Classes' in Affinity2018)) Affinity2018.Classes = {};
if (!('Apps' in Affinity2018.Classes)) Affinity2018.Classes.Apps = {};
if (!('CleverForms' in Affinity2018.Classes.Apps)) Affinity2018.Classes.Apps.CleverForms = {};
if (!('Elements' in Affinity2018.Classes.Apps.CleverForms)) Affinity2018.Classes.Apps.CleverForms.Elements = {};

if (!('Apps' in Affinity2018)) Affinity2018.Apps = {};
if (!('Elements' in Affinity2018.Apps)) Affinity2018.Apps.Elements = {};

Affinity2018.Classes.Apps.CleverForms.Elements.Explanation = class extends Affinity2018.Classes.Apps.CleverForms.Elements.ElementBase
{
  _options()
  {
    super._options();

  }

  constructor(config)
  {
    super(config, 'Explanation');
    [
      '_options', '_templates',
      
      'SetDesignEditor', 'UnsetDesignEditor', 'GetFromDesignEditor', 'RemoveDesignerElement',
      'RemoveDesignerElement',
      'SetFormRow', 'GetFromFormRow', 'SetFromValue'

    ].bindEach(this);

    this._options();
    this._templates();

    return this;
  }

  /**/

  SetDesignEditor()
  {
    this.HtmlEditExampleTemplate = this.HtmlEditExampleTemplate.format({
      example: $a.Lang.ReturnPath('app.cf.design_items.explaination_example')
    });

    this.HtmlEditTemplate = this.HtmlEditTemplate.format({
      label: $a.Lang.ReturnPath('app.cf.design_items.explaination_label'),
      arrowLabel: $a.Lang.ReturnPath('app.cf.design_items.explaination_arrow_label'),
      noneLabel: $a.Lang.ReturnPath('app.cf.design_items.explaination_none_label'),
      topLabel: $a.Lang.ReturnPath('app.cf.design_items.explaination_top_label'),
      rightLabel: $a.Lang.ReturnPath('app.cf.design_items.explaination_right_label'),
      bottomLabel: $a.Lang.ReturnPath('app.cf.design_items.explaination_bottom_label'),
      leftLabel: $a.Lang.ReturnPath('app.cf.design_items.explaination_left_label')
    });

    if (super.SetDesignEditor())
    {
      // set special html / values
      
      var intVal = -1;
      var text = this.Config.Details.Text || '';
      this.TemplateNode.querySelector('textarea').value = text.trim();

      // TODO: default will be 0 (enum default) but save wants a string :/
      if ($a.isPropString(this.Config.Details, 'ArrowDirection'))
      {
        if (!isNaN(parseInt(this.Config.Details.ArrowDirection))) intVal = parseInt(this.Config.Details.ArrowDirection);
        else this.TemplateNode.querySelector('select.ArrowDirection').value = this.Config.Details.ArrowDirection.toLowerCase().trim();
      }
      else if (!isNaN(parseInt(this.Config.Details.ArrowDirection))) intVal = parseInt(this.Config.Details.ArrowDirection);

      if (intVal !== -1 && this.CleverForms.ArrowTypeEnum.hasOwnProperty(intVal))
      {
        this.TemplateNode.querySelector('select.ArrowDirection').value = this.CleverForms.ArrowTypeEnum[intVal].value;
      }

      return true;
    }
    return false;
  }

  UnsetDesignEditor ()
  {
    if (super.UnsetDesignEditor())
    {
      // unset special html / values

      return true;
    }
    return false;
  }

  GetFromDesignEditor()
  {
    this.Config = super.GetFromDesignEditor();

    // update special values

    this.Config.Details.Text = this.TemplateNode.querySelector('textarea').value;
    this.Config.Details.ArrowDirection = this.TemplateNode.querySelector('select.ArrowDirection').value;

    this.CheckChanges(true);

    return this.Config;
  }

  RemoveDesignerElement (callback)
  {
    if (super.RemoveDesignerElement())
    {

      // do any removal stuff here
      
      var node = document.querySelector('.item-' + this.UniqueName);
      if (node && $a.isFunction(callback))
      {
        callback(node);
      }
    }
  }

  /**/

  SetFormRow (target)
  {
    var html = this.HtmlRowTemplate.format(this.Config.Details.ArrowDirection.toLowerCase().trim(), this.Config.Details.Text);
    this.FormRowNode = super.SetFormRow(target, html);
    if (this.FormRowNode)
    {

      // set any special elements

      return this.FormRowNode;
    }
  }

  GetFromFormRow()
  {
    if (super.GetFromFormRow())
    {

      // get any special elements

      return this.FormData;
    }
    throw '{0} "{1}" ({2}) could not get base post data for form post'.format(this.Config.Type, this.Config.Details.Label, this.Config.UniqueName);
  }

  SetFromValue (value)
  {

  }

  /**/

  _templates ()
  {
    super._templates();

    this.HtmlEditTemplate = `
    <div class="edit-row">
      <label>{label}</div>
      <textarea class="LongText"></textarea>
    </div>
    <br />
    <br />
    <div class="edit-row">
      <label>{arrowLabel}</label>
      <div class="select">
        <select class="ArrowDirection">
          <option value="none">{noneLabel}</option>
          <option value="top">{topLabel}</option>
          <option value="right">{rightLabel}</option>
          <option value="bottom">{bottomLabel}</option>
          <option value="left">{leftLabel}</option>
        </select>
      </div>
    </div>
    `;

    this.HtmlEditExampleTemplate = `
    <div class="default-form">
      <div class="form-row">
        <div class="help-bubble explain bottom">{example}</div>
      </div>
    </div>
    `;

    this.HtmlRowTemplate = `
      <div class="form-row">
        <div class="help-bubble explain {0}">{1}</div>
      </div>
    `;

  }

};;
/**
 *
 * Summary.       Element FileUploadMulti Class.
 *
 * Description.   Element FileUploadMulti functions and features.
 *
 * @author        Ben King, benk at affinityteam.com, ben.king at source63.com, +64 21 2672729.
 *
 *
 * @since         16.06.2020
 * @class         FileUploadMulti
 * @namespace     Affinity2018.Classes.Apps.CleverForms.Elements
 * @memberof      CleverForms.Elements
 * @constructs    Affinity2018.Classes.Apps.CleverForms.Elements.FileUploadMulti
 *
 * @public
 */

if (!('Affinity2018' in window)) Affinity2018 = {};
if (!('Classes' in Affinity2018)) Affinity2018.Classes = {};
if (!('Apps' in Affinity2018.Classes)) Affinity2018.Classes.Apps = {};
if (!('CleverForms' in Affinity2018.Classes.Apps)) Affinity2018.Classes.Apps.CleverForms = {};
if (!('Elements' in Affinity2018.Classes.Apps.CleverForms)) Affinity2018.Classes.Apps.CleverForms.Elements = {};

if (!('Apps' in Affinity2018)) Affinity2018.Apps = {};
if (!('Elements' in Affinity2018.Apps)) Affinity2018.Apps.Elements = {};

Affinity2018.Classes.Apps.CleverForms.Elements.FileUploadMulti = class extends Affinity2018.Classes.Apps.CleverForms.Elements.ElementBase
{
  _options()
  {
    super._options();

    this.DocumentCategories = null;
    this.DocumentTypes = null;

    this.UseAutocomplets = true;
  }

  constructor(config)
  {
    super(config, 'FileUploadMulti');
    [
      '_options', '_templates',
      
      'SetDesignEditor', 'UnsetDesignEditor', 'GetFromDesignEditor', 'RemoveDesignerElement',
      'RemoveDesignerElement',
      'SetFormRow', 'GetFromFormRow', 'SetFromValue',

      '_checkHideables',
      '_getDocumentCategories', '_getDocumentTypes',
      '_loadNames'

    ].bindEach(this);

    this._options();
    this._templates();

    return this;
  }

  /**/

  SetDesignEditor()
  {
    this.HtmlEditTemplate = this.HtmlEditTemplate.format({
      empLabel: $a.Lang.ReturnPath('app.cf.design_items.file_upload_radio_employee_label'),
      posLabel: $a.Lang.ReturnPath('app.cf.design_items.file_upload_radio_position_label'),
      formOnlyLable: $a.Lang.ReturnPath('app.cf.design_items.file_upload_radio_formonly_label'),
      catLabel: $a.Lang.ReturnPath('app.cf.design_items.file_upload_category_label'),
      typeLabel: $a.Lang.ReturnPath('app.cf.design_items.file_upload_type_label'),
      secLabel: $a.Lang.ReturnPath('app.cf.design_items.file_upload_security_label'),
      secEmpLabel: $a.Lang.ReturnPath('app.cf.design_items.file_upload_security_emp_label'),
      secManLabel: $a.Lang.ReturnPath('app.cf.design_items.file_upload_security_manager_label'),
      secPayrollLabel: $a.Lang.ReturnPath('app.cf.design_items.file_upload_security_payroll_label')
    });

    this.HtmlEditExampleTemplate = this.HtmlEditExampleTemplate.format({
      label: $a.Lang.ReturnPath('generic.buttons.uploadfile'),
      choose: $a.Lang.ReturnPath('generic.buttons.choosefile')
    });

    if (super.SetDesignEditor())
    {
      // set special html / values

      this.AttachOnlyTrueNode = this.PopupNode.querySelector('input.attach-employee');
      this.AttachOnlyFalseNode = this.PopupNode.querySelector('input.attach-form');
      this.AttachPositionNode = this.PopupNode.querySelector('input.attach-position');

      this.DocCatsNode = this.TemplateNode.querySelector('.document-category div.select');
      this.DocCatsSelectNode = this.DocCatsNode.querySelector('select');

      this.DocTypeNode = this.TemplateNode.querySelector('.document-type div.select');
      this.DocTypeSelectNode = this.DocTypeNode.querySelector('select');

      this.DocSecurityLevelNode = this.TemplateNode.querySelector('.document-security-level div.select');
      this.DocSecurityLevelSelectNode = this.DocSecurityLevelNode.querySelector('select');
      if (this.Config.Details.SecurityLevel === undefined) this.DocSecurityLevelSelectNode.value = '20';
      else this.DocSecurityLevelSelectNode.value = this.Config.Details.SecurityLevel;
      if (this.UseAutocomplets) Affinity2018.Apps.Plugins.Autocompletes.Apply(this.DocSecurityLevelSelectNode);

      //this.DocumentDescriptionNode = this.TemplateNode.querySelector('textarea.DocumentDescription');
      //this.DocumentDescriptionRowNode = this.DocumentDescriptionNode.parentNode;
      //this.DocumentDescriptionNode.value = this.Config.Details.DocumentDescription === null ? '' : this.Config.Details.DocumentDescription;
      //this.DocumentDescriptionRowNode.classList.remove('hidden');

      if (this.Config.Details.AttachFormOnly)
      {
        this.AttachOnlyTrueNode.checked = false;
        this.AttachOnlyFalseNode.checked = true;
        this.AttachPositionNode.checked = false;
        this.AttachOnlyTrueNode.removeAttribute('checked');
        this.AttachPositionNode.removeAttribute('checked');
        
      }
      else
      {
        this.AttachOnlyTrueNode.checked = true;
        this.AttachOnlyFalseNode.checked = false;
        this.AttachPositionNode.checked = false;
        this.AttachOnlyFalseNode.removeAttribute('checked');
        this.AttachPositionNode.removeAttribute('checked');
        this.DocSecurityLevelNode.classList.remove('hide');
      }
      if ([11, '11', 'Position'].contains(this.Config.Details.DocumentCategory))
      {
        this.AttachOnlyTrueNode.checked = false;
        this.AttachOnlyFalseNode.checked = false;
        this.AttachPositionNode.checked = true;
        this.AttachOnlyTrueNode.removeAttribute('checked');
        this.AttachOnlyFalseNode.removeAttribute('checked');
      }
      
      this.PreselctCategory = "";

      this.DocCatsSelectNode.addEventListener('change', this._getDocumentTypes);
      this.AttachOnlyTrueNode.addEventListener('click', this._checkHideables);
      this.AttachOnlyFalseNode.addEventListener('click', this._checkHideables);
      this.AttachPositionNode.addEventListener('click', this._checkHideables);

      this._checkHideables();

      this._getDocumentCategories();

      this.PopupNode.classList.add('large');

      return true;
    }
    return false;
  }

  UnsetDesignEditor ()
  {
    if (super.UnsetDesignEditor())
    {
      // unset special html / values

      this.DocCatsSelectNode.removeEventListener('change', this._getDocumentTypes);
      this.AttachOnlyTrueNode.removeEventListener('click', this._checkHideables);
      this.AttachOnlyFalseNode.removeEventListener('click', this._checkHideables);

      return true;
    }
    return false;
  }

  GetFromDesignEditor()
  {
    this.Config = super.GetFromDesignEditor();

    // update special values
    this.Config.Details.DocumentCategory = this.DocCatsSelectNode.value;
    this.Config.Details.DocumentType = this.DocTypeSelectNode.value;
    this.Config.Details.SecurityLevel = this.DocSecurityLevelSelectNode.value;
    //this.Config.Details.DocumentDescription = this.DocumentDescriptionNode.value;

      if (this.AttachOnlyTrueNode.checked) {
          this.Config.Details.AttachFormOnly = false;
      }
      if (this.AttachOnlyFalseNode.checked) {
          this.Config.Details.DocumentCategory = "";
          this.Config.Details.AttachFormOnly = true;
      }

    if (this.AttachPositionNode.checked)
    {
      this.Config.Details.DocumentCategory = "Position";
      this.Config.Details.AttachFormOnly = false;
    }

    this.CheckChanges(true);

    return this.Config;
  }

  RemoveDesignerElement (callback)
  {
    if (super.RemoveDesignerElement())
    {

      // do any removal stuff here

      if (this.DocTypeSelectNode && $a.isNode(this.DocTypeSelectNode)) this.DocTypeSelectNode.innerHTML = '';
      if (this.DocCatsSelectNode && $a.isNode(this.DocCatsSelectNode)) this.DocCatsSelectNode.value = '';

      var node = document.querySelector('.item-' + this.UniqueName);
      if (node && $a.isFunction(callback))
      {
        callback(node);
      }
    }
  }

  /**/

  SetFormRow (target)
  {
    var html = '', fileIds;
    fileIds = this.Config.Details.Value.toString();
    fileIds = fileIds.split(',').removeEmpty().removeDuplicates();
    fileIds = fileIds.map(function (x) { return x + ''; });

    //var desc = this.Config.Details.DocumentDescription;
    //var hasDesc = $a.isString(desc) && desc.trim() !== '';

    if (this.IsReadOnly || this.CleverForms.ViewType === 'ViewOnly')
    {
      //if (hasDesc)
      //{
      //  html = this.HtmlRowReadOnlyWithDescTemplate.format({
      //    label: this.Config.Details.Label,
      //    desc: desc,
      //    fileids: fileIds.length > 0 ? 'File Ids: ' + fileIds.join(', ') : 'No Files.'
      //  });
      //}
      //else
      //{
        html = this.HtmlRowReadOnlyTemplate.format({
          label: this.Config.Details.Label,
          fileids: fileIds.length > 0 ? 'File Ids: ' + fileIds.join(', ') : 'No Files.',
          choose: $a.Lang.ReturnPath('generic.buttons.choosefile')
        });
      //}
      this._loadNames();
    }
    else
    {
      //if (hasDesc)
      //{
      //  html = this.HtmlRowWithDescTemplate.format({
      //    label: this.Config.Details.Label,
      //    desc: desc,
      //    fileids: this.Config.Details.Value
      //  });
      //}
      //else
      //{
        html = this.HtmlRowTemplate.format({
          label: this.Config.Details.Label,
          fileids: this.Config.Details.Value,
          choose: $a.Lang.ReturnPath('generic.buttons.choosefile')
        });
      //}
    }

    this.FormRowNode = super.SetFormRow(target, html);

    // set instance of FileUpload plugin to window for testing in console
    //setTimeout(function () { window.__testFileUpload = this.FormRowNode.querySelector('input').widgets.FileUpload; }.bind(this), 2000);

    if (this.FormRowNode)
    {

      // set any special elements
    }
  }

  GetFromFormRow()
  {
    if (super.GetFromFormRow())
    {

      // get any special elements

      if ($a.isNode(this.FileNode) && this.FileWidget !== null)
      {
        this.FormData.Value = this.FileWidget.GetFileIds();
      }

      return this.FormData;
    }
    throw '{0} "{1}" ({2}) could not get base post data for form post'.format(this.Config.Type, this.Config.Details.Label, this.Config.UniqueName);
  }

  SetFromValue(value, fromKeyChange)
  {
    fromKeyChange = fromKeyChange === undefined ? false : fromKeyChange;

  }

  /**/

  _checkHideables ()
  {
    this.PreselctCategory = "";
    if (this.AttachOnlyFalseNode.checked)
    {
      this.DocCatsNode.parentNode.classList.add('hide');
      this.DocTypeNode.parentNode.classList.add('hide');
      this.DocSecurityLevelNode.parentNode.classList.add('hide');
    }
    else if (this.AttachOnlyTrueNode.checked)
    {
      this.PreselctCategory = "Employee";
      this.DocCatsNode.parentNode.classList.remove('hide');
      this.DocTypeNode.parentNode.classList.remove('hide');
      this.DocSecurityLevelNode.parentNode.classList.remove('hide');
      this._getDocumentTypes();
    }
    else if (this.AttachPositionNode.checked)
    {
      this.PreselctCategory = "Position";
      this.DocCatsNode.parentNode.classList.add('hide');
      this.DocTypeNode.parentNode.classList.remove('hide');
      this.DocSecurityLevelNode.parentNode.classList.remove('hide');
      this._getDocumentTypes();
    }
  }

  _getDocumentCategories ()
  {
    var selected = null, key, optionNode;
    if (this.DocumentCategories === null)
    {
      this.DocCatsNode.classList.add('working');
      axios({
        url: this.CleverForms.GetDocumentCategory,
        method: 'GET'
      }).then(function (response)
      {
        if ('data' in response)
        {
          if (['object', 'array'].contains($a.type(response.data)))
          {
            var prepped = true;
            if (this.DocCatsSelectNode.hasOwnProperty('widgets') && this.DocCatsSelectNode.widgets.hasOwnProperty('Autocomplete')) prepped = this.DocCatsSelectNode.widgets.Autocomplete.Destroy();
            this.DocumentCategories = {};
            this.DocCatsSelectNode.innerHTML = '';
            for (key in response.data)
            {
                this.DocumentCategories[key] = key.splitCamelCase();
              if (response.data.hasOwnProperty(key))
              {
                  if (key !== 'Position' && key !== 'Performance') // do not add Position or Performance
                {
                  optionNode = document.createElement('option');
                  optionNode.innerHTML = this.DocumentCategories[key];
                  optionNode.value = key;
                  if (this.Config.Details.DocumentCategory === key)
                  {
                    optionNode.selected = 'selected';
                    selected = key;
                  }
                  this.DocCatsSelectNode.appendChild(optionNode);
                }
              }
            }
              if (selected !== null) {
                  this.DocCatsSelectNode.value = selected;
                  this._getDocumentTypes();
              }
              if (selected === null && this.DocCatsSelectNode.value !== null) this._getDocumentTypes();
          }
        }
        this.DocCatsNode.classList.remove('working');
        if (this.UseAutocomplets) Affinity2018.Apps.Plugins.Autocompletes.Apply(this.DocCatsSelectNode);
      }.bind(this))
      .catch(function (error)
      {
        console.log('GetDocumentCategory ERROR');
        console.log(error);
        this.DocCatsNode.classList.remove('working');
      }.bind(this));
    }
    else
    {
      var prepped = true;
      if (this.DocCatsSelectNode.hasOwnProperty('widgets') && this.DocCatsSelectNode.widgets.hasOwnProperty('Autocomplete')) prepped = this.DocCatsSelectNode.widgets.Autocomplete.Destroy();
      this.DocCatsSelectNode.innerHTML = '';
      for (key in this.DocumentCategories)
      {
          if (this.DocumentCategories.hasOwnProperty(key) && key !== 'Position' && key !== 'Performance')
        {
          optionNode = document.createElement('option');
          optionNode.innerHTML = this.DocumentCategories[key];
          optionNode.value = key;
          if (this.Config.Details.DocumentCategory === key)
          {
            optionNode.selected = 'selected';
            selected = key;
          }
          this.DocCatsSelectNode.appendChild(optionNode);
        }
      }
        if (selected !== null) {
            this.DocCatsSelectNode.value = selected;
            this._getDocumentTypes();
        }
      else this.DocCatsSelectNode.value = "";
      this.DocCatsNode.classList.remove('working');
      if (this.UseAutocomplets) Affinity2018.Apps.Plugins.Autocompletes.Apply(this.DocCatsSelectNode);
    }
  }

  _getDocumentTypes ()
  {
    if (this.PreselctCategory.trim() === "")
    {
      var prepped = true;
      if (this.DocTypeSelectNode.hasOwnProperty('widgets') && this.DocTypeSelectNode.widgets.hasOwnProperty('Autocomplete')) prepped = this.DocTypeSelectNode.widgets.Autocomplete.Destroy();
      this.DocTypeNode.parentNode.classList.add('hide');
      this.DocTypeNode.classList.remove('working');
      this.DocTypeSelectNode.innerHTML = '';
    }
    else
    {
      var prepped = true;
      if (this.DocTypeSelectNode.hasOwnProperty('widgets') && this.DocTypeSelectNode.widgets.hasOwnProperty('Autocomplete')) prepped = this.DocTypeSelectNode.widgets.Autocomplete.Destroy();
      this.DocTypeNode.parentNode.classList.remove('hide');
      this.DocTypeNode.classList.add('working');
      var val = this.PreselctCategory.trim() === "Position" ? this.PreselctCategory.trim() : this.DocCatsSelectNode.value;
      var docCat = val !== null && val !== undefined && ($a.isString(val) && val.trim() !== '') ? val.trim() : '';
      if (docCat === null || docCat === '') return;
        
      axios({
        url: this.CleverForms.GetDocumentTypes + '?documentCategory=' + docCat,
        method: 'GET'
      })
        .then(function (response)
        {
          this.DocTypeSelectNode.innerHTML = '';
          var selected = null, optionNode;
          optionNode = document.createElement('option');
          optionNode.innerHTML = 'Any';
          optionNode.value = '0';
          this.DocTypeSelectNode.appendChild(optionNode);
          if ($a.isPropArray(response, 'data'))
          {
            var i = 0;
            for (; i < response.data.length; i++)
            {
              optionNode = document.createElement('option');
              optionNode.innerHTML = response.data[i].Name;
              optionNode.value = response.data[i].Id;
              if (this.Config.Details.DocumentType === response.data[i].Id || parseInt(this.Config.Details.DocumentType) == response.data[i].Id)
              {
                optionNode.selected = 'selected';
                selected = response.data[i].Id;
              }
              this.DocTypeSelectNode.appendChild(optionNode);
            }
          }
          if (selected !== null) this.DocTypeSelectNode.value = selected;
          else this.DocTypeSelectNode.value = 0
          this.DocTypeNode.classList.remove('working');
          if (this.UseAutocomplets) Affinity2018.Apps.Plugins.Autocompletes.Apply(this.DocTypeSelectNode);
        }.bind(this))
        .catch(function (error)
        {
          console.log('GetDocumentTypes ERROR');
          console.log(error);
          this.DocTypeNode.classList.remove('working');
        }.bind(this));
    }
  }

  _loadNames ()
  {
    //var desc = this.Config.Details.DocumentDescription;
    //var hasDesc = $a.isString(desc) && desc.trim() !== '';
    var fileIdstrings = this.Config.Details.Value.toString();
    var fileIds = fileIdstrings.split(',').removeEmpty().removeDuplicates();
    axios({
      method: 'GET',
      url: this.CleverForms.FileGetInfoApi + '?fileIds=' + fileIds,
    }).then(function (response)
    {
      if (
        $a.isPropObject(response, 'data')
        && $a.isPropObject(response.data, 'data')
      )
      {
        var dataObj = response.data.data, f = 0, links = [], id;
        for ( ; f < fileIds.length; f++)
        {
          if (dataObj.hasOwnProperty(fileIds[f]))
            links.push('<a href="' + this.CleverForms.FileGetApi + '?documentId=' + fileIds[f] + '" target="_blank">' + dataObj[fileIds[f]] + '</a>');
          else
            links.push(fileIds[f]);
        }
        if (links.length > 0)
        {
          //if (hasDesc)
          //{
          //  this.FormRowNode.innerHTML = this.HtmlRowReadOnlyNamesWithDescTemplate.format({
          //    label: this.Config.Details.Label,
          //    desc: desc,
          //    links: links.join('<br />')
          //  });
          //}
          //else
          //{
            this.FormRowNode.innerHTML = this.HtmlRowReadOnlyNamesTemplate.format({
              label: this.Config.Details.Label,
              links: links.join('<br />')
            });
          //}
        }
      }
    }.bind(this)).catch(function ()
    {

    });
  }


  /**/

  _templates ()
  {
    super._templates();

    this.HtmlEditTemplate = `
    <div class="edit-row inline-radio">
      <input type="radio" name="AttachOptions" class="attach-employee" id="_AttachFormOnlyFalse" checked />
      <label for="_AttachFormOnlyFalse">{empLabel}</label>
    </div>
    <div class="edit-row inline-radio">
      <input type="radio" name="AttachOptions" class="attach-position" id="_AttachPosition" />
      <label for="_AttachPosition">{posLabel}</label>
    </div>
    <div class="edit-row inline-radio">
      <input type="radio" name="AttachOptions" class="attach-form" id="_AttachFormOnlyTrue" />
      <label for="_AttachFormOnlyTrue">{formOnlyLable}</label>
    </div>
    <div class="edit-row document-category hidable">
      <label>{catLabel}</label>
      <div class="select working">
        <select class="DocumentCategory" name="DocumentCategory">
          <option value=""></option>
        </select>
      </div>
    </div>
    <div class="edit-row document-type hidable">
      <label>{typeLabel}</label>
      <div class="select working">
        <select class="DocumentType" name="DocumentType">
          <option value=""></option>
        </select>
      </div>
    </div>
    <div class="edit-row document-security-level hidable">
      <label>{secLabel}</label>
      <div class="select">
         <select class="SecurityLevel" name="SecurityLevel">
           <option value="0">{secEmpLabel}</option>
           <option value="10">{secManLabel}</option>
           <option value="20">{secPayrollLabel}</option>
         </select>
       </div>
    </div>
    `;

    this.HtmlEditExampleTemplate = `
    <div data-template-name="FileUploadMulti" class="template template-FileUploadMulti form-row upload-multi">
      <label>{label}</label>
      <label class="ui-has-file">
        <input type="file" data-allow-multiple="true" />
        <div class="button blue upload">
          <span class="icon-file-black"></span>{choose}
        </div>
      </label>
    </div>
    `;

    /**/

    this.HtmlRowTemplate = `
    <div class="form-row">
      <label>{label}</label>
      <label class="ui-has-file" data-files="{fileids}">
        <input type="file" data-allow-multiple="true" />
        <div class="button blue upload">
          <span class="icon-file-black"></span>{choose}
        </div>
      </label>
    </div>
    `;

    this.HtmlRowWithDescTemplate = `
    <div class="form-row">
      <label>{label}</label>
      <p class="inline">{desc}</p>
      <label></label>
      <label class="ui-has-file" data-files="{fileids}">
        <input type="file" data-allow-multiple="true" />
        <div class="button blue upload">
          <span class="icon-file-black"></span>{choose}
        </div>
      </label>
    </div>
    `;

    /**/

    this.HtmlRowReadOnlyTemplate = `
    <div class="form-row">
      <label>{label}</label>
      <input type="text" disabled value="{fileids}" />
    </div>
    `;

    this.HtmlRowReadOnlyWithDescTemplate = `
    <div class="form-row">
      <label>{label}</label>
      <p class="inline">{desc}</p>
      <label></label>
      <input type="text" disabled value="{fileids}" />
    </div>
    `;

    /**/

    this.HtmlRowReadOnlyNamesTemplate = `
    <div class="form-row">
      <label>{label}</label>
      <div class="row-content">{links}</div>
    </div>
    `;

    this.HtmlRowReadOnlyNamesWithDescTemplate = `
    <div class="form-row">
      <label>{label}</label>
      <p class="inline">{desc}</p>
      <label></label>
      <div class="row-content">{links}</div>
    </div>
    `;

  }

};;
/**
 *
 * Summary.       Element Float Class.
 *
 * Description.   Element Float functions and features.
 *
 * @author        Ben King, benk at affinityteam.com, ben.king at source63.com, +64 21 2672729.
 *
 *
 * @since         16.06.2020
 * @class         Float
 * @namespace     Affinity2018.Classes.Apps.CleverForms.Elements
 * @memberof      CleverForms.Elements
 * @constructs    Affinity2018.Classes.Apps.CleverForms.Elements.Float
 *
 * @public
 */

if (!('Affinity2018' in window)) Affinity2018 = {};
if (!('Classes' in Affinity2018)) Affinity2018.Classes = {};
if (!('Apps' in Affinity2018.Classes)) Affinity2018.Classes.Apps = {};
if (!('CleverForms' in Affinity2018.Classes.Apps)) Affinity2018.Classes.Apps.CleverForms = {};
if (!('Elements' in Affinity2018.Classes.Apps.CleverForms)) Affinity2018.Classes.Apps.CleverForms.Elements = {};

if (!('Apps' in Affinity2018)) Affinity2018.Apps = {};
if (!('Elements' in Affinity2018.Apps)) Affinity2018.Apps.Elements = {};

Affinity2018.Classes.Apps.CleverForms.Elements.Float = class extends Affinity2018.Classes.Apps.CleverForms.Elements.ElementBase
{
  _options()
  {
    super._options();

  }

  constructor(config)
  {
    super(config, 'Float');
    [
      '_options', '_templates',
      
      'SetDesignEditor', 'UnsetDesignEditor', 'GetFromDesignEditor', 'RemoveDesignerElement',
      'RemoveDesignerElement',
      'SetFormRow', 'GetFromFormRow', 'SetFromValue'

    ].bindEach(this);

    this._options();
    this._templates();

    return this;
  }

  /**/

  SetDesignEditor()
  {
    this.HtmlEditExampleTemplate = this.HtmlEditExampleTemplate.format({
      label: $a.Lang.ReturnPath('app.cf.design_items.float_example_label'),
      value: $a.Lang.ReturnPath('app.cf.design_items.float_example_value')
    });

    this.HtmlEditTemplate = this.HtmlEditTemplate.format({
      label: $a.Lang.ReturnPath('app.cf.design_items.float_decimal_label')
    });

    if (super.SetDesignEditor())
    {
      // set special html / values

      this.TemplateNode.querySelector('select.DecimalNumber').value = 2;
      if (this.Config.Details.hasOwnProperty('DecimalNumber'))
      {
        this.TemplateNode.querySelector('select.DecimalNumber').value = this.Config.Details.DecimalNumber;
      }
      if (this.Config.Details.hasOwnProperty('AffinityField'))
      {
        this.TemplateNode.querySelector('select.DecimalNumber').value = this.Config.Details.AffinityField.FieldDecimal;
      }

      return true;
    }
    return false;
  }

  UnsetDesignEditor ()
  {
    if (super.UnsetDesignEditor())
    {
      // unset special html / values

      return true;
    }
    return false;
  }

  GetFromDesignEditor()
  {
    this.Config = super.GetFromDesignEditor();

    // update special values

    if (this.TemplateNode.querySelector('select.DecimalNumber'))
    {
      var decimals = !isNaN(parseInt(this.TemplateNode.querySelector('select.DecimalNumber').value)) ? parseInt(this.TemplateNode.querySelector('select.DecimalNumber').value) : 2;
      if (this.Config.Details.hasOwnProperty('AffinityField'))
      {
        this.Config.Details.AffinityField.FieldDecimal = decimals;
      }
      if (this.Config.Details.hasOwnProperty('DecimalNumber'))
      {
        this.Config.Details.DecimalNumber = decimals;
      }
    }

    this.CheckChanges(true);

    return this.Config;
  }

  RemoveDesignerElement (callback)
  {
    if (super.RemoveDesignerElement())
    {

      // do any removal stuff here
      
      var node = document.querySelector('.item-' + this.UniqueName);
      if (node && $a.isFunction(callback))
      {
        callback(node);
      }
    }
  }

  /**/

  SetFormRow (target)
  {
    var fieldDecimal = 2;
    var fieldPrecision = 2;
    if (this.Config.Details.hasOwnProperty('DecimalNumber'))
    {
      fieldDecimal = this.Config.Details.DecimalNumber;
    }
    if (this.Config.Details.hasOwnProperty('AffinityField'))
    {
      fieldDecimal = this.Config.Details.AffinityField.FieldDecimal ? this.Config.Details.AffinityField.FieldDecimal : fieldDecimal;
      //fieldPrecision = !isNaN(parseInt(this.Config.Details.AffinityField.FieldPrecision)) ? parseInt(this.Config.Details.AffinityField.FieldPrecision) : fieldPrecision;
      fieldPrecision = fieldDecimal;
    }
    var html = this.HtmlRowTemplate.format({
      label: this.Config.Details.Label,
      decimals: fieldDecimal,
      rounding: fieldPrecision > 0 ? 'round' : 'none',
      value: this.Config.Details.Value
    });
    
    this.FormRowNode = super.SetFormRow(target, html);
    if (this.FormRowNode)
    {

      // set any special elements

      return this.FormRowNode;
    }
  }

  GetFromFormRow()
  {
    if (super.GetFromFormRow())
    {

      // get any special elements

      if (this.FormRowNode && !isNaN(parseFloat(this.FormRowNode.querySelector('input.nv').value)))
      {
        this.FormData.Value = parseFloat(this.FormRowNode.querySelector('input.nv').value);
      }
      else
      {
        this.FormData.Value = null;
      }

      return this.FormData;
    }
    throw '{0} "{1}" ({2}) could not get base post data for form post'.format(this.Config.Type, this.Config.Details.Label, this.Config.UniqueName);
  }

  SetFromValue(value, fromKeyChange)
  {
    fromKeyChange = fromKeyChange === undefined ? false : fromKeyChange;
    super.SetFromValue(value, fromKeyChange);
  }

  /**/

  _templates ()
  {
    super._templates();

    this.HtmlEditTemplate = `
    <div class="edit-row">
      <label>{label}</label>
      <div class="select">
        <select class="DecimalNumber">
          <option value="1">1</option>
          <option selected value="2">2</option>
          <option value="3">3</option>
          <option value="4">4</option>
          <option value="5">5</option>
        </select>
      </div>
    </div>
    `;

    this.HtmlEditExampleTemplate = `
    <div class="default-form">
      <div class="form-row">
        <label>{label}</label>
        <input type="text" class="ui-has-float" value="{value}" />
      </div>
    </div>
    `;

    this.HtmlRowTemplate = `
    <div class="form-row">
      <label>{label}</label>
      <input type="text" class="ui-has-float" data-decimals="{decimals}" data-rounding="{rounding}" value="{value}" />
    </div>
    `;

  }

};;
/**
 *
 * Summary.       Element Integer Class.
 *
 * Description.   Element Integer functions and features.
 *
 * @author        Ben King, benk at affinityteam.com, ben.king at source63.com, +64 21 2672729.
 *
 *
 * @since         16.06.2020
 * @class         Integer
 * @namespace     Affinity2018.Classes.Apps.CleverForms.Elements
 * @memberof      CleverForms.Elements
 * @constructs    Affinity2018.Classes.Apps.CleverForms.Elements.Integer
 *
 * @public
 */

if (!('Affinity2018' in window)) Affinity2018 = {};
if (!('Classes' in Affinity2018)) Affinity2018.Classes = {};
if (!('Apps' in Affinity2018.Classes)) Affinity2018.Classes.Apps = {};
if (!('CleverForms' in Affinity2018.Classes.Apps)) Affinity2018.Classes.Apps.CleverForms = {};
if (!('Elements' in Affinity2018.Classes.Apps.CleverForms)) Affinity2018.Classes.Apps.CleverForms.Elements = {};

if (!('Apps' in Affinity2018)) Affinity2018.Apps = {};
if (!('Elements' in Affinity2018.Apps)) Affinity2018.Apps.Elements = {};

Affinity2018.Classes.Apps.CleverForms.Elements.Integer = class extends Affinity2018.Classes.Apps.CleverForms.Elements.ElementBase
{
  _options()
  {
    super._options();

  }

  constructor(config)
  {
    super(config, 'Integer');
    [
      '_options', '_templates',
      
      'SetDesignEditor', 'UnsetDesignEditor', 'GetFromDesignEditor', 'RemoveDesignerElement',
      'RemoveDesignerElement',
      'SetFormRow', 'GetFromFormRow', 'SetFromValue'

    ].bindEach(this);

    this._options();
    this._templates();

    return this;
  }

  /**/

  SetDesignEditor()
  {
    this.HtmlEditExampleTemplate = this.HtmlEditExampleTemplate.format({
      label: $a.Lang.ReturnPath('app.cf.design_items.integer_example_label'),
      value: $a.Lang.ReturnPath('app.cf.design_items.integer_example_value')
    });

    if (super.SetDesignEditor())
    {
      // set special html / values

      return true;
    }
    return false;
  }

  UnsetDesignEditor ()
  {
    if (super.UnsetDesignEditor())
    {
      // unset special html / values

      return true;
    }
    return false;
  }

  GetFromDesignEditor()
  {
    this.Config = super.GetFromDesignEditor();

    // update special values

    return this.Config;
  }

  RemoveDesignerElement (callback)
  {
    if (super.RemoveDesignerElement())
    {

      // do any removal stuff here
      
      var node = document.querySelector('.item-' + this.UniqueName);
      if (node && $a.isFunction(callback))
      {
        callback(node);
      }
    }
  }

  /**/

  SetFormRow (target)
  {
    var html = this.HtmlRowTemplate.format(this.Config.Details.Label, this.Config.Details.Value);
    this.FormRowNode = super.SetFormRow(target, html);
    if (this.FormRowNode)
    {

      // set any special elements

      return this.FormRowNode;
    }
  }

  GetFromFormRow()
  {
    if (super.GetFromFormRow())
    {

      // get any special elements

      if (this.FormRowNode && !isNaN(parseInt(this.FormRowNode.querySelector('input.nv').value)))
      {
        this.FormData.Value = parseInt(this.FormRowNode.querySelector('input.nv').value);
      }
      else
      {
        this.FormData.Value = null;
      }

      return this.FormData;
    }
    throw '{0} "{1}" ({2}) could not get base post data for form post'.format(this.Config.Type, this.Config.Details.Label, this.Config.UniqueName);
  }

  SetFromValue(value, fromKeyChange)
  {
    fromKeyChange = fromKeyChange === undefined ? false : fromKeyChange;
    super.SetFromValue(value, fromKeyChange);
  }

  /**/

  _templates ()
  {
    super._templates();

    this.HtmlEditTemplate = `
      
    `;

    this.HtmlEditExampleTemplate = `
    <div class="default-form">
      <div class="form-row">
        <label>{label}</label>
        <input type="number" class="ui-has-integer" value="{value}" />
      </div>
    </div>
    `;

    this.HtmlRowTemplate = `
    <div class="form-row">
      <label>{0}</label>
      <input type="number" class="ui-has-integer" value="{1}" />
    </div>
    `;

  }

};;
/**
 *
 * Summary.       Element Link Class.
 *
 * Description.   Element Link functions and features.
 *
 * @author        Ben King, benk at affinityteam.com, ben.king at source63.com, +64 21 2672729.
 *
 *
 * @since         16.06.2020
 * @class         Link
 * @namespace     Affinity2018.Classes.Apps.CleverForms.Elements
 * @memberof      CleverForms.Elements
 * @constructs    Affinity2018.Classes.Apps.CleverForms.Elements.Link
 *
 * @public
 */

if (!('Affinity2018' in window)) Affinity2018 = {};
if (!('Classes' in Affinity2018)) Affinity2018.Classes = {};
if (!('Apps' in Affinity2018.Classes)) Affinity2018.Classes.Apps = {};
if (!('CleverForms' in Affinity2018.Classes.Apps)) Affinity2018.Classes.Apps.CleverForms = {};
if (!('Elements' in Affinity2018.Classes.Apps.CleverForms)) Affinity2018.Classes.Apps.CleverForms.Elements = {};

if (!('Apps' in Affinity2018)) Affinity2018.Apps = {};
if (!('Elements' in Affinity2018.Apps)) Affinity2018.Apps.Elements = {};

Affinity2018.Classes.Apps.CleverForms.Elements.Link = class extends Affinity2018.Classes.Apps.CleverForms.Elements.ElementBase
{
  _options()
  {
    super._options();

  }

  constructor(config)
  {
    super(config, 'Link');
    [
      '_options', '_templates',
      
      'SetDesignEditor', 'UnsetDesignEditor', 'GetFromDesignEditor', 'RemoveDesignerElement',
      'RemoveDesignerElement',
      'SetFormRow', 'GetFromFormRow', 'SetFromValue'

    ].bindEach(this);

    this._options();
    this._templates();

    return this;
  }

  /**/

  SetDesignEditor()
  {
    this.HtmlEditTemplate = this.HtmlEditTemplate.format({
      label: $a.Lang.ReturnPath('app.cf.design_items.link_label')
    });

    this.HtmlEditExampleTemplate = this.HtmlEditExampleTemplate.format({
      link: $a.Lang.ReturnPath('app.cf.design_items.link_example')
    });

    if (super.SetDesignEditor())
    {
      // set special html / values

      if ($a.isPropString(this.Config.Details, 'UrlLink'))
      {
        this.TemplateNode.querySelector('input').value = this.Config.Details.UrlLink.trim() || '';
      }

      return true;
    }
    return false;
  }

  UnsetDesignEditor ()
  {
    if (super.UnsetDesignEditor())
    {
      // unset special html / values

      return true;
    }
    return false;
  }

  GetFromDesignEditor()
  {
    this.Config = super.GetFromDesignEditor();

    // update special values

    this.Config.Details.UrlLink = this.TemplateNode.querySelector('input').value.trim();

    this.CheckChanges(true);

    return this.Config;
  }

  RemoveDesignerElement (callback)
  {
    if (super.RemoveDesignerElement())
    {

      // do any removal stuff here
      
      var node = document.querySelector('.item-' + this.UniqueName);
      if (node && $a.isFunction(callback))
      {
        callback(node);
      }
    }
  }

  /**/

  SetFormRow (target)
  {
    var html = this.HtmlRowTemplate.format(this.Config.Details.Label, this.Config.Details.UrlLink);
    this.FormRowNode = super.SetFormRow(target, html);
    if (this.FormRowNode)
    {

      // set any special elements

      return this.FormRowNode;
    }
  }

  GetFromFormRow()
  {
    if (super.GetFromFormRow())
    {

      // get any special elements

      return this.FormData;
    }
    throw '{0} "{1}" ({2}) could not get base post data for form post'.format(this.Config.Type, this.Config.Details.Label, this.Config.UniqueName);
  }

  SetFromValue(value, fromKeyChange)
  {
    fromKeyChange = fromKeyChange === undefined ? false : fromKeyChange;
    super.SetFromValue(value, fromKeyChange);
  }

  /**/

  _templates ()
  {
    super._templates();

    this.HtmlEditTemplate = `
    <div class="edit-row">
      <label>{label}</label>
      <input type="text" class="ui-has-url" />
    </div>
    `;

    this.HtmlEditExampleTemplate = `
    <div class="default-form">
      <div class="form-row">
        <a href="#" target="_blank" class="link">{link}</a>
        <div class="print-only link"></div>
      </div>
    </div>
    `;

    this.HtmlRowTemplate = `
    <div class="form-row">
      <a href="{1}" target="_blank" class="link">{0}</a>
      <div class="print-only link">{0} : {1}</div>
    </div>
    `;

  }

};;
/**
 *
 * Summary.       Element Memo Class.
 *
 * Description.   Element Memo functions and features.
 *
 * @author        Ben King, benk at affinityteam.com, ben.king at source63.com, +64 21 2672729.
 *
 *
 * @since         16.06.2020
 * @class         Memo
 * @namespace     Affinity2018.Classes.Apps.CleverForms.Elements
 * @memberof      CleverForms.Elements
 * @constructs    Affinity2018.Classes.Apps.CleverForms.Elements.Memo
 *
 * @public
 */

if (!('Affinity2018' in window)) Affinity2018 = {};
if (!('Classes' in Affinity2018)) Affinity2018.Classes = {};
if (!('Apps' in Affinity2018.Classes)) Affinity2018.Classes.Apps = {};
if (!('CleverForms' in Affinity2018.Classes.Apps)) Affinity2018.Classes.Apps.CleverForms = {};
if (!('Elements' in Affinity2018.Classes.Apps.CleverForms)) Affinity2018.Classes.Apps.CleverForms.Elements = {};

if (!('Apps' in Affinity2018)) Affinity2018.Apps = {};
if (!('Elements' in Affinity2018.Apps)) Affinity2018.Apps.Elements = {};

Affinity2018.Classes.Apps.CleverForms.Elements.Memo = class extends Affinity2018.Classes.Apps.CleverForms.Elements.ElementBase
{
  _options()
  {
    super._options();

  }

  constructor(config)
  {
    super(config, 'Memo');
    [
      '_options', '_templates',
      
      'SetDesignEditor', 'UnsetDesignEditor', 'GetFromDesignEditor', 'RemoveDesignerElement',
      'RemoveDesignerElement',
      'SetFormRow', 'GetFromFormRow', 'SetFromValue'

    ].bindEach(this);

    this._options();
    this._templates();

    return this;
  }

  /**/

  SetDesignEditor()
  {
    this.HtmlEditExampleTemplate = this.HtmlEditExampleTemplate.format({
      label: $a.Lang.ReturnPath('app.cf.design_items.memo_example_lebel'),
      example: $a.Lang.ReturnPath('app.cf.design_items.memo_example')
    });

    if (super.SetDesignEditor())
    {
      // set special html / values

      return true;
    }
    return false;
  }

  UnsetDesignEditor ()
  {
    if (super.UnsetDesignEditor())
    {
      // unset special html / values

      return true;
    }
    return false;
  }

  GetFromDesignEditor()
  {
    this.Config = super.GetFromDesignEditor();

    // update special values

    return this.Config;
  }

  RemoveDesignerElement (callback)
  {
    if (super.RemoveDesignerElement())
    {

      // do any removal stuff here
      
      var node = document.querySelector('.item-' + this.UniqueName);
      if (node && $a.isFunction(callback))
      {
        callback(node);
      }
    }
  }

  /**/

  SetFormRow (target)
  {
    var html = this.HtmlRowTemplate.format({
      label: this.Config.Details.Label,
      value: this.Config.Details.Value,
      disabled: this.CleverForms.ViewType === 'ViewOnly' ? 'disabled' : ''
    });
    this.FormRowNode = super.SetFormRow(target, html);
    if (this.FormRowNode)
    {

      // set any special elements

      return this.FormRowNode;
    }
  }

  GetFromFormRow()
  {
    if (super.GetFromFormRow())
    {

      // get any special elements

      this.FormData.Value = this.FormRowNode.querySelector('textarea').value.trim();

      return this.FormData;
    }
    throw '{0} "{1}" ({2}) could not get base post data for form post'.format(this.Config.Type, this.Config.Details.Label, this.Config.UniqueName);
  }

  SetFromValue(value, fromKeyChange)
  {
    fromKeyChange = fromKeyChange === undefined ? false : fromKeyChange;

  }

  /**/

  _templates ()
  {
    super._templates();

    this.HtmlEditTemplate = `
      
    `;

    this.HtmlEditExampleTemplate = `
    <div class="default-form">
      <div class="form-row">
        <label>{label}</label>
        <br />
        <textarea rows="3" class="memo">{example}</textarea>
      </div>
    </div>
    `;

    this.HtmlRowTemplate = `
    <div class="form-row">
      <label>{label}</label>
      <br />
      <textarea rows="3" class="memo" {disabled}>{value}</textarea>
    </div>
    `;

  }

};;
/**
 *
 * Summary.       Element MultiSelect Class.
 *
 * Description.   Element MultiSelect functions and features.
 *
 * @author        Ben King, benk at affinityteam.com, ben.king at source63.com, +64 21 2672729.
 *
 *
 * @since         16.06.2020
 * @class         MultiSelect
 * @namespace     Affinity2018.Classes.Apps.CleverForms.Elements
 * @memberof      CleverForms.Elements
 * @constructs    Affinity2018.Classes.Apps.CleverForms.Elements.MultiSelect
 *
 * @public
 */

if (!('Affinity2018' in window)) Affinity2018 = {};
if (!('Classes' in Affinity2018)) Affinity2018.Classes = {};
if (!('Apps' in Affinity2018.Classes)) Affinity2018.Classes.Apps = {};
if (!('CleverForms' in Affinity2018.Classes.Apps)) Affinity2018.Classes.Apps.CleverForms = {};
if (!('Elements' in Affinity2018.Classes.Apps.CleverForms)) Affinity2018.Classes.Apps.CleverForms.Elements = {};

if (!('Apps' in Affinity2018)) Affinity2018.Apps = {};
if (!('Elements' in Affinity2018.Apps)) Affinity2018.Apps.Elements = {};

Affinity2018.Classes.Apps.CleverForms.Elements.MultiSelect = class extends Affinity2018.Classes.Apps.CleverForms.Elements.ElementBase
{
  _options()
  {
    super._options();

  }

  constructor(config)
  {
    super(config, 'MultiSelect');
    [
      '_options', '_templates',
      
      'SetDesignEditor', 'UnsetDesignEditor', 'GetFromDesignEditor', 'RemoveDesignerElement',
      'RemoveDesignerElement',
      'SetFormRow', 'GetFromFormRow', 'SetFromValue', 'IsValid', 'InvalidReason', 'CheckValid'

    ].bindEach(this);

    this._options();
    this._templates();

    return this;
  }

  /**/

  SetDesignEditor()
  {
    this.HtmlEditExampleTemplate = this.HtmlEditExampleTemplate.format({
      label: $a.Lang.ReturnPath('app.cf.design_items.multiselect_example_label'),
      example1: $a.Lang.ReturnPath('app.cf.design_items.multiselect_example_1'),
      example2: $a.Lang.ReturnPath('app.cf.design_items.multiselect_example_2'),
      example3: $a.Lang.ReturnPath('app.cf.design_items.multiselect_example_3'),
    });

    if (super.SetDesignEditor())
    {
      // set special html / values

      return true;
    }
    return false;
  }

  UnsetDesignEditor ()
  {
    if (super.UnsetDesignEditor())
    {
      // unset special html / values

      return true;
    }
    return false;
  }

  GetFromDesignEditor()
  {
    this.Config = super.GetFromDesignEditor();

    // update special values

    return this.Config;
  }

  RemoveDesignerElement (callback)
  {
    if (super.RemoveDesignerElement())
    {

      // do any removal stuff here
      
      var node = document.querySelector('.item-' + this.UniqueName);
      if (node && $a.isFunction(callback))
      {
        callback(node);
      }
    }
  }

  /**/

  SetFormRow (target)
  {
    var html = this.HtmlRowTemplate.format(this.Config.Details.Label);
    this.FormRowNode = super.SetFormRow(target, html);
    if (this.FormRowNode)
    {

      // set any special elements
      
      var dataList, checkRow, keys, valueData, id;

      if (this.CleverForms.ViewType === 'Preview')
      {
        if (
          $a.isPropObject(this.Config.Details, 'ItemSource')
          && $a.isPropArray(this.Config.Details.ItemSource, 'Items')
          && this.Config.Details.ItemSource.Items.length > 0
        )
        {
          dataList = this.Config.Details.ItemSource.Items;
        }

        else
        {
          dataList = [
            { Key: '', Value: 'Check Example One' },
            { Key: '', Value: 'Check Example Two' },
            { Key: '', Value: 'Check Example Three' }
          ];
        }

        keys = Object.keys(dataList[0]);
        dataList.forEach(function (listItem, index)
        {
          checkRow = document.createElement('div');
          checkRow.classList.add('radio-label-pair');
          checkRow.innerHTML = this.HtmlCheckboxRowTemplate.format({
            id: 'check-' + this.Config.Name + '-' + index,
            name: this.Config.Name,
            value: listItem[keys[1]],
            label: listItem[keys[0]],
              disabled: this.CleverForms.ViewType === 'ViewOnly' ? 'disabled' : ''
          });
          this.FormRowNode.appendChild(checkRow);
          if (this.Config.Details.Required) checkRow.querySelector('input').addEventListener('change', this.CheckValid);
        }.bind(this));

      }
      else
      {

        if (
          $a.isPropObject(this.Config.Details, 'ItemSource')
          && $a.isPropArray(this.Config.Details.ItemSource, 'Items')
          && this.Config.Details.ItemSource.Items.length > 0
        )
        {
          keys = Object.keys(this.Config.Details.ItemSource.Items[0]);
          dataList = this.Config.Details.ItemSource.Items;
          dataList.forEach(function (listItem, index)
          {
            checkRow = document.createElement('div');
            checkRow.classList.add('radio-label-pair');
            checkRow.innerHTML = this.HtmlCheckboxRowTemplate.format({
              id: 'check-' + this.Config.Name + '-' + index,
              name: this.Config.Name,
              value: listItem[keys[1]],
              label: listItem[keys[0]],
              disabled: this.CleverForms.ViewType === 'ViewOnly' ? 'disabled' : ''
            });
            this.FormRowNode.appendChild(checkRow);
            if (this.Config.Details.Required) checkRow.querySelector('input').addEventListener('change', this.CheckValid);
          }.bind(this));
          valueData = $a.stringToObject(this.Config.Details.Value);
          if ($a.isArray(valueData))
          {
            for (var index = 0; index < valueData.length; index++)
            {
              if (valueData[index].hasOwnProperty('Value') && $a.isBool(valueData[index].Value))
              {
                id = 'check-' + this.Config.Name + '-' + index;
                if (valueData[index].Value && this.FormRowNode.querySelector('input#' + id))
                {
                  this.FormRowNode.querySelector('input#' + id).checked = true;
                }
              }
            }
          }
        }
      }

      return this.FormRowNode;
    }
  }

  GetFromFormRow()
  {
    if (super.GetFromFormRow())
    {

      // get any special elements

      var items = [];
      this.FormRowNode.querySelectorAll('input[type="checkbox"]').forEach(function (checkboxNode)
      {
        items.push({
          //Identity: checkboxNode.value,
          Key: checkboxNode.value,
          Value: checkboxNode.checked
        });
      }.bind(this));

      this.FormData.Value = JSON.stringify(items);

      return this.FormData;
    }
    throw '{0} "{1}" ({2}) could not get base post data for form post'.format(this.Config.Type, this.Config.Details.Label, this.Config.UniqueName);
  }

  SetFromValue(value, fromKeyChange)
  {
    fromKeyChange = fromKeyChange === undefined ? false : fromKeyChange;
    if ($a.isString(value) && $a.isStringifiedObject(value)) value = $a.stringToObject(value);
    if ($a.isString(value) && value.isNullOrEmpty())
    {
      this.FormRowNode.querySelectorAll('input[type="checkbox"]:checked').forEach(function (node)
      {
        node.checked = false;
      });
    }
    if (
      $a.isArray(value)
      && value.length > 0
    )
    {
      this.FormRowNode.querySelectorAll('input[type="checkbox"]:checked').forEach(function (node)
      {
        node.checked = false;
      });

      keys = Object.keys(value[0]);
      dataList = this.Config.Details.ItemSource.Items;
      dataList.forEach(function (listItem, index)
      {
        if (this.FormRowNode.querySelector('input[type="checkbox"][value="' + listItem[keys[1]] + '"]'))
        {
          this.FormRowNode.querySelector('input[type="checkbox"][value="' + listItem[keys[1]] + '"]').checked = true;
        }
      }.bind(this));
    }
    this.CheckValid();
  }

  IsValid()
  {
    if (!this.Config.Details.Required) return true;
    var inputNode = this.FormRowNode.querySelector('input[type="checkbox"]:checked');
    return inputNode != null;
  }

  InvalidReason()
  {
    if (!this.IsValid())
    {
      return '\'' + this.CleverForms.ShortenString(this.Config.Details.Label, 50) + '\' must have at least one option ticked.';
    }
    return '';
  }

  CheckValid()
  {
    if (this.FormRowNode.querySelector('.ui-form-error') && this.IsValid())
    {
      this.FormRowNode.querySelector('.ui-form-error').classList.remove('show');
      this.FormRowNode.classList.remove('error', 'flash-error');
    }
  }

  /**/

  _templates ()
  {
    super._templates();

    this.HtmlEditTemplate = this.ItemSourcesTemplate;

    this.HtmlEditExampleTemplate = `
    <div class="default-form">
      <div class="form-row">
        <label class="solo">{label}</label>
        <div class="check-label-pair">
          <input type="checkbox" id="afgadadfscheck1" name="afgadadfscheck1" />
          <label for="afgadadfscheck1" class="right">{example1}</label>
        </div>
        <div class="check-label-pair">
          <input type="checkbox" id="afgadadfscheck2" name="afgadadfscheck2" />
          <label for="afgadadfscheck2" class="right">{example2}</label>
        </div>
        <div class="check-label-pair">
          <input type="checkbox" id="afgadadfscheck3" name="afgadadfscheck3" />
          <label for="afgadadfscheck3" class="right">{example3}</label>
        </div>
      </div>
    </div>
    `;

    this.HtmlRowTemplate = `
    <div class="form-row">
      <label class="solo">{0}</label>
    </div>
    `;

    this.HtmlCheckboxRowTemplate = `
    <input type="checkbox" id="{id}" value="{value}" {disabled}/><label for="{id}" class="right">{label}</label>
    `;

  }

};;
/**
 *
 * Summary.       Element Paragraph Class.
 *
 * Description.   Element Paragraph functions and features.
 *
 * @author        Ben King, benk at affinityteam.com, ben.king at source63.com, +64 21 2672729.
 *
 *
 * @since         16.06.2020
 * @class         Paragraph
 * @namespace     Affinity2018.Classes.Apps.CleverForms.Elements
 * @memberof      CleverForms.Elements
 * @constructs    Affinity2018.Classes.Apps.CleverForms.Elements.Paragraph
 *
 * @public
 */

if (!('Affinity2018' in window)) Affinity2018 = {};
if (!('Classes' in Affinity2018)) Affinity2018.Classes = {};
if (!('Apps' in Affinity2018.Classes)) Affinity2018.Classes.Apps = {};
if (!('CleverForms' in Affinity2018.Classes.Apps)) Affinity2018.Classes.Apps.CleverForms = {};
if (!('Elements' in Affinity2018.Classes.Apps.CleverForms)) Affinity2018.Classes.Apps.CleverForms.Elements = {};

if (!('Apps' in Affinity2018)) Affinity2018.Apps = {};
if (!('Elements' in Affinity2018.Apps)) Affinity2018.Apps.Elements = {};

Affinity2018.Classes.Apps.CleverForms.Elements.Paragraph = class extends Affinity2018.Classes.Apps.CleverForms.Elements.ElementBase
{
  _options()
  {
    super._options();

  }

  constructor(config)
  {
    super(config, 'Paragraph');
    [
      '_options', '_templates',
      
      'SetDesignEditor', 'UnsetDesignEditor', 'GetFromDesignEditor', 'RemoveDesignerElement',
      'RemoveDesignerElement',
      'SetFormRow', 'GetFromFormRow', 'SetFromValue'

    ].bindEach(this);

    this._options();
    this._templates();

    return this;
  }

  /**/

  SetDesignEditor()
  {
    this.HtmlEditExampleTemplate = this.HtmlEditExampleTemplate.format({
      example: $a.Lang.ReturnPath('app.cf.design_items.paragraph_example')
    });

    this.HtmlEditTemplate = this.HtmlEditTemplate.format({
      label: $a.Lang.ReturnPath('app.cf.design_items.paragraph_label')
    });

    if (super.SetDesignEditor())
    {
      // set special html / values
      
      var text = this.Config.Details.Text || '';
      this.TemplateNode.querySelector('textarea').value = text.trim();

      return true;
    }
    return false;
  }

  UnsetDesignEditor ()
  {
    if (super.UnsetDesignEditor())
    {
      // unset special html / values

      return true;
    }
    return false;
  }

  GetFromDesignEditor()
  {
    this.Config = super.GetFromDesignEditor();

    // update special values
    
    this.Config.Details.Text = this.TemplateNode.querySelector('textarea').value.trim();

    this.CheckChanges(true);

    return this.Config;
  }

  RemoveDesignerElement (callback)
  {
    if (super.RemoveDesignerElement())
    {

      // do any removal stuff here
      
      var node = document.querySelector('.item-' + this.UniqueName);
      if (node && $a.isFunction(callback))
      {
        callback(node);
      }
    }
  }

  /**/

  SetFormRow (target)
  {
    var html = this.HtmlRowTemplate.format(this.Config.Details.Text);
    this.FormRowNode = super.SetFormRow(target, html);
    if (this.FormRowNode)
    {

      // set any special elements

      return this.FormRowNode;
    }
  }

  GetFromFormRow()
  {
    if (super.GetFromFormRow())
    {

      // get any special elements

      return this.FormData;
    }
    throw '{0} "{1}" ({2}) could not get base post data for form post'.format(this.Config.Type, this.Config.Details.Label, this.Config.UniqueName);
  }

  SetFromValue(value, fromKeyChange)
  {
    fromKeyChange = fromKeyChange === undefined ? false : fromKeyChange;

  }

  /**/

  _templates ()
  {
    super._templates();

    this.HtmlEditTemplate = `
    <div class="edit-row">
      <label>{label}</div>
      <textarea></textarea>
    </div>
    `;

    this.HtmlEditExampleTemplate = `
    <div class="default-form">
      <div class="form-row">
        <p>{example}</p>
      </div>
    </div>
    `;

    this.HtmlRowTemplate = `
    <div class="form-row">
      <p>{0}</p>
    </div>
    `;

  }

};;
/**
 *
 * Summary.       Element Section Class.
 *
 * Description.   Element Section functions and features.
 *
 * @author        Ben King, benk at affinityteam.com, ben.king at source63.com, +64 21 2672729.
 *
 *
 * @since         16.06.2020
 * @class         Section
 * @namespace     Affinity2018.Classes.Apps.CleverForms.Elements
 * @memberof      CleverForms.Elements
 * @constructs    Affinity2018.Classes.Apps.CleverForms.Elements.Section
 *
 * @public
 */

if (!('Affinity2018' in window)) Affinity2018 = {};
if (!('Classes' in Affinity2018)) Affinity2018.Classes = {};
if (!('Apps' in Affinity2018.Classes)) Affinity2018.Classes.Apps = {};
if (!('CleverForms' in Affinity2018.Classes.Apps)) Affinity2018.Classes.Apps.CleverForms = {};
if (!('Elements' in Affinity2018.Classes.Apps.CleverForms)) Affinity2018.Classes.Apps.CleverForms.Elements = {};

if (!('Apps' in Affinity2018)) Affinity2018.Apps = {};
if (!('Elements' in Affinity2018.Apps)) Affinity2018.Apps.Elements = {};

Affinity2018.Classes.Apps.CleverForms.Elements.Section = class extends Affinity2018.Classes.Apps.CleverForms.Elements.ElementBase
{
  _options()
  {
    super._options();

  }

  constructor(config)
  {
    super(config);
    [
      '_options', '_templates',
      
      'SetDesignEditor', 'UnsetDesignEditor', 'GetFromDesignEditor', 'RemoveDesignerElement',
      'RemoveDesignerElement',
      'SetFormRow', 'GetFromFormRow', 'SetFromValue',

      '_toggleSectionCollapse'

    ].bindEach(this);

    this._options();
    this._templates();

    return this;
  }

  /**/

  SetDesignEditor()
  {
    if (super.SetDesignEditor())
    {

      // set special html / values
      
      this.PopupNode.classList.add('medium');

      this.WorflowStatesListNode = this.PopupNode.querySelector('.worflow-states-list');
      this.HideTitleCheckNode = this.PopupNode.querySelector('#_HideSectionTitle');
      this.StartCollapsedCheckNode = this.PopupNode.querySelector('#_StartSectionCollapsed');

      this.HelptextNode.classList.add('hidden');

      // test workflow data
      // this.Config.Details.SectionWorkflowVisibilitySettings = [{"WorkflowDefinitionId":1,"WorkflowDefinitionName":"Workflow One","WorkflowStateSettings":[{"WorkflwoStateId":1,"WorkflowStateName":"Test State One - One","IsHidden":false},{"WorkflwoStateId":2,"WorkflowStateName":"Test State One - Two","IsHidden":true}]},{"WorkflowDefinitionId":2,"WorkflowDefinitionName":"Workflow Two","WorkflowStateSettings":[{"WorkflwoStateId":1,"WorkflowStateName":"Test State Two - One","IsHidden":true},{"WorkflwoStateId":2,"WorkflowStateName":"Test State Two - Two","IsHidden":true},{"WorkflwoStateId":2,"WorkflowStateName":"Test State Two - Three","IsHidden":true}]},{"WorkflowDefinitionId":3,"WorkflowDefinitionName":"Workflow Three","WorkflowStateSettings":[{"WorkflwoStateId":1,"WorkflowStateName":"Test State Three - One","IsHidden":true},{"WorkflwoStateId":2,"WorkflowStateName":"Test State Three - Two","IsHidden":false}]}];
      
      this.WorflowStatesListNode.classList.add('hidden');
      var gotWorkflowItems = false;
      if (
        this.Config.Details.hasOwnProperty('SectionWorkflowVisibilitySettings')
        && $a.isArray(this.Config.Details.SectionWorkflowVisibilitySettings)
      )
      {
        var w, s, workflowConfig, stateConfig, stateNode, stateName, stateChecked;
        for (w = 0; w < this.Config.Details.SectionWorkflowVisibilitySettings.length; w++)
        {
          workflowConfig = this.Config.Details.SectionWorkflowVisibilitySettings[w];
          if (workflowConfig.WorkflowDefinitionName !== null && workflowConfig.WorkflowDefinitionId !== 0)
          {
            stateNode = document.createElement('div');
            stateNode.classList.add('workflow-header');
            stateNode.innerHTML = workflowConfig.WorkflowDefinitionName;
            this.WorflowStatesListNode.appendChild(stateNode);
            for (s = 0; s < workflowConfig.WorkflowStateSettings.length; s++)
            {
              stateConfig = workflowConfig.WorkflowStateSettings[s];
              if (stateConfig.WorkflowStateName !== null)
              {
                stateNode = document.createElement('div');
                stateName = stateConfig.WorkflowStateName.toTitleCase();
                stateChecked = stateConfig.IsHidden ? '' : ' checked';
                stateNode.classList.add('worflow-state', 'worflow-' + workflowConfig.WorkflowDefinitionId + '-state-' + stateConfig.WorkflwoStateId);
                stateNode.dataset.stateId = stateConfig.WorkflwoStateId;
                stateNode.dataset.stateName = stateConfig.WorkflowStateName;
                stateNode.innerHTML = this.HtmlWorkflowStateTemplate.format({
                  stateChecked: stateChecked,
                  stateLabel: $a.Lang.ReturnPath('app.cf.design_items.section_workflow_state_label', { stateName: stateName})
                });
                this.WorflowStatesListNode.appendChild(stateNode);
                gotWorkflowItems = true;
              }
            }
          }
        }
      }
      if (gotWorkflowItems)
      {
        this.WorflowStatesListNode.classList.remove('hidden');
      }

      /**/

      if (this.Config.Details.ShowTitle === false) this.HideTitleCheckNode.checked = true;
      else
      {
        this.HideTitleCheckNode.checked = false;
        this.HideTitleCheckNode.removeAttribute('checked');
      }

      if (this.Config.Details.StartCollapsed) this.StartCollapsedCheckNode.checked = true;
      else
      {
        this.StartCollapsedCheckNode.checked = false;
        this.StartCollapsedCheckNode.removeAttribute('checked');
      }

      /**/

      return true;
    }
    return false;
  }

  UnsetDesignEditor ()
  {
    if (super.UnsetDesignEditor())
    {
      // unset special html / values

      return true;
    }
    return false;
  }

  GetFromDesignEditor ()
  {
    if (super.GetFromDesignEditor())
    {

      // update special values

      if (this.Config.Details.hasOwnProperty('SectionWorkflowVisibilitySettings'))
      {
        var w, s, workflowConfig, stateConfig, stateNode;
        for (w = 0; w < this.Config.Details.SectionWorkflowVisibilitySettings.length; w++)
        {
          workflowConfig = this.Config.Details.SectionWorkflowVisibilitySettings[w];
          for (s = 0; s < workflowConfig.WorkflowStateSettings.length; s++)
          {
            stateConfig = workflowConfig.WorkflowStateSettings[s];
            stateNode = this.WorflowStatesListNode.querySelector('.worflow-' + workflowConfig.WorkflowDefinitionId + '-state-' + stateConfig.WorkflwoStateId + ' input');
            this.Config.Details.SectionWorkflowVisibilitySettings[w].WorkflowStateSettings[s].IsHidden = !stateNode.checked;
          }
        }
      }

      this.Config.Details.ShowTitle = !this.HideTitleCheckNode.checked;
      this.Config.Details.StartCollapsed = this.StartCollapsedCheckNode.checked;

    }

    this.CheckChanges(true);

    return this.Config;
  }

  RemoveDesignerElement (callback)
  {
    if (super.RemoveDesignerElement())
    {

      // do any removal stuff here
      
      var node = document.querySelector('.item-' + this.UniqueName);
      if (node && $a.isFunction(callback))
      {
        callback(node);
      }

      return true;
    }
  }

  /**/

  SetFormRow (target)
  {
    var html = this.HtmlRowTemplate.format(this.Config.Details.Label);
    this.FormRowNode = super.SetFormRow(target, html);
    if (this.FormRowNode)
    {

      // set any special elements

      if (!this.Config.Details.ShowTitle) this.FormRowNode.classList.add('hide-title');
      else this.FormRowNode.classList.remove('hide-title');

      if (this.Config.Details.StartCollapsed) this.FormRowNode.classList.add('start-collapsed');
      else this.FormRowNode.classList.remove('start-collapsed');

      this.FormRowNode.querySelector('.collapser').addEventListener('click', this._toggleSectionCollapse);

      return this.FormRowNode;
    }
  }

  GetFromFormRow()
  {
    if (super.GetFromFormRow())
    {

      // get any special elements

      return this.FormData;
    }
    throw '{0} "{1}" ({2}) could not get base post data for form post'.format(this.Config.Type, this.Config.Details.Label, this.Config.UniqueName);
  }

  SetFromValue(value, fromKeyChange)
  {
    fromKeyChange = fromKeyChange === undefined ? false : fromKeyChange;

  }

  /**/

  _toggleSectionCollapse ()
  {
    var animate = false;
    if (this.FormRowNode.classList.contains('collapsed'))
    {
      this.FormRowNode.classList.remove('collapsed');
      this.FormRowNode.classList.add('animating');
      animate = true;
    }
    else if (!this.FormRowNode.classList.contains('collapsed'))
    {
      this.FormRowNode.classList.add('collapsed');
      this.FormRowNode.classList.add('animating');
      animate = true;
    }
    if (animate)
    {
      setTimeout(function ()
      {
        this.FormRowNode.classList.remove('animating');
      }.bind(this), 500);
    }
  }

  /**/

  _templates ()
  {
    super._templates();

    this.HtmlEditTemplate = `
    <div class="edit-row inline-check">
      <input type="checkbox" id="_HideSectionTitle" />
      <label for="_HideSectionTitle">{sectionHidetitleLable}</label>
    </div>
    <div class="edit-row inline-check">
      <input type="checkbox" id="_StartSectionCollapsed" />
      <label for="_StartSectionCollapsed">{sectionCollapseLable}</label>
    </div>
    <div class="edit-row worflow-states-list-wrapper">
      <div class="worflow-states-list">
      </div>
    </div>
    `;

    this.HtmlWorkflowStateTemplate = `
    <div class="workflow-state-check"><input type="checkbox"{stateChecked} /><label>{stateLabel}</label></div>
    `;

    this.HtmlEditExampleTemplate = `

    `;

    this.HtmlRowTemplate = `
    <div class="section shadow collapsable">
      <div class="section-header">
        <span class="section-title">{0}</span>
      </div>
      <div class="section-body">
        <div class="default-form"></div>
      </div>
      <div class="collapser icon-unfold-less"></div>
    </div>
    `;

  }

};;
/**
 *
 * Summary.       Element Separator Class.
 *
 * Description.   Element Separator functions and features.
 *
 * @author        Ben King, benk at affinityteam.com, ben.king at source63.com, +64 21 2672729.
 *
 *
 * @since         16.06.2020
 * @class         Separator
 * @namespace     Affinity2018.Classes.Apps.CleverForms.Elements
 * @memberof      CleverForms.Elements
 * @constructs    Affinity2018.Classes.Apps.CleverForms.Elements.Separator
 *
 * @public
 */

if (!('Affinity2018' in window)) Affinity2018 = {};
if (!('Classes' in Affinity2018)) Affinity2018.Classes = {};
if (!('Apps' in Affinity2018.Classes)) Affinity2018.Classes.Apps = {};
if (!('CleverForms' in Affinity2018.Classes.Apps)) Affinity2018.Classes.Apps.CleverForms = {};
if (!('Elements' in Affinity2018.Classes.Apps.CleverForms)) Affinity2018.Classes.Apps.CleverForms.Elements = {};

if (!('Apps' in Affinity2018)) Affinity2018.Apps = {};
if (!('Elements' in Affinity2018.Apps)) Affinity2018.Apps.Elements = {};

Affinity2018.Classes.Apps.CleverForms.Elements.Separator = class extends Affinity2018.Classes.Apps.CleverForms.Elements.ElementBase
{
  _options()
  {
    super._options();

  }

  constructor(config)
  {
    super(config);
    [
      '_options', '_templates',
      
      'SetDesignEditor', 'UnsetDesignEditor', 'GetFromDesignEditor', 'RemoveDesignerElement',
      'RemoveDesignerElement',
      'SetFormRow', 'GetFromFormRow', 'SetFromValue'

    ].bindEach(this);

    this._options();
    this._templates();

    return this;
  }

  /**/

  SetDesignEditor()
  {
    if (super.SetDesignEditor ())
    {

      // set special html / values

      this.PopupNode.querySelector('.form-row.label-row').classList.add('hidden');

      return true;
    }
    return false;
  }

  UnsetDesignEditor ()
  {
    if (super.UnsetDesignEditor())
    {
      // unset special html / values

      return true;
    }
    return false;
  }

  GetFromDesignEditor ()
  {
    if (super.GetFromDesignEditor())
    {

      // update special values

    }

    return this.Config;
  }

  SetFromValue(value, fromKeyChange)
  {
    fromKeyChange = fromKeyChange === undefined ? false : fromKeyChange;

  }

  RemoveDesignerElement (callback)
  {
    if (super.RemoveDesignerElement())
    {

      // do any removal stuff here
      
      var node = document.querySelector('.item-' + this.UniqueName);
      if (node && $a.isFunction(callback))
      {
        callback(node);
      }
    }
  }

  /**/

  SetFormRow (target)
  {
    var html = this.HtmlRowTemplate;
    this.FormRowNode = super.SetFormRow(target, html);
    if (this.FormRowNode)
    {

      // set any special elements

      return this.FormRowNode;
    }
  }

  GetFromFormRow()
  {
    if (super.GetFromFormRow())
    {

      // get any special elements

      return this.FormData;
    }
    throw '{0} "{1}" ({2}) could not get base post data for form post'.format(this.Config.Type, this.Config.Details.Label, this.Config.UniqueName);
  }

  /**/

  _templates ()
  {
    super._templates();

    this.HtmlEditTemplate = `
      
    `;

    this.HtmlRowTemplate = `
    <div class="form-row">
      <hr />
    </div>

    `;

  }

};;
/**
 *
 * Summary.       Element SingleSelectDropdown Class.
 *
 * Description.   Element SingleSelectDropdown functions and features.
 *
 * @author        Ben King, benk at affinityteam.com, ben.king at source63.com, +64 21 2672729.
 *
 *
 * @since         16.06.2020
 * @class         SingleSelectDropdown
 * @namespace     Affinity2018.Classes.Apps.CleverForms.Elements
 * @memberof      CleverForms.Elements
 * @constructs    Affinity2018.Classes.Apps.CleverForms.Elements.SingleSelectDropdown
 *
 * @public
 */

if (!('Affinity2018' in window)) Affinity2018 = {};
if (!('Classes' in Affinity2018)) Affinity2018.Classes = {};
if (!('Apps' in Affinity2018.Classes)) Affinity2018.Classes.Apps = {};
if (!('CleverForms' in Affinity2018.Classes.Apps)) Affinity2018.Classes.Apps.CleverForms = {};
if (!('Elements' in Affinity2018.Classes.Apps.CleverForms)) Affinity2018.Classes.Apps.CleverForms.Elements = {};

if (!('Apps' in Affinity2018)) Affinity2018.Apps = {};
if (!('Elements' in Affinity2018.Apps)) Affinity2018.Apps.Elements = {};

Affinity2018.Classes.Apps.CleverForms.Elements.SingleSelectDropdown = class extends Affinity2018.Classes.Apps.CleverForms.Elements.ElementBase
{
  _options()
  {
    super._options();

  }

  constructor(config)
  {
    super(config, 'SingleSelectDropdown');
    [
      '_options', '_templates',
      
      'SetDesignEditor', 'UnsetDesignEditor', 'GetFromDesignEditor', 'RemoveDesignerElement',
      'RemoveDesignerElement',
      'SetFormRow', 'GetFromFormRow', 'SetFromValue',
      'IsValid', 'InvalidReason', 'CheckValid',

      '_customListSelectWidgetReady',

      '_checkRequiredForBlankRow', '_listSourceChangedForBlankRow'

    ].bindEach(this);

    this._options();
    this._templates();

    return this;
  }

  /**/

  SetDesignEditor()
  {
    if (super.SetDesignEditor())
    {
      // set special html / values

      if (this.CleverForms.InsertLookupEmptyOption)
      {

        var editNode, listBuilder = false;

        if (this.EditNode && this.EditNode.querySelector('.list-builder') && this.EditNode.querySelector('.edit-template.form'))
        {
          editNode = this.EditNode.querySelector('.edit-template.form');
          listBuilder = editNode.widgets.ListBuilder;
        }

        if (listBuilder)
        {
          var requiredNode = this.EditNode.querySelector('#-required');
          if (!requiredNode.classList.contains('listenting'))
          {
            requiredNode.classList.add('listenting');
            requiredNode.addEventListener('click', function (e)
            {
              var required = e.target.checked;
              if (required && listBuilder.HasLockedBlankRow()) listBuilder.RemoveLockedBlankRow();
              if (!required && !listBuilder.HasLockedBlankRow()) listBuilder.InsertLockedBlankRow();
            });
          }
        }

        if (!this.Config.Details.Required && listBuilder)
        {
          var inserter = function ()
          {
            listBuilder.InsertLockedBlankRow();
            window.removeEventListener('ListBuilderRendered', inserter);
            inserter = null;
          }.bind(this);
          window.addEventListener('ListBuilderRendered', inserter);
        }

        if (listBuilder)
        {
          if (this.EditNode.querySelector('select.list-source'))
          {
            this.EditNode.querySelector('select.list-source').removeEventListener('change', this._listSourceChangedForBlankRow);
            this.EditNode.querySelector('select.list-source').addEventListener('change', this._listSourceChangedForBlankRow);
          }
        }
      }

      return true;
    }
    return false;
  }

  UnsetDesignEditor ()
  {
    if (super.UnsetDesignEditor())
    {
      // unset special html / values

      return true;
    }
    return false;
  }

  GetFromDesignEditor()
  {
    this.Config = super.GetFromDesignEditor();

    // update special values

    return this.Config;
  }

  RemoveDesignerElement (callback)
  {
    if (super.RemoveDesignerElement())
    {

      // do any removal stuff here
      
      var node = document.querySelector('.item-' + this.UniqueName);
      if (node && $a.isFunction(callback))
      {
        callback(node);
      }
    }
  }

  /**/

  SetFormRow (target)
  {

    var html = null;
    if (this.IsReadOnly || this.Config.Details.IsReadOnly)
    {
      if (this.Config.Details.hasOwnProperty('ItemSource') && this.Config.Details.ItemSource.hasOwnProperty('ItemSourceType'))
      {
        if (
          $a.isPropArray(this.Config.Details.ItemSource, 'Items')
          && this.Config.Details.ItemSource.Items.length > 0
        )
        {
          var items = this.Config.Details.ItemSource.Items;
          for (var key in items)
          {
            var item = items[key];
            if (item !== null && item.Value === this.Config.Details.Value)
            {
              if (this.Config.Details.ItemSource.ItemSourceType === 'Custom') html = this.HtmlRowReadOnlyTemplate.format(this.Config.Details.Label, item.Key);
              else html = this.HtmlRowReadOnlyTemplate.format(this.Config.Details.Label, item.Key.replace(' - ', ', '));
              break;
            }
          }
        }
        if (html === null) html = this.HtmlRowReadOnlyTemplate.format(this.Config.Details.Label, this.Config.Details.Value);
      }
      else
      {
        html = this.HtmlRowReadOnlyTemplate.format(this.Config.Details.Label, this.Config.Details.Value);
      }
    }
    else
    {
      if (this.CleverForms.ViewType === 'ViewOnly')
      {
        html = this.HtmlRowReadOnlyTemplate.format(this.Config.Details.Label);
      }
      else
      {
        html = this.HtmlRowTemplate.format(
          this.Config.Details.Label,
          this.Config.Details.hasOwnProperty('Value') ? this.Config.Details : ''
        );
      }
    }

    this.FormRowNode = super.SetFormRow(target, html);

    if (this.FormRowNode && !this.IsReadOnly)
    {

      // set any special elements

      var select = this.FormRowNode.querySelector('select'),
          selectConfig, keys, dataList, selected, optionNode, i;

      if (this.CleverForms.ViewType === 'Preview')
      {
        select.classList.remove('ui-has-lookup', 'do-autocomplete');
        select.classList.add('ui-has-autocomplete');
        //if ($a.getPosition(this.FormRowNode).top > $a.getWindowSize().height / 2) select.classList.add('ui-autocomplete-force-top');

        if (
          $a.isPropObject(this.Config.Details, 'ItemSource')
          && $a.isPropArray(this.Config.Details.ItemSource, 'Items')
          && this.Config.Details.ItemSource.Items.length > 0
        )
        {
          dataList = this.Config.Details.ItemSource.Items;
        }
        else
        {
          dataList = [
            { Key: 'List Example One', Value: '1', Selected: false },
            { Key: 'List Example Two', Value: '2', Selected: true },
            { Key: 'List Example Three', Value: '3', Selected: false }
          ];
        }

        dataList = this.CleverForms.InsertEmptyListItem(dataList, this.Config.Details.Required, false);

        selected = false;
        keys = Object.keys(dataList[0]);
        dataList.forEach(function (listItem)
        {
          optionNode = document.createElement('option');
          optionNode.value = listItem[keys[1]];
          optionNode.innerHTML = listItem[keys[0]];
          if (!selected && $a.isBool(listItem.Selected) && listItem.Selected === true)
          {
            optionNode.selected = 'selected';
            selected = true;
          }
          select.appendChild(optionNode);
        });
        if (!selected)
        {
          select.value = dataList[0][keys[1]];
        }

      }
      else if (this.CleverForms.ViewType === 'ViewOnly')
      {
        selected = 'Not Set';
        if (
          $a.isPropObject(this.Config.Details, 'ItemSource')
          && $a.isPropArray(this.Config.Details.ItemSource, 'Items')
          && this.Config.Details.ItemSource.Items.length > 0
        )
        {
          dataList = this.Config.Details.ItemSource.Items;
          dataList = this.CleverForms.InsertEmptyListItem(dataList, this.Config.Details.Required, false);
          for (i = 0; i < dataList.length; i++)
          {
            if (dataList[i].Value === this.Config.Details.Value)
            {
              selected = dataList[i].Key;
              break;
            }
          }
        }
        else if (this.Config.Details.hasOwnProperty('Value'))
        {
          selected = this.Config.Details.Value
        }
        if (this.FormRowNode.querySelector('input')) this.FormRowNode.querySelector('input').value = selected;
      }
      else
      {
        if ($a.getPosition(this.FormRowNode).top > $a.getWindowSize().height / 2) select.classList.add('ui-autocomplete-force-top');

        if (
          this.CleverForms.IsGlobalKey(this.Config)
          || (!this.CleverForms.IsLookup(this.Config) && this.CleverForms.IskeyWithNoRequiredKeys(this.Config)))
        {


          if (!$a.isNullOrEmpty(Affinity2018.SwapInitatorEmployee))
          {
            //this.FormRowNode.classList.add('is-single-value');
            //this.FormRowNode.dataset.singleValue = Affinity2018.SwapInitatorEmployee;
            selectConfig = {
              DataKey: 'Value',
              DisplayKey: 'Key',
              IncludeDataInDisplay: true,
              AddEmpty: false,
              EmptyKey: this.CleverForms.InsertLookupEmptyValue,
              EmptyDisplay: this.CleverForms.InsertLookupEmptyDisplay,
              NoneKey: this.CleverForms.InsertLookupEmptyRequiredValue,
              NoneDisplay: this.CleverForms.InsertLookupEmptyRequiredDisplay,
              Required: this.Config.Details.Required,
              Value: Affinity2018.SwapInitatorEmployee,
              IsSingleValue: true
            };

          }
          else
          {
            select.classList.remove('ui-has-autocomplete');
            select.classList.add('prevent-autocomplete');

            if (this.Config.Details.AffinityField.GenericGroupId !== 0 && this.Config.Details.AffinityField.GenericGroupId !== '0')
            {
              select.dataset.api = '{api}?modelName={modelName}&genericGroupId={groupid}&employeeNo={employeeNo}&instanceId={instanceId}'.format({
                api: this.CleverForms.GetLookupApi,
                modelName: this.Config.Details.AffinityField.ModelName,
                groupid: this.Config.Details.AffinityField.GenericGroupId,
                employeeNo: this.CleverForms.GetFormEmployeeNo(),
                instanceId: this.CleverForms.GetInstanceGuid()
              });
            }
            else
            {
              select.dataset.api = '{api}?modelName={modelName}&employeeNo={employeeNo}&instanceId={instanceId}'.format({
                api: this.CleverForms.GetLookupApi,
                modelName: this.Config.Details.AffinityField.ModelName,
                employeeNo: this.CleverForms.GetFormEmployeeNo(),
                instanceId: this.CleverForms.GetInstanceGuid()
              });
            }

            selectConfig = {
              DataKey: 'Value',
              DisplayKey: 'Key',
              IncludeDataInDisplay: true,
              AddEmpty: this.CleverForms.InsertLookupEmptyOption,
              EmptyKey: this.CleverForms.InsertLookupEmptyValue,
              EmptyDisplay: this.CleverForms.InsertLookupEmptyDisplay,
              NoneKey: this.CleverForms.InsertLookupEmptyRequiredValue,
              NoneDisplay: this.CleverForms.InsertLookupEmptyRequiredDisplay,
              Required: this.Config.Details.Required,
              Value: null,
              IsSingleValue: false
            };

          }

          if (this.CleverForms.IsGlobalKey(this.Config))
          {
            selectConfig.Required = true;
          }
          
          if (this.Config.Details.hasOwnProperty('Value') && $a.isString(this.Config.Details.Value) && this.Config.Details.Value.trim() !== '')
          {
            selectConfig.Value = this.Config.Details.Value;
            select.dataset.defaultValue = this.Config.Details.Value;
          }
          //else
          //{
          //  selectConfig.AddEmpty = true;
          //  //selectConfig.EmptyKey = '';
          //  //selectConfig.EmptyDisplay = 'Please Select ' + this.Config.Details.Label;
          //  selectConfig.EmptyKey = null;
          //  selectConfig.EmptyDisplay = 'None';
          //}

          select.dataset.config = JSON.stringify(selectConfig);

        }
        else if (this.CleverForms.IsLookup(this.Config))
        {

          select.classList.remove('ui-has-autocomplete');
          select.classList.add('prevent-autocomplete');

          if (this.Config.Details.AffinityField.GenericGroupId !== 0 && this.Config.Details.AffinityField.GenericGroupId !== '0')
          {
            select.dataset.api = '{api}?modelName={modelName}&propertyName={propertyName}&genericGroupId={groupid}&employeeNo={employeeNo}&instanceId={instanceId}'.format({
              api: this.CleverForms.GetLookupApi,
              modelName: this.Config.Details.AffinityField.ModelName,
              propertyName: this.Config.Details.AffinityField.FieldName,
              groupid: this.Config.Details.AffinityField.GenericGroupId,
              employeeNo: this.CleverForms.GetFormEmployeeNo(),
              instanceId: this.CleverForms.GetInstanceGuid()
            });
          }
          else
          {
            select.dataset.api = '{api}?modelName={modelName}&propertyName={propertyName}&employeeNo={employeeNo}&instanceId={instanceId}'.format({
              api: this.CleverForms.GetLookupApi,
              modelName: this.Config.Details.AffinityField.ModelName,
              propertyName: this.Config.Details.AffinityField.FieldName,
              employeeNo: this.CleverForms.GetFormEmployeeNo(),
              instanceId: this.CleverForms.GetInstanceGuid()
            });
          }

          selectConfig = {
            DataKey: 'Value',
            DisplayKey: 'Key',
            IncludeDataInDisplay: true,
            AddEmpty: this.CleverForms.InsertLookupEmptyOption,
            EmptyDisplay: this.CleverForms.InsertLookupEmptyDisplay,
            EmptyKey: this.CleverForms.InsertLookupEmptyValue,
            NoneKey: this.CleverForms.InsertLookupEmptyRequiredValue,
            NoneDisplay: this.CleverForms.InsertLookupEmptyRequiredDisplay,
            Required: this.Config.Details.Required,
            Value: null,
            IsSingleValue: false
          };

          if (this.CleverForms.IsGlobalKey(this.Config))
          {
            selectConfig.Required = true;
          }

          if (this.Config.Details.hasOwnProperty('Value') && $a.isString(this.Config.Details.Value) && this.Config.Details.Value.trim() !== '')
          {
            var codeValue = this.Config.Details.Value.contains(',') && this.Config.Details.Value.split(',')[0].length < this.Config.Details.Value.split(',')[1].length ? this.Config.Details.Value.split(',')[0].trim() : this.Config.Details.Value;
            selectConfig.Value = codeValue;
            select.dataset.defaultValue = codeValue;
          }
          select.dataset.config = JSON.stringify(selectConfig);

        }
        else
        {
          select.classList.remove('ui-has-lookup', 'do-autocomplete');
          select.classList.add('ui-has-autocomplete');

          if (
            $a.isPropObject(this.Config.Details, 'ItemSource')
            && $a.isPropArray(this.Config.Details.ItemSource, 'Items')
            && this.Config.Details.ItemSource.Items.length > 0
          )
          {
            selectConfig = false;

            if (this.Config.Details.hasOwnProperty('Value') && $a.isString(this.Config.Details.Value) && this.Config.Details.Value.trim() !== '')
            {
              selectConfig = this.Config.Details.Value;
              select.dataset.defaultValue = this.Config.Details.Value;
            }

            if (this.CleverForms.IsGlobalKey(this.Config))
            {
              selectConfig.Required = true;
            }

            // if affinity and NOT required
            // insert "None" option
            if (
              this.Config.Details.ItemSource.ItemSourceType === 'Affinity'
              && this.CleverForms.InsertLookupEmptyOption
              && !this.Config.Details.Required
            )
            {
              optionNode = document.createElement('option');
              optionNode.value = this.CleverForms.InsertLookupEmptyValue;
              optionNode.innerHTML = this.CleverForms.InsertLookupEmptyDisplay;
              select.appendChild(optionNode);
            }

            // if affinity and IS required
            // insert "Select..." option
            if (
              this.Config.Details.ItemSource.ItemSourceType === 'Affinity'
              && this.CleverForms.InsertLookupEmptyRequiredOption
              && this.Config.Details.Required
            )
            {
              optionNode = document.createElement('option');
              optionNode.value = this.CleverForms.InsertLookupEmptyRequiredValue;
              optionNode.innerHTML = this.CleverForms.InsertLookupEmptyRequiredDisplay;
              select.appendChild(optionNode);
            }

            // if NOT affinity and NOT required
            // insert "None" option
            if (
              this.Config.Details.ItemSource.ItemSourceType !== 'Affinity'
              && this.CleverForms.InsertLookupEmptyRequiredOption
              && !this.Config.Details.Required
            )
            {
              optionNode = document.createElement('option');
              optionNode.value = this.CleverForms.InsertLookupEmptyValue;
              optionNode.innerHTML = this.CleverForms.InsertLookupEmptyDisplay;
              select.appendChild(optionNode);
            }

            // if NOT affinity and IS required
            // insert "Select..." option
            if (
              this.Config.Details.ItemSource.ItemSourceType !== 'Affinity'
              && this.CleverForms.InsertLookupEmptyRequiredOption
              && this.Config.Details.Required
            )
            {
              optionNode = document.createElement('option');
              optionNode.value = this.CleverForms.InsertLookupEmptyRequiredValue;
              optionNode.innerHTML = this.CleverForms.InsertLookupEmptyRequiredDisplay;
              select.appendChild(optionNode);
            }

            keys = Object.keys(this.Config.Details.ItemSource.Items[0]);
            dataList = this.Config.Details.ItemSource.Items;
            selected = false;
            dataList.forEach(function (listItem)
            {
              optionNode = document.createElement('option');
              optionNode.value = listItem[keys[1]];
              optionNode.innerHTML = listItem[keys[0]];
              if (!selected && listItem.Selected)
              {
                optionNode.selected = 'selected';
                selected = true;
              }
              if (!selected && listItem[keys[1]] === selectConfig)
              {
                optionNode.selected = 'selected';
                selected = true;
              }
              select.appendChild(optionNode);
            }.bind(this));
          }

        }

      }
      if (select && this.Config.Details.Required) select.addEventListener('change', this.CheckValid);
      return this.FormRowNode;
    }
  }

  GetFromFormRow()
  {
    if (super.GetFromFormRow())
    {

      // get any special elements

      if (this.FormRowNode.querySelector('div.select.hidden select'))
      {
        this.FormData.Value = this.FormRowNode.querySelector('div.select.hidden select').value;
      }
      if (this.FormRowNode.querySelector('input[type="text"]:disabled'))
      {
        this.FormData.Value = this.FormRowNode.querySelector('input[type="text"]:disabled').value;
      }

      if (this.FormData.Value.toLowerCase().trim() === 'null') this.FormData.Value = null;

      return this.FormData;
    }
    throw '{0} "{1}" ({2}) could not get base post data for form post'.format(this.Config.Type, this.Config.Details.Label, this.Config.UniqueName);
  }

  SetFromValue(value, fromKeyChange)
  {
    fromKeyChange = fromKeyChange === undefined ? false : fromKeyChange;
    if (this.FormRowNode && this.FormRowNode.querySelector('select'))
    {
      if (this.FormRowNode.querySelector('select').widgets)
      {
        this.FormRowNode.querySelector('select').widgets.Autocomplete.setValue(value, false);
      }
      else
      {
        this.FormRowNode.querySelector('select').value = value;
      }
      var doValidate = fromKeyChange ? false : true;
      doValidate = fromKeyChange && this.CleverForms.Form.PostState !== 'none' ? true : doValidate;
      if (doValidate) this.CheckValid();
    }
  }

  IsValid()
  {
    var required = this.Config.Details.Required, value = false;
    if (this.CleverForms.IsGlobalKey(this.Config)) required = true;
    if (this.Config.ElementType === 'AffinityField' && this.Config.Details.AffinityField.IsRequired) required = true;
    if (required)
    {
      value = this.FormRowNode.querySelector('div.select.hidden select').value;
      if (value.toLowerCase().trim() === 'null' || value.toLowerCase().trim() === '')
      {
        return false;
      }
    }
    return true;
  }

  InvalidReason()
  {
    if (!this.IsValid())
    {
      var required = this.Config.Details.Required;
      if (this.CleverForms.IsGlobalKey(this.Config)) required = true;
      if (this.Config.ElementType === 'AffinityField' && this.Config.Details.AffinityField.IsRequired) required = true;
      var label = this.CleverForms.ShortenString(this.Config.Details.Label, 50);
      var error = $a.Lang.ReturnPath('generic.validation.select.required', { label: label });
      var select = this.FormRowNode.querySelector('div.select.hidden select');
      select.querySelectorAll('option').forEach(function (option)
      {
        if (option.value === select.value)
        {
          if (required)
          {
            error = $a.Lang.ReturnPath('generic.validation.select.notempty', { label: label });
          }
          else
          {
            error = $a.Lang.ReturnPath('generic.validation.select.notnone', { label: label, value: option.innerHTML.trim() });
          }
        }
      }.bind(this));
      return error;
    }
    return '';
  }

  CheckValid()
  {
    if (this.FormRowNode && this.FormRowNode.querySelector('select'))
    {
      var selectNode = this.FormRowNode.querySelector('select');
      if (selectNode.hasOwnProperty('widgets') && selectNode.widgets.hasOwnProperty('SelectLookup'))
      {
        selectNode.widgets.SelectLookup.IsValid();
      }
      else
      {
        if (this.FormRowNode.querySelector('.ui-form-error') && this.IsValid())
        {
          this.FormRowNode.querySelector('.ui-form-error').classList.remove('show');
          this.FormRowNode.classList.remove('error', 'flash-error');
        }
      }
    }
    //if (this.FormRowNode.querySelector('.ui-form-error') && this.IsValid())
    //{
    //  this.FormRowNode.querySelector('.ui-form-error').classList.remove('show');
    //  this.FormRowNode.classList.remove('error', 'flash-error');
    //}
    Affinity2018.Apps.CleverForms.Form.ResizeSection(this.FormRowNode);
  }

  /**/

  _customListSelectWidgetReady()
  {
    if (this._customListSelectWidgetValue)
    {
      this.CustomListSelectNode.widgets.Autocomplete.setValue(this._customListSelectWidgetValue);
      this.CustomListSelectNode.widgets.Autocomplete.removeEventListener('ready', this._customListSelectWidgetReady);
      this._customListSelectWidgetValue = null;
      delete this['_customListSelectWidgetValue'];
    }
  }

  _checkRequiredForBlankRow()
  {
    var editNode = false;
    var listBuilder = false;
    var requiredNode = this.EditNode.querySelector('#-required');
    if (this.EditNode && this.EditNode.querySelector('.list-builder') && this.EditNode.querySelector('.edit-template.form'))
    {
      editNode = this.EditNode.querySelector('.edit-template.form');
      listBuilder = editNode.widgets.ListBuilder;
    }
    if (listBuilder)
    {
      if (requiredNode.checked) listBuilder.RemoveLockedBlankRow();
      if (!requiredNode.checked) listBuilder.InsertLockedBlankRow();
    }
  }

  _listSourceChangedForBlankRow()
  {
    window.removeEventListener('ListBuilderRendered', this._checkRequiredForBlankRow);
    window.addEventListener('ListBuilderRendered', this._checkRequiredForBlankRow);
  }

  /**/

  _templates ()
  {
    super._templates();

    this.HtmlEditTemplate = this.ItemSourcesTemplate;

    this.HtmlEditExampleTemplate = `
    <div class="default-form">
      <div class="form-row">
        <label>Select from a list</label>
        <div class="select">
          <select class="ui-has-autocomplete">
            {Empty}
            <option value="ExampleOne">Example One</option>
            <option value="ExampleTwo">Example Two</option>
            <option value="ExampleThree">Example Three</option>
          </select>
        </div>
      </div>
      </div>
    `;

    this.HtmlRowTemplate = `
    <div class="form-row">
      <label>{0}</label>
      <div class="select working">
        <select class="ui-has-lookup do-autocomplete"></select>
      </div>
    </div>
    `;

    this.HtmlRowReadOnlyTemplate = `
    <div class="form-row">
      <label>{0}</label>
      <input type="text" disabled value="{1}" />
    </div>
    `;

  }

};;
/**
 *
 * Summary.       Element SingleSelectRadio Class.
 *
 * Description.   Element SingleSelectRadio functions and features.
 *
 * @author        Ben King, benk at affinityteam.com, ben.king at source63.com, +64 21 2672729.
 *
 *
 * @since         16.06.2020
 * @class         SingleSelectRadio
 * @namespace     Affinity2018.Classes.Apps.CleverForms.Elements
 * @memberof      CleverForms.Elements
 * @constructs    Affinity2018.Classes.Apps.CleverForms.Elements.SingleSelectRadio
 *
 * @public
 */

if (!('Affinity2018' in window)) Affinity2018 = {};
if (!('Classes' in Affinity2018)) Affinity2018.Classes = {};
if (!('Apps' in Affinity2018.Classes)) Affinity2018.Classes.Apps = {};
if (!('CleverForms' in Affinity2018.Classes.Apps)) Affinity2018.Classes.Apps.CleverForms = {};
if (!('Elements' in Affinity2018.Classes.Apps.CleverForms)) Affinity2018.Classes.Apps.CleverForms.Elements = {};

if (!('Apps' in Affinity2018)) Affinity2018.Apps = {};
if (!('Elements' in Affinity2018.Apps)) Affinity2018.Apps.Elements = {};

Affinity2018.Classes.Apps.CleverForms.Elements.SingleSelectRadio = class extends Affinity2018.Classes.Apps.CleverForms.Elements.ElementBase
{
  _options()
  {
    super._options();

  }

  constructor(config)
  {
    super(config, 'SingleSelectRadio');
    [
      '_options', '_templates',
      
      'SetDesignEditor', 'UnsetDesignEditor', 'GetFromDesignEditor', 'RemoveDesignerElement',
      'RemoveDesignerElement',
      'SetFormRow', 'GetFromFormRow', 'SetFromValue', 'IsValid', 'InvalidReason', 'CheckValid'

    ].bindEach(this);

    this._options();
    this._templates();

    return this;
  }

  /**/

  SetDesignEditor()
  {
    this.HtmlEditExampleTemplate = this.HtmlEditExampleTemplate.format({
      example1: $a.Lang.ReturnPath('app.cf.design_items.radio_example_1'),
      example2: $a.Lang.ReturnPath('app.cf.design_items.radio_example_2')
    });
    if (super.SetDesignEditor())
    {
      // set special html / values

      return true;
    }
    return false;
  }

  UnsetDesignEditor ()
  {
    if (super.UnsetDesignEditor())
    {
      // unset special html / values

      return true;
    }
    return false;
  }

  GetFromDesignEditor()
  {
    this.Config = super.GetFromDesignEditor();

    // update special values

    return this.Config;
  }

  RemoveDesignerElement (callback)
  {
    if (super.RemoveDesignerElement())
    {

      // do any removal stuff here
      
      var node = document.querySelector('.item-' + this.UniqueName);
      if (node && $a.isFunction(callback))
      {
        callback(node);
      }
    }
  }

  /**/

  SetFormRow (target)
  {
    var html = this.HtmlRowTemplate.format(this.Config.Details.Label);
    this.FormRowNode = super.SetFormRow(target, html);
    if (this.FormRowNode)
    {

      // set any special elements
      
      var dataList, selectRow, value, defaultValue, isInline, cssClass, keys;

      if (this.CleverForms.ViewType === 'Preview')
      {
        if (
          $a.isPropObject(this.Config.Details, 'ItemSource')
          && $a.isPropArray(this.Config.Details.ItemSource, 'Items')
          && this.Config.Details.ItemSource.Items.length > 0
        )
        {
          //dataList = this.Config.Details.ItemSource.Items;

          value = this.Config.Details.Value;
          defaultValue = this.Config.Details.ItemSource.hasOwnProperty('DefaultNone') ? this.Config.Details.ItemSource.DefaultNone : value;
          isInline = this.Config.Details.ItemSource.hasOwnProperty('Inline') ? this.Config.Details.ItemSource.Inline : false;
          cssClass = isInline ? 'inline' : '';
          keys = Object.keys(this.Config.Details.ItemSource.Items[0]);
          dataList = this.Config.Details.ItemSource.Items;
          dataList.forEach(function (listItem, index)
          {
            selectRow = document.createElement('div');
            selectRow.classList.add('radio-label-pair');
            if (isInline) selectRow.classList.add('inline');
            selectRow.innerHTML = this.HtmlRadioRowTemplate.format({
              id: 'radio-' + this.Config.Name + '-' + index,
              name: this.Config.Name,
              value: listItem[keys[1]],
              label: listItem[keys[0]]
            });
            if (value === listItem[keys[1]] || ([null, ''].contains(value) && defaultValue === listItem[keys[1]])) selectRow.querySelector('input').checked = true;
            this.FormRowNode.appendChild(selectRow);
            if (this.Config.Details.Required) selectRow.querySelector('input').addEventListener('change', this.CheckValid);
          }.bind(this));
          if (isInline)
          {
            this.FormRowNode.querySelector('label').classList.remove('solo');
            this.FormRowNode.querySelector('label').classList.add('block');
          }
        }
        else
        {
          dataList = [
            { Key: '', Value: 'Radio Example One' },
            { Key: '', Value: 'Radio Example Two' },
            { Key: '', Value: 'Radio Example Three' }
          ];
        
          keys = Object.keys(dataList[0]);
          dataList.forEach(function (listItem, index)
          {
            selectRow = document.createElement('div');
            selectRow.classList.add('radio-label-pair');
            selectRow.innerHTML = this.HtmlRadioRowTemplate.format({
              id: 'radio-' + this.Config.Name + '-' + index,
              name: this.Config.Name,
              value: listItem[keys[1]],
              label: listItem[keys[0]],
              disabled: this.CleverForms.ViewType === 'ViewOnly' ? 'disabled' : ''
            });
            if (this.Config.Details.Required) selectRow.querySelector('input').addEventListener('change', this.CheckValid);
            this.FormRowNode.appendChild(selectRow);
          }.bind(this));

        }

      }
      else
      {
        if (
          $a.isPropObject(this.Config.Details, 'ItemSource')
          && $a.isPropArray(this.Config.Details.ItemSource, 'Items')
          && this.Config.Details.ItemSource.Items.length > 0
        )
        {
          value = this.Config.Details.Value;
          defaultValue = this.Config.Details.ItemSource.hasOwnProperty('DefaultNone') ? this.Config.Details.ItemSource.DefaultNone : value;
          isInline = this.Config.Details.ItemSource.hasOwnProperty('Inline') ? this.Config.Details.ItemSource.Inline : false;
          cssClass = isInline ? 'inline' : '';
          keys = Object.keys(this.Config.Details.ItemSource.Items[0]);
          dataList = this.Config.Details.ItemSource.Items;
          dataList.forEach(function (listItem, index)
          {
            selectRow = document.createElement('div');
            selectRow.classList.add('radio-label-pair');
            if (isInline) selectRow.classList.add('inline');
            selectRow.innerHTML = this.HtmlRadioRowTemplate.format({
              id: 'radio-' + this.Config.Name + '-' + index,
              name: this.Config.Name,
              value: listItem[keys[1]],
              label: listItem[keys[0]],
              disabled: this.CleverForms.ViewType === 'ViewOnly' ? 'disabled' : ''
            });
            if (value === listItem[keys[1]] || ([null, ''].contains(value) && defaultValue === listItem[keys[1]])) selectRow.querySelector('input').checked = true;
            this.FormRowNode.appendChild(selectRow);
            if (this.Config.Details.Required) selectRow.querySelector('input').addEventListener('change', this.CheckValid);
          }.bind(this));
          if (isInline)
          {
            this.FormRowNode.querySelector('label').classList.remove('solo');
            this.FormRowNode.querySelector('label').classList.add('block');
          }
        }

      }

      return this.FormRowNode;
    }
  }

  GetFromFormRow()
  {
    if (super.GetFromFormRow())
    {

      // get any special elements

      if (this.FormRowNode.querySelector('input[type="radio"]:checked'))
      {
        this.FormData.Value = this.FormRowNode.querySelector('input[type="radio"]:checked').value;
      }
      else
      {
        if (
          $a.isPropObject(this.Config.Details, 'ItemSource')
          && this.Config.Details.ItemSource.hasOwnProperty('DefaultNone')
        )
        {
          this.FormData.Value = this.Config.Details.ItemSource.DefaultNone;
        }
      }

      return this.FormData;
    }
    throw '{0} "{1}" ({2}) could not get base post data for form post'.format(this.Config.Type, this.Config.Details.Label, this.Config.UniqueName);
  }

  SetFromValue(value, fromKeyChange)
  {
    fromKeyChange = fromKeyChange === undefined ? false : fromKeyChange;
    if (this.FormRowNode.querySelector('input[type="radio"][value="' + value + '"]'))
    {
      this.FormRowNode.querySelector('input[type="radio"][value="' + value + '"]').checked = true;
    }
    else
    {
      if (this.FormRowNode.querySelector('input[type="radio"]:checked'))
      {
        this.FormRowNode.querySelector('input[type="radio"]:checked').checked = false;
      }
    }
    this.CheckValid();
  }

  IsValid()
  {
    if (!this.Config.Details.Required) return true;
    var inputNode = this.FormRowNode.querySelector('input[type="radio"]:checked');
    return inputNode != null;
  }

  InvalidReason()
  {
    if (!this.IsValid())
    {
      return '\'' + this.CleverForms.ShortenString(this.Config.Details.Label, 50) + '\' must have one option ticked.';
    }
    return '';
  }

  CheckValid()
  {
    if (this.FormRowNode.querySelector('.ui-form-error') && this.IsValid())
    {
      this.FormRowNode.querySelector('.ui-form-error').classList.remove('show');
      this.FormRowNode.classList.remove('error', 'flash-error');
    }
    Affinity2018.Apps.CleverForms.Form.ResizeSection(this.FormRowNode);
  }

  /**/

  _templates ()
  {
    super._templates();

    this.HtmlEditTemplate = this.ItemSourcesTemplate;

    this.HtmlEditExampleTemplate = `
    <div class="default-form">
      <div class="form-row">
        <label class="solo">Gender</label>
        <div class="radio-label-pair">
          <input type="radio" id="afgadadfsradio1" name="afgadadfsradio1" />
          <label for="afgadadfsradio1" class="right">{example1}</label>
        </div>
        <div class="radio-label-pair">
          <input type="radio" id="afgadadfsradio2" name="afgadadfsradio2" />
          <label for="afgadadfsradio2" class="right">{example2}</label>
        </div>
        ...
      </div>
    </div>
    `;

    this.HtmlRowTemplate = `
    <div class="form-row">
      <label class="solo">{0}</label>
    </div>
    `;

    this.HtmlRadioRowTemplate = `
    <input type="radio" name="{name}" id="{id}" value="{value}" {disabled}/><label for="{id}" class="right">{label}</label>
    `;



  }

};;
/**
 *
 * Summary.       Element TaxNumber Class.
 *
 * Description.   Element TaxNumber functions and features.
 *
 * @author        Ben King, benk at affinityteam.com, ben.king at source63.com, +64 21 2672729.
 *
 *
 * @since         16.06.2020
 * @class         TaxNumber
 * @namespace     Affinity2018.Classes.Apps.CleverForms.Elements
 * @memberof      CleverForms.Elements
 * @constructs    Affinity2018.Classes.Apps.CleverForms.Elements.TaxNumber
 *
 * @public
 */

if (!('Affinity2018' in window)) Affinity2018 = {};
if (!('Classes' in Affinity2018)) Affinity2018.Classes = {};
if (!('Apps' in Affinity2018.Classes)) Affinity2018.Classes.Apps = {};
if (!('CleverForms' in Affinity2018.Classes.Apps)) Affinity2018.Classes.Apps.CleverForms = {};
if (!('Elements' in Affinity2018.Classes.Apps.CleverForms)) Affinity2018.Classes.Apps.CleverForms.Elements = {};

if (!('Apps' in Affinity2018)) Affinity2018.Apps = {};
if (!('Elements' in Affinity2018.Apps)) Affinity2018.Apps.Elements = {};

Affinity2018.Classes.Apps.CleverForms.Elements.TaxNumber = class extends Affinity2018.Classes.Apps.CleverForms.Elements.ElementBase
{
  _options()
  {
    super._options();

    this.CountryCodes = ['AU','NZ', 'A', 'N'];
    this.DefaultCountryCode = 'AU';
    this.CountryCodeMap = {
      'A': 'AU',
      'N': 'NZ'
    };

    this.DisableDepnedancy = false;
  }

  constructor(config)
  {
    super(config, 'TaxNumber');
    [
      '_options', '_templates',
      
      'SetDesignEditor', 'UnsetDesignEditor', 'GetFromDesignEditor', 'RemoveDesignerElement',
      'RemoveDesignerElement',
      'SetFormRow', 'GetFromFormRow', 'SetFromValue',

      '_getFormRowHtml',
      '_gotNewUserProfile',

      '_setupEvents', '_setupCountry', '_countrySet', 

      '_setFromTax', '_autocompleteWorkerDone'

    ].bindEach(this);

    this._options();
    this._templates();

    window.addEventListener('GotUser', this._gotNewUserProfile);

    return this;
  }

  /**/

  SetDesignEditor()
  {
    if (super.SetDesignEditor())
    {
      // set special html / values

      return true;
    }
    return false;
  }

  UnsetDesignEditor ()
  {
    if (super.UnsetDesignEditor())
    {
      // unset special html / values

      return true;
    }
    return false;
  }

  GetFromDesignEditor()
  {
    this.Config = super.GetFromDesignEditor();

    // update special values

    return this.Config;
  }

  RemoveDesignerElement (callback)
  {
    if (super.RemoveDesignerElement())
    {

      // do any removal stuff here
      
      var node = document.querySelector('.item-' + this.UniqueName);
      if (node && $a.isFunction(callback))
      {
        callback(node);
      }
    }
  }

  /**/

  SetFormRow (target)
  {
    var fromFormCountry = false;
    var countryCode = this.DefaultCountryCode;
    if (
      Affinity2018.hasOwnProperty('FormProfile')
      && Affinity2018.FormProfile.hasOwnProperty('Country')
      //&& this.CountryCodes.contains(Affinity2018.FormProfile.Country)
      && this.CountryCodes.contains(this.CleverForms.FormCountry)
    )
    {
      //countryCode = Affinity2018.FormProfile.Country;
      countryCode = this.CleverForms.FormCountry;
      fromFormCountry = true;
    }
    var value = $a.isArray(this.Config.Details.Value) && this.Config.Details.Value.length === 2 ? this.Config.Details.Value[0] : '';
    var country = $a.isArray(this.Config.Details.Value) && this.Config.Details.Value.length === 2 && this.CountryCodes.contains($a.toString(this.Config.Details.Value[1]).trim().toUpperCase()) ? this.Config.Details.Value[1].trim().toUpperCase() : countryCode;
    if (country.length === 1 && this.CountryCodeMap.hasOwnProperty(country.toUpperCase()))
    {
      country = this.CountryCodeMap[country.toUpperCase()];
    }
    var html = '';
    if (this.IsReadOnly || this.CleverForms.ViewType === 'ViewOnly')
    {
      var display = value + ' - ' + country;
      if (value === null || value === 'null') display = '';
      html = this.HtmlRowReadOnlyTemplate.format({
        label: this.Config.Details.Label,
        value: display
      });
    }
    else
    {
      html = this._getFormRowHtml(value, country, fromFormCountry);
    }
    this.FormRowNode = super.SetFormRow(target, html);
    if (this.FormRowNode)
    {
      if (!this.IsReadOnly && !this.CleverForms.ViewType === 'ViewOnly')
      {
        if (this.FormRowNode.querySelector('input.ui-has-taxnumber')) this.FormRowNode.querySelector('input.ui-has-taxnumber').addEventListener('widgetReady', this._setupEvents);
        else if (this.FormRowNode.querySelector('input.ui-taxnumber')) this.FormRowNode.querySelector('input.ui-taxnumber').addEventListener('widgetReady', this._setupEvents);
        else console.warn('Tax Number element "' + this.Config.Details.Label + '" has no field to check.');
      }

      // set any special elements

      return this.FormRowNode;
    }
  }

  GetFromFormRow()
  {
    if (super.GetFromFormRow())
    {

      // get any special elements

      var inputNode = this.FormRowNode.querySelector('input.ui-taxnumber');
      var inputWidget = inputNode ? inputNode.widgets.TaxNumber : null;
      if (inputWidget)
      {
        var value = inputWidget.GetData();
        if ($a.isArray(value)) value[0] = value[0].replace(/\-/g, '').trim();
        this.FormData.Value = value;
      }
      else
      {
        if (this.Config.Details.hasOwnProperty('AffinityField'))
        {
          console.warn('tried to read from {0} ({1}) when it is not yet rendered.'.format(this.Config.Details.Label, this.Config.Details.AffinityField.FieldName));
        }
        else
        {
          console.warn('tried to read from {0} when it is not yet rendered.'.format(this.Config.Details.Label));
        }
      }

      return this.FormData;
    }
    throw '{0} "{1}" ({2}) could not get base post data for form post'.format(this.Config.Type, this.Config.Details.Label, this.Config.UniqueName);
  }

  SetFromValue(value, fromKeyChange)
  {
    fromKeyChange = fromKeyChange === undefined ? false : fromKeyChange;
    this.DisableDepnedancy = true;
    var inputNode = this.FormRowNode.querySelector('input.ui-taxnumber');
    var inputWidget = inputNode.widgets.TaxNumber;
    if (!this.IsReadOnly && inputWidget)
    {
      if (value === null || ($a.isString(value) && (value.trim() === '' || value === 'null')))
      {
        inputWidget.Set('');
      }
      else inputWidget.Set(value);
      Affinity2018.Apps.CleverForms.Form.ResizeSection(this.FormRowNode);
    }
    setTimeout(function () { this.DisableDepnedancy = false; }.bind(this), 250);
  }

  /**/

  _getFormRowHtml(value, country, fromFormCountry)
  {
    var showCountrySelect = this.CountryCodes.contains(country) ? false : fromFormCountry ? false : true;
    return this.HtmlRowTemplate.format({
      label: this.Config.Details.Label,
      value: value,
      country: country,
      status: showCountrySelect ? 'show' : 'hide'
    });
  }

  _gotNewUserProfile(profile)
  {
    if (this.FormRowNode && $a.isPropObject(Affinity2018.UserProfile, 'Selected'))
    {
      var inputNode = this.FormRowNode.querySelector('input.ui-taxnumber');
      var inputWidget = inputNode.widgets.TaxNumber;
      var data = inputWidget.GetData();
      var value = data[0];
      var country = data[1];
      var html = this._getFormRowHtml(value, country);

      inputWidget.Destroy();
      this.FormRowNode.innerHTML = html;

      Affinity2018.Apps.Plugins.TaxNumber.Apply();
    }
  }

  /**/

  _setupEvents()
  {
    if (!this.IsReadOnly)
    {
      this.SectionNode = this.FormRowNode.closest('div.default-form');
      if (this.SectionNode.querySelector('select[data-api*="propertyName=TAX_CODE"]'))
      {
        this.TaxCodeInputNode = this.SectionNode.querySelector('select[data-api*="propertyName=TAX_CODE"]');
        this.TaxCodeWidget = this.TaxCodeInputNode.widgets.Autocomplete;
        if (this.TaxCodeWidget === undefined) this.TaxCodeInputNode.addEventListener('ready', this._setupCountry);
        else this.TaxCodeWidget = false;
      }
      else
      {
        this.TaxCodeInputNode = false;
        this._setupCountry();
      }
    }
  }

  _setupCountry()
  {
    if (!this.IsReadOnly)
    {
      if (this.TaxCodeInputNode)
      {
        this.TaxOptions = this.TaxCodeInputNode.querySelectorAll('option');
        this.TaxNumberInputNode = this.FormRowNode.querySelector('input.ui-taxnumber');
        this.TaxNumberInputNode.addEventListener('countryChanged', this._countrySet);
        if (this.TaxCodeInputNode.widgets.Autocomplete)
        {
          this.TaxCodeWidget = this.TaxCodeInputNode.widgets.Autocomplete;
          this.TaxCodeInputNode.removeEventListener('complete', this._setupCountry);
          this.TaxCodeInputNode.addEventListener('change', this._setFromTax);
        }
      }
      else
      {
        this.TaxCodeWidget = false;
      }
    }
  }

  _countrySet(ev)
  {
    if (!this.IsReadOnly)
    {
      if (ev && 'detail' in ev && 'Country' in ev.detail)
      {
        clearTimeout(this.filterTimeout);
        var check = '- ' + ev.detail.Country.toUpperCase() + ' ';
        if (this.TaxCodeWidget)
        {
          this.SetMatch = check.contains('NZ') ? '- NZ ' : check.contains('AU') ? '- AU ' : null;
          var filterMatch = check.contains('NZ') ? '- AU ' : check.contains('AU') ? '- NZ ' : null;
          if (!this.DisableDepnedancy)
          {
            this.DisableDepnedancy = true;
            this.TaxCodeInputNode.addEventListener('workerComplete', this._autocompleteWorkerDone);
            this.TaxCodeWidget.filterList(filterMatch);
          }
        }
      }
    }
  }
  _autocompleteWorkerDone()
  {
    if (!this.IsReadOnly)
    {
      this.TaxCodeInputNode.removeEventListener('workerComplete', this._autocompleteWorkerDone);
      var selected = this.TaxCodeWidget.setFirst(this.SetMatch, false);
      this.DisableDepnedancy = false;
    }
  }

  _setFromTax (ev)
  {
    if (!this.IsReadOnly)
    {
      if (this.DisableDepnedancy) return;
      var value = this.TaxCodeWidget.getDisplayValue(), o = 0, country;
      for (o = 0; o < this.CountryCodes.length; o++)
      {
        if (value.toUpperCase().contains('- ' + this.CountryCodes[o].toUpperCase()))
        {
          country = this.CountryCodes[o];
          break;
        }
      }
      if (country !== '')
      {
        this.TaxNumberInputNode.removeEventListener('countryChanged', this._countrySet);
        var inputNode = this.FormRowNode.querySelector('input.ui-taxnumber');
        var inputWidget = inputNode.widgets.TaxNumber;
        inputWidget.Clear();
        inputWidget.SetCountry(country);
        this.TaxNumberInputNode.addEventListener('countryChanged', this._countrySet);
      }
    }
  }

  /**/

  _templates ()
  {
    super._templates();

    this.HtmlEditTemplate = `

    `;

    this.HtmlEditExampleTemplate = `
    <div class="default-form">
      <div class="form-row">
        <label>Tax Number</label>
        <input type="text" class="ui-has-taxnumber" data-country="NZ" data-country-status="show" placeholder="Enter your tax number" />
      </div>
    </div>
    `;

    this.HtmlRowTemplate = `
    <div class="form-row">
      <label>{label}</label>
      <input type="text" class="ui-has-taxnumber" value="{value}" data-country="{country}" data-country-status="{status}" />
    </div>
    `;

    this.HtmlRowReadOnlyTemplate =  `
    <div class="form-row">
      <label>{label}</label>
      <input type="text" disabled value="{value}" />
    </div>
    `;

  }

};;
/**
 *
 * Summary.       Element Text Class.
 *
 * Description.   Element Text functions and features.
 *
 * @author        Ben King, benk at affinityteam.com, ben.king at source63.com, +64 21 2672729.
 *
 *
 * @since         16.06.2020
 * @class         Text
 * @namespace     Affinity2018.Classes.Apps.CleverForms.Elements
 * @memberof      CleverForms.Elements
 * @constructs    Affinity2018.Classes.Apps.CleverForms.Elements.Text
 *
 * @public
 */

if (!('Affinity2018' in window)) Affinity2018 = {};
if (!('Classes' in Affinity2018)) Affinity2018.Classes = {};
if (!('Apps' in Affinity2018.Classes)) Affinity2018.Classes.Apps = {};
if (!('CleverForms' in Affinity2018.Classes.Apps)) Affinity2018.Classes.Apps.CleverForms = {};
if (!('Elements' in Affinity2018.Classes.Apps.CleverForms)) Affinity2018.Classes.Apps.CleverForms.Elements = {};

if (!('Apps' in Affinity2018)) Affinity2018.Apps = {};
if (!('Elements' in Affinity2018.Apps)) Affinity2018.Apps.Elements = {};

Affinity2018.Classes.Apps.CleverForms.Elements.Text = class extends Affinity2018.Classes.Apps.CleverForms.Elements.ElementBase
{
  _options()
  {
    super._options();

  }

  constructor(config)
  {
    super(config, 'Text');
    [
      '_options', '_templates',
      
      'SetDesignEditor', 'UnsetDesignEditor', 'GetFromDesignEditor', 'RemoveDesignerElement',
      'RemoveDesignerElement',
      'SetFormRow', 'GetFromFormRow', 'SetFromValue'

    ].bindEach(this);

    this._options();
    this._templates();

    return this;
  }

  /**/

  SetDesignEditor()
  {
    this.HtmlEditExampleTemplate = this.HtmlEditExampleTemplate.format({
      label: $a.Lang.ReturnPath('app.cf.design_items.text_example_label'),
      value: $a.Lang.ReturnPath('app.cf.design_items.text_example_value')
    });

    if (super.SetDesignEditor())
    {
      // set special html / values

      return true;
    }
    return false;
  }

  UnsetDesignEditor ()
  {
    if (super.UnsetDesignEditor())
    {
      // unset special html / values

      return true;

    }
    return false;
  }

  GetFromDesignEditor()
  {
    this.Config = super.GetFromDesignEditor();

    // update special values

    return this.Config;
  }

  RemoveDesignerElement (callback)
  {
    if (super.RemoveDesignerElement())
    {

      // do any removal stuff here
      
      var node = document.querySelector('.item-' + this.UniqueName);
      if (node && $a.isFunction(callback))
      {
        callback(node);
      }
    }
  }

  /**/

  SetFormRow (target)
  {
    var html = this.HtmlRowTemplate.format(this.Config.Details.Label, this.Config.Details.Value);
    this.FormRowNode = super.SetFormRow(target, html);
    if (this.FormRowNode)
    {

      // set any special elements

      if (
        this.Config.Type === 'AffinityField'
        && this.Config.Details.AffinityField.Mode === this.CleverForms.AffnityFieldModeTypes.Display.Enum)
      {
        this.FormRowNode.querySelector('input').disabled = true;
      }

      return this.FormRowNode;
    }
  }

  GetFromFormRow()
  {
    if (super.GetFromFormRow())
    {

      // get any special elements

      this.FormData.Value = this.FormRowNode.querySelector('input').value.trim();

      return this.FormData;
    }
    throw '{0} "{1}" ({2}) could not get base post data for form post'.format(this.Config.Type, this.Config.Details.Label, this.Config.UniqueName);
  }

  SetFromValue(value, fromKeyChange)
  {
    fromKeyChange = fromKeyChange === undefined ? false : fromKeyChange;
    super.SetFromValue(value, fromKeyChange);
  }

  /**/

  _templates ()
  {
    super._templates();

    this.HtmlEditTemplate = `
      
    `;

    this.HtmlEditExampleTemplate = `
    <div class="default-form">
      <div class="form-row">
        <label>{label}</label>
        <input type="text" value="{value}" />
      </div>
    </div>
    `;

    this.HtmlRowTemplate = `
    <div class="form-row">
      <label>{0}</label>
      <input type="text" value="{1}" />
    </div>
    `;

  }

};;
/**
 *
 * Summary.       Element Title Class.
 *
 * Description.   Element Title functions and features.
 *
 * @author        Ben King, benk at affinityteam.com, ben.king at source63.com, +64 21 2672729.
 *
 *
 * @since         16.06.2020
 * @class         Title
 * @namespace     Affinity2018.Classes.Apps.CleverForms.Elements
 * @memberof      CleverForms.Elements
 * @constructs    Affinity2018.Classes.Apps.CleverForms.Elements.Title
 *
 * @public
 */

if (!('Affinity2018' in window)) Affinity2018 = {};
if (!('Classes' in Affinity2018)) Affinity2018.Classes = {};
if (!('Apps' in Affinity2018.Classes)) Affinity2018.Classes.Apps = {};
if (!('CleverForms' in Affinity2018.Classes.Apps)) Affinity2018.Classes.Apps.CleverForms = {};
if (!('Elements' in Affinity2018.Classes.Apps.CleverForms)) Affinity2018.Classes.Apps.CleverForms.Elements = {};

if (!('Apps' in Affinity2018)) Affinity2018.Apps = {};
if (!('Elements' in Affinity2018.Apps)) Affinity2018.Apps.Elements = {};

Affinity2018.Classes.Apps.CleverForms.Elements.Title = class extends Affinity2018.Classes.Apps.CleverForms.Elements.ElementBase
{
  _options()
  {
    super._options();

  }

  constructor(config)
  {
    super(config, 'Title');
    [
      '_options', '_templates',
      
      'SetDesignEditor', 'UnsetDesignEditor', 'GetFromDesignEditor', 'RemoveDesignerElement',
      'RemoveDesignerElement',
      'SetFormRow', 'GetFromFormRow', 'SetFromValue'

    ].bindEach(this);

    this._options();
    this._templates();

    return this;
  }

  /**/

  SetDesignEditor()
  {
    this.HtmlEditExampleTemplate = this.HtmlEditExampleTemplate.format({
      example: $a.Lang.ReturnPath('app.cf.design_items.title_example')
    });

    if (super.SetDesignEditor())
    {
      // set special html / values

      var title = this.Config.Details.Label || '';
      this.PopupNode.querySelector('.label-row label').innerHTML = $a.Lang.ReturnPath('app.cf.design_items.title_label');
      this.PopupNode.querySelector('input.label').value = title.trim();
      this.PopupNode.querySelector('.label-row').classList.remove('hidden');

      return true;
    }
    return false;
  }

  UnsetDesignEditor ()
  {
    if (super.UnsetDesignEditor())
    {
      // unset special html / values

      return true;
    }
    return false;
  }

  GetFromDesignEditor()
  {
    this.Config = super.GetFromDesignEditor();

    // update special values

    this.Config.Details.Label = this.PopupNode.querySelector('input.label').value.trim();
    this.Config.Label = this.Config.Details.Label;

    this.CheckChanges(true);

    return this.Config;
  }

  RemoveDesignerElement (callback)
  {
    if (super.RemoveDesignerElement())
    {

      // do any removal stuff here
      
      var node = document.querySelector('.item-' + this.UniqueName);
      if (node && $a.isFunction(callback))
      {
        callback(node);
      }
    }
  }

  /**/

  SetFormRow (target)
  {
    var html = this.HtmlRowTemplate.format(this.Config.Details.Label, this.Config.Details.Value);
    this.FormRowNode = super.SetFormRow(target, html);
    if (this.FormRowNode)
    {

      // set any special elements

      return this.FormRowNode;
    }
  }

  GetFromFormRow()
  {
    if (super.GetFromFormRow())
    {

      // get any special elements

      return this.FormData;
    }
    throw '{0} "{1}" ({2}) could not get base post data for form post'.format(this.Config.Type, this.Config.Details.Label, this.Config.UniqueName);
  }

  SetFromValue(value, fromKeyChange)
  {
    fromKeyChange = fromKeyChange === undefined ? false : fromKeyChange;

  }

  /**/

  _templates ()
  {
    super._templates();

    this.HtmlEditTemplate = `
    `;

    this.HtmlEditExampleTemplate = `
    <div class="default-form">
      <div class="form-row">
        <span>Some text</span>
        <div class="section-title">{example}</div>
        <span>Some text</span>
      </div>
    </div>
    `;

    this.HtmlRowTemplate = `
    <div class="form-row">
      <div class="section-title">{0}</div>
    </div>
    `;

  }

};;
/**
 *
 * Summary.       Element Video Class.
 *
 * Description.   Element Video functions and features.
 *
 * @author        Ben King, benk at affinityteam.com, ben.king at source63.com, +64 21 2672729.
 *
 *
 * @since         16.06.2020
 * @class         Video
 * @namespace     Affinity2018.Classes.Apps.CleverForms.Elements
 * @memberof      CleverForms.Elements
 * @constructs    Affinity2018.Classes.Apps.CleverForms.Elements.Video
 *
 * @public
 */

if (!('Affinity2018' in window)) Affinity2018 = {};
if (!('Classes' in Affinity2018)) Affinity2018.Classes = {};
if (!('Apps' in Affinity2018.Classes)) Affinity2018.Classes.Apps = {};
if (!('CleverForms' in Affinity2018.Classes.Apps)) Affinity2018.Classes.Apps.CleverForms = {};
if (!('Elements' in Affinity2018.Classes.Apps.CleverForms)) Affinity2018.Classes.Apps.CleverForms.Elements = {};

if (!('Apps' in Affinity2018)) Affinity2018.Apps = {};
if (!('Elements' in Affinity2018.Apps)) Affinity2018.Apps.Elements = {};

Affinity2018.Classes.Apps.CleverForms.Elements.Video = class extends Affinity2018.Classes.Apps.CleverForms.Elements.ElementBase
{
  _options()
  {
    super._options();

  }

  constructor(config)
  {
    super(config, 'Video');
    [
      '_options', '_templates',
      
      'SetDesignEditor', 'UnsetDesignEditor', 'GetFromDesignEditor', 'RemoveDesignerElement',
      'RemoveDesignerElement',
      'SetFormRow', 'GetFromFormRow', 'SetFromValue',

      'Reset',
      'GetID','GetEmbed',

      '_validateId', '_valid', '_invalid', '_delayInvalid',
      '_extractId', '_delayExtract'

    ].bindEach(this);

    this._options();
    this._templates();

    return this;
  }

  /**/

  SetDesignEditor()
  {
    this.HtmlEditTemplate = this.HtmlEditTemplate.format({
      label: $a.Lang.ReturnPath('app.cf.design_items.video_label'),
      idLabel: $a.Lang.ReturnPath('app.cf.design_items.video_id_label'),
      videoLabel: $a.Lang.ReturnPath('app.cf.design_items.video_video_label')
    });

    if (super.SetDesignEditor())
    {
      // set special html / values

      this.FullUrlNode = this.TemplateNode.querySelector('.youtube-url');
      this.IdNode = this.TemplateNode.querySelector('.youtube-id');
      this.EmbedNode = this.TemplateNode.querySelector('.youtube-embed');
      this.TickNode = this.TemplateNode.querySelector('.icon-tick');
      this.CrossNode = this.TemplateNode.querySelector('.icon-cross');
      if (this.FullUrlNode)
      {
        this.FullUrlNode.addEventListener('keyup', this._extractId);
      }

      if (
        this.Config.Details.hasOwnProperty('VideoId')
        && $a.type(this.Config.Details.VideoId) === 'string'
      )
      {
        if (this.Config.Details.VideoId.length > 7) this.FullUrlNode.value = 'https://www.youtube.com/watch?v=' + this.Config.Details.VideoId;
        this.IdNode.value = this.Config.Details.VideoId;
      }

      this._extractId();

      this.PopupNode.classList.add('large');

      return true;
    }
    return false;
  }

  UnsetDesignEditor ()
  {
    if (super.UnsetDesignEditor())
    {
      // unset special html / values

      return true;
    }
    return false;
  }

  GetFromDesignEditor()
  {
    this.Config = super.GetFromDesignEditor();

    // update special values

    this.Config.Details.VideoId = this.IdNode.value;

    this.CheckChanges(true);

    return this.Config;
  }

  RemoveDesignerElement (callback)
  {
    if (super.RemoveDesignerElement())
    {

      // do any removal stuff here
      
      var node = document.querySelector('.item-' + this.UniqueName);
      if (node && $a.isFunction(callback))
      {
        callback(node);
      }
    }
  }

  /**/

  SetFormRow (target)
  {
    var html = this.HtmlRowTemplate.format(this.Config.Details.VideoId);
    this.FormRowNode = super.SetFormRow(target, html);
    if (this.FormRowNode)
    {

      // set any special elements

      var checkIframeLoaded = function ()
      {
        if (this.FormRowNode.getBoundingClientRect().height > 10)
        {
          setTimeout(Affinity2018.Apps.CleverForms.Form.ResizeSection, 250, this.FormRowNode);
          return;
        }
        setTimeout(checkIframeLoaded, 100);
      }.bind(this);
      checkIframeLoaded();

      return this.FormRowNode;
    }
  }

  GetFromFormRow()
  {
    if (super.GetFromFormRow())
    {

      // get any special elements

      return this.FormData;
    }
    throw '{0} "{1}" ({2}) could not get base post data for form post'.format(this.Config.Type, this.Config.Details.Label, this.Config.UniqueName);
  }

  SetFromValue(value, fromKeyChange)
  {
    fromKeyChange = fromKeyChange === undefined ? false : fromKeyChange;

  }

  /**/

  GetID (url)
  {
    if (url)
    {
      this.FullUrlNode.value = url.trim();
      return this._extractId();
    }
    return this.IdNode.value.trim();
  }

  GetEmbed ()
  {
    if (this.IdNode.value.length > 7)
    {
      this.EmbedNode.innerHTML = `<iframe src="https://www.youtube.com/embed/` + this.IdNode.value + `" frameborder="0"></iframe>`;
      return this.EmbedNode.innerHTML;
    }
    return '';
  }

  /**/

  _validateId (id)
  {
    if (typeof id === 'string' && id.length > 7)
    {
      this.validating = id;
      axios({
        method: 'GET',
        url: 'https://www.googleapis.com/youtube/v3/videos?part=id&id=' + this.validating + '&key=AIzaSyBVSe319zTapARUojfwVf1cDAiQ7G3kAqk'
      }).then(function (response)
      {
        if (
          Affinity2018.isObject(response)
          && response.status === 200
          && Affinity2018.isPropObject(response, 'data')
          && Affinity2018.isPropArray(response.data, 'items')
          && response.data.items.length > 0
        )
        {
          this._valid(id);
        }
        else
        {
          this._invalid();
        }
      }.bind(this)).catch(this._invalid);
    }
    else
    {
      this._invalid();
    }
  }

  _valid (id)
  {
    clearTimeout(this._invalidTimer);
    this.CrossNode.classList.add('hidden');
    this.TickNode.classList.remove('hidden');
    this.IdNode.value = id;
    this.EmbedNode.innerHTML = `<iframe src="https://www.youtube.com/embed/` + this.IdNode.value + `" frameborder="0"></iframe>`;
    this.Valid = true;
  }

  _invalid ()
  {
    clearTimeout(this._invalidTimer);
    this._invalidTimer = setTimeout(this._delayInvalid, 250);
    this.Valid = false;
  }

  _delayInvalid ()
  {
    this.TickNode.classList.add('hidden');
    this.CrossNode.classList.remove('hidden');
    this.IdNode.value = '';
    this.EmbedNode.innerHTML = '';
  }

  _extractId ()
  {
    clearTimeout(this._extractTimer);
    this._extractTimer = setTimeout(this._delayExtract, 500);
  }

  _delayExtract ()
  {
    clearTimeout(this._extractTimer);
    var url = this.FullUrlNode.value.trim(),
        keyvalues = url.substr(url.indexOf('?') + 1).split('&'),
        i = 0, id = false, pair;
    for ( ; i < url.length; ++i)
    {
      pair = keyvalues[i].split('=', 2);
      if (pair.length === 2 && pair[0].toLowerCase().trim() === 'v')
      {
        id = decodeURIComponent(pair[1].replace(/\+/g, ' '));
        break;
      }
    }
    if (typeof id === 'string' && id.length > 7)
    {
      this._validateId(id);
      return id;
    }
    this._invalid();
    return '';
  }

  /**/

  _templates ()
  {
    super._templates();

    this.HtmlEditTemplate = `
    <div class="edit-row">
      <label>{label}</label>
      <input type="text" class="youtube-url" />
    </div>
    <div class="edit-row youtube">
      <label>{idLabel}</label>
      <input class="youtube-id validate" name="VideoId" type="text" data-validate-method="hasvalue" disabled="disabled" />
      <span class="icon-tick hidden"></span>
      <span class="icon-cross"></span>
    </div>
    <div class="youtube-embed">{videoLabel}</div>
    `;

    this.HtmlEditExampleTemplate = `
    <div class="default-form">
      <div class="no-preview form-row">
        <iframe src="https://www.youtube.com/embed/bgjjkKqWEzo" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope;" allowfullscreen></iframe>
      </div>
    </div>
    `;

    this.HtmlEditExampleTemplate = `

    `;

    this.HtmlRowTemplate = `
    <div class="form-row">
      <iframe class="video" src="https://www.youtube.com/embed/{0}" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope;" allowfullscreen></iframe>
    </div>
    `;

  }

};;
/***************************************************************************************************************************************************/
/***************************************************************************************************************************************************/
/***                                                             ***********************************************************************************/
/***    █████  ██████  ██████  ██████  ███████ ███████ ███████   ***********************************************************************************/
/***   ██   ██ ██   ██ ██   ██ ██   ██ ██      ██      ██        ***********************************************************************************/
/***   ███████ ██   ██ ██   ██ ██████  █████   ███████ ███████   ***********************************************************************************/
/***   ██   ██ ██   ██ ██   ██ ██   ██ ██           ██      ██   ***********************************************************************************/
/***   ██   ██ ██████  ██████  ██   ██ ███████ ███████ ███████   ***********************************************************************************/
/***                                                             ***********************************************************************************/
/***************************************************************************************************************************************************/
/************************************************************************************************************************** Source63 *** address ***/

if (!('Affinity2018' in window)) Affinity2018 = {};
if(!('Classes' in Affinity2018)) Affinity2018.Classes = {};
if(!('Plugins' in Affinity2018.Classes)) Affinity2018.Classes.Plugins = {};

if(!('Apps' in Affinity2018)) Affinity2018.Apps = {};
if(!('Plugins' in Affinity2018.Apps)) Affinity2018.Apps.Plugins = {};

Affinity2018.Classes.Plugins.Address = class
{
  options ()
  {
    Affinity2018.GoogleApikey = 'AIzaSyDX7vRyaNWfkZQfj0xx9Kthii3HBXk5DGc';
    this.Ready = false;
    this._waitingNodes = [];
  }

  constructor ()
  {
    this.options();
    [

      'Apply', 'Remove',

      '_apply',
      '_loadScript', '_scriptLoaded',

      '_templates'

    ].bindEach(this);
    this._templates();
    
    this.Ready = false;

    this._loadScript();
  }

  Apply (node)
  {
    var temp = [];
    if (Affinity2018.isDomElement(node) && node.tagName === 'input')
    {
      temp = [this._apply(node)];
    }
    else
    {
      document.querySelectorAll('.ui-has-address').forEach(function (node)
      {
        temp.push(this._apply(node));
      }.bind(this));
    }
    return {
      total: temp.length,
      widgets: temp
    }
  }

  Remove (node)
  {
    if (
      node.classList.contains('ui-address')
      && node.hasOwnProperty('widgets')
      && node.widgets.hasOwnProperty('Address')
    )
    {
      node.widgets.Address.Destroy();
    }
  }

  _apply (node)
  {
    return new Affinity2018.Classes.Plugins.AddressWidget(node);
  }

  _loadScript ()
  {
    if (!window.hasOwnProperty('_tempGoogleMapsCallback')) window._tempGoogleMapsCallback = function () { };
    this.scriptNode = document.createElement('script');
    this.scriptNode.onload = this._scriptLoaded;
    this.scriptNode.type = 'text/javascript';
    this.scriptNode.src = 'https:/' + '/maps.googleapis.com/maps/api/js?key=' + Affinity2018.GoogleApikey + '&libraries=places&callback=_tempGoogleMapsCallback';
    this.scriptNode.nonce = 'a9e3b03a6fd6ba6582578c3ad5393ee54b2b6acb==';
    document.head.appendChild(this.scriptNode);
    this._loadScriptFailTimer = setTimeout(function ()
    {
      this.Ready = true;
      console.warn('google maps api failed to load');
    }.bind(this), 10000)
  }
  _scriptLoaded ()
  {
    clearTimeout(this._loadScriptFailTimer);
    this.Ready = true;
  }

  /**/

  _templates ()
  {

  }

};

Affinity2018.Classes.Plugins.AddressWidget = class
{
  _options()
  {
    this.WidgetName = 'Address';

    var width = 7392; // kms from west of AU to east of NZ

    this.bounds = [ // lat, long, radius - circle around NZ and Australia (Goolgle Maps)
      -36.847605, 174.7485493,
      (width / 2) * 1000 // radius in meters
    ];

    this.formComponents = {
      Default: {
        subpremise: { type: 'long_name', formMap: 'subpremise' },
        street_number: { type: 'short_name', formMap: 'street_number' },
        route: { type: 'short_name', formMap: 'street' },
        sublocality_level_1: { type: 'long_name', formMap: 'suburb' },
        locality: { type: 'long_name', formMap: 'city' },
        administrative_area_level_1: { type: 'long_name', formMap: 'state' },
        country: { type: 'long_name', formMap: 'country' },
        postal_code: { type: 'long_name', formMap: 'postal_code' }
      },
      NZ: {
        subpremise: { type: 'long_name', formMap: 'subpremise' },
        street_number: { type: 'short_name', formMap: 'street_number' },
        route: { type: 'short_name', formMap: 'street' },
        sublocality_level_1: { type: 'long_name', formMap: 'suburb' },
        locality: { type: 'long_name', formMap: 'city' },
        administrative_area_level_1: { type: 'long_name', formMap: 'state' },
        country: { type: 'long_name', formMap: 'country' },
        postal_code: { type: 'long_name', formMap: 'postal_code' }
      },
      AU: {
        subpremise: { type: 'long_name', formMap: 'subpremise' },
        street_number: { type: 'long_name', formMap: 'street_number' },
        route: { type: 'short_name', formMap: 'street' },
        locality: { type: 'long_name', formMap: 'suburb' },
        administrative_area_level_2: { type: 'long_name', formMap: 'city' },
        administrative_area_level_1: { type: 'short_name', formMap: 'state' },
        country: { type: 'long_name', formMap: 'country' },
        postal_code: { type: 'long_name', formMap: 'postal_code' }
      },
      US: {
        subpremise: { type: 'long_name', formMap: 'subpremise' },
        street_number: { type: 'long_name', formMap: 'street_number' },
        route: { type: 'short_name', formMap: 'street' },
        neighborhood: { type: 'long_name', formMap: 'suburb' },
        locality: { type: 'long_name', formMap: 'city' },
        sublocality_level_1: { type: 'short_name', formMap: 'state' },
        country: { type: 'long_name', formMap: 'country' },
        postal_code: { type: 'long_name', formMap: 'postal_code' }
      },
      GB: {
        subpremise: { type: 'long_name', formMap: 'subpremise' },
        street_number: { type: 'long_name', formMap: 'street_number' },
        route: { type: 'short_name', formMap: 'street' },
        neighborhood: { type: 'long_name', formMap: 'suburb' },
        locality: { type: 'long_name', formMap: 'city' },
        administrative_area_level_1: { type: 'long_name', formMap: 'state' },
        country: { type: 'long_name', formMap: 'country' },
        postal_code: { type: 'long_name', formMap: 'postal_code' }
      }
    };

    this.ValidateLengths = false;
    this.ValidationErrors = [];

    this.IsRequired = false;

    this.StartAddressObject = null;

    this.Valid = false;
  }

  constructor(targetNode)
  {
    this._options();
    [

      'GetAddressData', 'GetAddress', 'SetAddress',

      'IsValid', 'IsLenghtsValid',

      '_waitUntilready', '_ready',
      '_userUpdateAddress',
      '_userUpdateSubAddress',
      '_validateLengths',
      '_checkAddress', '_getCountryFromPLace', '_fillAddress',
      '_templates',

      'Destroy'

    ].bindEach(this);
    this._templates();

    if (!Affinity2018.isDomElement(targetNode))
    {
      console.error('No valid element was passed to AddressWidget, dummy!');
      return;
    }

    this.Ready = false;

    targetNode.classList.remove('ui-has-address');
    targetNode.classList.add('ui-address', 'no-validate');

    this.ValidateLengths = targetNode.hasAttribute('data-validate') && targetNode.dataset.validate.toLowerCase().trim() === 'lengths';

    //

    this.lookupNode = targetNode;
    this.lookupNode.classList.add('ui-address-lookup');
    if (this.lookupNode.parentNode.classList.contains('form-row') && this.lookupNode.parentNode.classList.contains('required')) this.IsRequired = true;

    var startData = Affinity2018.getObjectFromDataset(this.lookupNode, 'address');
    if (Affinity2018.isObject(startData)) this.StartAddressObject = startData;

    if (!this.lookupNode.hasOwnProperty('widgets')) this.lookupNode.widgets = {};
    this.lookupNode.widgets.Address = this;

    this.AutocompleteListener = null;

    this.addressNode = document.createElement('div');
    this.addressNode.classList.add('ui-address-fields');
    this.addressNode.innerHTML = this.addressTemplate;
    this.lookupNode.parentNode.appendChild(this.addressNode);

    this.addressNode.querySelectorAll('input').forEach(function (node)
    {
      node.addEventListener('blur', this._userUpdateSubAddress);
    }.bind(this));

    this.iconNode = this.addressNode.querySelector('.address-indicator');

    var key, component;
    for (key in this.formComponents.Default)
    {
      component = this.formComponents.Default[key];
      if (this.addressNode.querySelector('.' + component.formMap))
      {
        this.addressNode.querySelector('.' + component.formMap).addEventListener('keyup', this._userUpdateAddress);
        this.addressNode.querySelector('.' + component.formMap).addEventListener('blur', this._userUpdateAddress);
      }
    }

    if (!Affinity2018.Apps.Plugins.Address.Ready) this._waitUntilready();
    else this._ready();

  }

  /**/

  IsValid()
  {
    this._checkAddress();
    return this.Valid;
  }

  IsLenghtsValid()
  {
    this._validateLengths();
    return this.Valid;
  }

  SetAddress(value)
  {
    if ($a.type(value) === 'object')
    {
      var strings = [];
      if (value.hasOwnProperty('Street') && $a.isString(value.Street)) strings.push(value.Street.trim());
      if (value.hasOwnProperty('Suburb') && $a.isString(value.Suburb)) strings.push(value.Suburb.trim());
      if (value.hasOwnProperty('City') && $a.isString(value.City)) strings.push(value.City.trim());
      if (value.hasOwnProperty('State') && $a.isString(value.State)) strings.push(value.State.trim());
      if (value.hasOwnProperty('Country') && $a.isString(value.Country)) strings.push(value.Country.trim());
      if (value.hasOwnProperty('Postcode') && $a.isString(value.Postcode)) strings.push(value.Postcode.trim());
      if (strings.join('').trim() === '')
      {
        this.lookupNode.value = '';
        this.addressNode.querySelector('input.street_number').value = '';
        this.addressNode.querySelector('input.street').value = '';
        this.addressNode.querySelector('input.suburb').value = '';
        this.addressNode.querySelector('input.city').value = '';
        this.addressNode.querySelector('input.state').value = '';
        this.addressNode.querySelector('input.country').value = '';
        this.addressNode.querySelector('input.postal_code').value = '';
        this.iconNode.classList.remove('valid', 'icon-blocked', 'icon-tick-round');
        this.iconNode.classList.add('invalid', 'icon-cross-round');
      }
      else
      {
        this.lookupNode.value = strings.join(',');
        google.maps.event.trigger(this.Autocomplete, 'place_changed');
        this._checkAddress();
      }
    }
    else if ($a.type(value) === 'string')
    {
      try
      {
        var obj = JSON.parse(value);
        if ($a.type(obj) === 'object')
        {
          this.SetAddress(obj);
          return;
        }
        this.lookupNode.value = value;
        google.maps.event.trigger(this.Autocomplete, 'place_changed');
        this._checkAddress();
      }
      catch (err)
      {
        this.addressNode.querySelector('input.street_number').value = '';
        this.addressNode.querySelector('input.street').value = '';
        this.addressNode.querySelector('input.suburb').value = '';
        this.addressNode.querySelector('input.city').value = '';
        this.addressNode.querySelector('input.state').value = '';
        this.addressNode.querySelector('input.country').value = '';
        this.addressNode.querySelector('input.postal_code').value = '';
        this.lookupNode.value = value;
        this.iconNode.classList.remove('valid', 'icon-blocked', 'icon-tick-round');
        this.iconNode.classList.add('invalid', 'icon-cross-round');
      }
    }
  }

  GetAddressData ()
  {
    return {
      street: (this.addressNode.querySelector('input.street_number').value + ' ' + this.addressNode.querySelector('input.street').value).trim(),
      suburb: this.addressNode.querySelector('input.suburb').value,
      city: this.addressNode.querySelector('input.city').value,
      state: this.addressNode.querySelector('input.state').value,
      country: this.addressNode.querySelector('input.country').value,
      postcode: this.addressNode.querySelector('input.postal_code').value
    }; 
  }

  GetAddress ()
  {
    var countryCode = this.addressNode.querySelector('.countrycode').value,
        formComponents = this.formComponents[countryCode] ? this.formComponents[countryCode] : this.formComponents.Default,
        fulladdress = '',
        link = '',
        key, component, value;
    if (formComponents)
    {
      for (key in formComponents)
      {
        component = formComponents[key];
        if(this.addressNode.querySelector('.' + component.formMap))
        {
          value = this.addressNode.querySelector('.' + component.formMap) ? this.addressNode.querySelector('.' + component.formMap).value.trim() : '';
          if (value !== '')
          {
            fulladdress += link + value;
            if (key === 'street_number') link = ' ';
            else link = ', ';
          }
        }
      }
      fulladdress = fulladdress.trim();
      return fulladdress;
    }
    return this.lookupNode.value.trim();
  }

  /**/

  _waitUntilready ()
  {
    clearTimeout(this._waitingTimer);
    if (!Affinity2018.Apps.Plugins.Address.Ready)
    {
      this._waitingTimer = setTimeout(this._waitUntilready, 100);
    }
    else
    {
      this._ready();
    }
  }

  _ready ()
  {
    clearTimeout(this._waitingTimer);

    var geolocation = new google.maps.LatLng(this.bounds[0], this.bounds[1]);

    var circle = new google.maps.Circle({
      center: geolocation,
      radius: this.bounds[2]
    });

    var pacCount = document.querySelectorAll('.pac-container').length;
    this.Autocomplete = new google.maps.places.Autocomplete(this.lookupNode);
    this.Autocomplete.setOptions({
      types: ['geocode'],
      fields: ['address_components'],
      bounds: circle.getBounds(),
      //strictBounds: true
      strictBounds: true
    });

    if (document.querySelectorAll('.pac-container').length === pacCount)
    {
      var pacContaimnerCheck = setInterval(function ()
      {
        var pacContainers = document.querySelectorAll('.pac-container');
        if (pacContainers.length > pacCount)
        {
          clearInterval(pacContaimnerCheck);
          this.PacContaner = pacContainers[pacContainers.length - 1];
          pacContaimnerCheck = null;
          pacCount = null;
          if (this.lookupNode.dataset.position === 'fixed')
          {
            this.PacContaner.classList.add('force-fixed');
          }
        }
      }.bind(this), 10);
    }

    /**/

    var checkExisitng = false;

    if(this.lookupNode.value.trim() !== '')
    {
      this._checkAddress();
      checkExisitng = true;
    }

    if (this.StartAddressObject !== null)
    {
      var addressStrings = [];
      if (this.StartAddressObject.hasOwnProperty('Street')) addressStrings.push(this.StartAddressObject.Street);
      if (this.StartAddressObject.hasOwnProperty('Suburb')) addressStrings.push(this.StartAddressObject.Suburb);
      if (this.StartAddressObject.hasOwnProperty('City')) addressStrings.push(this.StartAddressObject.City);
      if (this.StartAddressObject.hasOwnProperty('State')) addressStrings.push(this.StartAddressObject.State);
      if (this.StartAddressObject.hasOwnProperty('Country')) addressStrings.push(this.StartAddressObject.Country);
      if (this.StartAddressObject.hasOwnProperty('Postcode')) addressStrings.push(this.StartAddressObject.Postcode);
      addressStrings = addressStrings.filter(function (item) { return item !== undefined && item !== null && item.trim() !== ''; });
      if (addressStrings.length > 1)
      {
        this.lookupNode.value = addressStrings.join(', ');
        this._checkAddress();
        checkExisitng = true;
      }
    }

    if (!checkExisitng) this.AutocompleteListener = google.maps.event.addListener(this.Autocomplete, 'place_changed', this._checkAddress);

    /**/
    
    this.Ready = true;
    this.lookupNode.dispatchEvent(new CustomEvent('Ready'));
  }

  _userUpdateAddress ()
  {
    //clearTimeout(this._checkAddressThrottle);
    this.lookupNode.value = this.GetAddress();
    //this._checkAddressThrottle = setTimeout(this._checkAddress, 1000);
  }

  _userUpdateSubAddress()
  {
    //clearTimeout(this._checkAddressThrottle);
    //this._checkAddressThrottle = setTimeout(this._checkAddress, 1000);
    this.Valid = this._validateLengths();
  }

  _checkAddress ()
  {
    if (!window.hasOwnProperty('_tempGoogleMapsCallback')) window._tempGoogleMapsCallback = function () { };
    axios.get('https:/' + '/maps.googleapis.com/maps/api/geocode/json?address=' + this.lookupNode.value.trim() + '&key=' + Affinity2018.GoogleApikey + '&callback=_tempGoogleMapsCallback')
    .then(function (response)
    {
      if (
        response.hasOwnProperty('data')
        && response.data.hasOwnProperty('results')
      )
      {
        if (response.data.results.length > 0) this._fillAddress(response.data.results[0]);
        else this._fillAddress();
      }
    }.bind(this))
    .catch(function (error)
    {
      this._fillAddress();
    }.bind(this));
  }

  _getCountryFromPLace (place)
  {
    var component, i = 0;
    if(place && place.hasOwnProperty('address_components'))
    {
      for ( ; i < place.address_components.length; i++)
      {
        component = place.address_components[i];
        if (
          JSON.stringify(component.types).toLowerCase().contains('country')
        )
        {
          return component.short_name.toUpperCase();
        }
      }
    }
    return false;
  }


  _validateLengths () 
  {
    var valid = true;
    this.ValidationErrors = [];
    if (this.ValidateLengths)
    {
      var length = 0;
      var names = [];
      var values = [];
      var field = null;
      [
        { max: 38, fields: ['street_number', 'street'] },
        { max: 38, fields: ['suburb'] },
        { max: 25, fields: ['city'] },
        { max: 25, fields: ['state'] },
        { max: 20, fields: ['country'] },
        { max: 8, fields: ['postal_code'] }
      ].forEach(function (fieldInfo)
      {
        length = 0;
        names = [];
        values = [];
        for (var f = 0; f < fieldInfo.fields.length; f++)
        {
          field = this.addressNode.querySelector('.' + fieldInfo.fields[f]);
          names.push(field.placeholder);
          values.push(field.value.trim());
          length += field.value.trim().length;
        }
        length += (fieldInfo.fields.length - 1);
        if (length > fieldInfo.max)
        {
          valid = false;
          this.ValidationErrors.push([field, names.join(' and ') + ' (' + values.join(' ') + ') must not be more than ' + fieldInfo.max + ' characters long']);
          //this.ValidationErrors.push([field, names.join(' and ') + ' must not be more than ' + fieldInfo.max + ' characters long']);
          //this.ValidationErrors.push([field, '"' + values.join(' ') + '" must not be more than ' + fieldInfo.max + ' characters']);
        }
      }.bind(this));
    }
    this.Valid = valid;

    var formRow = $a.getParent(this.lookupNode, '.form-row');
    if (formRow)
    {
      if (this.Valid)
      {
        formRow.classList.remove('error', 'flash-error', 'inline-error');
      }
      else
      {
        formRow.classList.add('error', 'inline-error');
      }
    }

    this.lookupNode.dispatchEvent(new Event('LengthValidated'));
    return this.Valid;
  }

  _fillAddress (place)
  {
    place = place || this.Autocomplete.getPlace();
    if (place === null || place === undefined)
    {
      if (this.IsRequired) this.SetAddress('');
      return;
    }
    var countryCode = this._getCountryFromPLace(place),
        formComponents = this.formComponents[countryCode] ? this.formComponents[countryCode] : this.formComponents.Default,
        unitnum = false,
        streetnum = false,
        found = [],
        i = 0, j = 0,
        component, types, addresstype, val;
    for (component in formComponents)
    {
      if(this.addressNode.querySelector('.' + formComponents[component].formMap))
      {
        this.addressNode.querySelector('.' + formComponents[component].formMap).value = '';
        this.addressNode.querySelector('.' + formComponents[component].formMap).disabled = false;
      }
    }
    if (formComponents)
    {
      for ( ; i < place.address_components.length; i++)
      {
        component = place.address_components[i];
        types = component.types;
        if (component.types.contains('subpremise')) unitnum = component.long_name;
        if (component.types.contains('street_number')) streetnum = component.long_name;
        if (component.types.contains('country'))
        {
          types = ['country'];
          this.addressNode.querySelector('.countrycode').value = component.short_name.toUpperCase().trim();
        }
        found.push(component.long_name);
        found.push(component.short_name);
        for (j = 0; j < types.length; j++)
        {
          addresstype = types[j];
          if (formComponents[addresstype] && this.addressNode.querySelector('.' + formComponents[addresstype].formMap))
          {
            val = component[formComponents[addresstype].type];
            this.addressNode.querySelector('.' + formComponents[addresstype].formMap).value = val;
          }
        }
      }
      if (unitnum && streetnum)
      {
        this.addressNode.querySelector('.street_number').value = unitnum + '/' + streetnum;
      }
      else
      {
        if (streetnum)
        {
          var regex = RegExp(`[^\\s,]*(` + streetnum + `)[^\\s,]*`),
              foundstreetnum = regex.exec(this.lookupNode.value.trim());
          streetnum = foundstreetnum[0];
          if (streetnum) this.addressNode.querySelector('.street_number').value = streetnum;
        }
        if (!streetnum)
        {
          streetnum = this.lookupNode.value.trim().toLowerCase();
          for (i = 0; i < found.length; i++)
          {
            streetnum = streetnum.replace(found[i].toLowerCase(), '');
          }
          streetnum = streetnum.replace(/[^0-9\/\-\\]+/g,'').replace(/[\s]+/g,' ').trim();
          this.addressNode.querySelector('.street_number').value = streetnum;
        }
      }

      this.lookupNode.value = this.GetAddress();
      this.iconNode.classList.remove('invalid', 'icon-blocked', 'icon-cross-round');
      this.iconNode.classList.add('valid', 'icon-tick-round');

      this.Valid = this._validateLengths();
    }
    else
    {
      this.iconNode.classList.remove('valid', 'icon-blocked', 'icon-tick-round');
      this.iconNode.classList.add('invalid', 'icon-cross-round');
      this.Valid = false;
    }

    if (this.AutocompleteListener === null) this.AutocompleteListener = google.maps.event.addListener(this.Autocomplete, 'place_changed', this._checkAddress);

  }

  /**/

  Destroy ()
  {
    clearTimeout(this._waitingTimer);
    
    google.maps.event.removeListener(this.AutocompleteListener);
    google.maps.event.clearInstanceListeners(this.Autocomplete);
    this.PacContaner.innerHTML = '';
    this.PacContaner.parentNode.removeChild(this.PacContaner);

    this.lookupNode.classList.remove('ui-address');
    var key, component;
    for (key in this.formComponents.Default)
    {
      component = this.formComponents.Default[key];
      if(this.addressNode.querySelector('.' + component.formMap))
      {
        this.addressNode.querySelector('.' + component.formMap).removeEventListener('keyup', this._userUpdateAddress);
        this.addressNode.querySelector('.' + component.formMap).removeEventListener('blur', this._userUpdateAddress);
      }
    }
    this.addressNode.innerHTML = '';
    this.addressNode.parentNode.removeChild(this.addressNode);
    delete this.lookupNode.widgets["Address"];
    for (var key in this)
    {
      if (this.hasOwnProperty(key))
      {
        this[key] = null;
        delete this[key];
      }
    }
  }

  /**/

  _templates ()
  {
    this.addressTemplate = `
    <div class="address-indicator icon-blocked"></div>
    <div class="address-fields-row steet-fields">
      <input type="text" class="field street_number" placeholder="Number" />
      <input type="text" class="field street" placeholder="Street"/>
    </div>
    <div class="address-fields-row">
      <input type="text" class="field suburb" placeholder="Suburb"/>
    </div>
    <div class="address-fields-row">
      <input type="text" class="field city" placeholder="City" />
    </div>
    <div class="address-fields-row">
      <input type="text" class="field state" placeholder="State" />
    </div>
    <div class="address-fields-row country-fields">
      <input type="text" class="field country" placeholder="Country"/>
      <input type="text" class="field postal_code" placeholder="Postcode" />
    </div>
    <input type="hidden" class="countrycode" />
    `;
  }

};
;
/***************************************************************************************************************************************************/
/***************************************************************************************************************************************************/
/***                                                                                                             ***********************************/
/***    █████  ██    ██ ████████  ██████   ██████  ██████  ███    ███ ██████  ██      ███████ ████████ ███████   ***********************************/
/***   ██   ██ ██    ██    ██    ██    ██ ██      ██    ██ ████  ████ ██   ██ ██      ██         ██    ██        ***********************************/
/***   ███████ ██    ██    ██    ██    ██ ██      ██    ██ ██ ████ ██ ██████  ██      █████      ██    █████     ***********************************/
/***   ██   ██ ██    ██    ██    ██    ██ ██      ██    ██ ██  ██  ██ ██      ██      ██         ██    ██        ***********************************/
/***   ██   ██  ██████     ██     ██████   ██████  ██████  ██      ██ ██      ███████ ███████    ██    ███████   ***********************************/
/***                                                                                                             ***********************************/
/***************************************************************************************************************************************************/
/********************************************************************************************************************* Source63 *** autocomplete ***/

if(!('Affinity2018' in window)) Affinity2018 = {};
if(!('Classes' in Affinity2018)) Affinity2018.Classes = {};
if(!('Plugins' in Affinity2018.Classes)) Affinity2018.Classes.Plugins = {};

if(!('Apps' in Affinity2018)) Affinity2018.Apps = {};
if(!('Plugins' in Affinity2018.Apps)) Affinity2018.Apps.Plugins = {};

Affinity2018.Classes.Plugins.Autocompletes = class
{
  _options()
  {
    this.widgets = [];
  }

  constructor()
  {
    this._options();
    [

      'Apply', 'Remove',
      '_apply',
      '_templates'

    ].bindEach(this);
    this._templates();
    
    this.Ready = true;

    // if (Affinity2018.UiReady) this.Apply();
    // else window.addEventListener('MainInit', this.Apply);
  }

  Apply(node)
  {
    var temp = [];
    if (node !== undefined && node !== null)
    {
      temp = [this._apply(node)];
    }
    else
    {
      document.querySelectorAll('.ui-has-autocomplete').forEach(function (node)
      {
        temp.push(this._apply(node));
      }.bind(this));
    }
    return {
      total: temp.length,
      widgets: temp
    }
  }

  Remove(node)
  {
    if (
      node.classList.contains('ui-autocomplete')
      && node.hasOwnProperty('widgets')
      && node.widgets.hasOwnProperty('Autocomplete')
    )
    {
      node.widgets.Autocomplete.Destroy();
    }
  }

  HideAll(except)
  {
    var key, widget;
    for (key in this.widgets)
    {
      if (this.widgets.hasOwnProperty(key))
      {
        widget = this.widgets[key];
        if (typeof except === 'object' && except.hasOwnProperty('uuid'))
        {
          if (widget.uuid !== except.uuid) widget.hide();
        }
        else
        {
          widget.hide();
        }
      }
    }
    Affinity2018.unlockBodyScroll();
  }

  /**/

  _apply(node)
  {
    return new Affinity2018.Classes.Plugins.AutocompleteWidget(node);
  }

  /**/

  _templates()
  {

  }

};

Affinity2018.Classes.Plugins.AutocompleteWidget = class extends Affinity2018.ClassEvents
{

  _options()
  {
    this.WidgetName = 'Autocomplete';

    this.Ready = false;

    this.enabled = true;

    this.uuid = '';

    this.debug = false;

    this.webworkerpath = Affinity2018.WebWorkerPath + 'autocomplete.web.worker.js';

    this.selectmax = 2000;

    this.filter = null;

    this.keeplist = true;
    this.elementChangedOnly = false;
    this.stopInitialChange = false;

    this.fuzzyRunning = false;
    this.workerComplete = true;
    this.status = 'closed';
  }

  constructor(targetNode)
  {
    super();
    this._options();
    [

      '_init',

      'getValue', 'getDisplayValue', 'setValue', 'setFirst', 'filterList',
      'obscure', 'reveal', 'lock', 'release',
      'show', 'hide',
      'forceDefaultSelection', 'isDefaultSelected', 'defaultSelected',
      'refreshFromSelect',

      '_fuzzyWorkerComplete',
      '_updateOptions', '_processOptions', '_continueProcessOptions',

      '_fuzzySearch',  '_continueWithFuzzySearch',

      '_getTopVisibleElement', '_getBottomVisibleElement', '_scrollToTop', '_scrollToBottom',
      '_elementKeySetHeld', '_elementKeyUp',
      '_doFocus', '_doClick', '_doKeyDown', '_doKeyUp',
      '_elementDown', '_elementUp',

      '_itemClicked',
      '_restoreSelectedList', '_clearList',

      '_scrolled', '_scrollIntoView',
      '_position', '_setPosition',

      '_cleanDisplay',
      '_encodeValue',
      '_resetListEvents', '_setListEvents',
      '_fireWindowChangeEvent',
      '_escapeRegExp',
      '_stopEvents',

      '_clearShowHideEvents', '_windowClicked',
      '_show', '_hide',
      '_reset',

      'Destroy',

      '_templates'

    ].bindEach(this);
    this._templates();

    if (!Affinity2018.isDomElement(targetNode))
    {
      console.error('No valid element was passed to AutocompleteWidget, dummy!');
      return;
    }

    if (targetNode.classList.contains('ui-has-lookup') || targetNode.classList.contains('prevent-autocomplete'))
    {
      // console.info('This is a lookup, so AutocompleteWidget will be created when SelectLookupWidget is loaded');
      return;
    }

    this.targetNode = targetNode;

    this.uuid = this.targetNode.id ? this.targetNode.id : Affinity2018.uuid();
    this.killid = 'ac-destroy-' + this.uuid;

    if (Affinity2018.hasOwnProperty('Autocompletes') && !Affinity2018.Autocompletes.widgets.hasOwnProperty(this.uuid))
    {
      Affinity2018.Autocompletes.widgets[this.uuid] = this;
    }

    this.targetNode.classList.remove('ui-has-autocomplete');
    this.targetNode.classList.add('ui-autocomplete');
    this.targetNode.tabindex = 5000;
    this.targetNode.id = this.uuid;

    if (!this.targetNode.hasOwnProperty('widgets')) this.targetNode.widgets = {};
    this.targetNode.widgets.Autocomplete = this;

    this.autocompleteNode = document.createElement('div');
    this.autocompleteNode.classList.add('ui-autocomplete-container');
    this.autocompleteNode.innerHTML = this.autocompleteTemplate;

    this.RowNode = this.targetNode.parentNode.parentNode;

    if (this.targetNode.parentNode.classList.contains('select'))
    {
      if (this.RowNode.querySelector('label'))
      {
        if (this.RowNode.querySelector('label').nextSibling)
        {
          if (this.RowNode.querySelector('.help') || this.RowNode.querySelector('.required'))
          {
            this.RowNode.appendChild(this.autocompleteNode);
          }
          else
          {
            this.RowNode.insertBefore(this.autocompleteNode, this.RowNode.querySelector('label').nextSibling);
          }
        }
        else
        {
          this.RowNode.appendChild(this.autocompleteNode);
        }
      }
      else
      {
        this.RowNode.insertBefore(this.autocompleteNode, this.targetNode.parentNode.nextSibling);
      }
    }
    else
    {
      //this.targetNode.parentNode.insertBefore(this.autocompleteNode, this.targetNode.nextSibling);
      this.RowNode.appendChild(this.autocompleteNode);
    }

    this.displayNode = this.autocompleteNode.querySelector('input');
    this.iconNode = this.autocompleteNode.querySelector('.ui-ac-display-icon');
    this.listNode = this.autocompleteNode.querySelector('ul');

    if (this.targetNode.parentNode.classList.contains('select')) this.targetNode.parentNode.classList.add('hidden');
    else this.targetNode.classList.add('hidden');

    this.useWebWorkers = Affinity2018.SupportsWebWorkers;
    if (this.useWebWorkers)
    {
      this.fuzzyWorker = new Worker(this.webworkerpath);
      this.fuzzyWorker.onmessage = this._fuzzyWorkerComplete;
    }

    this.searchMode = Affinity2018.IsMobile ? true : false;

    this.center = false;
    if (this.targetNode.classList.contains('ui-autocomplete-center'))
    {
      this.targetNode.classList.remove('ui-autocomplete-center');
      this.center = true;
    }

    this.autowidth = false;
    if (this.targetNode.classList.contains('ui-autocomplete-autowidth'))
    {
      this.targetNode.classList.remove('ui-autocomplete-autowidth');
      this.autowidth = true;
    }

    this.forceTop = false;
    if (this.targetNode.classList.contains('ui-autocomplete-force-top'))
    {
      this.targetNode.classList.remove('ui-autocomplete-force-top');
      this.forceTop = true;
    }

    this.forceBottom = false;
    if (this.targetNode.classList.contains('ui-autocomplete-force-bottom'))
    {
      this.targetNode.classList.remove('ui-autocomplete-force-bottom');
      this.forceBottom = true;
      this.forceTop = false;
    }

    this.bestguess = null;

    this.fieldType = this.targetNode.id ? this.targetNode.id.substring(this.targetNode.id.lastIndexOf('-') + 1) : 'none';

    if (this.targetNode.parentNode && this.targetNode.parentNode.classList.contains('form-row'))
    {
      this.targetNode.parentNode.classList.add('autocomplete');
    }

    /**/

    if (this.debug)
    {
      console.log('! START Debug Enabled !');
      console.log('! Autocomplete ' + this.uuid + ' !');
      console.log(this.targetNode);
      console.log(this.listNode);
      console.log(this.displayNode);
      console.log('! END Debug Enabled !');
    }

    this._init();

  }

  _init()
  {

    if (Affinity2018.IsMobile)
    {
      window.addEventListener('mobileback', function () { this.hide(); }.bind(this));
    }

    this.displayNode.addEventListener('focus', this._doFocus);

    document.addEventListener('scroll', this._scrolled, Affinity2018.PassiveEventProp);
    document.addEventListener('resize', this._position, Affinity2018.PassiveEventProp);

    //this.autocompleteNode.addEventListener('mouseenter', this._mouseEnter);
    //this.autocompleteNode.addEventListener('mouseleave', this._mouseLeave);

    this.listNode.removeEventListener('mouseenter', this._mouseEnter);
    this.listNode.removeEventListener('mouseleave', this._mouseLeave);
    this.listNode.addEventListener('mouseenter', this._mouseEnter);
    this.listNode.addEventListener('mouseleave', this._mouseLeave);

    this._processOptions();

  }

  /**/

  getValue()
  {
    return this.targetNode.value;
  }

  setValue(value, fireEvents)
  {
    if (!this.enabled) return false;
    fireEvents = typeof fireEvents === 'boolean' ? fireEvents : true;
    value = this._cleaValue(value);
    if (this.listNode && Affinity2018.isDomElement(this.listNode))
    {
      if (this.searchMode) this.searchMode = false; //TODO: Add search mode later

      if (this.searchMode)
      {
        // TODO: Support massive / search mode
      }
      else
      {
        if (
          !value
          || value === ''
          || this._fuzzySearchItems === undefined
          || this._fuzzySearchItems === null
          || this._fuzzySearchItems === false
        )
        {
          if (this.listNode.querySelector('li'))
          {
            if (this.listNode.querySelector('li[data-value="' + value + '"]'))
            {
              this._itemClicked({ target: this.listNode.querySelector('li[data-value="' + value + '"]'), fireEvents: fireEvents });
              return this.listNode.querySelector('li[data-value="' + value + '"]').dataset.value;
            }
            this._itemClicked({ target: this.listNode.querySelector('li'), fireEvents: fireEvents })
          }
          return this.listNode.querySelector('li').dataset.value;
        }
        var node = false;
        // TODO: Web Worker here ?
        for (var i = 0; i < this._fuzzySearchItems.length; i++)
        {
          if (this._fuzzySearchItems[i].value + '' === value + '')
          {
            node = document.querySelector('#' + this._fuzzySearchItems[i].id);
            break;
          }
        }
        if (node)
        {
          this._itemClicked({ target: node, fireEvents: fireEvents });
          return node.dataset.value;
        }
        else
        {
          this._itemClicked({ target: this.listNode.querySelector('li'), fireEvents: fireEvents });
          return this.listNode.querySelector('li').dataset.value;
        }
      }
    }
  }

  setFirst(match, fireEvents)
  {
    var matches = this.listNode.querySelectorAll('li[data-display*="' + match + '"]');
    if (matches.length > 0) return this.setValue(matches[0].dataset.value, fireEvents);
    matches = this.listNode.querySelectorAll('li[data-value*="' + match + '"]');
    if (matches.length > 0) return this.setValue(matches[0].dataset.value, fireEvents);
    return null;
  }

  getDisplayValue()
  {
    return this._cleanDisplay(this.displayNode.value);
  }

  filterList(match, defaultValue)
  {
    if (defaultValue === undefined) defaultValue = this.targetNode.dataset.defaultValue || this.targetNode.value;
    //if (defaultValue.contains(',')) defaultValue = defaultValue.split(',')[0];
    var encodedDefaultValue = this._encodeValue(defaultValue);
    this.filter = match;
    this.workerComplete = false;
    this.fuzzyWorker.postMessage({
      job: 'getList',
      html: this.targetNode.innerHTML,
      defaultValue: defaultValue,
      encodedDefaultValue: encodedDefaultValue,
      filter: this.filter,
      uuid: this.uuid
    });
  }

  obscure()
  {
    this.enabled = false;
    this.hide();
    if (this.iconElement) this.iconElement.classList.add('hidden');
    if (this.displayNode) this.displayNode.classList.add('hidden');
  }

  reveal()
  {
    this.enabled = true;
    if (this.iconElement) this.iconElement.classList.remove('hidden');
    if (this.displayNode) this.displayNode.classList.remove('hidden');
  }

  lock()
  {
    this.autocompleteNode.querySelector('input').setAttribute('disabled', 'disabled');
    if (this.iconNode) this.iconNode.classList.add('working');
  }

  release()
  {
    this.autocompleteNode.querySelector('input').removeAttribute('disabled');
    if (this.iconNode) this.iconNode.classList.remove('working');
  }

  show(calledFrom)
  {
    this._show(calledFrom);
  }

  hide(calledFrom)
  {
    this._hide(calledFrom);
  }

  forceDefaultSelection()
  {
    if (
      this.defaultValue
      && this.targetNode
      && this.displayNode
    )
    {
      var html = this._cleanDisplay(this.defaultValue.innerText);
      if (this.listNode.querySelector('li.selected')) this.listNode.querySelector('li.selected').classList.remove('selected');
      this.defaultValue.classList.add('selected');
      this.displayNode.value = html;
      this.targetNode.selectedIndex = this.defaultValue.dataset.index;
      this.targetNode.value = this.defaultValue.dataset.value;
    }
  }

  isDefaultSelected()
  {
    if (this.defaultValue)
    {
      if (this.targetNode.value !== this.defaultValue.dataset.value) return false;
      if (this.displayNode)
      {
        if (this.displayNode.value !== this.defaultValue.innerText) return false;
      }
    }
    if (!this.defaultValue || !this.displayNode) return false;
    return true;
  }

  defaultSelected(ev)
  {
    if (!this.enabled) return false;
    var node = ev && 'target' in ev ? ev.target : false, html;
    if (node)
    {
      html = this._cleanDisplay(node.innerText);
      if (this.listNode.querySelector('li.selected')) this.listNode.querySelector('li.selected').classList.remove('selected');
      node.classList.add('selected');
      this.displayNode.value = html;
      this.targetNode.selectedIndex = node.dataset.index;
      this.targetNode.value = node.dataset.value;
      return true;
    }
    return false;
  }

  refreshFromSelect()
  {
    this.displayNode.value = '';
    this._updateOptions();
  }

  /**/

  _fuzzyWorkerComplete(returnedData)
  {
    var workerData = returnedData.data;

    if (this.debug)
    {
      console.log('! Autocomplete fuzzyWorkerComplete: ');
      console.log('! \t returned data : ', returnedData);
      console.log('! \t job           : ', workerData.job);
    }

    switch (workerData.job)
    {

      case 'getOptions':

        if (this.searchMode)
        {
          // TODO: Support search mode
        }
        this.workerComplete = true;

      break;

      case 'getList':

        if (!this.enabled) return false;

        var eventsCleared = this._resetListEvents(),
            defaultSelected = false,
            eventsSet = false;

        if (this.listNode && Affinity2018.isNode(this.listNode))
        {

          this.listNode.innerHTML = workerData.html;
          this.fuzzySearchItemsTotal = workerData.data.total;
          this.fuzzySearchItems = workerData.data.items;
          this.items = this.listNode.querySelectorAll('li');

          this._position(0, 'worker getList');

          eventsSet = this._setListEvents();

          if (workerData.data.defaultID)
          {
            defaultSelected = false;
            if (this.listNode && $a.isNode(this.listNode) && this.listNode.parentNode && this.listNode.querySelector('#' + workerData.data.defaultID))
            {
              defaultSelected = this.listNode.querySelector('#' + workerData.data.defaultID);
            }
            if (defaultSelected)
            {
              this.defaultValue = defaultSelected;
              this.lastSelected = defaultSelected;
              this.defaultChangeValue = defaultSelected.dataset.value;
            }
          }

          this._continueProcessOptions(defaultSelected, true);
        }
        else this.workerComplete = true;

        break;

      case 'getSelectedList':

        var eventsCleared = this._resetListEvents();

        this.listNode.innerHTML = workerData.html;
        this.fuzzySearchItemsTotal = workerData.data.items.length;
        this.fuzzySearchItems = workerData.data.items;

        this.items = this.listNode.querySelectorAll('li');

        this._setListEvents();

        this._position(0, 'worker getSelectedList');
        
        this.workerComplete = true;
        break;

      case 'resetList':

        var selected = false,
            eventsSet = false;

        this.listNode.innerHTML = workerData.html;
        this._position(0, 'worker resetList');

        this.displayNode.value = '';
        this.listNode.scrollTo(0, 0);
        this.targetNode.selectedIndex = 0;

        if (workerData.select)
        {
          selected = this.listNode.querySelector('#' + workerData.select);
          if (selected)
          {
            this.lastSelected = selected;
            this.defaultValue = selected;
            this.bestguess = selected;
            this.targetNode.value = selected.value;
            this.targetNode.selectedIndex = parseInt(selected.dataset.index);
            this.listNode.scrollTo(0, Affinity2018.getOffsetRect(selected).y - 5);
          }
        }

        this.defaultChangeValue = this.defaultValue.value;

        this.fuzzySearchItemsTotal = workerData.data.total;
        this.fuzzySearchItems = workerData.data.items;

        this.items = this.listNode.querySelectorAll('li');
        eventsSet = this._setListEvents();

        this._fireWindowChangeEvent('autocomplete _fuzzyWorkerComplete resetList');
        
        this.workerComplete = true;
        break;

      case 'doSearch':

        if (!this.enabled) return false;

        var returnData = [],
            eventsCleared = this._resetListEvents(),
            bestguess = false,
            eventsSet = false;

        this.listNode.innerHTML = workerData.html;
        this._position(0, 'worker doSearch');

        if (workerData.bestguess)
        {
          bestguess = document.querySelector('#' + workerData.bestguess);
          if (bestguess) this.bestguess = bestguess;
        }

        this.items = this.listNode.querySelectorAll('li');
        eventsSet = this._setListEvents();
        
        this.workerComplete = true;
        break;

      case 'terminate':

        this.fuzzyWorker.onmessage = null;
        this.fuzzyWorker.terminate();
        this.fuzzyWorker = false;
        this.workerComplete = true;
        break;

      default:
        break;
    }

    if (this.iconNode) this.iconNode.classList.remove('working');

  }

  _updateOptions()
  {
    this._clearList();
    this._processOptions();
  }

  _processOptions()
  {

    if (!Affinity2018.isDomElement(this.targetNode) || !this.targetNode) return false;

    var continueBool = false,
        optionNodes = this.targetNode.querySelectorAll('option'),
        defaultSelected = false,
        html, value, li;

    if (
      optionNodes.length > this.selectmax
      || this.targetNode.classList.contains('massive')
    )
    {
      this.searchMode = true;
    }

    if (this.searchMode)
    {
      // TODO: Support search mode
    }

    if (navigator.userAgent.toLowerCase().indexOf('firefox') > -1)
    {
      this.displayNode.setAttribute('autocomplete', 'off');
    }

    if (this.targetNode.classList.contains('has-message-icon'))
    {
      this.displayNode.classList.add('has-message-icon');
    }

    this.targetNode.dataset.displayId = this.uuid + '-Display';

    if (this.autowidth) this.listNode.classList.add('auto-width');

    if (
      this.displayNode.classList.contains('width-auto')
      || this.displayNode.classList.contains('width-full')
    )
    {
      this.listNode.styles.width = Affinity2018.getBoundingClientRect().width + 'px';
    }

    this._resetListEvents();
    this.listNode.innerHTML = '';
    this.listNode.classList.remove('show');

    this.items = [];
    this.fuzzySearchItems = [];

    this.defaultValue = null;

    if (this.useWebWorkers)
    {

      if (this.iconNode) this.iconNode.classList.add('working');

      var defaultValue = this.targetNode.dataset.defaultValue || this.targetNode.value;
      //if (defaultValue.contains(',')) defaultValue = defaultValue.split(',')[0];
      var encodedDefaultValue = this._encodeValue(defaultValue);

      this.workerComplete = false;
      this.fuzzyWorker.postMessage({
        job: 'getList',
        html: this.targetNode.innerHTML,
        defaultValue: defaultValue,
        encodedDefaultValue: encodedDefaultValue,
        filter: this.filter,
        uuid: this.uuid
      });

      continueBool = true;

    }
    else
    {

      this.targetNode.querySelectorAll('option').forEach(function (optionNode, index)
      {
        html = this._cleanDisplay(optionNode.innerHTML.replace(/\,/g, ' - '));
        value = optionNode.value;
        li = document.createElement('li');
        li.innerHTML = html;
        li.dataset.dataValue = value;
        li.dataset.value = value;
        li.dataset.index = index;
        li.className = 'visible';
        li.id = this.uuid + '-li-' + index;
        if (optionNode.dataset.filterCss) optionNode.dataset.filterCss.split(' ').forEach(function (filterCss) { li.classList.add(filterCss); })
        li.addEventListener('click', this._itemClicked);
        this.listNode.appendChild(li);
        if (optionNode.selected)
        {
          defaultSelected = li;
          this.defaultValue = li;
          li.classList.add('selected');
          this.lastSelected = li;
          this.defaultChangeValue = optionNode.value;
        }
        this.fuzzySearchItems.push({
          id: this.uuid + '-li-' + index,
          html: html,
          klass: 'visible',
          searchstr: html,
          value: optionNode.value
        });
      }.bind(this));

      continueBool = this._continueProcessOptions(defaultSelected);
    }

    return continueBool;
  }

  _continueProcessOptions(defaultSelected, fromWorker)
  {
    fromWorker = fromWorker === undefined ? false : fromWorker;
    // TODO: Implement Search Mode
    this.searchMode = false;

    if (!this.searchMode)
    {

      if (!this.useWebWorkers) this.fuzzySearchItemsTotal = this.fuzzySearchItems.length;
      if (this.iconElement) this.iconElement.classList.remove('working');

      this.fuzzySearchLargeDataDelay = 100;
      if (this.fuzzySearchItemsTotal >= 2000 && this.fuzzySearchItemsTotal < 3000) this.fuzzySearchLargeDataDelay = 250;
      if (this.fuzzySearchItemsTotal >= 3000 && this.fuzzySearchItemsTotal < 5000) this.fuzzySearchLargeDataDelay = 500;
      if (this.fuzzySearchItemsTotal >= 5000) this.fuzzySearchLargeDataDelay = 1000;
      if (Affinity2018.isie && Affinity2018.ieversion === 11) this.fuzzySearchLargeDataDelay = 1001;

      if (this.defaultValue === null) this.defaultValue = this.listNode.querySelector('li');

      this.keyHeldCheck = false;
      this.keyHeld = false;
      this.keyHeldDelay = null;

      this.displayNode.addEventListener('keydown', this._doKeyDown);
      this.displayNode.addEventListener('keyup', this._doKeyUp);

      if (defaultSelected !== null && defaultSelected !== false)
      {
        this.defaultSelected({ target: defaultSelected });
      }
      else
      {
        if (this.listNode.querySelector('li[data-value="' + this.targetNode.value + '"]'))
        {
          this.defaultSelected({ target: this.listNode.querySelector('li[data-value="' + this.targetNode.value + '"]') });
          this.defaultChangeValue = this.targetNode.value;
        }
        else
        {
          this.defaultSelected({ target: this.listNode.querySelector('li') });
        }
      }

      // TODO: NOT where this shoudl live, but hey, it will do for now ..
      var formRowNode = null;
      if (this.targetNode.parentNode && this.targetNode.parentNode.classList.contains('form-row'))
      {
        formRowNode = this.targetNode.parentNode;
        if (formRowNode && formRowNode.querySelector('.start-link'))
        {
          var startLinkNode = formRowNode.querySelector('.start-link');
          if (startLinkNode)
          {
            formRowNode.appendChild(startLinkNode);
          }
        }
      }

      this.dispatchEvent(new CustomEvent('complete', { detail: { dispatchObject: this }}));
      this.dispatchEvent(new CustomEvent('ready'));
      this.targetNode.dispatchEvent(new Event('ready'));

      if (this.targetNode.value !== this.defaultChangeValue)
      {
        this.defaultChangeValue = this.targetNode.value;
        this.changed = true;
      }
      else
      {
        this.changed = false;
      }

      if (this.stopInitialChange) this.targetNode.dispatchEvent(new Event('change'));

      // this.checkExistsPeriodical = this.checkExists.periodical(1000, this);

    }

    // if (this.displayNode) this.valuetracker.addElement(this.displayNode);

    //console.log('Processed options for ', this.fieldType, this.uuid);

    this.Ready = true;

    if (fromWorker)
    {
      this.targetNode.dispatchEvent(new Event('workerComplete'));
      this.workerComplete = true;
    }

    this.targetNode.dispatchEvent(new Event('autocompleteReady'));

    return true;
  }

  /**/

  _fuzzySearch(searchData, searchKey, searchFor, target)
  {
    if (!this.enabled) return false;
    if (this.fuzzyRunning) return;
    this.fuzzyRunning = true;

    var returnData = [], workerData;

    if (this.useWebWorkers)
    {

      this.fuzzyDoSearchData = {
        searchData: searchData,
        target: target
      };

      if (this.iconElement) this.iconElement.classList.add('working');

      if (this.debug)
      {
        console.log('! Autocomplete _fuzzySearch: ');
        console.log('! \t target      : ', target);
        console.log('! \t search key  : ', searchKey);
        console.log('! \t search for  : ', searchFor);
        console.log('! \t search data : ', searchData);
      }
      
      this.workerComplete = false;
      this.fuzzyWorker.postMessage({
        job: 'doSearch',
        data: searchData,
        searchKey: searchKey,
        searchFor: searchFor,
        perfDelay: this.fuzzySearchLargeDataDelay,
        filter: this.filter
      });

    }
    else
    {

      var results = [],
          data, node,
          score, wordScore, wordScores, searchIn, isMatch, hasMatch, totalWordsToSearch, totalWordMatch,
          searchForWords, searchInWords, soundexFor, soundexIn, soundexScore,
          html;

      if (!isNaN(searchFor))
      {

        searchData.forEach(function (dataItem, index)
        {
          node = document.querySelector('#' + dataItem.id);
          if (dataItem[searchKey].contains(searchFor))
          {
            wordScore = dataItem[searchKey].split(searchFor).length - 1 || 0;
            searchInWords = dataItem[searchKey].split(' ');
            results.push({
              originalIndex: index,
              score: wordScore,
              wordScore: wordScore / searchInWords
            });
            node.classList.remove('hidden');
            node.classList.add('visible');
          }
          else
          {
            node.classList.remove('visible');
            node.classList.add('hidden');
          }
        }.bind(this));

      }
      else
      {

        searchData.forEach(function (dataItem, index)
        {
          node = document.querySelector('#' + dataItem.id);
          score = 0;
          wordScores = [];
          searchFor = searchFor.toLowerCase();
          searchIn = dataItem[searchKey].toLowerCase().trim();
          isMatch = searchFor === searchIn;
          hasMatch = searchIn.indexOf(searchFor) > -1 ? true : false;

          searchForWords = searchFor.split(' ');
          totalWordsToSearch = searchForWords.length;

          if (isMatch)
          {
            totalWordMatch = totalWordsToSearch;
            wordScore = 99999;
            score = 99999;
            node.classList.remove('hidden');
            node.classList.add('visible');
            if (!this.fuzzySearchLargeDataDelay)
            {
              html = '<strong>' + this._cleanDisplay(node.innerText) + '</strong>';
              node.innerHTML = html;
              node.classList.remove('hidden');
              node.classList.add('visible');
            }
          }
          else if (!isMatch && hasMatch)
          {
            totalWordMatch = searchIn.split(searchFor).length - 1 || 0;
            wordScore = totalWordMatch;
            score = wordScore + 100;
            if (this.fuzzySearchLargeDataDelay)
            {
              node.classList.remove('hidden');
              node.classList.add('visible');
            }
            else
            {
              html = this._cleanDisplay(node.innerText);
              html = html.replace(new RegExp('(' + this._escapeRegExp(searchFor) + ')', 'gi'), "<strong>$1</strong>");
              node.innerHTML = html;
              node.classList.remove('hidden');
              node.classList.add('visible');
            }
          }
          else
          {

            if (this.fuzzySearchLargeDataDelay < 1001)
            {
              searchInWords = searchIn.split(' ');
              totalWordMatch = 0;
              searchForWords.forEach(function (searchForWord)
              {
                searchInWords.forEach(function (searchInWord)
                {
                  if (searchForWord !== ' ' && searchForWord !== '')
                  {
                    soundexFor = searchForWord.soundex();
                    soundexIn = searchInWord.soundex();
                    soundexScore = soundexFor.distance(soundexIn);
                    if (soundexScore == 0) totalWordMatch += 1;
                  }
                });
              });
              score = totalWordMatch;
              wordScore = Math.round((totalWordMatch / totalWordsToSearch) * 100) / 100 || 0;
              if (score >= 0)
              {
                if (this.fuzzySearchLargeDataDelay)
                {
                  node.classList.remove('hidden');
                  node.classList.add('visible');
                }
                else
                {
                  html = this._cleanDisplay(node.innerText);
                  node.innerHTML = html;
                  node.classList.remove('hidden');
                  node.classList.add('visible');
                }
              }
            }
          }
          data = {
            originalIndex: index,
            score: score,
            wordScore: wordScore
          };
          results.push(data);
        }.bind(this));
      }

      results.sort(function (a, b)
      {
        if (parseFloat(a.score) === parseFloat(b.score))  return parseFloat(a.wordScore) < parseFloat(b.wordScore) ? 1 : -1;
        return parseFloat(a.score) < parseFloat(b.score) ? 1 : -1;
      });

      var gotone = false, dataItem;
      results.forEach(function (result)
      {
        dataItem = searchData[result.originalIndex];
        dataItem.score = result.score;
        dataItem.wordScore = result.wordScore;
        returnData.push(dataItem);
        node = document.querySelector('#' + dataItem.id);
        if (result.score > 0)
        {
          target.appendChild(node);
          gotone = true;
        }
        else
        {
          node.classList.remove('visible');
          node.classList.add('hidden');
        }
      });

      if (
        !gotone
        && results.length > 0
        && results[0].originalIndex
        && searchData[results[0].originalIndex]
        && searchData[results[0].originalIndex].id
      )
      {
        this.bestguess = document.querySelector('#' + searchData[results[0].originalIndex].id);
      }
    }

    this.fuzzyRunning = false;

    return returnData;
  }

  _continueWithFuzzySearch()
  {
    var result = this._fuzzySearch(
      this.fuzzySearchItems,
      'searchstr',
      this._cleanDisplay(this.displayNode.value.toLowerCase()),
      this.listNode
     );
    this._position(null, 'continueWithFuzzySearch');
  }

  /**/

  _getTopVisibleElement()
  {
    var items = this.listNode.querySelectorAll('li.visible'),
        i, li, pos;
    for (i = 0 ; i < items.length; i++)
    {
      li = items[i];
      pos = Affinity2018.getOffsetRect(li);
      if (pos.y >= 0) return li;
    }
  }

  _getBottomVisibleElement()
  {
    var height = this.listNode.getBoundingClientRect().height,
        items = this.listNode.querySelectorAll('li.visible'),
        i, li, pos;
    for (i = items.length - 1; i > 0; i--)
    {
      li = items[i];
      pos = Affinity2018.getOffsetRect(li);
      if (pos.y <= height) return li;
    }
  }

  _scrollToTop(node)
  {
    if (Affinity2018.isDomElement(node))
    {
      var scroll = this.listNode.scrollTop,
          pos = Affinity2018.getOffsetRect(node),
          size = node.getBoundingClientRect().height;
      if (pos.y < 0) this.listNode.scrollTo(0, (scroll + pos.y) - size + 10);
    }
  }

  _scrollToBottom(node)
  {
    if (Affinity2018.isDomElement(node))
    {
      var scroll = this.listNode.scrollTop,
          height = this.listNode.getBoundingClientRect().height,
          pos = Affinity2018.getOffsetRect(node),
          size = node.getBoundingClientRect().height;
      if (pos.y > (height - size)) this.listNode.scrollTo(0, scroll + (pos.y - height) + size + 5);
    }

  }

  _elementKeySetHeld(ev)
  {
    this.keyHeld = true;
    this._elementKeyUp(ev);
  }

  _elementKeyUp(ev)
  {
    if (!this.enabled) return false;

    clearTimeout(this._elementKeyUpTimer);

    var compstr = this._cleanDisplay(this.displayNode.value.toLowerCase()),
        selected = this.listNode.querySelector('li.visible.selected') || false;

    if (ev.keyCode === 13 && selected) // 13 -> enter
    {
      this._stopEvents(ev);
      this._itemClicked({ target: selected });
      return;
    }

    if (ev.keyCode === 40 || ev.keyCode === 38) // 40 -> down, 38 -> up
    {
      if (this.status == 'closed')
      {
        this._position(null, 'key up / down');
        this.show('key up / down');
      }
      this._stopEvents(ev);
      if (ev.keyCode === 40) this._elementDown(ev); // down
      if (ev.keyCode === 38) this._elementUp(ev); // up
      if (this.keyHeld) this._elementKeyUpTimer = setTimeout(this._elementKeyUp, 50, ev);
      return;
    }

    if (
      (ev.keyCode === 8) || // backspace
      (ev.keyCode === 16) || // shift
      (ev.keyCode === 32) || // delete
      (ev.keyCode === 46) || // space
      (ev.keyCode >= 48 && ev.keyCode <= 57) || // a-z upper
      (ev.keyCode >= 65 && ev.keyCode <= 90) || // a-z lower
      (ev.keyCode >= 96 && ev.keyCode <= 105) // num pad
    ) {
      if (this.status == 'closed')
      {
        this._position(null, 'typing');
        this.show('typing');
      }
      /* search when key pressed is space, backspace, delete, a-z, 0-9 or num pad 0-9 */
    }
    else
    {
      return;
    }

    if (this.debug)
    {
      console.log('! Autocomplete keyup: ');
      console.log('! \t key code : ', ev.code);
      console.log('! \t compare  : ', compstr);
    }

    if (compstr === '')
    {
      if (this.useWebWorkers)
      {
        this.workerComplete = false;
        this.fuzzyWorker.postMessage({ job: 'resetList' });
      }
      else
      {
        this.items.forEach(function (node, index)
        {
          this.listNode.appendChild(node);
          node.innerHTML = this._cleanDisplay(li.innerText);
          node.classList.remove('selected', 'hidden');
          node.classList.add('visible');
          if (node.innerHTML.trim() === '')
          {
            node.classList.add('selected');
            if (selected !== node) this.changed = true;
            this.lastSelected = node;
            this.defaultValue = node;
            this.targetNode.value = '';
            this.targetNode.selectedIndex = 0;
            this.listNode.scrollTo(0, 0);
            this.defaultChangeValue = this.targetNode.querySelector('option').value;
          }
        }.bind(this));
        this.bestguess = this.defaultValue;
        this._fireWindowChangeEvent('autocomplete _elementKeyUp');
      }
      return;
    }

    /* filter search */

    if (this.listNode.querySelector('li.selected')) this.listNode.querySelector('li.selected').classList.remove('selected');
    this.listNode.scrollTo(0, 0);

    /* FUZZY SEARCH */

    if (selected) this.lastSelected = selected;

    if (this.fuzzySearchLargeDataDelay)
    {
      clearTimeout(this._fuzzySearchDelay);
      this._fuzzySearchDelay = setTimeout(this._continueWithFuzzySearch, this.fuzzySearchLargeDataDelay);
    }
    else
    {
      this._continueWithFuzzySearch();
    }

    this._position(null, 'element up');

  }

  /**/

  _doFocus()
  {
    if (!this.enabled) return false;
    clearTimeout(this._focusDelay);
    this._focusDelay = setTimeout(function ()
    {
      //console.log('displayNode focus : autocomplete ' + this.uuid + ' : ' + (this.mouseIsOver ? 'is over' : 'is NOT over'));
      if (this.status == 'closed')
      {
        this._position(0, 'displayNode focus');
        this.show('displayNode focus');
      }
    }.bind(this), 100);
    if (Affinity2018.ismobile)
    {
      this.displayNode.selectionStart = 0;
      this.displayNode.selectionEnd = 999999;
    }
  }

  _doClick(ev)
  {
    if (!this.enabled) return false;
    this._stopEvents(ev);
    this.displayNode.select();
  }

  _doKeyDown(ev)
  {
    // 9 -> tab
    if (!this.enabled) return false;
    if (ev.keyCode === 9) this.hide('on key down tab');
    if (ev.keyCode === 9) return;
    if (ev.keyCode === 13) // 13 -> enter
    {
      this._stopEvents(ev);
      return;
    }
    if (ev.keyCode === 40 || ev.keyCode === 38) // 40 -> down, 38 -> up
    {
      if (this.keyHeldCheck || this.keyHeld)
      {
        this._stopEvents(ev);
        return;
      }
      if (!this.keyHeldCheck && !this.keyHeld)
      {
        this.keyHeldCheck = true;
        this.keyHeldDelay = setTimeout(this._elementKeySetHeld, 500, ev);
      }
    }
  }

  _doKeyUp(ev)
  {
    // 9 -> tab
    if (!this.enabled) return false;
    if (ev.keyCode === 9 || ev.shiftKey) return;
    if (ev.keyCode === 9) this.hide('on key up tab');
    clearTimeout(this.keyHeldDelay);
    if (!this.keyHeld) this._elementKeyUp(ev);
    this.keyHeld = false;
    this.keyHeldCheck = false;
  }

  /**/

  _elementDown()
  {
    if (!this.enabled) return false;

    /* keypress - down arrow */

    if (this.listNode.querySelectorAll('li.visible').length === 0)
    {
      this.hide('elementDown with empty list');
      return;
    }

    var selected = this.listNode.querySelector('li.visible.selected'),
        topElement = this._getTopVisibleElement(),
        bottomElement = this._getBottomVisibleElement(),
        index = -1,
        nodes = this.listNode.querySelectorAll('li.visible');

    if (selected && Affinity2018.isDomElement(selected))
    {
      /* previous item has been selected */
      // nodes = nodes.indexOf(selected);
      index = Array.prototype.indexOf.call(nodes, selected);
      selected.classList.remove('selected');
    }

    // if (index < nodes.indexOf(topElement))
    if (index < Array.prototype.indexOf.call(nodes, topElement))
    {
      if (topElement && Affinity2018.isDomElement(topElement))
      {
        topElement.classList.add('selected');
      }
    }
    else
    {
      if (index < nodes.length - 1)
      {
        if (nodes[index + 1] && Affinity2018.isDomElement(nodes[index + 1]))
        {
          nodes[index + 1].classList.add('selected');
          this._scrollToBottom(nodes[index + 1]);
        }
      }
      else
      {
        if (this.listNode.scrollHeight == this.listNode.clientHeight)
        {
          if (topElement && Affinity2018.isDomElement(topElement)) topElement.classList.add('selected');
        }
        else
        {
          if (bottomElement && Affinity2018.isDomElement(bottomElement)) bottomElement.classList.add('selected');
        }
      }
    }

  }

  _elementUp()
  {
    /* keypress - up arrow */
    if (!this.enabled) return false;

    if (this.listNode.querySelectorAll('li.visible').length === 0)
    {
        this.hide('elementUp with empty list');
        return;
    }

    var selected = this.listNode.querySelector('li.visible.selected'),
        topElement = this._getTopVisibleElement(),
        bottomElement = this._getBottomVisibleElement(),
        index = -1,
        nodes = this.listNode.querySelectorAll('li.visible');

    if (selected)
    {
      /* previous item has been selected */
      // index = nodes.indexOf(selected);
      index = Array.prototype.indexOf.call(nodes, selected);
      selected.classList.remove('selected');
    }

    // if (index > nodes.indexOf(bottomElement))
    if (index > Array.prototype.indexOf.call(nodes, bottomElement))
    {
      if (bottomElement && Affinity2018.isDomElement(bottomElement)) bottomElement.classList.add('selected');
    }
    else
    {
      if (index > 0)
      {
        if (nodes[index - 1] && Affinity2018.isDomElement(nodes[index - 1]))
        {
          nodes[index - 1].classList.add('selected');
          this._scrollToTop(nodes[index - 1]);
        }
      }
      else
      {
        if (this.listNode.scrollHeight == this.listNode.clientHeight)
        {
          if (bottomElement && Affinity2018.isDomElement(bottomElement)) bottomElement.classList.add('selected');
        } else {
          if (topElement && Affinity2018.isDomElement(topElement)) topElement.classList.add('selected');
        }
      }
    }

    this._fireWindowChangeEvent('autocomplete _elementUp');

  }

  /**/

  _itemClicked(ev)
  {
    if (!this.enabled) return false;

    clearTimeout(this._kepListDelay);

    this.hide('item clicked');

    var eventNode = ev && $a.isNode(ev.target) ? ev.target.tagName == 'li' ? ev.target : ev.target.closest('li') : false,
        fireEvents = ev.hasOwnProperty('fireEvents') && typeof ev.fireEvents === 'boolean' ? ev.fireEvents : true,
        changeEvent;

    if (!eventNode) return;

    if (this.listNode.querySelector('li.selected')) this.listNode.querySelector('li.selected').classList.remove('selected');
    eventNode.classList.add('selected');

    this.lastSelected = eventNode;
    this.displayNode.value = this._cleanDisplay(eventNode.innerText);
    this.targetNode.selectedIndex = eventNode.dataset.index;
    this.targetNode.value = eventNode.dataset.value;

    if (this.targetNode.value !== this.defaultChangeValue)
    {
      this.defaultChangeValue = this.targetNode.value;
      this.changed = true;
    }
    else
    {
      this.changed = false;
    }
    if (!this.elementChangedOnly)
    {
      if (fireEvents)
      {
        if (this.targetNode.onchange !== null) this.targetNode.onchange();
        else this.targetNode.dispatchEvent(new Event('change'));
        this._fireWindowChangeEvent('autocomplete _itemClicked');
        this.dispatchEvent(new CustomEvent('elementChanged', { detail: { dispatchObject: this.targetNode.value }}));
      }
    }
    else
    {
      if (fireEvents)
      {
        this.dispatchEvent(new CustomEvent('elementChanged', { detail: { dispatchObject:this.targetNode.value }}));
      }
    }
    if (this.keeplist)
    {
      this._kepListDelay = setTimeout(this._restoreSelectedList, 1000);
      //this._restoreSelectedList.delay(1000, this);
    }
  }

  _restoreSelectedList()
  {
    if (this.fuzzyWorker && 'postMessage' in this.fuzzyWorker)
    {
      this.workerComplete = false;
      this.fuzzyWorker.postMessage({
        job: 'getSelectedList',
        defaultValue: this.targetNode.value,
        filter: this.filter,
        uuid: this.uuid
      });
    }
  }

  _clearList()
  {
    if (this.listNode)
    {
      var cleared = this._resetListEvents();
      this.listNode.innerHTML = '';
    }
  }

  /**/

  _scrolled(ev)
  {
    //console.log('scrolled', ev.target);
    //this.hide('scrolled');
    this._stopEvents(ev);
    this._position(null, 'scroll');
  }

  _scrollIntoView()
  {
    var offset = document.querySelector('.ss-dashboard-wrap-main-header') ? document.querySelector('.ss-dashboard-wrap-main-header').getBoundingClientRect().height : 0;
    this.listNode.scrollIntoView({ behavior: 'auto', block: 'start' });
    window.scrollTo(window.scrollX, window.scrollY - offset - 10);
  }

  _position(delay, calledFrom)
  {
    clearTimeout(this._positionDelay);
    if (this.forceTop)
    {
      this.listNode.classList.remove('below');
      this.listNode.classList.add('above');
      if (calledFrom !== 'scroll' && (Affinity2018.mobile || Affinity2018.IsMobile)) this._scrollIntoView();
      return;
    }
    if (this.forceBottom)
    {
      this.listNode.classList.remove('above');
      this.listNode.classList.add('below');
      if (calledFrom !== 'scroll' && (Affinity2018.mobile || Affinity2018.IsMobile)) this._scrollIntoView();
      return;
    }

    delay = typeof delay === 'number' ? delay : 100;
    this._positionDelay = setTimeout(this._setPosition, delay, calledFrom);
  }

  _setPosition(calledFrom)
  {
    clearTimeout(this._positionDelay);
    if (this.forceTop)
    {
      this.listNode.classList.add('above');
      if (calledFrom !== 'scroll' && (Affinity2018.mobile || Affinity2018.IsMobile)) this._scrollIntoView();
      return;
    }
    if (
      this.displayNode &&
      this.listNode &&
      this.status === 'open'
    )
    {
      this.listNode.classList.remove('above');
      var listRect = this.listNode.getBoundingClientRect(),
          windwSize = Affinity2018.getWindowSize(),
          scroll = document.body.scrollTop || 0,
          listBottom = parseFloat(listRect.top) + parseFloat(listRect.height) + scroll;
      if (listBottom > windwSize.height - 50)
      {
        this.listNode.classList.add('above');
      }
      if (calledFrom !== 'scroll' && (Affinity2018.mobile || Affinity2018.IsMobile)) this._scrollIntoView();
    }
  }

  _cleanDisplay(str)
  {
    if (typeof str === 'string' && str.trim() !== '')
    {
      return str.trim().replace(/&amp;/gi, '&');
    }
    return str;
  }

  _cleaValue(str)
  {
    if (typeof str === 'string' && str.trim() !== '')
    {
      return str.replace(/&amp;/gi, '&');
    }
    return str;
  }

  _encodeValue(str)
  {
    if (Affinity2018.SupportsDOMParser)
    {
      var parser = new DOMParser();
      var doc = parser.parseFromString(str, 'text/html');
      return doc.body.innerHTML;
    }
    var dom = document.createElement('div');
    dom.innerHTML = str;
    return dom.innerHTML;
  }

  _resetListEvents()
  {
    if (this.listNode && this.listNode.querySelector('li'))
    {
      this.listNode.querySelectorAll('li').forEach(function (node)
      {
        node.removeEventListener('click', this._itemClicked);
      }.bind(this));
      return true;
    }
    return false;
  }

  _setListEvents()
  {
    if (this.listNode && this.listNode.querySelector('li'))
    {
      this.listNode.querySelectorAll('li').forEach(function (node)
      {
        node.removeEventListener('click', this._itemClicked);
        node.addEventListener('click', this._itemClicked);
      }.bind(this));
      return true;
    }
    return false;
  }

  _fireWindowChangeEvent(calledFrom)
  {
    var changeEvent = new Event('elementChanged');
    changeEvent.element = this.targetNode;
    changeEvent.callee = calledFrom;
    window.dispatchEvent(changeEvent);
  }

  _escapeRegExp(str)
  {
    return str.replace(/[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g, "\\$&");
  }

  _stopEvents(ev)
  {
    if (ev)
    {
      ev.stopPropagation();
      if (ev.type === 'scroll')
      {
        if (!Affinity2018.SupportsPassiveEvents) ev.preventDefault();
      }
      else
      {
        ev.preventDefault();
      }
    }
  }

  /**/

  _clearShowHideEvents()
  {
    clearTimeout(this.bgEventListenerDelay);
    window.removeEventListener('click', this._windowClicked);
    this.displayNode.removeEventListener('click', this._stopEvents);
    this.autocompleteNode.removeEventListener('click', this._stopEvents);
  }
  _setHideShowEvents()
  {
    clearTimeout(this.bgEventListenerDelay);
    this._clearShowHideEvents();
    this.bgEventListenerDelay = setTimeout(function() { window.addEventListener('click', this._windowClicked); }.bind(this), 100);
    this.displayNode.addEventListener('click', this._stopEvents);
    this.autocompleteNode.addEventListener('click', this._stopEvents);
  }

  _windowClicked(ev)
  {
    if (document.activeElement !== this.displayNode)
    {
      this.hide();
    }
  }

  /**/

  _show(calledFrom)
  {
    if (
      this.status !== 'open'
      && Affinity2018.isDomElement(this.listNode)
      && this.listNode.querySelectorAll('li.visible').length > 0
    )
    {

      if (Affinity2018.Calendars) Affinity2018.Calendars.HideAll();
      Affinity2018.Autocompletes.HideAll(this);
      clearTimeout(this._focusDelay);
      this.listNode.classList.add('show');
      this.status = 'open';
      if (this.listNode.querySelectorAll('li.visible.selected'))
      {
        var li = this.listNode.querySelector('li.visible.selected');
        if (li)
        {
          this.listNode.scrollTo(0, 0);
          this.listNode.scrollTo(0, Affinity2018.getOffsetRect(li).y - 5);
        }
      }
      this._setPosition('show');
      this._setHideShowEvents();
      if (Affinity2018.hasOwnProperty('ForceSectionTop')) Affinity2018.ForceSectionTop(this.listNode);
    }
  }

  _hide(calledFrom)
  {
    if (this.status !== 'closed')
    {
      //console.log('hide called from : ' + calledFrom, this);
      clearTimeout(this._focusDelay);
      clearTimeout(this._fuzzySearchDelay);
      clearTimeout(this._hideResetTimer);
      this.listNode.classList.remove('show');
      this.status = 'closed';
      this._hideResetTimer = setTimeout(function ()
      {
        if (Affinity2018.isDomElement(this.listNode) && this.listNode.querySelector('li.visible.selected'))
        {
          this.lastSelected = this.listNode.querySelector('li.visible.selected');
        }
        this._reset();
      }.bind(this), 250);
      this._clearShowHideEvents();
      if (Affinity2018.hasOwnProperty('ResetForceSectionTop')) Affinity2018.ResetForceSectionTop(this.listNode);
      if (Affinity2018.hasOwnProperty('unlockBodyScroll') && document.body.classList.contains('disable-scroll')) Affinity2018.unlockBodyScroll();
    }
  }

  _reset()
  {

    // TODO: Implement Search Mode
    this.searchMode = false;

    if (!this.searchMode)
    {
      var selectedNode = false;
      if (
        Affinity2018.isDomElement(this.defaultValue)
        && this.defaultValue.tagName.toLowerCase() === 'li'
      )
      {
        selectedNode = this.defaultValue;
      }
      if (
        Affinity2018.isDomElement(this.lastSelected)
        && this.lastSelected.tagName.toLowerCase() === 'li'
      )
      {
        selectedNode = this.lastSelected;
      }
      this.items.forEach(function (liNode, index)
      {
        this.listNode.appendChild(liNode);
        this.listNode.classList.remove('selected', 'hidden', 'visible');
        if (!this.fuzzySearchLargeDataDelay)
        {
          liNode.innerHTML = this._cleanDisplay(liNode.innerText);
        }
        if (selectedNode && liNode === selectedNode)
        {
          liNode.classList.add('selected');
          this.listNode.scrollTo(0, Affinity2018.getOffsetRect(liNode).y - 5);
          this.displayNode.value = this._cleanDisplay(selectedNode.innerText);
        }
      }.bind(this));
      /*
      if (
        this.displayNode
        && this.displayNode.classList.contains('hidden')
      )
      {
        this.displayNode.classList.remove('hidden')
      }
      */
    }
  }

  _mouseEnter(ev)
  {
    Affinity2018.lockBodyScroll();
  }
  _mouseLeave(ev)
  {
    var unlockScroll = true;
    if (ev && $a.isEvent(ev) && $a.isNode(ev.target))
    {
      if (
        Affinity2018.getParent(ev.target, '.popup')
        || Affinity2018.getParent(ev.target, '.UIPromtBox')
        || Affinity2018.getParent(ev.target, '.uimodalbody')
      )
      {
        console.warn('Autocomplete -> _mouseLeave -> do not unlock body scroll as parent is popup, and popup will unlock on close.');
        unlockScroll = false; // parent is a popup or modal, they will unlock scroll on close.
      }
    }
    if (unlockScroll) Affinity2018.unlockBodyScroll();
  }

  /**/

  Destroy()
  {
    this._reset();
    this._clearShowHideEvents();
    clearTimeout(this._elementKeyUpTimer);
    clearTimeout(this._fuzzySearchDelay);
    clearTimeout(this._focusDelay);
    clearTimeout(this.keyHeldDelay);
    clearTimeout(this._positionDelay);
    clearTimeout(this.bgEventListenerDelay);
    clearTimeout(this._hideResetTimer);
    this.enabled = false;
    this.targetNode.remove('ui-autocomplete');
    window.removeEventListener('mobileback', function () { this.hide(); }.bind(this));
    document.removeEventListener('scroll', this._scrolled, Affinity2018.PassiveEventProp);
    document.removeEventListener('resize', this._position, Affinity2018.PassiveEventProp);
    //this.autocompleteNode.removeEventListener('mouseenter', this._mouseEnter);
    //this.autocompleteNode.removeEventListener('mouseleave', this._mouseLeave);
    this.listNode.removeEventListener('mouseenter', this._mouseEnter);
    this.listNode.removeEventListener('mouseleave', this._mouseLeave);
    if (this.fuzzyWorker)
    {
      this.fuzzyWorker.onmessage = null;
      this.fuzzyWorker.terminate();
      this.fuzzyWorker = false;
    }
    delete this.targetNode.widgets.Autocomplete;
    delete Affinity2018.Autocompletes.widgets[this.uuid];
    this.autocompleteNode.innerHTML = '';
    this.autocompleteNode.parentNode.removeChild(this.autocompleteNode);
    for (var key in this)
    {
      if (this.hasOwnProperty(key))
      {
        this[key] = null;
        delete this[key];
      }
    }
    Affinity2018.unlockBodyScroll();
    return true;
  }

  /**/

  _templates()
  {
    this.autocompleteTemplate = `
      <div class="ui-ac-display-wrapper">
        <input class="ui-ac-display" type="text">
        <div class="ui-ac-display-icon icon-search"></div>
        <div class="ui-ac-display-loader"></div>
      </div>
      <ul class="ui-autocomplete-list">
      </ul>
    `;
  }

};
;

var fuzzyRunning = false;

var fuzzySearchData = [];
var originalListHTML = '';
var originalListItems = [];
var initialSelected = '';

function cleanDisplay (str, key)
{
  var cleanStr = str, lastChar;
  if (key === undefined)
  {
    if (str.indexOf(' (') !== -1)
    {
      key = str.substr(str.indexOf(' (') + 2);
      key = key.substring(0, key.length - 1).trim();
      str = str.substring(0, str.indexOf(' (')).trim();
    }
  }
  if (str && typeof str === 'string' && str.trim() !== '')
  {
    cleanStr = str.trim().replace(/&amp;/gi, '&');
    lastChar = cleanStr.charAt(cleanStr.length - 1);
    if (lastChar === '-' || lastChar === '_' || lastChar === ':' || lastChar === ',')
    {
      cleanStr = cleanStr.substring(0, cleanStr.length - 1).trim();
    }
  } else cleanStr = 'Not Set';
  if (key && typeof key === 'string' && key.trim() !== '')
  {
    if (cleanStr.indexOf(key) === -1)
    {
      cleanStr = cleanStr + ' (' + key + ')';
    }
  }
  return cleanStr;
}

function escapeRegExp (str)
{
  var regex = /[.*+?^${}()|[\]\\]/g;
  return str.replace(regex, '\\$&');
}

function stripTags (str)
{
  return typeof str === 'string' && str.trim() !== '' ? str.replace(/<(?:.|\n)*?>/gm, '') : str;
}

function contains(lookin, lookfor)
{
  if (lookin.indexOf(lookfor) > -1) return lookin.indexOf(lookfor);
  return false;
}

function soundex (wordString)
{
  var soundExLen = 5,
      wordStr = "",
      tmpStr, curChar, lastChar, wsLen, firstLetter, i;
  wordString = wordString.toUpperCase();
  wordStr = wordString;
  wordStr = wordStr.replace(/[^A-Z]/gi, " ");
  wordStr = wordStr.replace(/^\s*/g, "");
  wordStr = wordStr.replace(/\s*$/g, "");
  wordStr = wordStr.replace(/^GH/g, "G");
  wordStr = wordStr.replace(/DG/g, "G");
  wordStr = wordStr.replace(/GH/g, "H");
  wordStr = wordStr.replace(/GN/g, "N");
  wordStr = wordStr.replace(/KN/g, "N");
  wordStr = wordStr.replace(/PH/g, "F");
  wordStr = wordStr.replace(/MP([STZ])/g, "M$1");
  wordStr = wordStr.replace(/^PS/g, "S");
  wordStr = wordStr.replace(/^PF/g, "F");
  wordStr = wordStr.replace(/MB/g, "M");
  wordStr = wordStr.replace(/TCH/g, "CH");
  firstLetter = wordStr.substr(0, 1);
  if (firstLetter == "H" || firstLetter == "W") wordStr = "-" + wordStr.substr(1);
  wordStr = wordStr.replace(/[AEIOUYHW]/g, "0");
  wordStr = wordStr.replace(/[BPFV]/g, "1");
  wordStr = wordStr.replace(/[CSGJKQXZ]/g, "2");
  wordStr = wordStr.replace(/[DT]/g, "3");
  wordStr = wordStr.replace(/[L]/g, "4");
  wordStr = wordStr.replace(/[MN]/g, "5");
  wordStr = wordStr.replace(/[R]/g, "6");
  wsLen = wordStr.length;
  lastChar = "";
  tmpStr = "";
  for (i = 0; i < wsLen; i++)
  {
    curChar = wordStr.charAt(i);
    if (curChar == lastChar)
    {
      tmpStr += " ";
    }
    else
    {
      tmpStr += curChar;
      lastChar = curChar;
    }
  }
  wordStr = tmpStr;
  wordStr = wordStr.substr(1);
  wordStr = wordStr.replace(/\s/g, "");
  wordStr = wordStr.replace(/0/g, "");
  wordStr += "0000000000";
  wordStr = firstLetter + wordStr;
  wordStr = wordStr.substr(0, soundExLen);
  return (wordStr);
}

function distance (stringA, stringB)
{
  var a = stringA.toLowerCase(),
      b = stringB.toLowerCase(),
      matrix = [],
      i, j;
  if (a.length === 0) return b.length;
  if (b.length === 0) return a.length;
  for (i = 0; i <= b.length; i++)
  {
    matrix[i] = [i];
  }
  for (j = 0; j <= a.length; j++)
  {
    matrix[0][j] = j;
  }
  for (i = 1; i <= b.length; i++)
  {
    for (j = 1; j <= a.length; j++)
    {
      if (b.charAt(i - 1) == a.charAt(j - 1))
      {
        matrix[i][j] = matrix[i - 1][j - 1];
      }
      else
      {
        matrix[i][j] = Math.min(matrix[i - 1][j - 1] + 1, // substitution
        Math.min(matrix[i][j - 1] + 1, // insertion
        matrix[i - 1][j] + 1)); // deletion
      }
    }
  }
  return matrix[b.length][a.length];
}

function returnSelectOptions (data, searchFor, ismobile, filter)
{
  var i, dataPair, addItem, option, options = "", selected = false;
  for (i = 0; i < data.length; i++)
  {
    dataPair = data[i];
    if (dataPair.Value.toLowerCase().indexOf(searchFor.toLowerCase()) > -1 || ismobile)
    {
      addItem = true;
      if (filter !== null && new RegExp('(' + filter + ')', 'gi').test(dataPair.Value)) addItem = false;
      if (addItem)
      {
        option = "<option value=\"" + dataPair.Key + "\">" + cleanDisplay(dataPair.Value, dataPair.Key) + "</option>";
        if (dataPair.Value === searchFor)
        {
          selected = true;
          option = "<option value=\"" + dataPair.Key + "\" selected>" + cleanDisplay(dataPair.Value, dataPair.Key) + "</option>";
        }
        if (!selected && searchFor.contains(','))
        {
          var forStr = (dataPair.Key + '').trim();
          var withStr = (searchFor + '').trim().split(',')[0];
          if (forStr === withStr)
          {
            selected = true;
            option = "<option value=\"" + dataPair.Key + "\" selected>" + cleanDisplay(dataPair.Value, dataPair.Key) + "</option>";
          }
        }
        options += option;
      }
    }
  }
  postMessage({ job: 'getOptions', html: options });
}


function returnListItem (data)
{
  if (data.html.indexOf('(null)') > 0) data.html = data.html.replace('(null)', '').trim();
  var li = '<li';
  if (data.hasOwnProperty('uuid')) li += ' id="' + data.uuid + '-li-' + data.originalIndex + '"';
  else if (data.hasOwnProperty('id')) li += ' id="' + data.id + '"';
  li += ' class="' + data.klass + '"';
  li += ' data-index="' + data.originalIndex + '"';
  li += ' data-value="' + data.value + '"';
  li += ' data-display="' + data.html + '"';
  li += '>';
  li += data.html;
  li += '</li>';
  return li;
}

function returnList (uuid, html, defaultValue, encodedDefaultValue, filter)
{
  var options = html.split('</option>'),
      items = [], // TODO: Retire this in favour for data here in the worker, rather than passing it about ...
      returndata = {
          defaultID: false,
          html: '',
          total: 0
      },
      finalHtml = '',
      i = 0, j = 0,
      selected = false,
      klass, html, ogvalue, display, value, li, wordsArr, soundexArr;
  //var test = 'Fire Prevention (23) Officer edit (103)';
  //options[1] = '<option value="' + test + '">' + test;
  for (; i < options.length; i++)
  {
    html = options[i];
    if (i === 0 || html.trim() !== '')
    {
      ogvalue = html.substring(html.indexOf('>') + 1);
      //display = cleanDisplay(ogvalue.replace(/\,/g, ' - '));
      display = cleanDisplay(ogvalue.replace(/\, /g, ' - '));
      value = new RegExp('value="', 'gi').test(html) ? html.substring(html.indexOf('value="') + 7, html.indexOf('"', html.indexOf('value="') + 7)) : '';
      klass = 'visible';

      if (new RegExp('selected', 'gi').test(html) || value === defaultValue || value === encodedDefaultValue)
      {
        klass += ' selected';
        returndata.defaultID = uuid + '-li-' + i;
        initialSelected = uuid + '-li-' + i;
        selected = true;
      }

      if (!selected && defaultValue.indexOf(',') > -1)
      {
        var forStr = ogvalue.trim();
        var reg = new RegExp('\(([0-9]{1,10})\)', 'g');
        if (reg.test(ogvalue))
        {
          var match = ogvalue.match(reg);
          if (match != null) forStr = match[match.length - 1];
        }
        var withStr = (defaultValue + '').trim().split(',')[0];
        if (forStr === withStr)
        {
          klass += ' selected';
          returndata.defaultID = uuid + '-li-' + i;
          initialSelected = uuid + '-li-' + i;
          selected = true;
        }
      }

      if (new RegExp('data-filter-css="', 'gi').test(html))
      {
        var cutFrom = html.indexOf('data-filter-css="') + 17;
        var cutTo = html.indexOf('"', cutFrom);
        var newKlass = html.substr(cutFrom, cutTo - cutFrom);
        if (newKlass === 'hidden' && klass.indexOf('visible') > -1)
        {
          klass = klass.replace('visible', '');
        }
        klass += ' ' + newKlass;
      }

      var addItem = true;
      if (filter !== null && new RegExp('(' + filter + ')', 'gi').test(display)) addItem = false;

      if (addItem)
      {
        li = returnListItem({
          uuid: uuid,
          klass: klass,
          originalIndex: i,
          value: value,
          html: display
        });

        returndata.html += li;
        finalHtml += li;

        // TODO: Retire this in favour for data here in the worker, rather than passing it about ...
        items.push({
          id: uuid + '-li-' + i,
          html: li,
          klass: klass,
          searchstr: ogvalue,
          value: value
        });

        returndata.total++;

        // start index
        wordsArr = ogvalue.trim().toLowerCase().replace(new RegExp(/ /g), ' ').split(' ');
        soundexArr = [];
        for (j = 0; j < wordsArr.length; j++)
        {
          soundexArr.push(soundex(wordsArr[j]));
        }

        // hang on to this for later referenceing on search ....
        fuzzySearchData.push({
          id: uuid + '-li-' + i,
          html: li,
          oghtml: li,
          klass: klass,
          searchstr: ogvalue,
          value: value,
          words: wordsArr,
          wordCount: wordsArr.length,
          soundex: soundexArr,
          originalIndex: i
        });

      }

    }
  }
  originalListHTML = finalHtml + '';
  originalListItems = JSON.parse(JSON.stringify(items) + '');
  returndata.items = items;
  postMessage({ job: 'getList', data: returndata, html: finalHtml });
}

function returnSelectedList (uuid, defaultValue, filter)
{
  var copyList = (originalListHTML + '').replace(new RegExp(' selected', 'gi'), ''),
      items = copyList.split('<li'),
      i = 0,
      html, value, currentValue, addItem,
      finalHtml = '';
  for (; i < items.length; i++)
  {
    html = items[i];
    if (html.trim() !== '')
    {
      var addItem = true;
      if (filter !== null && new RegExp('(' + filter + ')', 'gi').test(html)) addItem = false;
      if (addItem)
      {
        currentValue = html.substring(html.indexOf('>') + 1, html.indexOf('<', html.indexOf('>') + 1));
        html = '<li' + html.replace(new RegExp(escapeRegExp(currentValue), 'g'), cleanDisplay(stripTags(currentValue)));
        if (html.indexOf('data-value="' + defaultValue + '"') > -1)
        {
          html = html.replace(new RegExp('class\=\"visible\"', 'g'), 'class="visible selected"');
        }
        finalHtml += html;
      }
    }
  }
  finalHtml = finalHtml.replace(new RegExp('\<li\<li', 'gi'), '<li');
  finalHtml = finalHtml.replace(new RegExp('<\/li<li>', 'gi'), '</li>');

  postMessage({ job: 'getSelectedList', html: finalHtml, data: { items: originalListItems } });
}

function returnResetList () {
  var i, returndata = {
    items: originalListItems,
    total: originalListItems.length
  };
  postMessage({ job: 'resetList', data: returndata, html: originalListHTML, select: initialSelected });
}

function escapeRegExp (str)
{
  return str.replace(/[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g, "\\$&");
}

function filterClassExists (classString)
{
  if (classString.trim() === '') return false;
  if (classString.indexOf(' filters-') > -1) return true;
  if (classString.indexOf('filters-') === 0) return true;
  return false;
}

function returnClassFilters (classString)
{
  if (!filterClassExists(classString)) return [];
  var filters = [], bits = classString.split(' '), b = 0;
  for ( ; b < bits.length; b++)
  {
    if (bits[b].indexOf('filters-') > -1)
    {
      filters.push(bits[b]);
    }
  }
  return filters.join(' ');
}

function addClassString (what, toWhat)
{
  if (toWhat.trim() === '') return what;
  var hasWhat = false, bits = toWhat.split(' '), b = 0;
  for (; b < bits.length; b++)
  {
    if (bits[b] === what)
    {
      hasWhat = true;
      break;
    }
  }
  if (!hasWhat) bits.push(what);
  return bits.join(' ');
}

function fuzzySearch (searchData, searchKey, searchFor, perfDelay, filter)
{
  if (fuzzyRunning) return;
  fuzzyRunning = true;

  //console.log(searchData);

  var returnData = [],
      results = [],
      gotone = false,
      bestguess = false,
      data,
      addItem,
      score, wordScore, wordScores, searchIn, isMatch, hasMatch, totalWordsToSearch, totalWordMatch, totalWords,
      searchForWords, searchInWords, searchForWord, searchInWord, soundexFor, soundexIn, soundexScore,
      i, j, k, index, searchDataItem, dataItem, html, searchForWord, searchIn,
      hasFilterClass, filterClass;

  if (!isNaN(searchFor))
  {
    for (i = 0; i < fuzzySearchData.length; i++)
    {
      index = i;
      searchDataItem = searchData[i] || false;
      dataItem = fuzzySearchData[i];

      addItem = true;
      if (filter !== null && new RegExp('(' + filter + ')', 'gi').test(dataItem.value)) addItem = false;

      if (addItem)
      {
        hasFilterClass = filterClassExists(searchDataItem ? searchDataItem.klass : dataItem.klass);
        filterClass = returnClassFilters(searchDataItem ? searchDataItem.klass : dataItem.klass);

        if (dataItem[searchKey].indexOf(searchFor) !== -1)
        {
          wordScore = dataItem[searchKey].split(searchFor).length - 1 || 0;
          searchInWords = dataItem.words;

          if (hasFilterClass) dataItem.klass = addClassString(filterClass, dataItem.klass);

          data = {
            uuid: dataItem.uuid,
            originalIndex: index,
            html: dataItem.html,
            value: dataItem.value,
            klass: dataItem.klass,
            score: wordScore,
            wordScore: wordScore / searchInWords
          };
          if (perfDelay < 101) data.html = cleanDisplay(stripTags(dataItem.html)).replace(new RegExp('(' + escapeRegExp(searchFor) + ')', 'gi'), "<strong>$1</strong>");
          else data.html = cleanDisplay(stripTags(dataItem.html));
          results.push(data);
          dataItem.klass = 'visible';
        }
        else
        {
          dataItem.klass = 'hidden';
        }

        if (hasFilterClass) dataItem.klass = addClassString(filterClass, dataItem.klass);
      }
    }
  }
  else
  {
    if (
      searchData
      && typeof searchData === 'object'
      && 'length' in searchData
      && searchData.length > 0
    )
    {
      for (i = 0; i < searchData.length; i++)
      {
        
        searchDataItem = searchData[i] || false;
        dataItem = fuzzySearchData[i];

        addItem = true;
        if (filter !== null && new RegExp('(' + filter + ')', 'gi').test(dataItem.value)) addItem = false;

        if (addItem)
        {

          hasFilterClass = filterClassExists(searchDataItem ? searchDataItem.klass : dataItem.klass);
          filterClass = returnClassFilters(searchDataItem ? searchDataItem.klass : dataItem.klass);

          score = 0;
          wordScores = [];
          searchFor = searchFor.toLowerCase();
          searchIn = dataItem[searchKey].toLowerCase().trim();
          isMatch = searchFor === searchIn;
          hasMatch = searchIn.indexOf(searchFor) > -1 ? true : false;

          searchForWords = searchFor.split(' ');
          totalWordsToSearch = searchForWords.length;
          totalWords = searchIn.trim().replace(/[ ]{2,}/gi, ' ').split(' ').length;

          if (isMatch)
          {
            totalWordMatch = totalWordsToSearch;
            wordScore = 99999;
            score = 99999;
            dataItem.klass = 'visible';
            if (perfDelay)
            {
              dataItem.html = cleanDisplay(stripTags(dataItem.html));
            }
            else
            {
              dataItem.html = '<strong>' + cleanDisplay(stripTags(dataItem.html)) + '</strong>'
            }
          }
          if (!isMatch)
          {
            if (hasMatch)
            {
              totalWordMatch = searchIn.split(searchFor).length - 1 || 0;
              // wordScore = totalWordMatch;
              // wordScore = Math.round((totalWordMatch / totalWordsToSearch) * 100) / 100 || 0;
              wordScore = Math.round((totalWordMatch / totalWords) * 100) / 100 || 0;
              score = wordScore + 100;
              dataItem.klass = 'visible';
              if (!perfDelay || perfDelay < 101)
              {
                html = this.cleanDisplay(stripTags(dataItem.html));
                html = html.replace(new RegExp('(' + this.escapeRegExp(searchFor) + ')', 'gi'), "<strong>$1</strong>");
                dataItem.html = html;
              }
              else
              {
                dataItem.html = this.cleanDisplay(stripTags(dataItem.html));
              }
            }
            else
            {
              if (!perfDelay || perfDelay < 1001)
              {
                searchInWords = dataItem.words;
                totalWordMatch = 0;
                for (j = 0; j < searchForWords.length; j++)
                {
                  searchForWord = searchForWords[j];
                  for (k = 0; k < searchInWords.length; k++)
                  {
                    searchInWord = searchInWords[k];
                    if (
                      searchInWord && searchForWord
                      && typeof searchInWord === 'string'
                      && typeof searchForWord === 'string'
                      && searchInWord.trim() !== ''
                      && searchForWord.trim() !== ''
                    )
                    {
                      soundexFor = soundex(searchForWord);
                      soundexIn = soundex(searchInWord);
                      soundexScore = distance(soundexFor, soundexIn);
                      if (soundexScore == 0) totalWordMatch += 1;
                    }
                  }
                }
                // wordScore = Math.round((totalWordMatch / totalWordsToSearch) * 100) / 100 || 0;
                wordScore = Math.round((totalWordMatch / totalWords) * 100) / 100 || 0;
                score = wordScore + totalWordMatch;
                if (score >= 0)
                {
                  dataItem.klass = 'visible';
                  if (!perfDelay || perfDelay < 101)
                  {
                    html = this.cleanDisplay(stripTags(dataItem.html));
                    html = html.replace(new RegExp('(' + this.escapeRegExp(searchFor) + ')', 'gi'), "<strong>$1</strong>");
                    dataItem.html = html;
                  }
                  else
                  {
                    dataItem.html = cleanDisplay(stripTags(dataItem.html));
                  }
                }
              }
            }
          }

          if (hasFilterClass) dataItem.klass = addClassString(filterClass, dataItem.klass);

          data = {
            uuid: dataItem.id,
            originalIndex: i,
            html: dataItem.html,
            value: dataItem.value,
            klass: dataItem.klass,
            score: score,
            wordScore: wordScore
          };

          results.push(data);

        }

      }
    }
  }

  results.sort(function (a, b)
  {
    if (parseFloat(a.score) === parseFloat(b.score))  return parseFloat(a.wordScore) < parseFloat(b.wordScore) ? 1 : -1;
    return parseFloat(a.score) < parseFloat(b.score) ? 1 : -1;
  });

  var finalHtml = '',
      gotone = false,
      dataItem;

  for (i = 0; i < results.length; i++)
  {
    result = results[i];
    dataItem = fuzzySearchData[result.originalIndex];
    dataItem.score = result.score;
    dataItem.wordScore = result.wordScore;
    dataItem.originalIndex = result.originalIndex;
    dataItem.html = result.html;
    dataItem.klass = result.klass;
    
    hasFilterClass = filterClassExists(dataItem.klass);
    filterClass = returnClassFilters(dataItem.klass);

    returnData.push(dataItem);
    if (result.score > 0)
    {
      dataItem.klass = 'visible';
      gotone = true;
    }
    else
    {
      dataItem.klass = 'hidden';
    }

    if (hasFilterClass) dataItem.klass = addClassString(filterClass, dataItem.klass);

    if (dataItem.html)
    {
      html = returnListItem(dataItem);
      finalHtml += html;
    }
  }

  if (
    !gotone
    && results.length > 0
    && results[0].originalIndex
    && searchData[results[0].originalIndex]
    && searchData[results[0].originalIndex].element
  )
  {
    bestguess = searchData[results[0].originalIndex].id;
  }

  fuzzyRunning = false;

  postMessage({ job: 'doSearch', data: returnData, gotone: gotone, bestguess: bestguess, html: finalHtml });

  /*
  if (fuzzyRunning) return;
  fuzzyRunning = true;

  var returnData = [],
      results = [],
      gotone = false,
      bestguess = false,
      data,
      score, wordScore, wordScores, searchIn, isMatch, hasMatch, totalWordsToSearch, totalWordMatch,
      searchForWords, searchInWords, searchForWord, searchInWord, soundexFor, soundexIn, soundexScore,
      i, j, k, index, dataItem, html, searchForWord, searchIn;

  searchFor = searchFor.toLowerCase();

  if (!isNaN(searchFor))
  {
    //for (i=0;i<searchData.length;i++) {
    for (i = 0; i < fuzzySearchData.length; i++)
    {
      index = i;
      //dataItem = searchData[index];
      dataItem = fuzzySearchData[index];
      if (dataItem[searchKey].indexOf(searchFor) !== -1)
      {
        wordScore = dataItem[searchKey].split(searchFor).length - 1 || 0;
        //searchInWords = dataItem[searchKey].split(' ');
        searchInWords = dataItem.words;
        data = {
          uuid: dataItem.uuid,
          originalIndex: index,
          html: dataItem.html,
          value: dataItem.value,
          klass: dataItem.klass,
          score: wordScore,
          wordScore: wordScore / searchInWords
        };
        if (perfDelay < 101) data.html = cleanDisplay(stripTags(dataItem.html)).replace(new RegExp('(' + escapeRegExp(searchFor) + ')', 'gi'), "<strong>$1</strong>");
        else data.html = cleanDisplay(stripTags(dataItem.html));
        results.push(data);
        dataItem.klass = 'visible';
      }
      else
      {
        dataItem.klass = 'hidden';
      }
    }

  }
  else
  {

    if (
      searchData
      && typeof searchData === 'object'
      && 'length' in searchData
      && searchData.length > 0
    )
    {
      for (i = 0; i < searchData.length; i++)
      {
        index = i;

        //dataItem = searchData[index];
        dataItem = fuzzySearchData[index];

        score = 0;
        wordScores = [];
        searchIn = dataItem[searchKey].toLowerCase().trim();
        isMatch = searchFor === searchIn;
        hasMatch = searchIn.indexOf(searchFor) > -1 ? true : false;

        searchForWords = searchFor.split(' ');
        totalWordsToSearch = searchForWords.length;

        if (isMatch)
        {
          totalWordMatch = totalWordsToSearch;
          wordScore = 99999;
          score = 99999;
          dataItem.klass = 'visible';
          if (!perfDelay) dataItem.html = '<strong>' + cleanDisplay(stripTags(dataItem.html)) + '</strong>';
          else dataItem.html = cleanDisplay(stripTags(dataItem.html));
        }
        else if (!isMatch && hasMatch)
        {
          totalWordMatch = searchIn.split(searchFor).length - 1 || 0;
          wordScore = totalWordMatch;
          score = wordScore + 100;
          dataItem.klass = 'visible';
          if (perfDelay < 101) dataItem.html = cleanDisplay(stripTags(dataItem.html)).replace(new RegExp('(' + escapeRegExp(searchFor) + ')', 'gi'), "<strong>$1</strong>");
          else dataItem.html = cleanDisplay(stripTags(dataItem.html));
        }
        else
        {
          if (perfDelay < 1001)
          {
            searchInWords = dataItem.words;
            totalWordMatch = 0;
            for (j = 0; j < searchForWords.length; j++)
            {
              searchForWord = searchForWords[j];
              for (k = 0; k < searchInWords.length; k++)
              {
                searchInWord = searchInWords[k];
                if (
                  searchInWord && searchForWord
                  && typeof searchInWord === 'string'
                  && typeof searchForWord === 'string'
                  && searchInWord.trim() !== ''
                  && searchForWord.trim() !== ''
                )
                {
                  soundexFor = soundex(searchForWord);
                  //soundexIn = soundex(searchInWord);
                  soundexIn = dataItem.soundex[dataItem.words.indexOf(searchInWord)];
                  soundexScore = distance(soundexFor, soundexIn);
                  if (soundexScore == 0) totalWordMatch += 1;
                }
              }
            }
            score = totalWordMatch;
            wordScore = (Math.round(totalWordMatch / totalWordsToSearch * 100) / 100) || 0;
            if (score >= 0)
            {
              dataItem.klass = 'visible';
              if (perfDelay < 101) dataItem.html = cleanDisplay(stripTags(dataItem.html)).replace(new RegExp('(' + escapeRegExp(searchFor) + ')', 'gi'), "<strong>$1</strong>");
              else dataItem.html = cleanDisplay(stripTags(dataItem.html));
            }
          }
        }

        data = {
          uuid: dataItem.uuid,
          originalIndex: index,
          html: dataItem.html,
          value: dataItem.value,
          klass: dataItem.klass,
          score: score,
          wordScore: wordScore
        };

        results.push(data);
      }
    }
  }

  results.sort(function (a, b) {
    if (parseFloat(a.score) === parseFloat(b.score)) return parseFloat(a.wordScore) < parseFloat(b.wordScore) ? 1 : -1;
    return parseFloat(a.score) < parseFloat(b.score) ? 1 : -1;
  });

  var finalHtml = '';

  for (i = 0; i < results.length; i++)
  {
    result = results[i];
    //data = searchData[result.originalIndex];
    data = fuzzySearchData[result.originalIndex];
    data.score = result.score;
    data.wordScore = result.wordScore;
    data.originalIndex = result.originalIndex;
    data.html = result.html;
    data.klass = result.klass;
    returnData.push(data);
    if (result.score > 0)
    {
      //data.element.inject(target);
      gotone = true;
      data.klass = 'visible';
    }
    else
    {
      data.klass = 'hidden';
    }
    if (data.html) finalHtml += returnListItem(data);
  };

  if (
    !gotone
    && results.length > 0
    && results[0].originalIndex
    && searchData[results[0].originalIndex]
    && searchData[results[0].originalIndex].element
  )
  {
    bestguess = searchData[results[0].originalIndex].id;
  }

  fuzzyRunning = false;

  postMessage({ job: 'doSearch', data: returnData, gotone: gotone, bestguess: bestguess, html: finalHtml });
  */

}

onmessage = function (msgData)
{
  var opts = msgData.data;
  if (opts.job === "getOptions")
  {
    returnSelectOptions(opts.data, opts.searchFor, opts.ismobile, opts.filter);
  }
  if (opts.job === "getList")
  {
    returnList(opts.uuid, opts.html, opts.defaultValue, opts.encodedDefaultValue, opts.filter);
  }
  if (opts.job === "getSelectedList")
  {
    returnSelectedList(opts.uuid, opts.defaultValue, opts.filter);
  }
  if (opts.job === "resetList")
  {
    returnResetList();
  }
  if (opts.job === "doSearch")
  {
    fuzzySearch(opts.data, opts.searchKey, opts.searchFor, opts.perfDelay, opts.filter);
  }
  if (opts.job === "terminate")
  {
    close();
  }
};
;
/***************************************************************************************************************************************************/
/***************************************************************************************************************************************************/
/***                                                                                                 ***********************************************/
/***   ██████   █████  ███    ██ ██   ██     ███    ██ ██    ██ ███    ███ ██████  ███████ ██████    ***********************************************/
/***   ██   ██ ██   ██ ████   ██ ██  ██      ████   ██ ██    ██ ████  ████ ██   ██ ██      ██   ██   ***********************************************/
/***   ██████  ███████ ██ ██  ██ █████       ██ ██  ██ ██    ██ ██ ████ ██ ██████  █████   ██████    ***********************************************/
/***   ██   ██ ██   ██ ██  ██ ██ ██  ██      ██  ██ ██ ██    ██ ██  ██  ██ ██   ██ ██      ██   ██   ***********************************************/
/***   ██████  ██   ██ ██   ████ ██   ██     ██   ████  ██████  ██      ██ ██████  ███████ ██   ██   ***********************************************/
/***                                                                                                 ***********************************************/
/***************************************************************************************************************************************************/
/********************************************************************************************************************** Source63 *** bank number ***/

if(!('Affinity2018' in window)) Affinity2018 = {};
if(!('Classes' in Affinity2018)) Affinity2018.Classes = {};
if(!('Plugins' in Affinity2018.Classes)) Affinity2018.Classes.Plugins = {};

if(!('Apps' in Affinity2018)) Affinity2018.Apps = {};
if(!('Plugins' in Affinity2018.Apps)) Affinity2018.Apps.Plugins = {};

Affinity2018.Classes.Plugins.BankNumber = class
{
  _options ()
  {
  }

  constructor ()
  {
    this._options();
    [

      'Apply', 'Remove',
      '_apply',
      '_templates'

    ].bindEach(this);
    this._templates();
  }

  Apply (node)
  {
    if (node !== undefined && node !== null)
    {
      this._apply(node);
    }
    else
    {
      document.querySelectorAll('.ui-has-banknumber').forEach(this._apply);
    }
  }

  Remove (node)
  {
    if (
      node.classList.contains('ui-banknumber')
      && node.hasOwnProperty('widgets')
      && node.widgets.hasOwnProperty('BankNumber')
    )
    {
      node.widgets.BankNumber.Destroy();
    }
  }

  /**/

  _apply (node)
  {
    new Affinity2018.Classes.Plugins.BankNumberWidget(node);
  }

  /**/

  _templates ()
  {

  }

};

Affinity2018.Classes.Plugins.BankNumberWidget = class
{
  _options ()
  {
    this.WidgetName = 'BankNumber';

    this.UseQueue = true;

    this.CountryCodes = ['A', 'N', 'AU', 'NZ'];
    this.DefaultCountryCode = 'A';
    this.CountryCodeMap = {
      'A': 'AU',
      'N': 'NZ'
    };
    this.lastCodes = {
      A: '',
      N: ''
    };

    this.ShowCountryIfUnknown = true;

    this.FirstLoad = true;

    this.hasPayPoint = false;
    this.PayPoint = false;
    this.Valid = false;
    this.pasting = false;
  }

  constructor (targetNode)
  {
    this._options();
    [

      'Get', 'GetData', 'Set', 'SetCountry', 'Check', 'Clear',

      '_clear',
      '_stringToNodes', '_stringFromNodes',
      '_getCountryCode', '_setupCountry',
      '_setIcon',
      '_userKey', '_userKeyUp', '_userValidate', '_validate', '_validateSuccess', '_validateFailed', 

      'Destroy',

      '_templates'

    ].bindEach(this);
    this._templates();

    if (!Affinity2018.isDomElement(targetNode))
    {
      console.error('No valid element was passed to BankNumberWidget, dummy!');
      return;
    }

    this.CleverForms = Affinity2018.Apps.CleverForms.Default;

    this.ShowCountryIfUnknown = this.CleverForms.ShowCountryIfUnknown;

    targetNode.classList.remove('ui-has-banknumber');
    targetNode.classList.add('ui-banknumber', 'no-validate');
    
    this.initInputNode = targetNode;
    this.initInputNode.type = 'hidden';

    if (!this.initInputNode.hasOwnProperty('widgets')) this.initInputNode.widgets = {};
    this.initInputNode.widgets.BankNumber = this;

    this.banknumberNode = document.createElement('div');
    this.banknumberNode.classList.add('banknumber-box', 'nz');
    this.banknumberNode.innerHTML = this.template;

    this.countryNode = this.banknumberNode.querySelector('.select');
    this.countrySelectNode = this.banknumberNode.querySelector('select.country');
    this.inputBankNode = this.banknumberNode.querySelector('input.bank');
    this.inputBranchkNode = this.banknumberNode.querySelector('input.branch');
    this.inputAccountNode = this.banknumberNode.querySelector('input.account');
    this.inputSuffixNode = this.banknumberNode.querySelector('input.suffix');
    this.suffixNode = this.banknumberNode.querySelector('.suffix-span');
    this.NamesBoxNode = this.banknumberNode.querySelector('.names');
    this.bankNameNode = this.NamesBoxNode.querySelector('.bankname');
    this.branchNameNode = this.NamesBoxNode.querySelector('.branchname');
    this.iconNode = this.banknumberNode.querySelector('.tickcross');

    window.bcs = this.countrySelectNode;

    // widgets.Number
    if (!this.initInputNode.widgets) this.initInputNode.widgets = {};
    this.initInputNode.widgets.BankNumber = this;

    /**/

    var showCountrySelect = true;
    var country = this.DefaultCountryCode;

    if (this.CountryCodes.contains(this.countrySelectNode.value.trim().toUpperCase()))
    {
      country = this.countrySelectNode.value.trim().toUpperCase();
    }

    if (this.initInputNode.dataset.country)
    {
      if (this.CountryCodes.contains(this.initInputNode.dataset.country.trim().toUpperCase()))
      {
        country = this.initInputNode.dataset.country.trim().toUpperCase();
      }
      delete this.initInputNode.dataset.country;
    }
    country = this.CleverForms.GetCountryCodeVariant(country);

    if (this.initInputNode.dataset.countryStatus)
    {
      if (this.initInputNode.dataset.countryStatus.trim().toLowerCase() === 'hide')
      {
        showCountrySelect = false;
      }
      delete this.initInputNode.dataset.countryStatus;
    }

    // Consider this: If we do not know the user or form country, show selects
    if (this.ShowCountryIfUnknown)
    {
      var formCountry = null;
      if (this.CleverForms.hasOwnProperty('FormCountry'))
      {
        formCountry = $a.isNullOrEmpty(this.CleverForms.FormCountry) ? null : this.CleverForms.GetCountryCodeVariant(this.CleverForms.FormCountry);
      }
      var profileCountry = null;
      if (Affinity2018.hasOwnProperty('FormProfile'))
      {
        profileCountry = $a.isNullOrEmpty(Affinity2018.FormProfile.Country) || Affinity2018.FormProfile.Country.toString().trim().toUpperCase() === 'NULL' ? null : this.CleverForms.GetCountryCodeVariant(Affinity2018.FormProfile.Country);
      }
      if ($a.isNullOrEmpty(formCountry) && $a.isNullOrEmpty(profileCountry))
      {
        showCountrySelect = true;
      }
    }
    // Stop considering!

    // new options
    this.countrySelectNode.innerHTML = this.CleverForms.GetCountryOptons(country);

    this.countryNode.classList.add('hidden');
    this.countryNode.removeEventListener('change', this._setupCountry);
    if (showCountrySelect)
    {
      this.countryNode.classList.remove('hidden');
      this.countryNode.addEventListener('change', this._setupCountry);
    }

    this._setupCountry();
    this.SetCountry(country);

    /**/

    this.banknumberNode.querySelectorAll('input[type="text"]').forEach(function(node)
    {
      node.addEventListener('keydown', this._userKey);
      node.addEventListener('keyup', this._userKeyUp);
      node.addEventListener('blur', this._userValidate);
    }.bind(this));

    // insert After initInputNode
    // if there is no initInputNode.nextSibling, the API adds as last child
    this.initInputNode.parentNode.insertBefore(this.banknumberNode, this.initInputNode.nextSibling);

    /**/

    if (Affinity2018.Apps.Plugins.hasOwnProperty('Numbers')) Affinity2018.Apps.Plugins.Numbers.Apply();

    /**/

    //this._setupCountry();
    //if (this.initInputNode.value.trim() !== '') this._stringToNodes();
    if (this.initInputNode.value.trim() !== '')
    {
      this.Set(this.initInputNode.value.trim());
      this.FirstLoad = false;
    }
    else this._validate();
  }

  Get()
  {
    this.initInputNode.value = this._stringFromNodes();
    return this.initInputNode.value;
  }

  GetData()
  {
    return [
      this.Get(),
      this.countrySelectNode.value
    ]
  }

  Set(value)
  {
    if (this.validationLookup && this.validationLookup.hasOwnProperty('cancelToken'))
    {
      this.validationLookup.cancelToken.source.cancel(true);
      this.validationLookup = null;
    }
    this.Clear(true);
    var countryCode = this.DefaultCountryCode;
    if (this.CleverForms.hasOwnProperty('FormCountry'))
    {
      countryCode = this.CleverForms.GetCountryCodeVariant(this.CleverForms.FormCountry !== null ? this.CleverForms.FormCountry : this.DefaultCountryCode);
    }
    if (
      Affinity2018.hasOwnProperty('FormProfile')
      && Affinity2018.FormProfile.hasOwnProperty('Country')
      && Affinity2018.Apps.CleverForms.Default.GetFormEmployeeNo() !== -1
      && this.CountryCodes.contains(Affinity2018.FormProfile.Country)
    )
    {
      countryCode = this.CleverForms.GetCountryCodeVariant(Affinity2018.FormProfile.Country);
    }
    if (Affinity2018.hasOwnProperty('FormCountry') && !$a.isNullOrEmpty(Affinity2018.FormCountry))
    {
      countryCode = this.CleverForms.GetCountryCodeVariant(Affinity2018.FormCountry);
    }

    //var countryCode = this.DefaultCountryCode;
    //if (
    //  Affinity2018.hasOwnProperty('FormProfile')
    //  && Affinity2018.FormProfile.hasOwnProperty('Country')
    //  && this.CountryCodes.contains(Affinity2018.FormProfile.Country)
    //)
    //{
    //  countryCode = Affinity2018.FormProfile.Country;
    //}
    //if (
    //  this.CleverForms.hasOwnProperty('FormCountry')
    //  && this.CountryCodes.contains(this.CleverForms.FormCountry)
    //)
    //{
    //  countryCode = this.CleverForms.FormCountry;
    //}

    //var countryCode = this.DefaultCountryCode;
    if ($a.isArray(value) && value.length === 2) value = value[1] + ',' + value[0];
    if (!$a.isString(value)) value = value.toString().trim();
    if (value.toLowerCase() === 'null') value = '';
    if (value.toLowerCase() === 'null,null')
    {
      value = '';
      countryCode = '';
    }
    if (value.contains(','))
    {
      countryCode = this.CleverForms.GetCountryCodeVariant(value.split(',')[0]);
      value = value.split(',')[1];
    }

    if (value.trim() === '')
    {
      this.SetCountry(countryCode);
      this._setupCountry();
    }
    else
    {
      this.initInputNode.value = value;
      this.SetCountry(countryCode);
      this._setupCountry();
      this._stringToNodes();
      this._validate();
    }

    if (this.CleverForms.hasOwnProperty('Form') && this.initInputNode.closest('div.form-row'))
    {
      this.FormRowNode = this.initInputNode.closest('div.form-row');
      this.CleverForms.Form.ResizeSection(this.FormRowNode);
    }

  }

  SetCountry(country)
  {
    var formRowNode = this.initInputNode.closest('div.form-row');

    country = $a.toString(country).toUpperCase();

    if (country === '' || country === 'NULL') country = this.DefaultCountryCode;

    country = this.CleverForms.GetCountryCodeVariant(country);

    var selectOption = this.countrySelectNode.querySelector('option[value="' + country + '"]');
    var selectIndex = this.countrySelectNode.querySelectorAll('option').indexOf(selectOption);
    this.countrySelectNode.value = country;
    this.countrySelectNode.selectedIndex = selectIndex;

    var showCountrySelect = this.CountryCodes.contains(country) ? false : true;
    var fromFormCountry = Affinity2018.hasOwnProperty('FormCountry') && !Affinity2018.isNullOrEmpty(Affinity2018.FormCountry);

    if (fromFormCountry)
    {
      showCountrySelect = false;
    }
    else
    {
      if (
        showCountrySelect
        && Affinity2018.hasOwnProperty('FormProfile')
        && Affinity2018.FormProfile.hasOwnProperty('Country')
        && this.CountryCodes.contains(Affinity2018.FormProfile.Country)
      )
      {
        showCountrySelect = false;
      }

      if (
        Affinity2018.hasOwnProperty('Apps')
        && Affinity2018.Apps.hasOwnProperty('CleverForms')
        && Affinity2018.Apps.CleverForms.hasOwnProperty('Default')
        && Affinity2018.Apps.CleverForms.Default.GetFormEmployeeNo() === -1)
      {
        showCountrySelect = true;
      }

      // test if emp is create, not this field
      //if (
      //  !showCountrySelect
      //  && this.Config.Type === 'AffinityField'
      //  && this.Config.Details.AffinityField.Mode === this.CleverForms.AffnityFieldModeTypes.Create.Enum
      //)
      //{
      //  showCountrySelect = true;
      //}
    }

    // Consider this: If we do not know the user or form country, show selects
    if (this.ShowCountryIfUnknown)
    {
      var formCountry = null;
      if (this.CleverForms.hasOwnProperty('FormCountry'))
      {
        formCountry = $a.isNullOrEmpty(this.CleverForms.FormCountry) ? null : this.CleverForms.GetCountryCodeVariant(this.CleverForms.FormCountry);
      }
      var profileCountry = null;
      if (Affinity2018.hasOwnProperty('FormProfile'))
      {
        profileCountry = $a.isNullOrEmpty(Affinity2018.FormProfile.Country) || Affinity2018.FormProfile.Country.toString().trim().toUpperCase() === 'NULL' ? null : this.CleverForms.GetCountryCodeVariant(Affinity2018.FormProfile.Country);
      }
      if ($a.isNullOrEmpty(formCountry) && $a.isNullOrEmpty(profileCountry))
      {
        showCountrySelect = true;
      }
    }
    // Stop considering!

    this.countryNode.removeEventListener('change', this._setupCountry);
    this.countryNode.classList.add('hidden');
    if (showCountrySelect)
    {
      this.countryNode.classList.remove('hidden');
      this.countryNode.addEventListener('change', this._setupCountry);
    }

  }

  Check ()
  {
    this.FirstLoad = false;
    this._validate();
  }

  Clear ()
  {
    this._clear();
  }

  /**/

  _clear (resetCountry)
  {
    resetCountry = $a.isBool(resetCountry) ? resetCountry : true;
    if (this.MessageNode && this.MessageNode.parentNode) this.MessageNode.parentNode.removeChild(this.MessageNode);
    this.MessageNode = null;
    this.inputBankNode.value = '';
    this.inputBranchkNode.value = '';
    this.inputAccountNode.value = '';
    this.inputSuffixNode.value = '';
    this.bankNameNode.innerHTML = '';
    this.branchNameNode.innerHTML = '';
    this.bankNameNode.classList.add('hidden');
    this.branchNameNode.classList.add('hidden');
    this._setIcon();
    if (resetCountry)
    {
      var formRowNode = this.initInputNode.closest('div.form-row');

      var defaultCountry = this.DefaultCountryCode;
      if (this.CleverForms.hasOwnProperty('FormCountry'))
      {
        defaultCountry = this.CleverForms.GetCountryCodeVariant(this.CleverForms.FormCountry !== null ? this.CleverForms.FormCountry : this.DefaultCountryCode);
      }
      if (
        Affinity2018.hasOwnProperty('FormProfile')
        && Affinity2018.FormProfile.hasOwnProperty('Country')
        && Affinity2018.Apps.CleverForms.Default.GetFormEmployeeNo() !== -1
        && this.CountryCodes.contains(Affinity2018.FormProfile.Country)
      )
      {
        defaultCountry = this.CleverForms.GetCountryCodeVariant(Affinity2018.FormProfile.Country);
      }
      if (Affinity2018.hasOwnProperty('FormCountry') && !$a.isNullOrEmpty(Affinity2018.FormCountry))
      {
        defaultCountry = this.CleverForms.GetCountryCodeVariant(Affinity2018.FormCountry);
      }
      this.SetCountry(defaultCountry);
    }
  }

  _stringToNodes(str)
  {
    var formRowNode = this.initInputNode.closest('div.form-row');
    str = typeof str === 'string' ? str : this.initInputNode.value;
    str = str.replace(/\s/g, '');
    var splitCheck, parts;
    if (str.countString(',') === 1)
    {
      splitCheck = str.split(',');
      if (splitCheck[1].length === 2 && isNaN(parseFloat(splitCheck[1])))
      {
        this.countrySelectNode.value = splitCheck[1];
      }
      str = splitCheck[0];
    }
    parts = str.split('-');

    var countryCode = this._getCountryCode();
    //if (parts.length === 3) countryCode = 'A';
    //if (parts.length === 4) countryCode = 'N';
    //this.SetCountry(countryCode);

    switch(countryCode)
    {
      case 'A':
      case 'AU':
        if (parts.length === 3)
        {
          this._clear();
          this.inputBankNode.value = parts[0];
          this.inputBranchkNode.value = parts[1];
          this.inputAccountNode.value = parts[2];
        }
        else if(parts.length === 4)
        {
          this._clear();
          this.inputBankNode.value = parts[0];
          this.inputBranchkNode.value = parts[1];
          this.inputAccountNode.value = parts[2] + parts[3];
        }
        //this._userValidate();
        break;
      case 'N':
      case 'NZ':
      default:
        if (parts.length === 3)
        {
          // this is NOT a NZ bank number ..
          this.inputBankNode.value = parts[0];
          this.inputBranchkNode.value = parts[1];
          this.inputAccountNode.value = parts[2];
          this.inputSuffixNode.value = '';
          console.warn('Trying to enforce an AU formatted bank number {0} to a NZ banknumber field format'.format(str));
        }
        else if (parts.length === 4)
        {
          this._clear();
          this.inputBankNode.value = parts[0].length > 2 ? parts[0].substring(0, 2) : parts[0];
          this.inputBranchkNode.value = parts[1];
          this.inputAccountNode.value = parts[2];
          this.inputSuffixNode.value = parts[3];
          if(parts[2].length > 7)
          {
            this.inputAccountNode.value = parts[2].substring(0, 7);
            this.inputSuffixNode.value = parts[2].substring(7, parts[2].length);
          }
        }
        //this._userValidate();
        break;
    }
  }
  
  _stringFromNodes ()
  {
    var str = this.inputBankNode.value + '-' + this.inputBranchkNode.value + '-' + this.inputAccountNode.value + '-' + this.inputSuffixNode.value;
    str = str.replace(/\s/g,'');
    str = str.replace(/\-\-/g,'-');
    if(str[str.length - 1] === '-') str = str.substring(0, str.length - 1);
    if(str[0] === '-') str = str.substring(1);
    return str;
  }

  _getCountryCode ()
  {
    try
    {
      if (this.countrySelectNode.selectedIndex !== '-1')
      {
        //return this.countrySelectNode.options[this.countrySelectNode.selectedIndex].value;
        return this.CleverForms.GetCountryCodeVariant(this.countrySelectNode.options[this.countrySelectNode.selectedIndex].value);
      }
      //return this.countrySelectNode.value;
      return this.CleverForms.GetCountryCodeVariant(this.countrySelectNode.value);
    }
    catch (err) { }
    //return 'NZ';
    return this.DefaultCountryCode;
  }

  _setupCountry ()
  {
    this._clear(false);
    var country = this._getCountryCode();
    var useCountry = country;
    if (this.CleverForms.hasOwnProperty('FormCountry'))
    {
      useCountry = this.CleverForms.GetCountryCodeVariant(this.CleverForms.FormCountry !== null ? this.CleverForms.FormCountry : country);
    }
    switch (useCountry)
    {
      case 'A':
      case 'AU':
      default:
        this.suffixNode.classList.add('hidden');
        this.inputSuffixNode.classList.add('hidden');
        this.inputBankNode.setAttribute('maxLength', 3);
        this.inputBranchkNode.setAttribute('maxLength', 4);
        this.inputAccountNode.setAttribute('maxLength', 10);
        this.banknumberNode.classList.remove('nz');
        this.banknumberNode.classList.add('au');
        break;
      case 'N':
      case 'NZ':
        this.suffixNode.classList.remove('hidden');
        this.inputSuffixNode.classList.remove('hidden');
        this.inputBankNode.setAttribute('maxLength', 2);
        this.inputBranchkNode.setAttribute('maxLength', 4);
        this.inputAccountNode.setAttribute('maxLength', 7);
        this.banknumberNode.classList.remove('au');
        this.banknumberNode.classList.add('nz');
        break;
    }
  }

  _setIcon (valid)
  {
    var state = 'reset';
    if (typeof valid === 'boolean' && valid === true) state = 'valid';
    if (typeof valid === 'boolean' && valid === false) state = 'invalid';
    this.iconNode.classList.remove('green', 'icon-tick', 'icon-tick-round', 'red', 'icon-cross', 'icon-cross-round', 'grey', 'icon-blocked');
    switch (state)
    {
      case 'valid':
        //this.iconNode.classList.add('green','icon-tick');
        this.iconNode.classList.add('green', 'icon-tick-round');
        break;
      case 'invalid':
        //this.iconNode.classList.add('red','icon-cross');
        this.iconNode.classList.add('red', 'icon-cross-round');
        break;
      case 'reset':
      default:
        this.iconNode.classList.add('grey','icon-blocked');
        break;
    }
  }

  _userKey (ev)
  {
    if (ev.target === this.inputBankNode)
    {
      if (ev.ctrlKey && ev.keyCode === 86) // ctrl + v (paste)
      {
        this.bankLimit = parseInt(this.inputBankNode.getAttribute('maxLength'));
        if (this.inputBankNode.widgets && this.inputBankNode.widgets.Number) this.inputBankNode.widgets.Number.disable();
        this.inputBankNode.setAttribute('maxLength', 22);
        this.pasting = true;
      }
    }
  }
  _userKeyUp (ev)
  {
    if (this.pasting && ev && ev.target === this.inputBankNode)
    {
      var fullValue = this.inputBankNode.value.trim(), numbersValue = fullValue.replace(/[^0-9]/gi, '').trim();
      this.inputBankNode.setAttribute('maxLength', this.bankLimit);
      this.inputBankNode.value = numbersValue.substring(0, this.bankLimit);
      if (this.inputBankNode.widgets && this.inputBankNode.widgets.Number) this.inputBankNode.widgets.Number.enable();
      if (numbersValue.length >= 12)
      {
        this._stringToNodes(fullValue);
      }
      this.initInputNode.value = this._stringFromNodes();
    }

    if (!this.pasting && !ev.shiftKey && ev.key !== 'Tab' && ev.key !== 'Shift')
    {
      if (ev.target === this.inputBankNode && this.inputBankNode.value.trim().length === parseInt(this.inputBankNode.getAttribute('maxLength')))
      {
        this.inputBranchkNode.focus();
      }
      if (ev.target === this.inputBranchkNode && this.inputBranchkNode.value.trim().length === parseInt(this.inputBranchkNode.getAttribute('maxLength')))
      {
        this.inputAccountNode.focus();
      }
      if (ev.target === this.inputAccountNode && this.inputAccountNode.value.trim().length === parseInt(this.inputAccountNode.getAttribute('maxLength')))
      {
        this.inputSuffixNode.focus();
      }
    }

    this.pasting = false;

    this.initInputNode.value = this._stringFromNodes();

    this._userValidate();
  }

  _userValidate ()
  {
    clearTimeout(this._userValidateDelay);
    this._userValidateDelay = setTimeout(this._validate, 500);
  }


  _validate(attemtpCountry)
  {
    //this.Valid = false;
    attemtpCountry = attemtpCountry || this._getCountryCode();

    if (this.MessageNode && this.MessageNode.parentNode) this.MessageNode.parentNode.removeChild(this.MessageNode);
    this.MessageNode = null;

    if (this.CleverForms.hasOwnProperty('Form'))
    {
      this.CleverForms.Form.ResizeSection(this.FormRowNode);
    }

    var api = null, employeeNumber = null;

    if (
      window.hasOwnProperty('Affinity2018')
      && Affinity2018.isPropObject(Affinity2018, 'UserProfile')
      && Affinity2018.isPropString(Affinity2018.UserProfile, 'EmployeeNumber')
      && Affinity2018.UserProfile.EmployeeNumber.trim() !== ''
      && Affinity2018.isPropObject(Affinity2018, 'ApiEndpoints')
      && Affinity2018.isPropString(Affinity2018.ApiEndpoints, 'BankValidationApi')
      && Affinity2018.ApiEndpoints.BankValidationApi.trim() !== ''
    )
    {
      api = Affinity2018.ApiEndpoints.BankValidationApi + '';
      employeeNumber = Affinity2018.UserProfile.EmployeeNumber + '';
    }
    else
    {
      return;
    }

    if (attemtpCountry == '')
    {
      this._setIcon();
      return;
    }

    this.iconNode.classList.add('validating');

    if (this.UseQueue)
    {
      Affinity2018.RequestQueue.Post(api, {
        BankAccount: this._stringFromNodes(),
        CountryCode: this.countrySelectNode.value
      }, this._validateSuccess, this._validateFailed, 0);
    }
    else
    {
      var postData = new FormData();
      PostData.append('BankAccount', this._stringFromNodes());
      postData.append('CountryCode', this.countrySelectNode.value);
      if (this.validationLookup && this.validationLookup.hasOwnProperty('cancelToken')) this.validationLookup.cancelToken.source.cancel(true);
      this.validationLookup = axios({
        method: 'POST',
        url: api,
        data: postData,
        cancelToken: new axios.CancelToken(function () { })
      }).then(this._validateSuccess).catch(this._validateFailed);
    }

  }


  _validateSuccess(response)
  {

    // stub
    //response = {
    //  config: {
    //    data: postData
    //  },
    //  data: [
    //    {
    //      IsValid: true,
    //      CountryCode: 'N',
    //      BranchName: 'My NZ Branch',
    //      BankName: 'My NZ Bank'
    //    },
    //    {
    //      IsValid: false,
    //      CountryCode: 'A',
    //      BranchName: 'My AU Branch',
    //      BankName: 'My AU Bank'
    //    }
    //  ]
    //};

    if (
      typeof response === 'object'
      && !response.hasOwnProperty('data')
    )
    {
      response = {
        data: response
      };
    }

    if (
      typeof response === 'object'
      && response.hasOwnProperty('data')
      && $a.isArray(response.data)
    )
    {

      if (response.hasOwnProperty('config'))
      {
        // Validity check: Make sure the validatino result is for this field
        var responsePostData = {}; // Object.fromEntries(response.config.data.entries());
        response.config.data.forEach((value, key) => (responsePostData[key] = value));
        var check = responsePostData.BankAccount + ',' + responsePostData.CountryCode;
        var against = this._stringFromNodes() + ',' + this.countrySelectNode.value;
        if (check !== against)
        {
          this._validate();
          return;
        }
      }
      var isValid = false;
      var validData = {
        bankName: '',
        branchName: ''
      };
      var formCountry = null;
      if (this.CleverForms.hasOwnProperty('FormCountry'))
      {
        formCountry = $a.isNullOrEmpty(this.CleverForms.FormCountry) ? null : this.CleverForms.GetCountryCodeVariant(this.CleverForms.FormCountry);
      }        
      var profileCountry = null;
      if (Affinity2018.hasOwnProperty('FormProfile'))
      {
        profileCountry = $a.isNullOrEmpty(Affinity2018.FormProfile.Country) || Affinity2018.FormProfile.Country.toString().trim().toUpperCase() === 'NULL' ? null : this.CleverForms.GetCountryCodeVariant(Affinity2018.FormProfile.Country);
      }
      var selectedCountry = this.CleverForms.GetCountryCodeVariant(this._getCountryCode());
      var compareCountry = !$a.isNullOrEmpty(formCountry) ? formCountry : !$a.isNullOrEmpty(profileCountry) ? profileCountry : selectedCountry;
      for (var c = 0; c < response.data.length; c++)
      {
        var validationData = response.data[c];
        if (validationData.IsValid && validationData.CountryCode === compareCountry)
        {
          isValid = true;
          validData.bankName = validationData.BankName;
          validData.branchName = validationData.BranchName;
          break;
        }
      }
      if (!isValid)
      {
        for (c = 0; c < response.data.length; c++)
        {
          validationData = response.data[c];
          if (validationData.IsValid && validationData.CountryCode !== compareCountry)
          {
            var message = $a.Lang.ReturnPath('app.cf.form.' + (this.CleverForms.hasOwnProperty('FormCountry') && this.CleverForms.FormCountry !== null ? 'form_country_vaidation_warning' : 'employee_country_vaidation_warning'), {
              fieldName: this.initInputNode.parentNode.querySelector('label') ? this.initInputNode.parentNode.querySelector('label').innerText.trim().shorten(50) : 'Bank Number',
              country: this.CleverForms.GetCountryDisplayVariant(validationData.CountryCode),
              formCountry: this.CleverForms.GetCountryDisplayVariant(compareCountry)
            });
            if (this.MessageNode && this.MessageNode.parentNode) this.MessageNode.parentNode.removeChild(this.MessageNode);
            this.MessageNode = null;
            this.MessageNode = document.createElement('div');
            this.MessageNode.classList.add('country-warning');
            this.NamesBoxNode.parentNode.insertBefore(this.MessageNode, this.NamesBoxNode.nextSibling);
            this.MessageNode.innerHTML = message;
            this.bankNameNode.classList.add('hidden');
            this.branchNameNode.classList.add('hidden');
            if (this.CleverForms.hasOwnProperty('Form'))
            {
              this.CleverForms.Form.ResizeSection(this.FormRowNode);
            }
            break;
          }
        }
      }
    }
    this.Valid = isValid;
    this._validated(validData);
    this.iconNode.classList.remove('validating');
  }

  _validateFailed(error)
  {
    this.Valid = false;
    this._validated();
    this.iconNode.classList.remove('validating');
  }

  _validated(data)
  {
    if (this.FirstLoad) this._setIcon();
    if (
      typeof data === 'object'
      && data.hasOwnProperty('bankName')
      && data.hasOwnProperty('branchName')
    )
    {
      this.bankNameNode.innerHTML = data.bankName !== 'failed' ? data.bankName : '';
      this.branchNameNode.innerHTML = data.branchName !== 'failed' && data.branchName !== data.bankName ? data.branchName : '';

      if (this.bankNameNode.innerText.trim() == '') this.bankNameNode.classList.add('hidden');
      else this.bankNameNode.classList.remove('hidden');

      if (this.branchNameNode.innerText.trim() == '') this.branchNameNode.classList.add('hidden');
      else this.branchNameNode.classList.remove('hidden');
    }
    this.FirstLoad = false;
    this.LastValidation = this._stringFromNodes();

    if (this.Valid)
    {
      this._setIcon(this.Valid);
    }
    else
    {
      if (this._stringFromNodes() === '') this._setIcon();
      else this._setIcon(this.Valid);
    }
    if (this.CleverForms.hasOwnProperty('Form'))
    {
      this.CleverForms.Form.ResizeSection(this.FormRowNode);
    }
    this.initInputNode.dispatchEvent(new CustomEvent('validated'));
  }

  /**/

  Destroy ()
  {
    clearTimeout(this._userValidateDelay);
    if (this.initInputNode.hasOwnProperty('widgets') && this.initInputNode.widgets.hasOwnProperty('String')) this.initInputNode.widgets.String.Destroy();
    if (this.initInputNode.hasOwnProperty('widgets') && this.initInputNode.widgets.hasOwnProperty('Number')) this.initInputNode.widgets.Number.Destroy();
    this.countryNode.removeEventListener('change', this._setupCountry);
	  this.banknumberNode.querySelectorAll('input[type="text"]').forEach(function(node)
    {
      node.removeEventListener('keydown', this._userKey);
      node.removeEventListener('keyup', this._userKeyUp);
      node.removeEventListener('blur', this._userValidate);
      if (node.hasOwnProperty('widgets') && node.widgets.hasOwnProperty('String')) node.widgets.String.Destroy();
      if (node.hasOwnProperty('widgets') && node.widgets.hasOwnProperty('Number')) node.widgets.Number.Destroy();
    }.bind(this));
    this.initInputNode.classList.remove('ui-banknumber');
    this.initInputNode.type = 'text';
    this.banknumberNode.innerHTML = '';
    this.banknumberNode.parentNode.removeChild(this.banknumberNode);
    delete this.initInputNode.widgets.BankNumber;
    for (var key in this)
    {
      if (this.hasOwnProperty(key))
      {
        this[key] = null;
        delete this[key];
      }
    }
  }

  /**/

  _templates ()
  {
    this.template = `
    <div class="select hidden">
      <select class="country">
      </select>
    </div>
    <input class="bank ui-has-integer" type="text" maxlength="2">
    <span>-</span>
    <input class="branch ui-has-integer" type="text" maxlength="4">
    <span>-</span>
    <input class="account ui-has-integer" type="text" maxlength="7">
    <span class="suffix-span">-</span>
    <input class="suffix ui-has-integer" type="text" maxlength="3">
    <span class="tickcross grey icon-blocked"></span>
    <div class="names">
      <div class="bankname hidden"></div>
      <div class="branchname hidden"></div>
    </div>
    `;
  }

};
;
/***************************************************************************************************************************************************/
/***************************************************************************************************************************************************/
/***                                                                             *******************************************************************/
/***   ██████  ██  ██████      ███████ ███████  █████  ██████   ██████ ██   ██   *******************************************************************/
/***   ██   ██ ██ ██           ██      ██      ██   ██ ██   ██ ██      ██   ██   *******************************************************************/
/***   ██████  ██ ██   ███     ███████ █████   ███████ ██████  ██      ███████   *******************************************************************/
/***   ██   ██ ██ ██    ██          ██ ██      ██   ██ ██   ██ ██      ██   ██   *******************************************************************/
/***   ██████  ██  ██████      ███████ ███████ ██   ██ ██   ██  ██████ ██   ██   *******************************************************************/
/***                                                                             *******************************************************************/
/***************************************************************************************************************************************************/
/*********************************************************************************************************************** Source63 *** big search ***/

if(!('Affinity2018' in window)) Affinity2018 = {};
if(!('Classes' in Affinity2018)) Affinity2018.Classes = {};
if(!('Plugins' in Affinity2018.Classes)) Affinity2018.Classes.Plugins = {};

if(!('Apps' in Affinity2018)) Affinity2018.Apps = {};
if(!('Plugins' in Affinity2018.Apps)) Affinity2018.Apps.Plugins = {};

Affinity2018.Classes.Plugins.BigSearch = class
{
  _options()
  {
    this.WidgetName = 'BigSearch';

    this.resultPageSize = 10;

    this.useQueue = true;

    this.api = false;
    this.resultCallback = function () { };
    this.request = false;

    this.maxPageSize = 9999999; // show all results in one giant page

    this.defaultParams = {
      userInput: 'q',
      pageSize: 'size',
      pageNumber: 'page',
      grandTotal: 'total',
      type: 'type',
      results: 'results',
      customInputs: []
    };
  }

  constructor(api, resultCallback)
  {
    this._options();
    [

      'SetApi', 'SetResultCallback', 'SetParams',
      'Insert',
      'AddFilter',
      'Reset', 'Clear',
      'ProcessResults', 'InsertResult',

      '_delayReset', '_keySearch', '_doLookup', '_gotResults',
      '_pagination', '_paginationClicked',
      '_showAll',
      '_resultsClicked',
      '_canceled', '_requestCanceled',
      '_filterLookupComplete',
      '_reset', '_clear'

    ].bindEach(this);
    this._templates();

    if (this.useQueue && !Affinity2018.hasOwnProperty('RequestQueue'))
    {
      Affinity2018.RequestQueue = new Affinity2018.Classes.Plugins.RequestQueue();
    }

    this.api = Affinity2018.isUrl(api) ? api : false;
    this.resultCallback = typeof resultCallback === 'function' ? resultCallback : false;

    this.params = Affinity2018.jsonCloneObject(this.defaultParams);

    this.templateNode = document.createElement('div');
    this.templateNode.classList.add('affinity2018', 'search-form-container');
    this.templateNode.innerHTML = this.template;

    this.searchFormNode = this.templateNode.querySelector('.search-form');
    this.checkFilterBoxNode = this.templateNode.querySelector('.search-form-check-filters');
    this.selectFilterBoxNode = this.templateNode.querySelector('.search-form-select-filters');

    this.InputNode = this.templateNode.querySelector('.search-form-input input');

    if (!this.InputNode.hasOwnProperty('widgets')) this.InputNode.widgets = {};
    this.InputNode.widgets.BigSearch = this;

    this.InputNode = this.templateNode.querySelector('input');
    this.InputNode.classList.add('ui-bigsearch');
    this.InputNode.addEventListener('keyup', this._keySearch);

    this.resultsInfoNode = this.templateNode.querySelector('.result-info');
    this.showingNode = this.resultsInfoNode.querySelector('.search-showing');
    this.showAllNode = this.resultsInfoNode.querySelector('.search-show-all');

    this.searchResultsNode = this.templateNode.querySelector('.search-results');

    this.paginationNode = this.templateNode.querySelector('.pagination');
    this.paginationBackNode = this.paginationNode.querySelector('.back');
    this.paginationForwardNode = this.paginationNode.querySelector('.forward');

    this.loader = this.templateNode.querySelector('.search-loader');

    this.searchResultsNode.addEventListener('click', this._resultsClicked);
    this.paginationNode.addEventListener('click', this._paginationClicked);
    this.showAllNode.addEventListener('click', this._showAll);

  }

  SetApi(api)
  {
    this.api = Affinity2018.isUrl(api) ? api : this.api;
    this._delayReset();
  }

  SetResultCallback(method)
  {
    this.resultCallback = typeof method === 'function' ? method : this.resultCallback;
    this._delayReset();
  }

  SetParams(params)
  {
    var key, c;
    this.params = {};
    for (key in this.defaultParams)
    {
      if (this.defaultParams.hasOwnProperty(key))
      {
        if (params.hasOwnProperty(key))
        {
          if (key === 'customInputs')
          {
            this.params[key] = [];
            if (Array.isArray(params[key]))
            {
              for (c = 0; c < params[key].length; c++)
              {
                this.params[key][c] = params[key][c];
              }
            }
          }
          else
          {
            this.params[key] = params[key];
          }
        }
        else
        {
          this.params[key] = this.defaultParams[key];
        }
      }
    }
    this._delayReset();
  }

  Insert(targetNode, placeholder, checkfilters, selectFilters)
  {
    if (!Affinity2018.isDomElement(targetNode))
    {
      console.error('BigSearch Insert method first parameter must be a DOM element');
      return false;
    }

    targetNode.appendChild(this.templateNode);

    if (typeof placeholder === 'string')
    {
      this.InputNode.placeholder = placeholder;
    }

    if (Array.isArray(checkfilters))
    {
      checkfilters.forEach(this.AddFilter, 'check');
    }

    if (Array.isArray(selectFilters))
    {
      selectFilters.forEach(this.AddFilter, 'select');
    }

    this.templateNode.classList.remove('fixed-height');
    if (Affinity2018.Browser.isie && Affinity2018.Browser.version < 12) this.templateNode.style.height = '';
    else this.templateNode.style.height = null;
    if (targetNode.classList.contains('fixed-height')) this.templateNode.classList.add('fixed-height');
    if (targetNode.dataset.fixedHeight && !isNaN(parseInt(targetNode.dataset.fixedHeight)))
    {
      this.templateNode.classList.add('fixed-height');
      this.templateNode.style.height = parseInt(targetNode.dataset.fixedHeight) + 'px';
    }

    this._delayReset();
  }

  AddFilter(filterData, type)
  {
    type = type || 'select';
    if (
      Affinity2018.isPropString(filterData, 'key')
      && Affinity2018.isPropString(filterData, 'label')
    )
    {
      var filterNode = document.createElement('div');
      filterNode.classList.add('affinity2018', 'search-form-container', 'filter-' + filterData.key);
      switch (type)
      {
        case 'select':
          filterNode.innerHTML = this.selectFilterTemplate;
          filterNode.querySelector('select').name = filterData.key;
          filterNode.querySelector('label').innerHTML = filterData.label;
          break;
      }
      this.filterBoxNode.appendChild(filterNode);
      if (Affinity2018.isPropString(filterData, 'api'))
      {
        Affinity2018.RequestQueue.Add(filterData.api, function (data)
        {
          this._filterLookupComplete(filterData.key, data, type);
        }.bind(this));
      }
      if (Affinity2018.isPropArray(filterData, 'data'))
      {
        this._filterLookupComplete(filterData.key, data, type);
      }
    }
  }

  Search(str)
  {
    this.InputNode.value = str;
    this._doLookup();
  }

  Reset()
  {
    this._reset();
  }

  Clear()
  {
    this._clear();
  }

  ProcessResults(resultObj)
  {
    this._clear();
    if (
      this.params.results in resultObj
      && Affinity2018.isPropArray(resultObj, this.params.results)
    )
    {

      var html = '',
        inc = 0,
        inserted = false,
        emptyQuery = false,
        showingAll = false,
        data = false;

      if (
        resultObj
        && !isNaN(parseInt(resultObj[this.params.pageSize]))
        && !isNaN(parseInt(resultObj[this.params.pageNumber]))
        && !isNaN(parseInt(resultObj[this.params.grandTotal]))
      )
      {
        data = {
          query: resultObj[this.params.userInput],
          size: resultObj[this.params.pageSize],
          page: resultObj[this.params.pageNumber],
          total: resultObj[this.params.grandTotal],
          type: resultObj[this.params.type],
          results: resultObj[this.params.results]
        };
      }

      if (data)
      {

        emptyQuery = typeof data.query === 'string' && data.query.trim() !== '' ? false : true;
        showingAll = data.size === this.maxPageSize;

        if (data.results.length > 0 && !showingAll) this.showAllNode.classList.remove('hidden');
        else this.showAllNode.classList.add('hidden');
        if (data.query == null) this.showAllNode.classList.add('hidden');

        this.resultsInfoNode.classList.remove('hidden');
        html = '';
        html += 'Showing ';
        html += (!emptyQuery || showingAll ? data.results.length : '0') + ' results from ';
        html += data.total + ' ';
        html += this._plural(data.type, data.results.length);
        if (!emptyQuery) html += ' matching "' + data.query + '"';
        this.showingNode.innerHTML = html;

        if ((emptyQuery || data.query === null) && !showingAll)
        {
          resultObj[this.params.grandTotal] = 0;
          data.results = [];
        }

        this.ResultIndex = [];
        while (inc < data.results.length)
        {
          inserted = this.InsertResult(data.results[inc]);
          inc++;
        }

        this._pagination(resultObj);
        this.searchResultsNode.classList.remove('hide');

        data = null;
      }
      else
      {
        this.searchResultsNode.classList.add('hide');
      }
    }
    else
    {
      this.searchResultsNode.classList.add('hide');
    }
  }

  InsertResult (data)
  {
    var resultsNode = document.createElement('div');
    resultsNode.innerHTML = this.resultTemplate;
    resultsNode.querySelector('.label').innerHTML = '';
    resultsNode.querySelector('.info').innerHTML = '';
    resultsNode.querySelector('.desc').innerHTML = '';
    if (Affinity2018.isPropString(data, 'Label')) resultsNode.querySelector('.label').innerHTML = data.Label;
    if (Affinity2018.isPropString(data, 'Info')) resultsNode.querySelector('.info').innerHTML = data.Info;
    if (Affinity2018.isPropString(data, 'Description')) resultsNode.querySelector('.desc').innerHTML = data.Description;
    resultsNode.querySelector('div').dataset.index = this.ResultIndex.length;
    this.ResultIndex.push(data);
    this.searchResultsNode.appendChild(resultsNode.querySelector('div'));
    return true;
  }

  /**/

  _reset()
  {
    this.InputNode.value = '';
    this._clear();
    this._delayReset();
  }

  _clear ()
  {
    this.resultsInfoNode.classList.add('hidden');
    this.showingNode.innerHTML = '';
    this.searchResultsNode.innerHTML = '';
    this.searchResultsNode.scrollTo(0, 0);
    this.paginationNode.classList.add('hidden');
    this.paginationNode.querySelectorAll('a.page, a.current').forEach(function(pageNode)
    {
      this.paginationNode.removeChild(pageNode);
    }.bind(this));
  }

  _filterLookupComplete (key, data, type)
  {
    var filterNode = this.filterBoxNode.querySelector('.filter-' + key),
        inc = 0,
        formNode, childNode;
    if (
      typeof data === 'object'
      && Array.isArray(data)
      && data.length > 0
    )
    {
      switch (type)
      {
        case 'check':
          formNode = this.filterBoxNode;
          break;
        case 'select':
          formNode = filterNode.querySelector('select');
          break;
      }
      while (inc < data.length)
      {
        if (
          Affinity2018.isPropString(data[inc], 'key')
          && Affinity2018.isPropString(data[inc], 'value')
        )
        {
          switch (type)
          {
            case 'check':
              childNode = document.createElement('div');
              childNode.innerHTML = this.checkFilterTemplate;
              childNode.querySelector('label').innerHTML = data[inc].value;
              childNode.querySelector('value').innerHTML = data[inc].key;
              formNode.appendChild(childNode.querySelector('div'));
              break;
            case 'select':
              childNode = document.createElement('option');
              childNode.innerHTML = data[inc].value;
              childNode.value = data[inc].key;
              formNode.appendChild(childNode.querySelector('div'));
              break;
          }
        }
        inc++;
      }
    }
  }

  _keySearch (ev)
  {
    clearTimeout(this._lookupDelay);
    this._lookupDelay = setTimeout(this._doLookup, 500);
    this.loader.classList.add('show');
  }

  _delayReset ()
  {
    clearTimeout(this._lookupDelay);
    this._lookupDelay = setTimeout(this._doLookup, 500, 1, 0, '');
    this.loader.classList.add('show');
  }

  _doLookup (page, size, query)
  {
    if (!this.api) return false;
    clearTimeout(this._lookupDelay);
    page = typeof page === 'number' ? page : 1;
    size = typeof size === 'number' ? size : this.resultPageSize;
    query = typeof query === 'string' ? query.trim() : false;
    query = encodeURIComponent((query ? query.trim() : this.InputNode.value.trim()));
    var api = this.api.indexOf('?') > 1 ? this.api + '&' : this.api + '?',
        p = 0, param;
    api += this.params.pageSize + '=' + size;
    api += '&' + this.params.pageNumber + '=' + page;
    api += '&' + this.params.userInput + '=' + query;
    for ( ; p < this.params.customInputs.length; p++)
    {
      param = this.params.customInputs[p];
      if (
        this.templateNode.querySelector('.' + param.inputParam)
        && this.templateNode.querySelector('.' + param.inputParam).value.trim() !== ''
      )
      {
        api += '&' + param.inputParam + '=' + this.templateNode.querySelector('.' + param.inputParam).value.trim();
      }
    }
    /*
    if(this.useQueue)
    {
      Affinity2018.RequestQueue.Remove(api, 'get');
      Affinity2018.RequestQueue.Add(api, this._gotResults, this._gotResultsError, 1);
    }
    else
    {
    }
    */
    if (this.request && this.request.hasOwnProperty('cancelToken'))
    {
      this.request.cancelToken.source.cancel(true);
    }
    else
    {
      this.request = axios({
        method: 'get',
        url: api,
        cancelToken: new axios.CancelToken(this._requestCanceled)
      })
      .then(this._gotResults)
      .catch(function (error)
      {
        this.loader.classList.remove('show');
        console.error(error);
      }.bind(this));
    }
  }

  _gotResults (response)
  {
    if(response)
    {
      if (
        'status' in response
        && response.status === 200
        && Affinity2018.isPropObject(response, 'data')
      )
      {
        this.ProcessResults(response.data);
      }
      if (
        'Results' in response
        && Affinity2018.isPropArray(response, 'Results')
      )
      {
        this.ProcessResults(response);
      }
    }
    this.loader.classList.remove('show');
  }

  _gotResultsError (error)
  {
    console.error(error);
    this.loader.classList.remove('show');
  }

  _resultsClicked (ev)
  {
    var target = ev.target.classList.contains('search-result') ? ev.target : ev.target.closest('.search-result');
    if(
      Affinity2018.isDomElement(target)
      && target.dataset.index
      && !isNaN(parseInt(target.dataset.index))
      && this.ResultIndex[parseInt(target.dataset.index)]
      && this.ResultIndex[parseInt(target.dataset.index)].hasOwnProperty('Data')
      && typeof this.resultCallback === 'function'
    )
    {
      this.resultCallback({
        target: target,
        event: ev,
        data: this.ResultIndex[parseInt(target.dataset.index)].Data
      });
    }
  }

  _showAll ()
  {
    clearTimeout(this._lookupDelay);
    this.loader.classList.add('show');
    this._doLookup(1, this.maxPageSize);
  }

  _pagination (resultObj)
  {

    this.paginationNode.classList.add('hidden');
    this.paginationNode.querySelectorAll('a.page, a.current').forEach(function(pageNode)
    {
      this.paginationNode.removeChild(pageNode);
    }.bind(this));

    var data = false;

    if (
      resultObj
      && Affinity2018.isPropInt(resultObj, this.params.pageSize)
      && Affinity2018.isPropInt(resultObj, this.params.pageNumber)
      && Affinity2018.isPropInt(resultObj, this.params.grandTotal)
    )
    {
      data = {
        size: resultObj[this.params.pageSize],
        page: resultObj[this.params.pageNumber],
        total: resultObj[this.params.grandTotal],
        results: resultObj[this.params.results]
      };
    }

    if (data)
    {
      if (data.total > data.results.length)
      {
        var pages = Math.ceil(data.total / data.size),
            page = 0,
            klass, pageNode;
        if(pages > 1)
        {
          while (page < pages)
          {
            klass = (page + 1) === data.page ? 'current' : 'page';
            pageNode = document.createElement('a');
            pageNode.classList.add(klass, 'page' + (page + 1));
            pageNode.dataset.page = page;
            pageNode.innerHTML = page + 1;
            this.paginationNode.insertBefore(pageNode, this.paginationForwardNode);
            page++;
          }

          this.paginationForwardNode.classList.remove('disabled');
          if (data.page === 1) this.paginationBackNode.classList.add('disabled');
          if (data.page > 1) this.paginationBackNode.classList.remove('disabled');
          if (data.page >= pages) this.paginationForwardNode.classList.add('disabled');

          this.paginationNode.dataset.pages = pages;
          this.paginationNode.classList.remove('hidden');

          var paginationHeight = this.paginationNode.getBoundingClientRect().height;
          var searchFormHeight = this.searchFormNode.getBoundingClientRect().height;
          var regionHeight = this.templateNode.getBoundingClientRect().height;
          var searchHeight = Math.floor(regionHeight - paginationHeight - searchFormHeight - 30);

          this.searchResultsNode.style.height = searchHeight + 'px';

        }

      }
      data = null;
    }
  }

  _paginationClicked (ev)
  {
    var target = ev.target.tagName.toLowerCase() === 'a' ? ev.target : ev.target.closest('a');
    if (target && !target.classList.contains('disabled'))
    {
      var pages = parseInt(this.paginationNode.dataset.pages),
          current = parseInt(this.paginationNode.querySelector('.current').dataset.page) + 1,
          page;
      if(target.classList.contains('back'))
      {
        page = current - 1;
        page = page < 1 ? 1 : page;
        this._doLookup(page, this.resultPageSize);
      }
      else if (target.classList.contains('forward'))
      {
        page = current + 1;
        page = page > pages ? pages : page;
        this._doLookup(page, this.resultPageSize);
      }
      else
      {
        page = parseInt(target.dataset.page) + 1;
        this._doLookup(page, this.resultPageSize);
      }
      this.searchResultsNode.scrollTo(0, 0);
    }
  }

  /**/

  _requestCanceled (continueWithLookups)
  {
    this.request = false;
    continueWithLookups = typeof continueWithLookups === 'boolean' ? continueWithLookups : false;
    if(continueWithLookups)
    {
      this._doLookup(1, 0, '');
    }
  }

  /* helpers */

  _plural (what, count)
  {
    return what + (count !== 1 ? 's' : '');
  }

  /**/

  Destroy()
  {
    this.InputNode.classList.remove('ui-bigsearch');
    this.InputNode.removeEventListener('keyup', this._keySearch);
    this.searchResultsNode.removeEventListener('click', this._resultsClicked);
    this.paginationNode.removeEventListener('click', this._paginationClicked);
    this.showAllNode.removeEventListener('click', this._showAll);
    this.templateNode.innerHTML = '';
    this.resultCallback = null;
    delete this.lookupNode.widgets["BifSearch"];
    for (var key in this)
    {
      if (this.hasOwnProperty(key))
      {
        this[key] = null;
        delete this[key];
      }
    }
  }

  /**/

  _templates ()
  {
    this.template = `
    <div class="search-form">
      <div class="search-form-input">
        <input type="text" placeholder="Search" />
      </div>
      <div class="search-form-check-filters"></div>
      <div class="search-form-select-filters"></div>
      <div class="result-info hidden">
        <div class="search-showing"></div>
        <div class="search-show-all">Show all results</div>
      </div>
    </div>
    <div class="search-results hide">
    </div>
    <div class="search-loader">
      <svg class="search-spinner" width="65px" height="65px" viewBox="0 0 66 66" xmlns="http://www.w3.org/2000/svg">
        <circle class="search-circle" fill="none" stroke-width="6" stroke-linecap="round" cx="33" cy="33" r="30"></circle>
      </svg>
    </div>
    <div class="pagination hidden">
      <a class="back icon-arrow-line-small-left disabled"></a>
      <a class="forward icon-arrow-line-small-right disabled"></a>
    </div>
    `;

    this.checkFilterTemplate = `
      <div class="filter-check">
        <label></label>
        <input type="checkbox" />
      </div>
    `;

    this.selectFilterTemplate = `
      <div class="filter-box">
        <label></label>
        <select></select>
      </div>
    `;

    this.resultTemplate = `
      <div class="search-result">
        <div class="label"></div>
        <div class="info"></div>
        <div class="desc"></div>
      </div>
    `;
  }

};
;
/***************************************************************************************************************************************************/
/***************************************************************************************************************************************************/
/***                                                                       *************************************************************************/
/***    ██████  █████  ██      ███████ ███    ██ ██████   █████  ██████    *************************************************************************/
/***   ██      ██   ██ ██      ██      ████   ██ ██   ██ ██   ██ ██   ██   *************************************************************************/
/***   ██      ███████ ██      █████   ██ ██  ██ ██   ██ ███████ ██████    *************************************************************************/
/***   ██      ██   ██ ██      ██      ██  ██ ██ ██   ██ ██   ██ ██   ██   *************************************************************************/
/***    ██████ ██   ██ ███████ ███████ ██   ████ ██████  ██   ██ ██   ██   *************************************************************************/
/***                                                                       *************************************************************************/
/***************************************************************************************************************************************************/
/************************************************************************************************************************* Source63 *** calendar ***/

if (!('Affinity2018' in window)) Affinity2018 = {};
if (!('Classes' in Affinity2018)) Affinity2018.Classes = {};
if (!('Plugins' in Affinity2018.Classes)) Affinity2018.Classes.Plugins = {};

if (!('Apps' in Affinity2018)) Affinity2018.Apps = {};
if (!('Plugins' in Affinity2018.Apps)) Affinity2018.Apps.Plugins = {};

Affinity2018.Classes.Plugins.Calendars = class
{
  _options()
  {
    this.widgets = [];
  }

  constructor()
  {
    this._options();
    [

      'Apply', 'Remove',
      'HideAll',

      '_apply'

    ].bindEach(this);

    this.Ready = true;

    // if (Affinity2018.UiReady) this.Apply();
    // else window.addEventListener('MainInit', this.Apply);
  }

  Apply(node)
  {
    var temp = [];
    if (node !== undefined && node !== null)
    {
      temp = [this._apply(node)];
    }
    else
    {
      document.querySelectorAll('.ui-has-calendar').forEach(function (node)
      {
        temp.push(this._apply(node));
      }.bind(this));
    }
    return {
      total: temp.length,
      widgets: temp
    }
  }

  Remove(node)
  {
    if (
      node.classList.contains('ui-calendar')
      && node.hasOwnProperty('widgets')
      && node.widgets.hasOwnProperty('DateTime')
    )
    {
      delete this.widgets[node.widgets.DateTime.uuid];
      node.widgets.DateTime.Destroy();
    }
  }

  HideAll(except)
  {
    var key, widget;
    for (key in this.widgets)
    {
      if (this.widgets.hasOwnProperty(key))
      {
        widget = this.widgets[key];
        if (typeof except === 'object' && except.hasOwnProperty('uuid'))
        {
          if (widget.uuid !== except.uuid) widget.hide();
        }
        else
        {
          widget.hide();
        }
      }
    }
  }

  /**/

  _apply(node)
  {
    if (Affinity2018.isDomElement(node))
    {
      var key = Affinity2018.uuid();
      this.widgets[key] = new Affinity2018.Classes.Plugins.CalendarWidget(node, key);
      return this.widgets[key];
    }
  }

};

Affinity2018.Classes.Plugins.CalendarWidget = class extends Affinity2018.ClassEvents
{
  _options()
  {
    this.WidgetName = 'Calendar';

    this.Ready = false;

    this.uuid = '';

    this.targetNode = null;
    this.RowNode = null;
    this.IsRequired = false;

    this.preserveOriginalInput = false;

    this.outputFormat = 'dd/MM/yyyy';

    this.dateFormat = 'ddd dS MMM, yyyy';
    this.timeFormat = 'h:mm tt';
    this.displayFormat = this.dateFormat + ' ' + this.timeFormat;

    this.showCalendar = true;
    this.showTime = false;

    this.startDate = 'none';
    this.hasStartDate = false;
    this.showStartDate = false;

    this.startDay = 0; // 0 = Sunday. 1 = Monday, etc

    this.status = 'closed';
    this.mouseState = '';

    this.labelName = '';
    this.postId = '';
    this.postName = '';
    this.validationMethods = '';
    this.validationErrorStr = '';
    this.cssPosition = 'absolute';
    this.watchOutput = false;
    this.nullable = false;
    this.hoursmins = false;
    this.showInline = false;
    this.showRange = false;

    this.enableAutoClose = false;

    this.showCalendarFilterButtonsForMobile = false;

    this.row = null;
    this.date = false;
    this.__uiDate = false;

    this.Valid = false;
  }

  constructor(targetNode, uuid)
  {
    super();
    this._options();
    [

      '_init',

      'IsValid', 'ShowError', 'HideError',

      'getValue', 'getDisplayValue',
      'setTime', 'setDate', 'setToday', 'setNone', 'setTimeFromWidget',
      'watchOutputChanges',
      'show', 'hide',

      '_buildCalendar',
      '_cellClicked',

      '_displayKeyUp', '_displayBlur',

      '_setDate', '_setTime', '_setDisplay', '_setReturn', '_setDateFromStr',

      '_monthBackClicked', '_monthForwardClicked',
      '_monthClicked', '_yearClicked',
      '_monthsClicked', '_yearsClicked',
      '_timeClicked',

      '_clearShowHideEvents', '_setHideShowEvents',
      '_scrolled', '_position', '_setPosition',
      '_stopEvents',
      '_windowClicked',

      'Destroy',

      '_templates'

    ].bindEach(this);
    this._templates();

    if (!Affinity2018.isDomElement(targetNode))
    {
      console.error('No valid element was passed to CalendarWidget, dummy!');
      return;
    }

    this.uuid = uuid || Affinity2018.uuid();
    if (
      Affinity2018.Calendars
      && !Affinity2018.Calendars.widgets.hasOwnProperty(this.uuid)
    ) Affinity2018.Calendars.widgets[this.uuid] = this;

    this.CleverForms = window.hasOwnProperty('Affinity2018') && Affinity2018.hasOwnProperty('Apps') && Affinity2018.Apps.hasOwnProperty('CleverForms') ? Affinity2018.Apps.CleverForms.Default : null
    this.Form = this.CleverForms && this.CleverForms.hasOwnProperty('Form') ? this.CleverForms.Form : null;

    this.targetNode = targetNode;
    this.targetNode.classList.remove('ui-has-calendar');
    this.targetNode.classList.add('ui-calendar');
    this.targetNode.classList.add('hidden');

    this.RowNode = Affinity2018.getParent(this.targetNode, '.form-row');
    this.IsRequired = this.RowNode ? this.RowNode.classList.contains('required') ? true : false : false;

    this.ErrorNode = this.RowNode && this.RowNode.querySelector('.ui-form-error') ? this.RowNode.querySelector('.ui-form-error') : document.createElement('div');
    this.ErrorNode.classList.add('ui-form-error');
    this.targetNode.parentNode.appendChild(this.ErrorNode);

    if (!this.targetNode.hasOwnProperty('widgets')) this.targetNode.widgets = {};
    this.targetNode.widgets.DateTime = this;

    this.displayNode = document.createElement('input');
    this.displayNode.type = 'text';
    this.targetNode.parentNode.insertBefore(this.displayNode, this.targetNode.nextSibling);

    this.calendarNode = document.createElement('div');
    this.calendarNode.classList.add('ui-calendar-container');
    this.calendarNode.innerHTML = this.calendarTemplate;

    this.displayNode.parentNode.insertBefore(this.calendarNode, this.displayNode.nextSibling);

    this.datesNode = this.calendarNode.querySelector('.ui-cal-dates');
    this.monthNode = this.datesNode.querySelector('.ui-cal-months');
    this.yearNode = this.datesNode.querySelector('.ui-cal-years');
    this.timeNode = this.calendarNode.querySelector('.ui-cal-time');

    this.dateDisplayNode = this.calendarNode.querySelector('.ui-cal-display-date');
    this.timeDisplayNode = this.calendarNode.querySelector('.ui-cal-display-time');

    var rowNode = this.datesNode.querySelector('.ui-cal-cells-row'),
      monthNode = this.calendarNode.querySelector('.ui-cal-months'),
      yearNode = this.calendarNode.querySelector('.ui-cal-years'),
      r = 0,
      m = 0,
      y = new Date().getFullYear() - 100,
      newRow, d, newMonth, newYear;
    for (; r < 6; r++)
    {
      newRow = document.createElement('div');
      newRow.classList.add('ui-cal-cells-row', 'date-cells');
      newRow.innerHTML = rowNode.innerHTML + '';
      rowNode.parentNode.appendChild(newRow);
    }
    for (; m < 12; m++)
    {
      d = new Date();
      d.setMonth(m);
      newMonth = document.createElement('span');
      newMonth.innerHTML = d.toString('MMMM');
      newMonth.dataset.value = m;
      newMonth.classList.add('m-' + m);
      monthNode.appendChild(newMonth);
    }
    for (; y < new Date().getFullYear() + 51; y++)
    {
      newYear = document.createElement('span');
      newYear.innerHTML = y;
      newYear.dataset.value = y;
      newYear.classList.add('y-' + y);
      yearNode.appendChild(newYear);
    }

    this.calendarNode.querySelector('.ui-cal-cells').dataset.month = '';
    this.calendarNode.querySelector('.ui-cal-cells').dataset.year = '';

    if (this.targetNode.parentNode && this.targetNode.parentNode.classList.contains('form-row'))
    {
      this.targetNode.parentNode.classList.add('calendar');
    }

    /**/

    this.startDate = 'none';
    this.hasStartDate = false;
    this.showStartDate = false;

    var attemptStr = this.targetNode ? this.targetNode.value.trim() : '';
    if (attemptStr === '') attemptStr = this.targetNode.dataset.hasOwnProperty('startDate') ? this.targetNode.dataset.startDate.trim() : '';
    if (attemptStr !== '' && attemptStr !== 'null')
    {
      this.startDate = $a.getDate(attemptStr);
      if (this.startDate === null) this.startDate = Date.parse(attemptStr);

      if (this.startDate && Affinity2018.isDate(this.startDate) && this.startDate.isValid())
      {
        this.hasStartDate = true;
        this.showStartDate = true;
      }
      else
      {
        this.startDate = 'none';
        this.hasStartDate = false;
        this.showStartDate = false;
      }
    }

    /**/

    this.postName = this.targetNode.name || '';
    this.postId = this.targetNode.id || '';
    this.validationMethods = this.targetNode.dataset.validateMethod || '';
    this.validationErrorStr = this.targetNode.dataset.validateErrorStr || '';
    this.showInline = this.targetNode.classList.contains('show-inline') ? true : false; // TODO: depricated
    this.showInline = this.targetNode.dataset.inline && this.targetNode.dataset.inline.trim().toLowerCase() === 'true' ? true : false;
    this.displayFormat = this.targetNode.dataset.calendarDisplayFormat ? this.targetNode.dataset.calendarDisplayFormat : this.displayFormat;
    this.outputFormat = this.targetNode.dataset.calendarReturnFormat ? this.targetNode.dataset.calendarReturnFormat : this.outputFormat;
    this.nullable = this.targetNode.dataset.calendarNullable && this.targetNode.dataset.calendarNullable.trim().toLowerCase() === 'true' ? true : false;
    this.hoursmins = this.targetNode.dataset.calendarHoursmins && this.targetNode.dataset.calendarHoursmins.trim().toLowerCase() === 'true' ? true : false;
    this.preserveOriginalInput = this.targetNode.classList.contains('preserveOriginalInput') ? true : false;
    this.showCalendarFilterButtonsForMobile = this.targetNode.hasAttribute('showCalendarFilterButtonsForMobile') ? true : false;

    if (this.showInline)
    {
      this.calendarNode.classList.remove('hidden');
      this.calendarNode.classList.add('inline', 'show');
    }

    if (Affinity2018.isString(this.targetNode.dataset.startDate) && this.targetNode.dataset.startDate !== '' && this.targetNode.dataset.startDate.toLowerCase() !== 'false')
    {
      //this.nullable = false;
      this.showStartDate = true;
    }
    if (Affinity2018.isBool(this.targetNode.dataset.startDate) && this.targetNode.dataset.startDate === true)
    {
      //this.nullable = false;
      this.showStartDate = true;
    }

    switch (this.targetNode.dataset.type)
    {
      case 'date':
        this.showCalendar = true;
        this.showTime = false;
        this.datesNode.classList.remove('hidden');
        this.dateDisplayNode.classList.remove('hidden');
        this.enableAutoClose = true;
        break;
      case 'time':
        this.showCalendar = false;
        this.showTime = true;
        this.timeNode.classList.remove('hidden');
        this.timeDisplayNode.classList.remove('hidden');
        break;
      case 'datetime':
        this.showCalendar = true;
        this.showTime = true;
        this.datesNode.classList.remove('hidden');
        this.timeNode.classList.remove('hidden');
        this.dateDisplayNode.classList.remove('hidden');
        this.timeDisplayNode.classList.remove('hidden');
        break;
      case 'hoursmins':
        this.showCalendar = true;
        this.showTime = true;
        this.hoursmins = true;
        this.timeNode.classList.remove('hidden');
        this.timeDisplayNode.classList.remove('hidden');
        break;
      case 'date-range':
        this.showCalendar = true;
        this.showTime = false;
        this.showRange = true;
        this.datesNode.classList.remove('hidden');
        this.dateDisplayNode.classList.remove('hidden');
        break;
      case 'time-range':
        this.showCalendar = false;
        this.showTime = true;
        this.showRange = true;
        this.timeNode.classList.remove('hidden');
        this.timeDisplayNode.classList.remove('hidden');
        break;
      case 'datetime-range':
        this.showCalendar = true;
        this.showTime = true;
        this.showRange = true;
        this.datesNode.classList.remove('hidden');
        this.timeNode.classList.remove('hidden');
        this.dateDisplayNode.classList.remove('hidden');
        this.timeDisplayNode.classList.remove('hidden');
        break;
      case 'hoursmins-range':
        this.showCalendar = true;
        this.showTime = true;
        this.hoursmins = true;
        this.showRange = true;
        this.timeNode.classList.remove('hidden');
        this.timeDisplayNode.classList.remove('hidden');
        break;
      default:
        this.showCalendar = true;
        this.showTime = false;
        this.datesNode.classList.remove('hidden');
        break;
    }

    if (this.hoursmins && !this.targetNode.dataset.startDate)
    {
      this.startDate.setMinutes(0);
      this.startDate.setHours(0);
      this.startDate.setSeconds(0);
      this.startDate.setMilliseconds(0);
    }

    this._init();

  }

  _init()
  {

    var today = ['now', 'today'];

    this.showDefault = this.startDate === 'none' ? false : true;

    if (this.startDate === 'none')
    {

      if (this.target && 'value' in this.targetNode && this.targetNode.value.trim() !== '')
      {
        var attempt = this._setDateFromStr(this.targetNode.value.trim(), true);
        if ($a.isDate(attempt) && attempt.isValid())
        {
          this.startDate = attempt.toString(this.outputFormat);
          this.date = attempt;
          this.showDefault = true;
        }
        else
        {
          this.showDefault = false;
        }
      }
      else
      {
        this.showDefault = false;
      }
    }
    else if (this.startDate && today.contains(this.startDate.toLowerCase))
    {
      this.date = new Date();
      this.startDate = $a.getDate(this.date, this.outputFormat);
    }
    else
    {
      if ($a.isString(this.startDate))
      {
        var attempt = this._setDateFromStr(this.startDate.trim(), true);
        if ($a.isDate(attempt) && attempt.isValid())
        {
          this.startDate = attempt.toString(this.outputFormat);
          this.date = attempt;
        }
      }
    }

    if (!$a.isDateValid(this.date))
    {
      if ($a.isDateValid(this.startDate)) this.date = this.startDate;
      else this.date = new Date();
    }

    this.watchOutput = this.targetNode.classList.contains('uidate-watch') ? true : this.watchOutput;
    if (this.watchOutput) this.watchTimer = setInterval(this.watchOutputChanges, 500);

    if (this.date) this.__uiDate = this.date;
    else this.__uiDate = new Date();

    /**/

    //this._setAll();

    this._setDate();
    this._setTime();
    this._setDisplay(true);
    this._setReturn(true);

    this._buildCalendar();

    this.timeWidget = false;
    if (this.showTime)
    {
      this.timeWidget = new Affinity2018.Classes.Plugins.TimeWidget(
        {
          targetNode: this.calendarNode.querySelector('.ui-cal-time'),
          uuid: this.uuid,
          date: this.__uiDate.clone(),
          setCallback: this.setTimeFromWidget,
          hasCalendar: this.showCalendar,
          hideMethod: this.hide
        });
    }

    /**/

    this.datesNode.querySelectorAll('.ui-cal-cells-row.date-cells .ui-cal-cell').forEach(function (node)
    {
      node.addEventListener('click', this._cellClicked);
    }.bind(this));

    this.calendarNode.querySelector('.ui-cal-back-month').addEventListener('click', this._monthBackClicked);
    this.calendarNode.querySelector('.ui-cal-forward-month').addEventListener('click', this._monthForwardClicked);

    this.calendarNode.querySelector('.ui-cal-current-month').addEventListener('click', this._monthClicked);
    this.calendarNode.querySelector('.ui-cal-current-year').addEventListener('click', this._yearClicked);

    this.calendarNode.querySelector('.ui-cal-months').addEventListener('click', this._monthsClicked);
    this.calendarNode.querySelector('.ui-cal-years').addEventListener('click', this._yearsClicked);

    this.displayNode.addEventListener('focus', this.show);
    this.displayNode.addEventListener('keyup', this._displayKeyUp);
    this.displayNode.addEventListener('blur', this._displayBlur);

    this.timeDisplayNode.addEventListener('click', this._timeClicked);

    if (Affinity2018.supportsPassiveEvents)
    {
      document.addEventListener('scroll', this._scrolled, { passive: true });
      document.addEventListener('resize', this._position, { passive: true });
    }
    else
    {
      document.addEventListener('scroll', this._scrolled, false);
      document.addEventListener('resize', this._position, false);
    }

    this.Ready = true;
  }

  /**/

  IsValid()
  {
    this.Valid = Affinity2018.isDateValid(this.getRawDate());
    if (!this.Ready) return this.Valid;
    if (this.targetNode)
    {
      this.targetNode.classList.remove('error');
      this.HideError();
      if (this.RowNode) this.RowNode.classList.remove('error', 'error2', 'flash-error');
      if (this.IsRequired && !this.Valid)
      {
        this.targetNode.classList.add('error');
        if (this.RowNode) this.RowNode.classList.add('error');
        var errorPath = 'generic.validation.select.' + (this.displayNode.value.trim() == '' ? 'notempty' : 'invalid');
        var errorlabel = this.RowNode && this.RowNode.querySelector('label') ? this.RowNode.querySelector('label').innerText.trim().shorten(50) : 'Date';
        this.ShowError($a.Lang.ReturnPath(errorPath, { label: errorlabel }));
      }
    }
    return this.Valid;
  }

  ShowError(error)
  {
    this.ErrorNode.innerHTML = error;
    this.ErrorNode.classList.add('show');
    if (this.Form) this.Form.ResizeSection();
  }
  HideError()
  {
    this.ErrorNode.classList.remove('show');
    if (this.Form) this.Form.ResizeSection();
  }

  /**/

  getValue()
  {
    return this.date.toString(this.displayFormat);
  }

  getDisplayValue()
  {
    return this.date.toString(this.outputFormat);
  }

  getDate()
  {
    var date = this.getDateObject();
    if (date)
    {
      return date.toString(this.outputFormat);
    }
    return false;
  }

  getDateObject()
  {
    //if (!this.nullable)
    //{
    if (this.date)
    {
      return this.date;
    }
    if (this.__uiDate)
    {
      return this.__uiDate;
    }
    //}
    return false;
  }

  getRawDate()
  {
    if (this.displayNode.value.trim() === '' && this.nullable) return false;
    if ($a.stringToDate(this.displayNode.value.trim()) !== null) return $a.stringToDate(this.displayNode.value.trim());
    if (Affinity2018.isDate(this.date)) return this.date;
    if ($a.stringToDate(this.targetNode.value.trim()) !== null) return $a.stringToDate(this.targetNode.value.trim());
    return false;
  }

  /**/

  setTime(dateTime)
  {
    var date = this.date ? this.date.clone() : this.__uiDate.clone();
    date.setHours(dateTime.getHours());
    date.setMinutes(dateTime.getMinutes());
    date.setSeconds(0);
    date.setMilliseconds(0);
    this.setDate(date);
  }

  setDate(passedDate, doEvent, preventTimeWigdetSet)
  {
    doEvent = typeof doEvent === 'boolean' ? doEvent : true;
    preventTimeWigdetSet = typeof preventTimeWigdetSet === 'boolean' ? preventTimeWigdetSet : false;
    if (Affinity2018.isDate(passedDate)) this.date = passedDate.clone();
    else this.date = this.nullable ? false : this.date;
    this.__uiDate = this.date ? this.date : this.__uiDate;
    this._setAll();
    this._buildCalendar();
    if (doEvent) this._fireDateEvents();
    if (this.showTime && this.timeWidget && !preventTimeWigdetSet)
    {
      if (this.date) this.timeWidget.setTime(this.date);
      else this.timeWidget.setTime(this.__uiDate);
    }
  }

  setToday()
  {
    this.date = new Date();
    this.__uiDate = this.date.clone();
    this._setAll();
    this._buildCalendar();
    this._fireDateEvents();
    if (this.showTime && this.timeWidget)
    {
      if (this.date) this.timeWidget.setTime(this.date);
      else this.timeWidget.setTime(this.__uiDate);
    }
  }

  setNone()
  {
    this.date = this.__uiDate = new Date();
    this._setAll();
    this._buildCalendar();
    if (this.showTime && this.timeWidget)
    {
      if (this.date) this.timeWidget.setTime(this.date);
      else this.timeWidget.setTime(this.__uiDate);
    }
    this.displayNode.value = '';
    this.targetNode.value = '';
    this.targetNode.dispatchEvent(new Event('change'));
  }

  setTimeFromWidget(dateTime)
  {
    var date = this.date ? this.date.clone() : this.__uiDate.clone();
    date.setHours(dateTime.getHours());
    date.setMinutes(dateTime.getMinutes());
    date.setSeconds(0);
    date.setMilliseconds(0);
    this.setDate(date, true, true);
  }

  watchOutputChanges()
  {
    var value = this.targetNode.value;
    var attempt = Date.parse(value);
    if (Affinity2018.isDate(attempt) && attempt !== this.date)
    {
      this.setDate(attempt, false);
    }
  }

  /**/

  show()
  {
    if (this.showInline) return;
    if (!this.showInline && Affinity2018.Calendars) Affinity2018.Calendars.HideAll(this);
    if (!this.showInline && Affinity2018.Autocompletes) Affinity2018.Autocompletes.HideAll();
    this._setHideShowEvents();
    if (this.showCalendar) this.datesNode.classList.add('show');
    if (!this.showCalendar && this.showTime) this.timeNode.classList.add('show');
    this.calendarNode.classList.add('show');
    this.status = 'open';
    this._setPosition('show');
    if (Affinity2018.hasOwnProperty('ForceSectionTop')) Affinity2018.ForceSectionTop(this.calendarNode);
  }

  hide(ev)
  {
    this._clearShowHideEvents();
    if (this.showInline) return;
    if (this.monthNode) this.monthNode.classList.remove('show');
    if (this.yearNode) this.yearNode.classList.remove('show');
    if (this.datesNode) this.datesNode.classList.remove('show');
    if (this.timeNode) this.timeNode.classList.remove('show');
    if (this.showTime && this.timeWidget) this.timeWidget.showHours();
    this.calendarNode.classList.remove('show');
    this.status = 'closed';
    this.mouseState = '';
    if (Affinity2018.hasOwnProperty('ResetForceSectionTop')) Affinity2018.ResetForceSectionTop(this.calendarNode);
  }

  /**/

  _buildCalendar(date)
  {

    date = Affinity2018.isDate(date) ? date : Affinity2018.isDate(this.date) ? this.date : this.__uiDate;
    var currentMonth = this.calendarNode.querySelector('.ui-cal-cells').dataset.month,
      currentYear = this.calendarNode.querySelector('.ui-cal-cells').dataset.year,
      dateMonth = date.toString('MMM'),
      dateYear = date.toString('yyyy');
    if (currentMonth + currentYear !== dateMonth + dateYear)
    {
      var cellNodes = this.datesNode.querySelectorAll('.ui-cal-cells-row.date-cells .ui-cal-cell'),
        today = Date.today().clearTime(),
        firstDay = date.clone().moveToFirstDayOfMonth(),
        calDay = firstDay.clone().clearTime(),
        daysInMonth = Date.getDaysInMonth(firstDay.getFullYear(), firstDay.getMonth()),
        startCell = firstDay.getDay() - (this.startDay),
        d = 0, dCount = 1;

      if (startCell < 0) startCell += 7;

      var dayCells = this.calendarNode.querySelectorAll('.ui-cal-cells-row.date-days .ui-cal-cell');
      var days = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];
      var dowDate = new Date();
      dowDate.setDate(dowDate.getDate() - dowDate.getDay());
      for (d = 0; d < 7; d++)
      {
        dayCells[d].innerHTML = days[dowDate.getDay() + this.startDay];
        dowDate.setDate(dowDate.getDate() + 1);
      }

      for (d = 0; d < 42; d++)
      {
        cellNodes[d].className = 'ui-cal-cell';
        if (d < startCell || d >= startCell + daysInMonth)
        {
          cellNodes[d].innerHTML = '';
          delete cellNodes[d].dataset.date;
        }
        else
        {
          cellNodes[d].innerHTML = dCount;
          cellNodes[d].dataset.date = calDay.toString("d-MMM-yyyy HH:mm");
          cellNodes[d].classList.add('active', 'date-' + calDay.toString("d-MMM-yyyy"));
          calDay.add({ days: 1 });
          dCount++;
        }
      }
      this.calendarNode.querySelector('.ui-cal-cells').dataset.month = date.toString('MMM');
      this.calendarNode.querySelector('.ui-cal-cells').dataset.year = date.toString('yyyy');
    }

    if (this.datesNode.querySelector('.date-' + Date.today().clearTime().toString("d-MMM-yyyy")))
    {
      this.datesNode.querySelector('.date-' + Date.today().clearTime().toString("d-MMM-yyyy")).classList.add('today');
    }

    if (this.date && this.datesNode.querySelector('.date-' + this.date.toString("d-MMM-yyyy")))
    {
      this.datesNode.querySelector('.date-' + this.date.toString("d-MMM-yyyy")).classList.add('selected');
    }

    if (this.date)
    {
      this.datesNode.querySelector('.ui-cal-current-month').innerHTML = this.date.toString('MMMM');
      this.datesNode.querySelector('.ui-cal-current-year').innerHTML = this.date.toString('yyyy');

      if (this.calendarNode.querySelector('.ui-cal-months span.selected')) this.calendarNode.querySelector('.ui-cal-months span.selected').classList.remove('selected');
      if (this.calendarNode.querySelector('.ui-cal-years span.selected')) this.calendarNode.querySelector('.ui-cal-years span.selected').classList.remove('selected');
      this.calendarNode.querySelector('.ui-cal-months .m-' + this.date.getMonth()).classList.add('selected');
      this.calendarNode.querySelector('.ui-cal-years .y-' + this.date.getFullYear()).classList.add('selected');
    }
    else
    {
      this.datesNode.querySelector('.ui-cal-current-month').innerHTML = '';
      this.datesNode.querySelector('.ui-cal-current-year').innerHTML = '';
    }

  }


  /**/

  _cellClicked(ev)
  {
    if (this.datesNode.querySelector('.ui-cal-cell.selected')) this.datesNode.querySelector('.ui-cal-cell.selected').classList.remove('selected');
    var cellNode = ev.target.closest('.ui-cal-cell.active'), cellDate;
    if (cellNode)
    {
      cellDate = Date.parse(cellNode.dataset.date);
      cellNode.classList.add('selected');
      this.setDate(cellDate);
      if (this.enableAutoClose) this.hide();
    }
  }

  _displayKeyUp(ev)
  {
    if (
      ev.keyCode === 13 // enter
      || ev.keyCode === 9 // tab
      || ev.keyCode === 40 // down
    )
    {
      if (this.nullable && this.displayNode.value.trim() === '') return;
      this._setDateFromStr(this.displayNode.value.trim());
    }
  }

  _displayBlur()
  {
    if (this.nullable && this.displayNode.value.trim() === '') return;
    this._setDateFromStr(this.displayNode.value.trim());
  }

  _setAll()
  {
    this._setDate();
    this._setTime();
    this._setDisplay();
    this._setReturn();
  }

  _setDate()
  {
    var dateStr = '';
    if (this.date && Affinity2018.isDate(this.date)) dateStr = this.date.toString(this.dateFormat);
    this.dateDisplayNode.innerHTML = dateStr;
    this._setDisplay(false);
    this.IsValid();
  }
  _setTime()
  {
    var timeStr = '';
    if (this.date && Affinity2018.isDate(this.date)) timeStr = this.date.toString(this.timeFormat);
    this.timeDisplayNode.innerHTML = timeStr;
    this._setDisplay(false);
    this.IsValid();
  }
  _setDisplay(fromBlur)
  {
    var dateStr = '', output = fromBlur && this.nullable ? false : true;
    fromBlur = Affinity2018.isBool(fromBlur) ? fromBlur : false;
    if (this.date && Affinity2018.isDate(this.date))
    {
      if (this.showCalendar) dateStr += this.date.toString(this.dateFormat);
      if (this.showCalendar && this.showTime) dateStr += ' ';
      if (this.showTime) dateStr += this.date.toString(this.timeFormat);
    }
    if (!this.Ready)
    {
      if (this.showStartDate || this.showDefault) this.displayNode.value = dateStr;
    }
    else
    {
      if (output)
      {
        if (fromBlur && !this.nullable) this.displayNode.value = dateStr;
        if (!fromBlur) this.displayNode.value = dateStr;
      }
    }
    this.IsValid();
  }
  _setReturn(fromBlur)
  {
    var dateStr = '', output = fromBlur && this.nullable ? false : true;
    fromBlur = Affinity2018.isBool(fromBlur) ? fromBlur : false;
    if (this.date && Affinity2018.isDate(this.date)) dateStr = this.date.toString(this.outputFormat);
    if (output) this.targetNode.value = dateStr;
    this.IsValid();
  }

  _setDateFromStr(attemptStr, returnResult)
  {
    if (attemptStr !== '')
    {
      returnResult = $a.paramOrDefault(returnResult, false, 'boolean');
      var attempt, attemptStr = returnResult ? attemptStr : this.displayNode.value, doset = false;;
      attemptStr = attemptStr.replace(/the/gi, '');
      attemptStr = attemptStr.replace(/\s\s+/g, ' ');
      attemptStr = attemptStr.trim();

      attempt = $a.stringToDate(attemptStr);

      if (returnResult)
      {
        if ($a.isDateValid(attempt)) return attempt;
        return 'none';
      }
      else
      {
        if ($a.isDateValid(attempt))
        {
          if (!this.date) doset = true;
          else if (attempt.toString("d-MMM-yyyy HH:mm") !== this.date.toString("d-MMM-yyyy HH:mm")) doset = true;
        }
        if (doset === true) this.setDate(attempt);
        this._setTime();
        this._setDisplay(true);
        this._setReturn(true);
      }
      if (this.showCalendar && !this.showTime)
      {
        clearTimeout(this.hideDelay);
        this.hideDelay = setTimeout(this.hide, 250);
        //this.hide();
      }
    }
    else
    {
      this.date = false;
      this.setDate(false);
      this._setTime();
      this._setDisplay(true);
      this._setReturn(true);


      console.log(this.date);
      console.log(this.targetNode.value);

    }
  }

  _fireDateEvents()
  {
    if (this.date && Affinity2018.isDate(this.date))
    {
      this.dispatchEvent(new CustomEvent('dateClicked', { detail: { dispatchObject: this.date } }));
      this.dispatchEvent(new CustomEvent('dateChanged', { detail: { dispatchObject: this.date } }));
      this.targetNode.dispatchEvent(new Event('change'));
    }
  }

  /**/

  _clearShowHideEvents()
  {
    clearTimeout(this.bgEventListenerDelay);
    window.removeEventListener('click', this._windowClicked);
    this.displayNode.removeEventListener('click', this._stopEvents);
    this.calendarNode.removeEventListener('click', this._stopEvents);
  }
  _setHideShowEvents()
  {
    clearTimeout(this.bgEventListenerDelay);
    this._clearShowHideEvents();
    this.bgEventListenerDelay = setTimeout(function () { window.addEventListener('click', this._windowClicked); }.bind(this), 100);
    this.displayNode.addEventListener('click', this._stopEvents);
    this.calendarNode.addEventListener('click', this._stopEvents);
  }

  /**/

  _monthBackClicked()
  {
    clearTimeout(this.hideDelay);
    if (this.date) this.date.add({ months: -1 });
    else this.__uiDate.add({ months: -1 });
    this._buildCalendar();
  }
  _monthForwardClicked()
  {
    clearTimeout(this.hideDelay);
    if (this.date) this.date.add({ months: 1 });
    else this.__uiDate.add({ months: 1 });
    this._buildCalendar();
  }

  _monthClicked()
  {
    clearTimeout(this.hideDelay);
    this.calendarNode.querySelector('.ui-cal-years').classList.remove('show');
    this.calendarNode.querySelector('.ui-cal-months').classList.add('show');
  }
  _monthsClicked(ev)
  {
    clearTimeout(this.hideDelay);
    var node = ev.target.tagName.toLowerCase() === 'span' ? ev.target : false;
    if (node)
    {
      if (this.date) this.date.setMonth(node.dataset.value);
      else this.__uiDate.setMonth(node.dataset.value);
      this._setAll();
      this._buildCalendar();
      this.calendarNode.querySelector('.ui-cal-months').classList.remove('show');
      this.calendarNode.querySelector('.ui-cal-years').classList.remove('show');
    }
  }

  _yearClicked()
  {
    clearTimeout(this.hideDelay);
    var y = this.date ? this.date.getFullYear() : new Date().getFullYear(),
      node = this.calendarNode.querySelector('.ui-cal-years .y-' + y),
      nodeRect;
    if (node)
    {
      node.parentNode.scrollTo(0, 0);
      this.calendarNode.querySelector('.ui-cal-months').classList.remove('show');
      this.calendarNode.querySelector('.ui-cal-years').classList.add('show');
      nodeRect = Affinity2018.getOffsetRect(node);
      node.parentNode.scrollTo(0, (nodeRect.y + (nodeRect.height / 2)) - (node.parentNode.offsetHeight / 2));
    }
  }
  _yearsClicked(ev)
  {
    clearTimeout(this.hideDelay);
    var node = ev.target.tagName.toLowerCase() === 'span' ? ev.target : false;
    if (node)
    {
      if (this.date) this.date.setYear(node.dataset.value);
      else this.__uiDate.setYear(node.dataset.value);
      this._setAll();
      this._buildCalendar();
      this.calendarNode.querySelector('.ui-cal-months').classList.remove('show');
      this.calendarNode.querySelector('.ui-cal-years').classList.remove('show');
    }
  }

  _timeClicked()
  {
    clearTimeout(this.hideDelay);
    if (!this.showTime) return;
    this.timeNode.classList.add('show');
  }

  /**/

  _reveal()
  {
    this.calendarNode.classList.remove('hidden');
  }
  _obscure()
  {
    this.calendarNode.classList.add('hidden');
  }

  _scrolled(ev)
  {
    this._stopEvents(ev);
    this._position(null, 'scroll');
  }

  _position(delay, calledFrom)
  {
    clearTimeout(this._positionDelay);
    delay = typeof delay === 'number' ? delay : 100;
    this._positionDelay = setTimeout(this._setPosition, delay, calledFrom);
  }

  _setPosition(calledFrom)
  {
    clearTimeout(this._positionDelay);
    if (
      this.calendarNode &&
      this.status === 'open'
    )
    {
      this.calendarNode.classList.remove('above');
      var calendarRect = this.calendarNode.getBoundingClientRect(),
        windwSize = Affinity2018.getWindowSize(),
        scroll = document.body.scrollTop || 0,
        calendarBottom = parseFloat(calendarRect.top) + parseFloat(calendarRect.height) + scroll;
      if (calendarBottom > windwSize.height)
      {
        this.calendarNode.classList.add('above');
      }
      if (Affinity2018.mobile || Affinity2018.IsMobile)
      {
        var offset = document.querySelector('.ss-dashboard-wrap-main-header') ? document.querySelector('.ss-dashboard-wrap-main-header').getBoundingClientRect().height : 0;
        this.calendarNode.scrollIntoView({ behavior: 'auto', block: 'start' });
        window.scrollTo(window.scrollX, window.scrollY - offset - 10);
      }
    }
  }

  _stopEvents(ev)
  {
    if (ev)
    {
      ev.preventDefault();
      ev.stopPropagation();
    }
  }

  _windowClicked(ev)
  {
    if (document.activeElement !== this.displayNode)
    {
      this.hide();
    }
  }

  /**/

  Destroy()
  {
    this._clearShowHideEvents();
    clearTimeout(this.watchTimer);
    clearTimeout(this.bgEventListenerDelay);
    clearTimeout(this._positionDelay);
    this.datesNode.querySelectorAll('.ui-cal-cells-row.date-cells .ui-cal-cell').forEach(function (node)
    {
      node.removeEventListener('click', this._cellClicked);
    }.bind(this));
    this.calendarNode.querySelector('.ui-cal-back-month').removeEventListener('click', this._monthBackClicked);
    this.calendarNode.querySelector('.ui-cal-forward-month').removeEventListener('click', this._monthForwardClicked);
    this.calendarNode.querySelector('.ui-cal-current-month').removeEventListener('click', this._monthClicked);
    this.calendarNode.querySelector('.ui-cal-current-year').removeEventListener('click', this._yearClicked);
    this.calendarNode.querySelector('.ui-cal-months').removeEventListener('click', this._monthsClicked);
    this.calendarNode.querySelector('.ui-cal-years').removeEventListener('click', this._yearsClicked);
    this.displayNode.removeEventListener('focus', this.show);
    this.displayNode.removeEventListener('keyup', this._displayKeyUp);
    this.displayNode.removeEventListener('blur', this._displayBlur);
    this.timeDisplayNode.removeEventListener('click', this._timeClicked);
    if (Affinity2018.supportsPassiveEvents) document.removeEventListener('scroll', this._scrolled, { passive: true });
    if (Affinity2018.supportsPassiveEvents) document.removeEventListener('resize', this._position, { passive: true });
    if (!Affinity2018.supportsPassiveEvents) document.removeEventListener('scroll', this._scrolled, false);
    if (!Affinity2018.supportsPassiveEvents) document.removeEventListener('resize', this._position, false);
    this.targetNode.classList.remove('ui-calendar');
    this.targetNode.classList.remove('hidden');
    this.timeWidget.Destroy();
    this.displayNode.innerHTML = '';
    this.displayNode.parentNode.removeChild(this.displayNode);
    this.calendarNode.innerHTML = '';
    this.calendarNode.parentNode.removeChild(this.calendarNode);
    delete Affinity2018.Calendars.widgets[this.uuid];
    delete this.targetNode.widgets.DateTime;
    for (var key in this)
    {
      if (this.hasOwnProperty(key))
      {
        this[key] = null;
        delete this[key];
      }
    }
  }

  /**/

  _templates()
  {
    this.calendarTemplate = `
    <div class="ui-cal-inner">
      <div class="ui-cal-dates hidden">
        <div class="ui-cal-current">
          <span class="ui-cal-back-month icon-arrow-left"></span>
          <span class="ui-cal-current-month">Jan</span>
          <span class="ui-cal-current-year">2019</span>
          <span class="ui-cal-forward-month icon-arrow-right"></span>
        </div>
        <div class="ui-cal-cells">
          <div class="ui-cal-cells-row date-days">
            <div class="ui-cal-cell">Mon</div>
            <div class="ui-cal-cell">Tue</div>
            <div class="ui-cal-cell">Wed</div>
            <div class="ui-cal-cell">Thu</div>
            <div class="ui-cal-cell">Fri</div>
            <div class="ui-cal-cell">Sat</div>
            <div class="ui-cal-cell">Sun</div>
          </div>
        </div>
        <div class="ui-cal-display">
          <span class="ui-cal-display-date hidden"></span><span class="ui-cal-display-time hidden"></span>
        </div>
        <div class="ui-cal-months"></div>
        <div class="ui-cal-years"></div>
      </div>
      <div class="ui-cal-time hidden"></div>
    </div>
    `;
  }

};


Affinity2018.Classes.Plugins.TimeWidget = class
{

  _options()
  {
    this.dialsize = 200;

    this.default = {
      targetNode: null,
      uuid: null,
      date: null,
      setCallback: null,
      hasCalendar: null,
      hideMethod: null
    };

  }

  //constructor (targetNode, uuid, date, setCallback, hasCalendar, hideMethod)
  constructor(options)
  {
    this._options();
    [
      '_init',

      'getTime', 'setTime',
      'showHours', 'showMins',

      'hide', 'show',

      '_setDisplay', '_gotoHours', '_gotoMins',
      '_amClicked', '_pmClicked',
      '_hourClicked', '_minClicked',
      '_showEdit', '_attemptEdit', '_editKeyUp', '_hideEdit',
      '_dialLineTo',
      '_dialLabelOver', '_dialLabelOut',
      '_hoursFaceClicked', '_minsFaceClicked',
      '_okClicked', '_cancelClicked',

      'Destroy',

      '_templates'
    ].bindEach(this);
    this._templates();

    this.data = Affinity2018.isObject(options) ? Affinity2018.objectDeepMerge(this.default, options) : Affinity2018.objectDeepMerge({}, this.default);

    if (!Affinity2018.isDomElement(this.data.targetNode))
    {
      console.error('No valid element was passed to TimeWidget, dummy!');
      return;
    }

    this.targetNode = this.data.targetNode;
    this.uuid = 'time-' + this.data.uuid;
    this.date = this.data.date.clone();
    this.date.setSeconds(0);
    this.date.setMilliseconds(0);
    this.callback = typeof this.data.setCallback === 'function' ? this.data.setCallback : function () { };
    this.hasCalendar = typeof this.data.hasCalendar === 'boolean' ? this.data.hasCalendar : false;
    this.parentHide = typeof this.data.hideMethod === 'function' ? this.data.hideMethod : function () { };

    this.targetNode.innerHTML = this.timeTemplate;

    this.hoursCanvas = this.targetNode.querySelector('.ui-cal-time-hours-face canvas');
    this.minsCanvas = this.targetNode.querySelector('.ui-cal-time-mins-face canvas');

    this.hoursCanvas.width = this.dialsize;
    this.hoursCanvas.height = this.dialsize;

    this.minsCanvas.width = this.dialsize;
    this.minsCanvas.height = this.dialsize;

    this.hoursFaceNode = this.targetNode.querySelector('.ui-cal-time-hours-face');
    this.hoursDialNode = this.hoursFaceNode.querySelector('.ui-cal-time-dial');
    this.minsFaceNode = this.targetNode.querySelector('.ui-cal-time-mins-face');
    this.minsDialNode = this.minsFaceNode.querySelector('.ui-cal-time-dial');

    this.currentHourNode = this.targetNode.querySelector('.ui-cal-current-hour');
    this.currentMinNode = this.targetNode.querySelector('.ui-cal-current-min');

    this.amNode = this.targetNode.querySelector('.ui-cal-time-am');
    this.pmNode = this.targetNode.querySelector('.ui-cal-time-pm');

    this.editNode = this.targetNode.querySelector('.ui-cal-time-edit');
    this.editInputNode = this.editNode.querySelector('input');

    this.okNode = this.targetNode.querySelector('.ui-cal-time-ok');
    this.cancelNode = this.targetNode.querySelector('.ui-cal-time-cancel');

    var containerSize, size, radius, gutter, i, node, angle, angleStep, markvalue, x, y;

    containerSize = Affinity2018.getOffsetRect(this.hoursDialNode).width;
    size = containerSize - 40;
    radius = size / 2;
    gutter = (containerSize - size) / 2;

    angle = 0;
    angleStep = (2 * Math.PI) / 12;
    markvalue = 3;
    for (i = 0; i < 12; i++)
    {
      node = document.createElement('div');
      node.classList.add('dial-label', 'h-' + markvalue, 'active');
      node.innerHTML = markvalue + 0;
      this.hoursDialNode.appendChild(node);
      node.addEventListener('mouseover', this._dialLabelOver);
      node.addEventListener('mouseout', this._dialLabelOut);
      x = Math.round(size / 2 + radius * Math.cos(angle) - 15) + gutter;
      y = Math.round(size / 2 + radius * Math.sin(angle) - 15) + gutter;
      node.style.top = y + 'px';
      node.style.left = x + 'px';
      angle += angleStep;
      markvalue++;
      if (markvalue > 12) markvalue = 1;
    }
    this.hoursDialNode.appendChild(this.hoursCanvas);
    this.hoursCanvasContext = this.hoursCanvas.getContext("2d");

    angle = 0;
    angleStep = (2 * Math.PI) / 60;
    markvalue = 15;
    for (i = 0; i < 60; i++)
    {
      node = document.createElement('div');
      node.classList.add('dial-label', 'm-' + markvalue);
      node.innerHTML = markvalue + 0;
      this.minsDialNode.appendChild(node);
      if (markvalue % 5 === 0) node.classList.add('active');
      node.addEventListener('mouseover', this._dialLabelOver);
      node.addEventListener('mouseout', this._dialLabelOut);
      x = Math.round(size / 2 + radius * Math.cos(angle) - 15) + gutter;
      y = Math.round(size / 2 + radius * Math.sin(angle) - 15) + gutter;
      node.style.top = y + 'px';
      node.style.left = x + 'px';
      angle += angleStep;
      markvalue++;
      if (markvalue >= 60) markvalue = 0;
    }
    this.minsDialNode.appendChild(this.minsCanvas);
    this.minsCanvasContext = this.hoursCanvas.getContext("2d");

    this._init();

  }

  _init()
  {
    this._gotoHours();

    this.amNode.addEventListener('click', this._amClicked);
    this.pmNode.addEventListener('click', this._pmClicked);

    this.currentHourNode.addEventListener('click', this._hourClicked);
    this.currentMinNode.addEventListener('click', this._minClicked);

    this.currentHourNode.addEventListener('dblclick', this._showEdit);
    this.currentMinNode.addEventListener('dblclick', this._showEdit);

    this.editInputNode.addEventListener('keyup', this._editKeyUp);

    this.hoursDialNode.addEventListener('click', this._hoursFaceClicked);
    this.minsDialNode.addEventListener('click', this._minsFaceClicked);

    this.okNode.addEventListener('click', this._okClicked);
    this.cancelNode.addEventListener('click', this._cancelClicked);
  }

  getTime()
  {
    if (Affinity2018.isDate(this.date))
    {
      return this.date.clone();
    }
  }

  setTime(dateTime)
  {
    if (Affinity2018.isDate(dateTime))
    {
      this.date = dateTime.clone();
      this._setDisplay();
      this.callback(dateTime.clone());
    }
  }

  showHours()
  {
    this._gotoHours();
  }
  showMins()
  {
    this._gotoMins();
  }

  /**/

  hide()
  {
    this._hideEdit();
    this.targetNode.classList.remove('show');
    if (!this.hasCalendar) this.parentHide();
  }

  show()
  {
    this.targetNode.classList.add('show');
  }

  /**/

  _setDisplay()
  {
    this.hour = this.date.toString('h');
    this.minunte = this.date.toString('mm');
    this.ampm = parseInt(this.date.toString('H')) > 12 ? 'pm' : 'am';

    this.currentHourNode.innerHTML = this.hour;
    this.currentMinNode.innerHTML = this.minunte;

    this.currentHourNode.classList.remove('selected');
    this.currentMinNode.classList.remove('selected');

    if (this.state === 'hours') this.currentHourNode.classList.add('selected');
    else this.currentMinNode.classList.add('selected');

    if (this.hoursDialNode.querySelector('.selected')) this.hoursDialNode.querySelector('.selected').classList.remove('selected');
    if (this.minsDialNode.querySelector('.selected')) this.minsDialNode.querySelector('.selected').classList.remove('selected');

    if (this.hoursDialNode.querySelector('.h-' + parseInt(this.hour))) this.hoursDialNode.querySelector('.h-' + parseInt(this.hour)).classList.add('selected');
    if (this.minsDialNode.querySelector('.m-' + parseInt(this.minunte))) this.minsDialNode.querySelector('.m-' + parseInt(this.minunte)).classList.add('selected');

    this.amNode.classList.remove('selected');
    this.pmNode.classList.remove('selected');

    if (this.ampm === 'am') this.amNode.classList.add('selected');
    else this.pmNode.classList.add('selected');

    if (this.hoursDialNode.querySelector('.selected')) this._dialLineTo(this.hoursDialNode.querySelector('.selected'), '#ff5c00');
    if (this.minsDialNode.querySelector('.selected')) this._dialLineTo(this.minsDialNode.querySelector('.selected'), '#ff5c00');

    this.editInputNode.value = this.date.toString('h:mm tt');
  }

  _gotoHours()
  {
    this.state = 'hours';
    this.minsFaceNode.classList.remove('show');
    this.hoursFaceNode.classList.add('show');
    this._setDisplay();
  }

  _gotoMins()
  {
    this.state = 'mins';
    this.hoursFaceNode.classList.remove('show');
    this.minsFaceNode.classList.add('show');
    this._setDisplay();
  }

  _amClicked()
  {
    var hour = parseInt(this.date.toString('H'));
    if (hour > 12) this.date.setHours(hour - 12);
    this._setDisplay();
  }
  _pmClicked()
  {
    var hour = parseInt(this.date.toString('H'));
    if (hour < 12) this.date.setHours(hour + 12);
    this._setDisplay();
  }

  _hourClicked()
  {
    // if (this.state === 'hours') this._showEdit();
    // else this._gotoHours();
    this._gotoHours();
  }
  _minClicked()
  {
    // if (this.state === 'mins') this._showEdit();
    // else this._gotoMins();
    this._gotoMins();
  }

  _showEdit()
  {
    this.editNode.classList.add('show');
    this.editInputNode.focus();
    this.editInputNode.select();
  }
  _attemptEdit()
  {
    var attempt, parse, attemptStr = this.editInputNode.value;
    attemptStr = attemptStr.replace(/the/gi, '');
    attemptStr = attemptStr.replace(/\s\s+/g, ' ');
    attempt = Date.parse(attemptStr);
    if (Affinity2018.isDate(attempt))
    {
      parse = this.date.clone();
      parse.setHours(attempt.getHours());
      parse.setMinutes(attempt.getMinutes());
      this.setTime(parse);
      this._gotoHours();
      this._hideEdit();
      if (this.showCalendar && !this.showTime) this.hide();
    }
  }
  _editKeyUp(ev)
  {
    switch (ev.keyCode)
    {
      case 13: // enter
      case 9: // tab
      case 40: // down
        this._attemptEdit();
        break;
      case 27: // esc
        this._hideEdit();
        break;
    }
  }
  _hideEdit()
  {
    this.editNode.classList.remove('show');
  }

  _dialLineTo(node, color)
  {
    var dial, canvas, ctx, rect, start, end;
    if (node)
    {
      dial = node.closest('.ui-cal-time-dial');
      if (dial)
      {
        canvas = dial.querySelector('canvas');
        ctx = canvas.getContext('2d');
        ctx.clearRect(0, 0, this.dialsize, this.dialsize);
        rect = Affinity2018.getOffsetRect(dial);
        start = { x: rect.x + (rect.width / 2), y: rect.y + (rect.height / 2) };
        rect = Affinity2018.getOffsetRect(node);
        end = { x: parseInt(node.style.left) + (rect.width / 2), y: parseInt(node.style.top) + (rect.height / 2) };
        if (!Affinity2018.ismobile)
        {
          ctx.beginPath();
          ctx.strokeStyle = color || '#5fd4f7';
          ctx.moveTo(start.x, start.y);
          ctx.lineTo(end.x, end.y);
          ctx.stroke();
        }
      }
    }
  }

  _dialLabelOver(ev)
  {
    var node = ev.target.classList.contains('dial-label') ? ev.target : false;
    if (node) this._dialLineTo(node, '#5fd4f7');
  }
  _dialLabelOut(ev)
  {
    var node = ev.target.classList.contains('dial-label') ? ev.target : false
    if (node)
    {
      node = node.parentNode.querySelector('.dial-label.selected');
      if (node) this._dialLineTo(node, '#ff5c00');
    }
  }

  _hoursFaceClicked(ev)
  {
    var node = ev.target.classList.contains('dial-label') ? ev.target : false;
    if (node)
    {
      this.date.setHours(parseInt(node.innerText));
      if (this.ampm === 'pm') this.date.setHours(parseInt(node.innerText) + 12);
      this._gotoMins();
    }
  }

  _minsFaceClicked(ev)
  {
    var node = ev.target.classList.contains('dial-label') ? ev.target : false;
    if (node)
    {
      this.date.setMinutes(parseInt(node.innerText));
      this._gotoHours();
    }
  }

  _okClicked()
  {
    if (this.editNode.classList.contains('show'))
    {
      this._attemptEdit();
    }
    else
    {
      this.callback(this.date.clone());
      this.hide();
    }
  }

  _cancelClicked()
  {
    this.hide();
  }

  /**/

  Destroy()
  {
    this.hoursDialNode.querySelectorAll('div').forEach(function (node)
    {
      node.removeEventListener('mouseover', this._dialLabelOver);
      node.removeEventListener('mouseout', this._dialLabelOut);
    }.bind(this));
    this.minsDialNode.querySelectorAll('div').forEach(function (node)
    {
      node.removeEventListener('mouseover', this._dialLabelOver);
      node.removeEventListener('mouseout', this._dialLabelOut);
    }.bind(this));
    this.amNode.removeEventListener('click', this._amClicked);
    this.pmNode.removeEventListener('click', this._pmClicked);
    this.currentHourNode.removeEventListener('click', this._hourClicked);
    this.currentMinNode.removeEventListener('click', this._minClicked);
    this.currentHourNode.removeEventListener('dblclick', this._showEdit);
    this.currentMinNode.removeEventListener('dblclick', this._showEdit);
    this.editInputNode.removeEventListener('keyup', this._editKeyUp);
    this.hoursDialNode.removeEventListener('click', this._hoursFaceClicked);
    this.minsDialNode.removeEventListener('click', this._minsFaceClicked);
    this.okNode.removeEventListener('click', this._okClicked);
    this.cancelNode.removeEventListener('click', this._cancelClicked);
    for (var key in this)
    {
      if (this.hasOwnProperty(key))
      {
        this[key] = null;
        delete this[key];
      }
    }
  }

  /**/

  _templates()
  {
    this.timeTemplate = `
    <div class="ui-cal-time-display">
      <div class="ui-cal-current-time">
        <span class="ui-cal-current-hour"></span>:<span class="ui-cal-current-min"></span>
      </div>
      <div class="ui-cal-time-am">AM</div>
      <div class="ui-cal-time-pm">PM</div>
      <div class="ui-cal-time-edit"><input type="text" /></div>
    </div>
    <div class="ui-cal-time-hours-face show">
      <div class="ui-cal-time-pointer"></div>
      <div class="ui-cal-time-dial">
        <canvas></canvas>
      </div>
    </div>
    <div class="ui-cal-time-mins-face">
      <div class="ui-cal-time-pointer"></div>
      <div class="ui-cal-time-dial">
        <canvas></canvas>
      </div>
    </div>
    <div class="ui-cal-time-cancel">Cancel</div>
    <div class="ui-cal-time-ok">OK</div>
    `;
  }

};
;
/***************************************************************************************************************************************************/
/***************************************************************************************************************************************************/
/***                                                                                     ***********************************************************/
/***   ██████  ██████   █████  ██     ██     ██████   █████  ███    ██ ███████ ██        ***********************************************************/
/***   ██   ██ ██   ██ ██   ██ ██     ██     ██   ██ ██   ██ ████   ██ ██      ██        ***********************************************************/
/***   ██   ██ ██████  ███████ ██  █  ██     ██████  ███████ ██ ██  ██ █████   ██        ***********************************************************/
/***   ██   ██ ██   ██ ██   ██ ██ ███ ██     ██      ██   ██ ██  ██ ██ ██      ██        ***********************************************************/
/***   ██████  ██   ██ ██   ██  ███ ███      ██      ██   ██ ██   ████ ███████ ███████   ***********************************************************/
/***                                                                                     ***********************************************************/
/***************************************************************************************************************************************************/
/*********************************************************************************************************************** Source63 *** draw panel ***/

if(!('Affinity2018' in window)) Affinity2018 = {};
if(!('Classes' in Affinity2018)) Affinity2018.Classes = {};
if(!('Plugins' in Affinity2018.Classes)) Affinity2018.Classes.Plugins = {};
if(!('Objects' in Affinity2018)) Affinity2018.Objects = {};

if(!('Apps' in Affinity2018)) Affinity2018.Apps = {};
if(!('Plugins' in Affinity2018.Apps)) Affinity2018.Apps.Plugins = {};

Affinity2018.Classes.Plugins.DrawPanel = class
{
  options ()
  {

  }

  constructor ()
  {
    this.options();
    [

      'Apply', 'Remove',
      '_apply',
      '_templates'

    ].bindEach(this);

    this.Ready = true;

    this._templates();
  }

  Apply (node)
  {
    var temp = [];
    if (node !== undefined && node !== null)
    {
      temp = [this._apply(node)];
    }
    else
    {
      document.querySelectorAll('.ui-has-drawpanel').forEach(function (node)
      {
        temp.push(this._apply(node));
      }.bind(this));
    }
    return {
      total: temp.length,
      widgets: temp
    }
  }

  Remove (node)
  {
    if (
      node.classList.contains('ui-drawpanel')
      && node.hasOwnProperty('widgets')
      && node.widgets.hasOwnProperty('DrawPanel')
    )
    {
      node.widgets.DrawPanel.Destroy();
    }
  }

  /**/

  _apply (node)
  {
    return new Affinity2018.Classes.Plugins.DrawPanelWidget(node);
  }

  /**/

  _templates ()
  {

  }

};

Affinity2018.Classes.Plugins.DrawPanelWidget = class
{
  _options()
  {
    this.WidgetName = 'DrawPanel';

    this.Ready = false;
    this.MinWidth = 420;
    this.MinHeight = 250;
    this.MinHeightMobile = 150;
    this.MaxWidth = 800;
    this.MaxHeight = 600;
    this.FileIds = [];
    this.FileNames = [];
    this.BgImageData = [];
    this.InitNode = false;
    this.GetApi = false;
    this.DownloadApi = false;

    this.Sketch = null;
  }

  constructor(targetNode, config)
  {
    this._options();
    [
      '_options',
      '_init',

      'Clear',

      '_loadFiles', '_getFileInfo', '_getFileFromIdOk', '_gotFileFromIdFail', '_loadImageData', '_loadImageDataFromB64',

      '_setData',

      '_changeBgImage', '_setBgImage',

      '_canvasDown', '_canvasUp',

      'Destroy',

      '_templates'

    ].bindEach(this);
    this._templates();

    if (!Affinity2018.isDomElement(targetNode))
    {
      console.error('No valid element was passed to DrawPanelWidget, dummy!');
      return;
    }

    targetNode.classList.remove('ui-has-drawpanel');
    targetNode.classList.add('ui-drawpanel');

    this.InitNode = targetNode;

    if ($a.isString(this.InitNode.value) && this.InitNode.value.startsWith('data:image'))
    {
      this.Sketch = this.InitNode.value;
      //this.Sketch = new Image();
      //image.src = this.InitNode.value;
    }

    if (Affinity2018.isObject(config))
    {
      if (Affinity2018.isPropArray(config, 'BgImageData')) this.BgImageData = config.BgImageData;
    }

    /**/

    if (!this.InitNode.hasOwnProperty('widgets')) this.InitNode.widgets = {};
    this.InitNode.widgets.DrawPanel = this;

    /**/

    if (this.InitNode.dataset.getApi)
    {
      if (this.InitNode.dataset.getApi.toLowerCase().trim() !== 'false')
      {
        this.GetApi = this.InitNode.dataset.getApi;
      }
      delete this.InitNode.dataset.getApi;
    }

    if (this.InitNode.dataset.downloadApi)
    {
      if (this.InitNode.dataset.downloadApi.toLowerCase().trim() !== 'false')
      {
        this.DownloadApi = this.InitNode.dataset.downloadApi;
      }
      delete this.InitNode.dataset.downloadApi;
    }

    if (this.InitNode.dataset.fileIds || this.Sketch !== null)
    {
      if (this.Sketch !== null)
      {
        if (this.InitNode.dataset.fileIds) this._loadImageDataFromB64(this.Sketch, 'Saved Image', this._loadFiles);
        else this._loadImageDataFromB64(this.Sketch, 'Saved Image', this._init);
      }
      else
      {
        this._loadFiles();
      }
      return;
    }

    this._init();

  }

  _init()
  {

    var canvasWidth = this.MinWidth, canvasHeight = Affinity2018.IsMobile ? this.MinHeightMobile : this.MinHeight;

    this.FormRowNode = this.InitNode.closest('.form-row') ? this.InitNode.closest('.form-row') : false;

    /*
    if (this.BgImageData.length > 0)
    {
      canvasWidth = this.BgImageData[0].width;
      canvasHeight = this.BgImageData[0].height;
    }
    */

    this.InnerNode = document.createElement('div');
    this.InnerNode.classList.add('draw-panel-box');

    if (this.FormRowNode)
    {
      if (document.body.classList.contains('cform')) canvasWidth = this.FormRowNode.getBoundingClientRect().width;
      this.FormRowNode.appendChild(this.InnerNode);
      this.FormRowNode.classList.add('draw-panel');
      this.InitNode.classList.add('hidden');
    }
    else
    {
      this.InitNode.parentNode.insertBefore(this.InnerNode, this.InitNode.nextSibling);
      this.InitNode.classList.add('hidden');
    }

    this.InnerNode.innerHTML = this.template
      .replace('{{width}}', canvasWidth)
      .replace('{{height}}', canvasHeight);

    this.CanvasNode = this.InnerNode.querySelector('canvas');
    this.CanvasNode.width = canvasWidth;
    this.CanvasNode.height = canvasHeight;
    this.CanvasNode.style.width = canvasWidth + 'px';
    this.CanvasNode.style.height = canvasHeight + 'px';

    this.SelectBoxNode = this.InnerNode.querySelector('.bg-image-select');
    this.SelectNode = this.SelectBoxNode.querySelector('select');

    this.ClearButtonNode = this.InnerNode.querySelector('button.clear');

    var selected = false;
    if (this.BgImageData.length > 0)
    {
      selected = 'none';
      this.SelectNode.innerHTML = '';
      var optionNode = document.createElement('option');
      optionNode.value = 'none';
      optionNode.innerHTML = 'No Image';
      optionNode.selected = 'selected';
      this.SelectNode.appendChild(optionNode);
      this.BgImageData.forEach(function (bgImageData, index)
      {
        optionNode = document.createElement('option');
        optionNode.value = index;
        optionNode.innerHTML = bgImageData.name + '&nbsp;&nbsp;&nbsp;';
        if (bgImageData.name === 'Saved Image') selected = index;
        this.SelectNode.appendChild(optionNode);
      }.bind(this));
      this.SelectBoxNode.classList.remove('hidden');
      this.SelectNode.addEventListener('change', this._changeBgImage);
    }
    else
    {
      this.SelectBoxNode.classList.add('hidden');
    }

    this.DrawPad = new Affinity2018.Classes.Plugins.DrawPad(this.CanvasNode, {
      Panel: this,
      HasImages: this.BgImageData.length > 0
    });

    if (selected !== false)
    {
      this.SelectNode.value = selected;
      this._changeBgImage(true);
    }

    this.Ready = true;

    this.ClearButtonNode.addEventListener('click', this.Clear);

    this.CanvasNode.addEventListener('mousedown', this._canvasDown);
    this.CanvasNode.addEventListener('mouseup', this._canvasUp);
    document.addEventListener('mouseup', this._canvasUp);

    this.CanvasNode.addEventListener('CanvasReady', this._setData);

  }

  Clear ()
  {
    if (this.BgImageData.length > 0)
    {
      this.SelectNode.selectedIndex = 0;
      this.SelectNode.value = 'none';
      this._changeBgImage();
    }
    this.DrawPad.Clear();
    this.InitNode.value = '';
  }

  Get ()
  {
    this.InitNode.value = this.DrawPad.ToDataURL('image/png', 1.0);
    return this.InitNode.value;
  }

  /**/

  _loadFiles()
  {
    if (this.InitNode.dataset.fileIds)
    {
      this.FileIds = this.InitNode.dataset.fileIds.split(',');
      this.FileIds = this.FileIds.removeEmpty().removeDuplicates();
      this._getFileInfo();
      delete this.InitNode.dataset.fileIds;
      delete this.InitNode.dataset.fileNames;
    }
  }

  _getFileInfo()
  {
    if (this.FileIds.length > 0)
    {
      axios({
        method: 'GET',
        url: this.GetApi + '?fileIds=' + this.FileIds.join(',')
      }).then(this._getFileFromIdOk).catch(this._gotFileFromIdFail);
    }
  }
  _getFileFromIdOk(response)
  {
    if (
      Affinity2018.isObject(response)
      && Affinity2018.isPropObject(response, 'data')
      && Affinity2018.isPropObject(response.data, 'data')
    )
    {
      this._total = Object.keys(response.data.data).length;
      this._loaded = 0;
      for (var id in response.data.data)
      {
        if (response.data.data.hasOwnProperty(id))
        {
          this._loadImageData(response.data.data[id], id);
        }
      }
      return;
    }

    /**/

    if (
      Affinity2018.isObject(response)
      && Affinity2018.isPropObject(response, 'data')
      && Affinity2018.isPropBool(response.data, 'FileName')
      && Affinity2018.isPropString(response.data, 'FilePath')
      && Affinity2018.isPropString(response.data, 'FileId')
    )
    {
      this.BgImageData.push({
        name: response.data.FileName,
        path: response.data.FilePath,
        fileId: response.data.FileId
      });
    }

    /**/

    this._init();
  }
  _gotFileFromIdFail(error)
  {
    this._init();
  }
  _loadImageData (name, id)
  {
    var image = new Image(), root = this;
    name = name.substring(0, name.lastIndexOf('.'));
    name = name.replace(/-/g, ' ');
    name = name.replace(/_/g, ' ');
    name = name.replace(/(^|\s)\S/g, function(t) { return t.toUpperCase() });
    image.onload = function ()
    {
      var w = this.naturalWidth;
      var h = this.naturalHeight;
      if (w > root.MaxWidth || h > root.MaxHeight)
      {
        if (w > h)
        {
          w = root.MaxWidth;
          h = root.MaxWidth / this.naturalWidth * this.naturalHeight;
        }
        else
        {
          w = root.MaxHeight / this.naturalHeight * this.naturalWidth;
          h = root.MaxHeight;
        }
      }

      this.width = w;
      this.height = h;

      var canvas = document.createElement('canvas');
      canvas.width = w;
      canvas.height = h;
      canvas.getContext('2d').drawImage(this, 0, 0, w, h);
      root._loaded++;
      root.FileNames.push(name);
      root.BgImageData.push({
        name: name,
        width: w,
        height: h,
        image: canvas.toDataURL('image/png')
      });
      if (root._loaded === root._total) root._init();

      canvas.getContext('2d').clearRect(0, 0, canvas.width, canvas.height);

      canvas = null;
      image = null;
      root = null;
    };
    image.src = this.DownloadApi + '?documentId=' + id;
  }
  _loadImageDataFromB64 (b64String, name, method)
  {
    var image = new Image(), root = this;
    image.onload = function ()
    {
      var w = this.naturalWidth;
      var h = this.naturalHeight;
      if (w > root.MaxWidth || h > root.MaxHeight)
      {
        if (w > h)
        {
          w = root.MaxWidth;
          h = root.MaxWidth / this.naturalWidth * this.naturalHeight;
        }
        else
        {
          w = root.MaxHeight / this.naturalHeight * this.naturalWidth;
          h = root.MaxHeight;
        }
      }

      this.width = w;
      this.height = h;

      var canvas = document.createElement('canvas');
      canvas.width = w;
      canvas.height = h;
      canvas.getContext('2d').drawImage(this, 0, 0, w, h);
      root._loaded++;
      root.FileNames.push(name);
      root.BgImageData.push({
        name: name,
        width: w,
        height: h,
        image: canvas.toDataURL('image/png')
      });

      canvas.getContext('2d').clearRect(0, 0, canvas.width, canvas.height);

      method();

      canvas = null;
      image = null;
      root = null;
    };
    image.src = b64String;
  }


  _setData()
  {
    this.InitNode.value = this.DrawPad.ToDataURL('image/png', 1.0);
    this.InitNode.dispatchEvent(new Event('imageSet'));
  }

  _changeBgImage(ev)
  {
    if (($a.isBool(ev) && ev === true) || $a.isEvent(ev))
    {
      if (!isNaN(parseInt(this.SelectNode.value)))
      {
        this._setBgImage(this.BgImageData[parseInt(this.SelectNode.value)]);
        return;
      }
    }
    this._setBgImage();
  }

  _setBgImage (imageData)
  {
    if (!$a.isObject(imageData))
    {
      var canvasWidth = this.MinWidth, canvasHeight = Affinity2018.IsMobile ? this.MinHeightMobile : this.MinHeight;
      if (this.FormRowNode && document.body.classList.contains('cform')) canvasWidth = this.FormRowNode.getBoundingClientRect().width;
      imageData = {
        name: '',
        width: canvasWidth,
        height: canvasHeight,
        image: null
      };
    }

    var w = imageData.width;
    var h = imageData.height;
    if (w > this.MaxWidth || h > this.MaxHeight)
    {
      if (w > h)
      {
        w = this.MaxWidth;
        h = this.MaxWidth / imageData.width * imageData.height;
      }
      else
      {
        w = this.MaxHeight / imageData.height * imageData.width;
        h = this.MaxHeight;
      }
    }

    this.CanvasNode.width = w;
    this.CanvasNode.height = h;
    this.CanvasNode.style.width = w + 'px';
    this.CanvasNode.style.height = h + 'px';

    this.DrawPad.Clear();
    this.InitNode.value = '';

    if (imageData.image !== null)
    {
      this.DrawPad.FromDataURL(imageData.image);
    }
    else
    {
      this.InitNode.dispatchEvent(new Event('imageSet'));
    }

    if (!this.Ready) this.Ready = true;
  }

  _canvasDown ()
  {
    this._eventIsDown = true;
  }

  _canvasUp ()
  {
    if (this._eventIsDown)
    {
      this._eventIsDown = false;
      this._setData();
    }
  }

  /**/

  Destroy ()
  {
    this.InitNode.classList.remove('ui-drawpanel');
    this.SelectNode.removeEventListener('change', this._changeBgImage);
    this.ClearButtonNode.removeEventListener('click', this.Clear);
    this.CanvasNode.removeEventListener('mousedown', this._canvasDown);
    this.CanvasNode.removeEventListener('mouseup', this._canvasUp);
    document.removeEventListener('mouseup', this._canvasUp);
    this.CanvasNode.removeEventListener('CanvasReady', this._setData);
    this.DrawPad.Destroy();
    this.InnerNode.innerHTML = '';
    this.InnerNode.parentNode.removeChild(this.InnerNode);
    delete this.InitNode.widgets.DrawPanel;
    for (var key in this)
    {
      if (this.hasOwnProperty(key))
      {
        this[key] = null;
        delete this[key];
      }
    }
  }

  /**/

  _templates ()
  {
    this.template = `
    <canvas width="{{width}}" height="{{height}}"></canvas>
    <div class="bg-image-select hidden">
      <label>Select Background</label>
      <div class="select">
        <select>
          <option value="-1" selected>No Image</option>
        </select>
      </div>
    </div>
    <button class="orange clear"><icon class="icon-cancel"></icon>Clear</button>
    `;
  }

};

Affinity2018.Classes.Plugins.DrawPad = class
{
  _options ()
  {
    this.WidgetName = 'DrawPad';

    this.velocityFilterWeight = 0.7;
    this.minWidth = 0.5;
    this.maxWidth = 2.5;
    this.dotSize = function () { return (this.minWidth + this.maxWidth) / 2; };
    this.penColor = 'rgba(0, 0, 0, 1)';
    this.backgroundColor = 'rgba(255, 255, 255, 0)';
    this.canvas = null;
    this.ctx = null;
    this.HasImages = false;
  }

  constructor (canvas, options)
  {
    this._options();
    [
      'Clear',
      'IsEmpty',
      'ToDataURL','FromDataURL',

      '_strokeUpdate', '_strokeBegin', '_strokeDraw', '_strokeEnd', 
      '_createPoint','_addPoint','_calculateCurveControlPoints','_addCurve','_drawPoint','_drawCurve', '_strokeWidth',

      '_handleMouseEvents',
      '_handleTouchEvents',

      '_reset',

      'Destroy'

    ].bindEach(this);
    this._templates();

    if (!Affinity2018.isDomElement(canvas))
    {
      console.error('No valid element was passed to DrawPanelWidget DrawPad');
      return;
    }

    if (!options.hasOwnProperty('Panel'))
    {
      console.error('No valid parent Panel controller was passed to DrawPanelWidget DrawPad');
      return;
    }
    
    if (options.hasOwnProperty('HasImages') && $a.isBool(options.HasImages)) this.HasImages = options.HasImages;
    if (options.hasOwnProperty('Panel')) this.Panel = options.Panel;

    this.velocityFilterWeight = options.velocityFilterWeight || this.velocityFilterWeight;
    this.minWidth = options.minWidth || this.minWidth;
    this.maxWidth = options.maxWidth || this.maxWidth;
    this.dotSize = options.dotSize || this.dotSize;
    this.penColor = options.penColor || this.penColor;
    this.backgroundColor = options.backgroundColor || this.backgroundColor;
    this.canvas = canvas;
    this.ctx = this.canvas.getContext("2d");

    this.Clear();

    if (Affinity2018.IsMobile) this._handleTouchEvents();
    else this._handleMouseEvents();

  }

  SetColors ()
  {
  }

  Clear ()
  {

    if (this.Panel.SelectNode.value === 'none' && Affinity2018.DarkMode)
    {
      this.penColor = 'rgba(255, 255, 255, 1)';
      this.backgroundColor = 'rgba(0, 0, 0, 0.1)';
    }
    else
    {
      this.penColor = 'rgba(0, 0, 0, 1)';
      this.backgroundColor = 'rgba(255, 255, 255, 0)';
    }

    this.ctx.fillStyle = this.backgroundColor;
    this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);
    this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);
    this.ctx.fillStyle = this.penColor;
    this._reset();
  }

  IsEmpty ()
  {
    return this._isEmpty;
  }

  ToDataURL (imageType, quality)
  {
    return this.canvas.toDataURL.apply(this.canvas, arguments);
  }

  FromDataURL (dataUrl)
  {
    this._reset();
    var image = new Image();
    image.onload = function ()
    {
      this.ctx.drawImage(image, 0, 0, this.canvas.width, this.canvas.height);
      this.canvas.dispatchEvent(new CustomEvent('CanvasReady'));
      image = null;
    }.bind(this);
    image.src = dataUrl;
    this._isEmpty = false;
  }

  /**/

  _strokeUpdate (event)
  {
    var point = this._createPoint(event);
    this._addPoint(point);
  }

  _strokeBegin (event)
  {
    this._reset();
    this._strokeUpdate(event);
  }

  _strokeDraw (point)
  {
    var dotSize = typeof (this.dotSize) === 'function' ? this.dotSize() : this.dotSize;
    this.ctx.beginPath();
    this._drawPoint(point.x, point.y, dotSize);
    this.ctx.closePath();
    this.ctx.fill();
  }

  _strokeEnd (event)
  {
    var canDrawCurve = this.points.length > 2;
    var point = this.points[0];
    if (!canDrawCurve && point)
    {
      this._strokeDraw(point);
    }
  }

  /**/
  
  _createPoint (ev)
  {
    var rect = this.canvas.getBoundingClientRect();
    return new Affinity2018.Objects.DrawPadPoint(ev.clientX - rect.left, ev.clientY - rect.top);
  }
  
  _addPoint (point)
  {
    var c2, c3, curve, tmp;

    this.points.push(point);

    if (this.points.length > 2)
    {
      // To reduce the initial lag make it work with 3 points
      // by copying the first point to the beginning
      if (this.points.length === 3) this.points.unshift(this.points[0]);

      tmp = this._calculateCurveControlPoints(this.points[0], this.points[1], this.points[2]);
      c2 = tmp.c2;
      tmp = this._calculateCurveControlPoints(this.points[1], this.points[2], this.points[3]);
      c3 = tmp.c1;
      curve = new Affinity2018.Objects.DrawPadBezier(this.points[1], c2, c3, this.points[2]);
      this._addCurve(curve);

      // Remove the first element from the list,
      // so that we always have no more than 4 points in points array.
      this.points.shift();
    }
  }
  
  _calculateCurveControlPoints (s1, s2, s3)
  {
    var dx1 = s1.x - s2.x, dy1 = s1.y - s2.y,
        dx2 = s2.x - s3.x, dy2 = s2.y - s3.y,

        m1 = { x: (s1.x + s2.x) / 2.0, y: (s1.y + s2.y) / 2.0 },
        m2 = { x: (s2.x + s3.x) / 2.0, y: (s2.y + s3.y) / 2.0 },

        l1 = Math.sqrt(dx1 * dx1 + dy1 * dy1),
        l2 = Math.sqrt(dx2 * dx2 + dy2 * dy2),

        dxm = (m1.x - m2.x),
        dym = (m1.y - m2.y),

        k = l2 / (l1 + l2),
        cm = { x: m2.x + dxm * k, y: m2.y + dym * k },

        tx = s2.x - cm.x,
        ty = s2.y - cm.y;

    return {
      c1: new Affinity2018.Objects.DrawPadPoint(m1.x + tx, m1.y + ty),
      c2: new Affinity2018.Objects.DrawPadPoint(m2.x + tx, m2.y + ty)
    };
  }
  
  _addCurve (curve)
  {
    var startPoint = curve.startPoint,
        endPoint = curve.endPoint,
        velocity, newWidth;

    velocity = endPoint.velocityFrom(startPoint);
    velocity = this.velocityFilterWeight * velocity + (1 - this.velocityFilterWeight) * this._lastVelocity;

    newWidth = this._strokeWidth(velocity);
    this._drawCurve(curve, this._lastWidth, newWidth);

    this._lastVelocity = velocity;
    this._lastWidth = newWidth;
  }
  
  _drawPoint (x, y, size)
  {
    this.ctx.moveTo(x, y);
    this.ctx.arc(x, y, size, 0, 2 * Math.PI, false);
    this._isEmpty = false;
  };
   
  _drawCurve (curve, startWidth, endWidth)
  {
    var widthDelta = endWidth - startWidth,
        drawSteps, width, i, t, tt, ttt, u, uu, uuu, x, y;

    drawSteps = Math.floor(curve.length());
    this.ctx.beginPath();
    for (i = 0; i < drawSteps; i++)
    {
      // Calculate the Bezier (x, y) coordinate for this step.
      t = i / drawSteps;
      tt = t * t;
      ttt = tt * t;
      u = 1 - t;
      uu = u * u;
      uuu = uu * u;

      x = uuu * curve.startPoint.x;
      x += 3 * uu * t * curve.control1.x;
      x += 3 * u * tt * curve.control2.x;
      x += ttt * curve.endPoint.x;

      y = uuu * curve.startPoint.y;
      y += 3 * uu * t * curve.control1.y;
      y += 3 * u * tt * curve.control2.y;
      y += ttt * curve.endPoint.y;

      width = startWidth + ttt * widthDelta;
      this._drawPoint(x, y, width);
    }
    this.ctx.closePath();
    this.ctx.fill();
  }

  _strokeWidth (velocity)
  {
    return Math.max(this.maxWidth / (velocity + 1), this.minWidth);
  }

  /**/

  _handleMouseEvents ()
  {
    this._mouseButtonDown = false;
    ['_handleMouseMouseDown', '_handleMouseMove', '_handleDocMouseUp'].bindEach(this);
    this.canvas.addEventListener("mousedown", this._handleMouseMouseDown);
    this.canvas.addEventListener("mousemove", this._handleMouseMove, Affinity2018.PassiveEventProp);
    document.addEventListener("mouseup", this._handleDocMouseUp);
  }
  _handleMouseMouseDown (ev)
  {
    if (ev.which === 1)
    {
      this._mouseButtonDown = true;
      this._strokeBegin(ev);
    }
  }
  _handleMouseMove (ev)
  {
    if (this._mouseButtonDown)
    {
      this._strokeUpdate(ev);
    }
  }
  _handleDocMouseUp (ev)
  {
    if (ev.which === 1 && this._mouseButtonDown)
    {
      this._mouseButtonDown = false;
      this._strokeEnd(ev);
    }
  }

  _handleTouchEvents ()
  {
    ['_handleTouchStart', '_handleTouchMove', '_handleDocTouchEnd'].bindEach(this);
    this.canvas.addEventListener("touchstart", this._handleTouchStart);
    this.canvas.addEventListener("touchmove", this._handleTouchMove, Affinity2018.PassiveEventProp);
    document.addEventListener("touchend", this._handleDocTouchEnd);
  }
  _handleTouchStart (ev)
  {
    var touch = ev.changedTouches[0];
    this._strokeBegin(touch);
  }
  _handleTouchMove (ev)
  {
    // Prevent scrolling;
    ev.preventDefault();
    var touch = ev.changedTouches[0];
    this._strokeUpdate(touch);
  }
  _handleDocTouchEnd (ev)
  {
    var wasCanvasTouched = ev.target === this.canvas;
    if (wasCanvasTouched) this._strokeEnd();
  }

  /**/

  _reset ()
  {
    this.points = [];
    this._lastVelocity = 0;
    this._lastWidth = (this.minWidth + this.maxWidth) / 2;
    this._isEmpty = true;
  }

  /**/

  Destroy ()
  {
    this._reset();
    this.canvas.removeEventListener("mousedown", this._handleMouseMouseDown);
    this.canvas.removeEventListener("mousemove", this._handleMouseMove, Affinity2018.PassiveEventProp);
    document.removeEventListener("mouseup", this._handleDocMouseUp);
    this.canvas.removeEventListener("touchstart", this._handleTouchStart);
    this.canvas.removeEventListener("touchmove", this._handleTouchMove, Affinity2018.PassiveEventProp);
    document.removeEventListener("touchend", this._handleDocTouchEnd);
    for (var key in this)
    {
      if (this.hasOwnProperty(key))
      {
        this[key] = null;
        delete this[key];
      }
    }
  }

  /**/

  _templates()
  {

  }
  
};

Affinity2018.Objects.DrawPadPoint = class
{
  constructor (x, y, time)
  {
    ['velocityFrom', 'distanceTo'].bindEach(this);
    this.x = x;
    this.y = y;
    this.time = time || new Date().getTime();
  }
  velocityFrom (start)
  {
    return (this.time !== start.time) ? this.distanceTo(start) / (this.time - start.time) : 1;
  }
  distanceTo (start) {
    return Math.sqrt(Math.pow(this.x - start.x, 2) + Math.pow(this.y - start.y, 2));
  }
};

Affinity2018.Objects.DrawPadBezier = class
{
  constructor (startPoint, control1, control2, endPoint)
  {
    ['length', '_point'].bindEach(this);
    this.startPoint = startPoint;
    this.control1 = control1;
    this.control2 = control2;
    this.endPoint = endPoint;
  }
  length ()
  {
    var steps = 10,
        length = 0,
        i, t, cx, cy, px, py, xdiff, ydiff;

    for (i = 0; i <= steps; i++)
    {
      t = i / steps;
      cx = this._point(t, this.startPoint.x, this.control1.x, this.control2.x, this.endPoint.x);
      cy = this._point(t, this.startPoint.y, this.control1.y, this.control2.y, this.endPoint.y);
      if (i > 0) {
          xdiff = cx - px;
          ydiff = cy - py;
          length += Math.sqrt(xdiff * xdiff + ydiff * ydiff);
      }
      px = cx;
      py = cy;
    }
    return length;
  }
  _point (t, start, c1, c2, end)
  {
    return start * (1.0 - t) * (1.0 - t) * (1.0 - t)
      + 3.0 * c1 * (1.0 - t) * (1.0 - t) * t
      + 3.0 * c2 * (1.0 - t) * t * t
      + end * t * t * t;
  }
};
;
/***************************************************************************************************************************************************/
/***************************************************************************************************************************************************/
/***                                                                                      **********************************************************/
/***   ███████ ██ ██      ███████     ██    ██ ██████  ██       ██████   █████  ██████    **********************************************************/
/***   ██      ██ ██      ██          ██    ██ ██   ██ ██      ██    ██ ██   ██ ██   ██   **********************************************************/
/***   █████   ██ ██      █████       ██    ██ ██████  ██      ██    ██ ███████ ██   ██   **********************************************************/
/***   ██      ██ ██      ██          ██    ██ ██      ██      ██    ██ ██   ██ ██   ██   **********************************************************/
/***   ██      ██ ███████ ███████      ██████  ██      ███████  ██████  ██   ██ ██████    **********************************************************/
/***                                                                                      **********************************************************/
/***************************************************************************************************************************************************/
/********************************************************************************************************************** Source63 *** file upload ***/

/**
 *
 * Summary.       File Upload Widget.
 *
 * Description.   Allows the upload, download, delete and display of files.
 *
 * @author        Ben King, benk at affinityteam.com, ben.king at source63.com, +64 21 2672729.
 *
 *
 * @since         09.09.2019
 *
 * Dictate behaviour via data parameters.
 * 
 * GetApi     = <input data-get-api="some/api" />
 * GetIdParam = <input data-get-id-param="fileIds" />
 * GetParams  = <input data-get-params="stringified base64 object" />
 * 
 * Same patter for GetInfoApi, DownloadApi, PostApi and DeleteApi
 * 
 * Example of AbcParams
 * 
 * Affinty2018.setObjectToDataset(node, 'AbcParams', { 'dicId': '1234', fileIds: [] });
 * 
 * fileIds will be set if AbcIdParam mathches
 * 
 * @public
 */

if (!('Affinity2018' in window)) Affinity2018 = {};
if (!('Classes' in Affinity2018)) Affinity2018.Classes = {};
if (!('Plugins' in Affinity2018.Classes)) Affinity2018.Classes.Plugins = {};

if (!('Apps' in Affinity2018)) Affinity2018.Apps = {};
if (!('Plugins' in Affinity2018.Apps)) Affinity2018.Apps.Plugins = {};

Affinity2018.Classes.Plugins.FileUpload = class
{
  options()
  {

  }

  constructor()
  {
    this.options();
    [

      'Apply',
      'Remove',
      '_apply',
      '_templates'

    ].bindEach(this);

    this.Ready = true;

    this._templates();
  }

  Apply(node)
  {
    var temp = [];
    if (node !== undefined && node !== null)
    {
      temp = [this._apply(node)];
    }
    else
    {
      document.querySelectorAll('.ui-has-file').forEach(function (node)
      {
        temp.push(this._apply(node));
      }.bind(this));
    }
    return {
      total: temp.length,
      widgets: temp
    }
  }

  Remove(node)
  {
    if (
      node.tagName.toLowerCase() === 'input'
      && node.classList.contains('ui-file')
      && node.hasOwnProperty('widgets')
      && node.widgets.hasOwnProperty('FileUpload')
    )
    {
      node.widgets.FileUpload.Destroy();
      return;
    }
    if (
      node.tagName.toLowerCase() !== 'input'
      && node.classList.contains('ui-file')
      && node.querySelector('input.ui-file')
    )
    {
      this.Remove(node.querySelector('input.ui-file'));
    }
  }

  /**/

  _apply(node)
  {
    return new Affinity2018.Classes.Plugins.FileUploadWidget(node);
  }

  /**/

  _templates()
  {

  }

};

Affinity2018.Classes.Plugins.FileUploadWidget = class extends Affinity2018.ClassEvents
{
  _options()
  {
    this.WidgetName = 'FileUpload';

    this.Ready = false;

    this.MaxFileSize = 20; // in MB (not mb or Mb)
    this.ByteMultiplyer = 1048576; // 1000000;

    this.AllowMultiple = true;

    this.AllowableFileTypes = [];

    this.GetApi = false;
    this.GetInfoApi = false;
    this.DownloadApi = false;
    this.DeleteApi = false;

    this.GetIdParam = false;
    this.GetInfoIdParam = false;
    this.DownloadIdParam = false;
    this.PostIdParam = false;
    this.DeleteIdParam = false;

    this.GetParams = {};
    this.GetInfoParams = {};
    this.DownloadParams = {};
    this.PostParams = {};
    this.DeleteParams = {};

    this.FileIds = [];

    this.BlockedFileTypes = [
      'code', 'executable', 'unknown'
    ];

    this.WhiteListTypes = [];

    this.UseFormDataPost = true;

    this.Files = [];
  }

  constructor(targetNode)
  {
    super();
    this._options();
    [
      'ShowError', 'HideError',
      'IsValid',

      'GetFiles', 'GetFileIds',
      'DeleteFiles',

      'HasFiles',
      'HasSavedFiles',
      'PostFiles',
      'Destroy',

      '_validate',
      '_sizeOk', '_fileTypeOk',
      '_getGridCount',
      '_sizeGrid',
      '_addFile', '_contunueAddFile',
      '_gridClicked',
      '_deleteRow',

      '_getFileFromId', '_getFileFromIdOk', '_gotFileFromIdFail',
      '_postFile', '_postFileOk', '_postFileFail', '_postAllFiles',
      '_deleteFileFromId', '_deleteFileFromIdOk', '_deleteFileFromIdFail',

      '_templates'

    ].bindEach(this);
    this._templates();

    if (!Affinity2018.isDomElement(targetNode))
    {
      console.error('No valid element was passed to FileUploadWidget, dummy!');
      return;
    }

    this.CleverForms = window.hasOwnProperty('Affinity2018') && Affinity2018.hasOwnProperty('Apps') && Affinity2018.Apps.hasOwnProperty('CleverForms') ? Affinity2018.Apps.CleverForms.Default : null
    this.Form = this.CleverForms && this.CleverForms.hasOwnProperty('Form') ? this.CleverForms.Form : null;

    targetNode.classList.remove('ui-has-file');

    this.initNode = targetNode;
    this.initNode.classList.add('ui-file');

    if (this.initNode.parentNode.classList.contains('edit-row'))
    {
      this.EditRow = this.initNode.parentNode;
      this.EditRow.classList.add('ui-file-row');
    }

    this.fileNode = this.initNode.querySelector('input');
    this.fileNode.classList.add('ui-file');

    if (!this.fileNode.widgets) this.fileNode.widgets = {};
    this.fileNode.widgets.FileUpload = this;

    this.PostName = this.fileNode.name;

    this.descriptionNode = false;
    if (this.initNode.parentNode && this.initNode.parentNode.classList.contains('form-row'))
    {
      if (this.initNode.parentNode.querySelector('p'))
      {
        this.descriptionNode = this.initNode.parentNode.querySelector('p');
      }
    }

    if (this.fileNode.dataset.allowMultiple)
    {
      this.AllowMultiple = this.fileNode.dataset.allowMultiple.toString().toLowerCase().trim() === 'false' ? false : this.AllowMultiple;
      delete this.fileNode.dataset.allowMultiple;

      if (this.AllowMultiple) this.fileNode.setAttribute('multiple', 'multiple');
      else this.fileNode.removeAttribute('multiple');
    }

    if (this.fileNode.dataset.maxSize)
    {
      if (!isNaN(parseFloat(this.fileNode.dataset.maxSize)))
      {
        this.MaxFileSize = parseFloat(this.fileNode.dataset.maxSize);
        delete this.fileNode.dataset.maxSize;
      }
    }

    if (this.fileNode.dataset.allowTypes)
    {
      this.WhiteListTypes = [];
      var allowGroups = this.fileNode.dataset.allowTypes.split(',');
      for (var a = 0; a < allowGroups.length; a++)
      {
        if (Affinity2018.FileTypeGroupData.hasOwnProperty(allowGroups[a]))
        {
          this.WhiteListTypes = this.WhiteListTypes.concat(Affinity2018.FileTypeGroupData[allowGroups[a]].Types);
        }
      }
      if (allowGroups.length > 1 && this.WhiteListTypes.length === 0)
      {
        this.WhiteListTypes = allowGroups.length;
      }
      delete this.fileNode.dataset.allowTypes;
    }

    /**/

    if (this.fileNode.dataset.getApi)
    {
      this.GetApi = this.fileNode.dataset.getApi;
      delete this.fileNode.dataset.getApi;
    }
    if (this.fileNode.dataset.getIdParam)
    {
      this.GetIdParam = this.fileNode.dataset.getIdParam;
      delete this.fileNode.dataset.getIdParam;
    }
    if (this.fileNode.dataset.getParams)
    {
      this.GetParams = Affinity2018.getObjectFromDataset(this.fileNode, 'getParams');
      delete this.fileNode.dataset.getParams;
    }

    /**/

    if (this.fileNode.dataset.getInfoApi)
    {
      this.GetInfoApi = this.fileNode.dataset.getInfoApi;
      delete this.fileNode.dataset.getInfoApi;
    }
    if (this.fileNode.dataset.getInfoIdParam)
    {
      this.GetInfoIdParam = this.fileNode.dataset.getInfoIdParam;
      delete this.fileNode.dataset.getInfoIdParam;
    }
    if (this.fileNode.dataset.getInfoParams)
    {
      this.GetInfoParams = Affinity2018.getObjectFromDataset(this.fileNode, 'getInfoParams');
      delete this.fileNode.dataset.getInfoParams;
    }

    /**/

    if (this.fileNode.dataset.downloadApi)
    {
      this.DownloadApi = this.fileNode.dataset.downloadApi;
      delete this.fileNode.dataset.downloadApi;
    }
    if (this.fileNode.dataset.downloadIdParam)
    {
      this.DownloadIdParam = this.fileNode.dataset.downloadIdParam;
      delete this.fileNode.dataset.downloadIdParam;
    }
    if (this.fileNode.dataset.downloadParams)
    {
      this.DownloadParams = Affinity2018.getObjectFromDataset(this.fileNode, 'downloadParams');
      delete this.fileNode.dataset.downloadParams;
    }

    /**/

    if (this.fileNode.dataset.postApi)
    {
      this.PostApi = this.fileNode.dataset.getApi;
      delete this.fileNode.dataset.getApi;
    }
    if (this.fileNode.dataset.postParams)
    {
      this.PostParams = Affinity2018.getObjectFromDataset(this.fileNode, 'postParams');
      delete this.fileNode.dataset.postParams;
    }

    /**/

    if (this.fileNode.dataset.deleteApi)
    {
      this.DeleteApi = this.fileNode.dataset.deleteApi;
      delete this.fileNode.dataset.deleteApi;
    }
    if (this.fileNode.dataset.deleteIdParam)
    {
      this.DeleteIdParam = this.fileNode.dataset.deleteIdParam;
      delete this.fileNode.dataset.deleteIdParam;
    }
    if (this.fileNode.dataset.deleteParams)
    {
      this.DeleteParams = Affinity2018.getObjectFromDataset(this.fileNode, 'deleteParams');
      delete this.fileNode.dataset.deleteParams;
    }

    /**/

    if (this.fileNode.dataset.fileIds)
    {
      var fileIds = this.fileNode.dataset.fileIds;
      this.FileIds = fileIds.split(',').removeEmpty().removeDuplicates();
      delete this.fileNode.dataset.fileIds;
    }

    /**/

    this._deleteThese = [];

    this.gridNode = document.createElement('div');
    this.gridNode.classList.add('grid-wrapper', 'ui-file-list', 'hidden');
    this.gridNode.innerHTML = this.gridTemplate;

    if (this.descriptionNode)
    {
      //this.initNode.parentNode.insertBefore(this.gridNode, this.descriptionNode.nextSibling);
      this.initNode.parentNode.insertBefore(this.gridNode, this.initNode.nextSibling);
    }
    else
    {
      this.initNode.parentNode.insertBefore(this.gridNode, this.initNode.nextSibling);
    }

    /**/

    this.IsRequired = false;
    this.Valid = true;
    this.RowNode = false;
    this.ErrorNode = false;
    if (this.initNode.parentNode.classList.contains('form-row'))
    {
      this.RowNode = this.initNode.parentNode;
      this.IsRequired = this.RowNode.classList.contains('required');
      this.ErrorNode = this.RowNode && this.RowNode.querySelector('.ui-form-error') ? this.RowNode.querySelector('.ui-form-error') : document.createElement('div');
      this.ErrorNode.classList.add('ui-form-error');
      this.initNode.parentNode.appendChild(this.ErrorNode);
    }

    /**/

    var breaker = document.createElement('br');
    this.gridNode.parentNode.insertBefore(breaker, this.gridNode);

    this.gridBody = this.gridNode.querySelector('tbody');

    this.fileNode.addEventListener('change', this._addFile);
    this.gridNode.addEventListener('click', this._gridClicked);

    if (this.GetApi && this.FileIds.length > 0)
    {
      this._getFileFromId(this.FileIds);
    }
    else
    {
      this.Ready = true;
      this.fileNode.dispatchEvent(new CustomEvent('widgetReady'));
    }

  }

  /**/

  IsValid()
  {
    return this._validate();
  }

  ShowError(error)
  {
    this.ErrorNode.innerHTML = error;
    this.ErrorNode.classList.add('show');
    if (this.RowNode) this.RowNode.classList.add('error');
    if (this.Form) this.Form.ResizeSection();
  }
  HideError()
  {
    this.ErrorNode.classList.remove('show');
    if (this.RowNode) this.RowNode.classList.remove('error');
    if (this.Form) this.Form.ResizeSection();
  }

  /**/

  GetFiles()
  {
    if (this.HasFiles() || this.HasSavedFiles())
    {
      var list = [];
      this.gridBody.querySelectorAll('tr.from-doc-store').forEach(function (rowNode)
      {
        list.push({
          FileName: rowNode.dataset.fileName || null,
          FileId: rowNode.dataset.fileId || null
        });
      }.bind(this));
      return list;
    }
    return [];
  }

  GetFileIds()
  {
    if (this.HasFiles() || this.HasSavedFiles())
    {
      var list = $a.jsonCloneObject(this.FileIds), fileId;
      this.gridBody.querySelectorAll('tr.from-doc-store').forEach(function (rowNode)
      {
        fileId = !isNaN(parseInt(rowNode.dataset.fileId)) ? parseInt(rowNode.dataset.fileId) : null;
        if (fileId !== null) list.push(fileId);
      }.bind(this));

      list = list.map(function (x) { return x + ''; });
      list = list.removeDuplicates().removeEmpty();

      return list;
    }
    return [];
  }

  HasFiles()
  {
    return this.gridBody.querySelectorAll('tr').length > 0;
  }

  HasUnsavedFiles()
  {
    return this.gridBody.querySelectorAll('tr:not(.from-doc-store)').length > 0;
  }

  HasSavedFiles()
  {
    return this.FileIds.length > 0;
  }

  PostFiles()
  {
    if (this.Files.length > 0)
    {
      this._postAllFiles();
    }
  }

  DeleteFiles()
  {
    this.gridBody.querySelectorAll('tr').forEach(this._deleteRow);
    //if (this.Files.length > 0)
    //{
    //  this._deleteMissingFiles();
    //}
  }

  /**/

  _validate()
  {
    this.Valid = true;
    this.HideError();
    if (this.RowNode) this.RowNode.classList.remove('error');

    if (!this.IsRequired) return;

    if (!this.HasFiles())
    {
      if (this.RowNode) this.RowNode.classList.add('error');
      this.ShowError('You must select a file.');
      this.Valid = false;
    }

    return this.Valid;
  }

  /**/

  _getGridCount(uploadedOnly)
  {
    uploadedOnly = $a.paramOrDefault(uploadedOnly, false);
    if (uploadedOnly) return this.gridBody.querySelectorAll('tr.from-doc-store').length;
    return this.gridBody.querySelectorAll('tr').length;
  }

  _sizeOk(size)
  {
    if (size >= this.MaxFileSize * this.ByteMultiplyer) return false;
    return true;
  }

  _fileTypeOk(file)
  {
    var typeData = $a.GetDocFileData(file);
    if (typeData.type === 'Unknown') return false;
    if (this.WhiteListTypes.length > 0)
    {
      if (this.WhiteListTypes.contains(typeData.type)) return true;
      if (this.WhiteListTypes.contains(typeData.ext)) return true;
      return false;
    }
    else
    {
      if (this.BlockedFileTypes.contains(typeData.type)) return false;
    }
    return true;
  }

  _getExt(file)
  {
    return file.substr(file.lastIndexOf('.')).replace(/\./g, '').toLowerCase().trim();
  }

  _sizeGrid()
  {
    var minWidth = false, rowNode, labelNode;
    if (this.initNode.closest('div[class*="row"]'))
    {
      rowNode = this.initNode.closest('div[class*="row"]');
      labelNode = rowNode.querySelector('label');
      minWidth = labelNode ? parseInt(window.getComputedStyle(labelNode).width) + parseInt(window.getComputedStyle(this.initNode).width) : false;
    }
    if (minWidth && !isNaN(minWidth) && minWidth > 0)
    {
      this.gridNode.style.minWidth = (minWidth + 8) + 'px';
    }

    clearTimeout(this.resizeTimeout);
    this.resizeTimeout = setTimeout(function () { this.dispatchEvent(new CustomEvent('resized')); }.bind(this), 1000);
  }

  _addFile(ev)
  {
    if (!this.AllowMultiple)
    {
      if (this.Files.length > 0)
      {
        Affinity2018.Dialog.Show({
          message: 'Are you sure you want to replace <strong><em>' + this.gridBody.querySelector('td.file').innerText + '</em></strong>?',
          showOk: true,
          showCancel: true,
          showInput: false,
          buttons: {
            ok: {
              text: 'Yes',
              icon: 'delete'
            }
          },
          onOk: this._contunueAddFile
        });
      }
      else
      {
        this._contunueAddFile(ev);
      }
    }
    else
    {
      this._contunueAddFile(ev);
    }
    this._contunueAddFile(ev);
  }

  _contunueAddFile(ev)
  {
    var allErrors = [], f = 0, file, typeData, errors, filesToAdd = [];

    if (this.fileNode.files.length > 0)
    {

      for (; f < this.fileNode.files.length; f++)
      {
        file = this.fileNode.files[f];
        typeData = $a.GetDocFileData(file.name);
        errors = [];
        if (!this._sizeOk(file.size)) errors.push('<strong><em>' + file.name + '</em></strong> is too big. Files must be smaller than ' + this.MaxFileSize + 'MB');
        if (!this._fileTypeOk(file.name)) errors.push('We can\'t upload <strong><em>' + file.name + '</em></strong>. <span style="text-transform: capitalize">' + typeData.type + '</span> files can not be uploaded.');

        if (errors.length > 0)
        {
          allErrors = [].concat(allErrors, errors);
        }
        else
        {
          filesToAdd.push(file);
          /*
          if (!this.AllowMultiple && this._getGridCount() > 0) // already has a row, but we are only allowed 1 file
          {
            this._deleteRow(this.gridBody.querySelector('tr'));
          }
          */
        }
      }

      if (allErrors.length > 0)
      {
        Affinity2018.Dialog.Show({
          message: allErrors.join('<br />'),
          showOk: true,
          showCancel: false,
          showInput: false
        });
      }

      if (filesToAdd.length > 0)
      {
        this.dispatchEvent(new CustomEvent('uploaded'));
        if (!this.AllowMultiple)
        {

          var warnDelete = false, delId = -1, row, delName;
          if (this.FileIds.length > 0)
          {
            row = this.gridBody.querySelector('tr.from-doc-store');
            if (row)
            {
              delName = row.dataset.fileName;
              delId = row.dataset.fileId;
              warnDelete = true;
            }
          }
          else if (this.FileIds.length === 0 && this._getGridCount() > 0)
          {
            row = this.gridBody.querySelector('tr');
            if (row)
            {
              delName = row.querySelector('td.file').innerText;
              delId = -1;
              warnDelete = true;
            }
          }

          if (warnDelete)
          {
            Affinity2018.Dialog.Show({
              message: 'File "' + delName + '" wil be deleted and will be replaced with "' + filesToAdd[0].name + '".<br />Are you sure you wish to continue?',
              showOk: true,
              showCancel: true,
              showInput: false,
              textAlign: 'left',
              buttons: {
                ok: {
                  text: 'Yes',
                  icon: 'tick'
                }
              },
              onOk: function ()
              {
                if (delId !== -1) this._deleteFileFromId(delId);
                else this._deleteRow(this.gridBody.querySelector('tr'));
                this._addRemainingFiles(filesToAdd);
              }.bind(this),
              onCancel: function ()
              {
                this._resetFileNode();
              }
            });
          }
          else
          {
            this._addRemainingFiles(filesToAdd);
          }
        }
        else
        {
          this._addRemainingFiles(filesToAdd);
        }
      }
      this._resetFileNode();
    }
  }

  _addRemainingFiles(filesToAdd)
  {
    var f = 0, file, typeData;
    for (f = 0; f < filesToAdd.length; f++)
    {
      file = filesToAdd[f];
      typeData = $a.GetDocFileData(file.name);
      this.Files.push(file);
      this._insertRow(file.name);
      //if (this.PostApi !== false) this._postFile(file, typeData);
    }
    if (this.PostApi !== false) this._postAllFiles();
    this._checkGrid();
    this._resetFileNode();
  }

  _checkGrid()
  {
    this.gridNode.classList.add('hidden');
    if (this.gridBody.querySelectorAll('tr').length > 0)
    {
      this._sizeGrid();
      this.gridNode.classList.remove('hidden');
    }
  }

  _gridClicked(ev)
  {
    var buttonNode = ev.target.closest('.button'),
      row = buttonNode ? buttonNode.closest('tr') : false;
    if (row && buttonNode.classList.contains('del'))
    {
      $a.Dialog.Show({
        message: 'Are you sure you want to remove <strong><em>' + row.querySelector('td.file').innerText + '</em></strong>?',
        showOk: true,
        showCancel: true,
        showInput: false,
        textAlign: 'left',
        buttons: {
          ok: {
            text: 'Yes',
            icon: 'delete'
          }
        },
        onOk: function ()
        {
          this._deleteRow(row);
        }.bind(this)
      });
    }
  }

  _insertRow(fileName, filePath, fileId)
  {
    var rowNode;
    rowNode = document.createElement('tr');
    rowNode.innerHTML = this.rowTemplate;
    rowNode.querySelector('td.file').innerHTML = fileName;
    if (filePath && !filePath.isNullOrEmpty())
    {
      rowNode.querySelector('td.file').innerHTML = '<a href="' + filePath + '" target="_blank">' + fileName + '</a>';
    }
    if (
      ($a.isString(fileId) && !fileId.isNullOrEmpty())
      || $a.isInt(fileId)
    )
    {
      rowNode.classList.add('from-doc-store', 'id' + fileId);
      rowNode.dataset.fileId = fileId;
      rowNode.dataset.fileName = fileName;
    }
    this.gridBody.appendChild(rowNode);
    this.gridNode.classList.add('hidden');
    if (this.gridBody.querySelectorAll('tr').length > 0)
    {
      this._sizeGrid();
      this.gridNode.classList.remove('hidden');
    }
  }

  _updateSectionSize()
  {

  }

  _deleteRow(node)
  {
    if (
      node
      && node.tagName.toLowerCase() === 'tr'
      && node.parentNode === this.gridBody
    )
    {
      if (this.DeleteApi && node.classList.contains('from-doc-store') && node.dataset.fileId)
      {
        this._deleteFileFromId(node.dataset.fileId);
      }
      else
      {
        this.gridBody.removeChild(node);
        var fileName = node.innerText.toLowerCase().trim(), f = 0;
        for (; f < this.Files.length; f++)
        {
          if (this.Files[f].name.toLowerCase().trim() == fileName)
          {
            this.Files.splice(f, 1);
            break;
          }
        }
      }
      if (this.gridBody.querySelectorAll('tr').length === 0)
      {
        this.gridNode.classList.add('hidden');
        this.Files = [];
      }
      this._resetFileNode();
    }
  }

  _resetFileNode()
  {
    try
    {
      this.fileNode.value = '';
    }
    catch (ex) { }
    try
    {
      if (this.fileNode.value)
      {
        this.fileNode.type = "text";
        this.fileNode.type = "file";
      }
    }
    catch (ex) { }
  }

  /**/

  _getFileFromId(ids)
  {
    if (this.GetApi && this.DownloadApi)
    {
      if ($a.isString(ids) && ids.contains(',')) ids = ids.split(',');
      if ($a.isString(ids) && !ids.contains(',')) ids = [ids];
      if (!$a.isArray(ids)) return;

      ids = ids.map(function (x) { return x + ''; });
      ids = ids.removeDuplicates().removeEmpty();

      var params = Affinity2018.jsonCloneObject(this.GetInfoParams);
      for (var key in params)
      {
        if (key === this.GetInfoIdParam) params[key] = ids;
      }

      var queries = [];
      for (key in params) queries.push(key + '=' + params[key]);

      var url = this.GetInfoApi + '?' + queries.join('&');

      axios({
        method: 'GET',
        url: url,
      }).then(this._getFileFromIdOk).catch(this._gotFileFromIdFail);

    }
  }
  _getFileFromIdOk(response)
  {
    this._deleteThese = [];
    if (
      Affinity2018.isObject(response)
      && Affinity2018.isPropObject(response, 'data')
      && Affinity2018.isPropObject(response.data, 'data')
    )
    {
      var id, name, path;
      for (id in response.data.data)
      {
        if (response.data.data.hasOwnProperty(id))
        {
          name = response.data.data[id];
          if (name.trim() !== '')
          {

            var params = Affinity2018.jsonCloneObject(this.DownloadParams);
            for (var key in params)
            {
              if (key === this.DownloadIdParam) params[key] = id;
            }

            var queries = [];
            for (key in params)
            {
              if (params.hasOwnProperty(key)) queries.push(key + '=' + params[key]);
            }

            path = this.DownloadApi + '?' + queries.join('&');

            this._insertRow(name, path, id);
          }
          else this._deleteThese.push(id);
        }
      }
      this.Ready = true;
      this.fileNode.dispatchEvent(new CustomEvent('widgetReady'));
      if (this._deleteThese.length > 0)
      {
        var deleteId = deleteNameless[0];
        this._deleteThese = this._deleteThese.shift();
        this._deleteFileFromId(deleteId);
      }
      return;
    }

    /**/

    if (
      $a.isObject(response)
      && $a.isPropObject(response, 'data')
      && $a.isPropBool(response.data, 'FileName')
      && $a.isPropString(response.data, 'FilePath')
      && $a.isPropString(response.data, 'FileId')
    )
    {
      this._insertRow(response.data.FileName, response.data.FilePath, response.data.FileId);
    }
    this._loaded++;
    if (this._loaded === this._loadTotal) this.Ready = true;

    /**/
  }
  _gotFileFromIdFail(error)
  {
    this._loaded++;
    if (this._loaded === this._loadTotal) this.Ready = true;
  }

  /**/

  _postAllFiles()
  {
    var postData, key;
    if (this.UseFormDataPost) postData = new FormData();
    else postData = {};

    var params = Affinity2018.jsonCloneObject(this.PostParams);
    for (key in params)
    {
      if (params.hasOwnProperty(key))
      {
        if (this.UseFormDataPost) postData.append(key, params[key]);
        else postData[key] = params[key];
      }
    }

    this.Files.forEach(function (file, index)
    {
      key = 'file[' + index + ']';
      if (this.UseFormDataPost) postData.append(key, file);
      else postData[key] = file;
    }.bind(this));
    $a.ShowPageLoader();
    axios({
      method: 'POST',
      url: this.PostApi,
      data: postData,
      headers: {
        'Content-Type': 'multipart/form-data'
      }
    })
      .then(this._postFileOk)
      .catch(this._postFileFail);
  }
  _postFileOk(response)
  {
    var d, data, names = [];
    if (
      $a.isObject(response)
      && $a.isPropArray(response, 'data')
    )
    {
      if (response.data.length > 0)
      {
        for (var d = 0; d < response.data.length; d++)
        {
          data = response.data[d];
          if (
            $a.isInt(data.FileId)
            && $a.isString(data.FileName)
          )
          {
            if (!this.FileIds.contains(data.FileId)) this.FileIds.push(data.FileId);
            names.push(data.FileName);

            this.gridBody.querySelectorAll('tr:not(.from-doc-store)').forEach(function (rowNode)
            {
              names.forEach(function (name)
              {
                if (name === rowNode.querySelector('td.file').innerText.trim())
                {
                  this._deleteRow(rowNode);
                  var link = this.DownloadApi ? this.DownloadApi + '?documentId=' + data.FileId : false;
                  this._insertRow(data.FileName, link, data.FileId);
                }
              }.bind(this));
            }.bind(this));

          }
        }

        if (response.data.length === names.length && names.length > 0)
        {
          this.dispatchEvent(new CustomEvent('postSuccess', { detail: { dispatchObject: { FileName: names.join(','), FileId: this.FileIds.join(',') } } }));
          this._resetFileNode();
          this._validate();
          $a.HidePageLoader();
        }
      }
      else
      {
        this._postFileFail('No results returned');
      }
    }
    else
    {
      this._postFileFail('Bad return data');
    }
  }
  _postFileFail(error)
  {
    console.log(error);
    var f = 0, names = [];
    for (; f < this.Files.length; f++) names.push(this.Files[f].name);
    this.dispatchEvent(new CustomEvent('postFailed', { detail: { dispatchObject: { FileName: names } } }));
    this._validate();
    $a.HidePageLoader();
  }

  /**/

  _deleteFileFromId(id)
  {
    if (this.DeleteApi)
    {
      var postData, key;
      if (this.UseFormDataPost) postData = new FormData();
      else postData = {};

      var params = Affinity2018.jsonCloneObject(this.DeleteParams);
      for (var key in params)
      {
        if (key === this.DeleteIdParam) params[key] = [id];
      }

      for (key in params)
      {
        if (params.hasOwnProperty(key))
        {
          if (this.UseFormDataPost) postData.append(key, params[key]);
          else postData[key] = params[key];
        }
      }

      this._deletingFileRow = false;
      if (this.gridBody.querySelector('.from-doc-store.id' + id)) this._deletingFileRow = this.gridBody.querySelector('.from-doc-store.id' + id);
      $a.ShowPageLoader();
      axios({
        method: 'POST',
        url: this.DeleteApi,
        data: postData
      }).then(this._deleteFileFromIdOk).catch(this._deleteFileFromIdFail);
      // this._deleteFileFromIdOk({ data: { Success: true } });
    }
  }
  _deleteFileFromIdOk(response)
  {
    if (
      $a.isObject(response)
      && $a.isPropObject(response, 'data')
      && $a.isPropBool(response.data, 'Success')
      && response.data.Success === true
    )
    {
      if (this._deletingFileRow)
      {
        var fileName = this._deletingFileRow.dataset.fileName,
          fileId = this._deletingFileRow.dataset.fileId,
          f;

        for (f = 0; f < this.Files.length; f++)
        {
          if (this.Files[f].name.toLowerCase().trim() == fileName)
          {
            this.Files.splice(f, 1);
            break;
          }
        }
        if (Array.isArray(this.FileIds) && this.FileIds.length > 0)
        {
          this.FileIds = this.FileIds.map(function (x) { return x + ''; });
          this.FileIds = this.FileIds.removeDuplicates().removeEmpty();
          for (f = 0; f < this.FileIds.length; f++)
          {
            if (this.FileIds[f] === fileId + '')
            {
              this.FileIds.splice(f, 1);
              break;
            }
          }
        }

        this.gridBody.removeChild(this._deletingFileRow);
        if (this.gridBody.querySelectorAll('tr').length === 0)
        {
          this.gridNode.classList.add('hidden');
          this.Files = [];
        }
        this._resetFileNode();
        this._deletingFileRow = false;
      }
      if (this._deleteThese.length > 0)
      {
        var deleteId = this._deleteThese[0];
        this._deleteThese = this._deleteThese.shift();
        this._deleteFileFromId(deleteId);
      }
      else
      {
        this.dispatchEvent(new CustomEvent('deleteSuccess', { detail: { dispatchObject: { FileName: fileName, FileId: fileId } } }));
        $a.HidePageLoader();
      }
      return;
    }
    if (
      $a.isObject(response)
      && $a.isPropObject(response, 'data')
      && $a.isPropBool(response.data, 'Success')
      && response.data.Success === false
    )
    {
      this.dispatchEvent(new CustomEvent('deleteFailed', { detail: { Success: false, dispatchObject: { FileName: '', FileId: '' } } }));
      return;
    }
    this.dispatchEvent(new CustomEvent('deleteFailed', { detail: { dispatchObject: { FileName: '', FileId: '' } } }));
    $a.HidePageLoader();
  }
  _deleteFileFromIdFail(error)
  {
    this.dispatchEvent(new CustomEvent('deleteFailed', { detail: { dispatchObject: { FileName: '', FileId: '' } } }));
    $a.HidePageLoader();
  }

  /**/

  Destroy()
  {
    this.fileNode.removeEventListener('change', this._addFile);
    this.gridNode.removeEventListener('click', this._gridClicked);
  }

  /**/

  _templates()
  {
    this.gridTemplate = `
    <table class="grid">
      <thead>
        <tr>
          <th class="file">File</th>
          <th></th>
        </tr>
      </thead>
      <tbody>
      </tbody>
    </table>
    `;

    this.rowTemplate = `
    <td class="file"></td>
    <td>
      <div class="button orange del icon-delete"></div>
      <input type="hidden" class="no-validate" />
    </td>
    `;
  }

};
;
/***************************************************************************************************************************************************/
/***************************************************************************************************************************************************/
/***                                                                                         *******************************************************/
/***   ██      ██ ███████ ████████     ██████  ██    ██ ██ ██      ██████  ███████ ██████    *******************************************************/
/***   ██      ██ ██         ██        ██   ██ ██    ██ ██ ██      ██   ██ ██      ██   ██   *******************************************************/
/***   ██      ██ ███████    ██        ██████  ██    ██ ██ ██      ██   ██ █████   ██████    *******************************************************/
/***   ██      ██      ██    ██        ██   ██ ██    ██ ██ ██      ██   ██ ██      ██   ██   *******************************************************/
/***   ███████ ██ ███████    ██        ██████   ██████  ██ ███████ ██████  ███████ ██   ██   *******************************************************/
/***                                                                                         *******************************************************/
/***************************************************************************************************************************************************/
/********************************************************************************************************************* Source63 *** list builder ***/

if(!('Affinity2018' in window)) Affinity2018 = {};
if(!('Classes' in Affinity2018)) Affinity2018.Classes = {};
if(!('Plugins' in Affinity2018.Classes)) Affinity2018.Classes.Plugins = {};

if(!('Apps' in Affinity2018)) Affinity2018.Apps = {};
if(!('Plugins' in Affinity2018.Apps)) Affinity2018.Apps.Plugins = {};

Affinity2018.Classes.Plugins.ListBuilder = class
{

  options()
  {
    this.WidgetName = 'ListBuilder';

    this.IllegalKeys = ['none', 'null', 'key', 'value'];
    this.IllegalValues = ['none', 'null', 'key', 'value'];

    this.ColumnHeaders = {
      KeyHeader: $a.Lang.ReturnPath('generic.list_builder.design_items.key_header'),
      KeyHelp: $a.Lang.ReturnPath('generic.list_builder.design_items.key_help'),
      ValueHeader: $a.Lang.ReturnPath('generic.list_builder.design_items.value_header'),
      ValueHelp: $a.Lang.ReturnPath('generic.list_builder.design_items.value_help')
    };

    this.KeyNames = {
      KeyName: 'Key',
      ValueName: 'Value'
    };

    this.targetNode = false;
    this.listNode = false;
    this.data = false;

    this.NewRender = true;

    this.AutoIncrement = 0;

    this.StepOverDuplicates = false; // if true, do not add duplicate values
    this.ModifyDuplicates = true // if this.StepOverDuplicates is flase, and this is true, modify duplicates
  }

  constructor(targetNode, data)
  {
    this.options();
    [

      'Render',
      'GetData',
      'Backup',
      'SetBackup', 'GetBackup',
      'RestoreBackup',
      'InsertBlankRow', 'HasLockedBlankRow', 'InsertLockedBlankRow', 'RemoveLockedBlankRow',
      'SanatiseData',
      'ResetModified',
      'Reset',
      'Clear',
      'Apply',
      'IsValid',

      '_getNextIncrement',
      '_insertRow',
      '_gridClicked',
      '_cellKeyUp', '_cellBlur',
      '_validate',
      '_compare', '_doCompare',
      '_updateData',

      '_downloadCSVTemplate',
      '_clearTable',
      '_downloadToCSV',
      '_uploadCSV',

      'Destroy'

    ].bindEach(this);
    this.templates();

    this.CleverForms = Affinity2018.Apps.CleverForms.Default;

    if (targetNode) this.targetNode = targetNode;
    if (typeof data === 'object' && Array.isArray(data)) this.data = data;
    else this.data = [];

    this.backupData = [];
    this.IsModified = false;

    this.ModifiedCallback = function () { }; 

    if (this.targetNode && !this.targetNode.hasOwnProperty('widgets')) this.targetNode.widgets = {};
    if (this.targetNode)
    {
      this.targetNode.widgets.ListBuilder = this;
      this.targetNode.classList.add('ui-listbuilder');
    }

    this.listTemplate = this.listTemplate.format({
      downloadCSV: $a.Lang.ReturnPath('generic.list_builder.download_csv_label'),
      downloadCSVTooltip: $a.Lang.ReturnPath('generic.list_builder.ownload_csv_tooltip'),
      uploadCSVTooltip: $a.Lang.ReturnPath('generic.list_builder.upload_csv_tooltip'),
      clearTooltip: $a.Lang.ReturnPath('generic.list_builder.clear_table_tooltip')
    });

    this.listRowTemplate = this.listRowTemplate.format({
      descPlaceholder: $a.Lang.ReturnPath('generic.list_builder.desc_placeholder'),
      codePlaceholder: $a.Lang.ReturnPath('generic.list_builder.code_placeholder')
    });
  }

  Render (targetNode, data, renderedCallback)
  {
    if (targetNode)
    {
      this.targetNode = targetNode;
      if (!this.targetNode.hasOwnProperty('widgets')) this.targetNode.widgets = {};
      if (!this.targetNode.widgets.hasOwnProperty('ListBuilder')) this.targetNode.widgets.ListBuilder = this;
    }
    if (Array.isArray(data)) this.data = Affinity2018.jsonCloneObject(data);
    if(this.targetNode)
    {
      this.AutoIncrement = this._getNextIncrement();
      this.listNode = this.targetNode.querySelector('.list-builder');
      this.listNode.innerHTML = this.listTemplate.format({
        KeyHeader: this.ColumnHeaders.KeyHeader,
        KeyHelp: this.ColumnHeaders.KeyHelp,
        ValueHeader: this.ColumnHeaders.ValueHeader,
        ValueHelp: this.ColumnHeaders.ValueHelp
      });
      if (this.ColumnHeaders.KeyHelp.trim() === '') this.listNode.querySelector('.th.key-header').removeChild(this.listNode.querySelector('.th.key-header icon'));
      if (this.ColumnHeaders.ValueHelp.trim() === '') this.listNode.querySelector('.th.value-header').removeChild(this.listNode.querySelector('.th.value-header icon'));

      this.gridBodyNode = this.listNode.querySelector('table tbody');

      this.downloadTemplateNode = this.listNode.querySelector('a.download-template');
      this.clearButtonNode = this.listNode.querySelector('button.reset');
      this.downloadButtonNode = this.listNode.querySelector('button.download');
      this.uploadButtonNode = this.listNode.querySelector('button.upload');
      this.uploadFileNode = this.uploadButtonNode.querySelector('input[type="file"]');
      
      this.downloadTemplateNode.addEventListener('click', this._downloadCSVTemplate);
      this.clearButtonNode.addEventListener('click', this._clearTable);
      this.downloadButtonNode.addEventListener('click', this._downloadToCSV);
      this.uploadFileNode.addEventListener('change', this._uploadCSV);

      this.NewRender = true;
      
      var gotone = false, insertedKeys = [], data, i = 0, key;
      if (Affinity2018.isArray(this.data))
      {
        gotone = false;
        for ( ; i < this.data.length; i++)
        {
          data = this._isRowDataGood(this.data[i]);
          if (data && !this._isDataLockedBlankRow(data))
          {
            if (this.StepOverDuplicates)
            {
              if (!insertedKeys.contains(data[this.KeyNames.KeyName]))
              {
                gotone = true;
                insertedKeys.push(data[this.KeyNames.KeyName]);
                this._insertRow(data);
              }
            }
            else
            {
              gotone = true;
              insertedKeys.push(data[this.KeyNames.KeyName]);
              this._insertRow(data);
            }
          }
          else
          {
            if (this._badRowReason)
            {
              Affinity2018.Dialog.Show({
                message: this._badRowReason,
                showOk: true,
                showCancel: false,
                showInput: false,
                //textAlign: 'left'
              });
              this._badRowReason = false;
            }
          }
        }
      }
      else if (Affinity2018.isObject(this.data))
      {
        gotone = false;
        for (key in this.data)
        {
          data = this._returnEmptyData();
          if (this.data.hasOwnProperty(key) && key.trim() !== '' && this.data[key].trim() !== '')
          {
            data[this.KeyNames.KeyName] = key.trim();
            data[this.KeyNames.ValueName] = this.data[key].trim();
            if (!this._isDataLockedBlankRow(data))// && !insertedKeys.contains(data[this.KeyNames.KeyName]))
            {
              if (this.StepOverDuplicates)
              {
                if (!insertedKeys.contains(data[this.KeyNames.KeyName]))
                {
                  gotone = true;
                  insertedKeys.push(data[this.KeyNames.KeyName]);
                  this._insertRow(data);
                }
              }
              else
              {
                gotone = true;
                insertedKeys.push(data[this.KeyNames.KeyName]);
                this._insertRow(data);
              }
            }
          }
        }
      }
      if (!gotone)
      {
        this.data = [];
        if (this.gridBodyNode.querySelectorAll('tr').length === 0) this.InsertBlankRow();
      }
      else
      {
        //if (this.backupData.length === 0) this.backupData = Affinity2018.jsonCloneObject(this.data);
      }

      this.listNode.removeEventListener('click', this._gridClicked);
      this.listNode.addEventListener('click', this._gridClicked);
      this.IsModified = false;

      Affinity2018.Apps.Plugins.Tooltips.Apply();

      if (renderedCallback && Affinity2018.isFunction(renderedCallback)) renderedCallback();

      window.dispatchEvent(new Event('ListBuilderRendered'));

    }
  }

  GetData ()
  {
    this.data = this._updateData();
    return this.data;
  }

  Backup ()
  {
    this.backupData = Affinity2018.jsonCloneObject(this.data);
    console.log('backed up', this.backupData);
  }

  RestoreBackup ()
  {
    this.Render(this.targetNode, this.backupData);
  }

  SetBackup(data)
  {
    this.backupData = data;
  }

  GetBackup()
  {
    return this.backupData;
  }

  InsertBlankRow ()
  {
    this._insertRow(this._returnEmptyData());
  }

  HasLockedBlankRow()
  {
    return this.gridBodyNode.querySelector('tr.locked-null') ? true : false;
  }

  InsertLockedBlankRow()
  {
    if (this.HasLockedBlankRow()) return;
    var data = {};
    data[this.KeyNames.KeyName] = this.CleverForms.InsertLookupEmptyValue;
    data[this.KeyNames.ValueName] = this.CleverForms.InsertLookupEmptyDisplay;
    this._insertRow(data);
  }

  RemoveLockedBlankRow()
  {
    if (this.HasLockedBlankRow())
    {
      this.gridBodyNode.removeChild(this.gridBodyNode.querySelector('tr.locked-null'));
    }
  }

  SanatiseData(data)
  {
    data = Array.isArray(data) ? data : this.GetData();
    var keyNames = this.KeyNames;
    var autoIncrement = Math.max.apply(Math, data.map(function (o)
    {
      return !isNaN(parseFloat(o[keyNames.ValueName])) ? parseFloat(o[keyNames.ValueName]) : 0;
    })) + 1;
    var newData = [];
    var keys = {};
    var key, rowData;
    for (var d = 0; d < data.length; d++)
    {
      if (data[d][keyNames.KeyName].trim() !== '')
      {
        if (data[d][keyNames.ValueName].trim() === '')
        {
          rowData = {};
          rowData[keyNames.KeyName] = data[d][keyNames.KeyName];
          rowData[keyNames.ValueName] = autoIncrement.toString().padLeft('0', 4);
          if (!this._isDataLockedBlankRow(rowData))
          {
            newData.push(rowData);
            autoIncrement++;
            key = 'key-' + data[d][keyNames.ValueName];
            keys[key] = 0;
          }
        }
        else
        {
          key = 'key-' + data[d][keyNames.ValueName].trim().replace(/[\s."]/g, '-');
          if (!keys.hasOwnProperty(key))
          {
            rowData = {};
            rowData[keyNames.KeyName] = data[d][keyNames.KeyName];
            rowData[keyNames.ValueName] = data[d][keyNames.ValueName].trim();
            if (!this._isDataLockedBlankRow(rowData))
            {
              newData.push(rowData);
              keys[key] = 0;
            }
          }
          else // is duplicate
          {
            keys[key]++;
            if (!this.StepOverDuplicates)
            {
              rowData = {};
              rowData[keyNames.KeyName] = data[d][keyNames.KeyName];
              if (this.ModifyDuplicates) rowData[keyNames.ValueName] = data[d][keyNames.ValueName].trim() + '-dup-' + keys[key].toString().padLeft('0', 4);
              else rowData[keyNames.ValueName] = data[d][keyNames.ValueName].trim();
              if (!this._isDataLockedBlankRow(rowData)) newData.push(rowData);
            }
          }
        }
      }
    }
    if (JSON.stringify(data) !== JSON.stringify(newData))
    {
      console.groupCollapsed('%c⥹>> Items Modified', 'color:#ff5c00');
      console.log('%cOriginal:', 'color:#ff5c00');
      console.log(data);
      console.log('%cFinal:', 'color:#ff5c00');
      console.log(newData);
      console.log('%cDuplicates:', 'color:#ff5c00');
      console.log(keys);
      console.groupEnd();
    }
    return newData;
  }

  ResetModified ()
  {
    this.NewRender = true;
    this.IsModified = false;
  }

  Clear ()
  {
    this._clearTable();
  }

  Reset ()
  {
    this._clearTable(false, false);
    this.NewRender = true;
    this.IsModified = false;
    this.backupData = [];
  }

  Apply ()
  {
    // All plugins must have a "Apply" method.
    // This is a generic method to apply the plugin to all appropriatly labled elements.
    // This is not applicable for ListBuilder, but the method must still be there
  }

  /**/

  IsValid()
  {
    var reasons = [];
    if (this.targetNode)
    {
      var rows = this.targetNode.querySelectorAll('tbody tr');
      for (var rowIndex = 0; rowIndex < rows.length; rowIndex++)
      {
        var rowNode = rows[rowIndex];
        var keyInput = rowNode.querySelector('textarea.description');
        var valueInput = rowNode.querySelector('textarea.code');
        if (keyInput && valueInput)
        {
          var key = keyInput.value;
          var value = valueInput.value;
          if (!this._validate(key, value) && this._badRowReason)
          {
            var rowReasons = this._badRowReason.split('<br>');
            for (var reasonIndex = 0; reasonIndex < rowReasons.length; reasonIndex++)
            {
              var message = rowReasons[reasonIndex].trim();
              if (message.endsWith('.')) message = message.slice(0, -1);
              rowReasons[reasonIndex] = message + $a.Lang.ReturnPath('generic.list_builder.validate_row_detail', { column: this.ColumnHeaders.ValueHeader, value: value.trim() });
            }
            Array.prototype.push.apply(reasons, rowReasons);
            this._badRowReason = false;
          }
        }
      }
    }
    if (reasons.length > 0)
    {
      this.InvalidReason = reasons.join('<br>');
      return false;
    }
    this.InvalidReason = false;
    return true;
  }

  /**/

  _isRowDataGood (data)
  {
    if (Affinity2018.isObject(data))
    {
      var key = data[this.KeyNames.KeyName];
      var value = data[this.KeyNames.ValueName];
      if (this._validate(key, value, false)) return data;
    }
    return false;
  }

  _isDataLockedBlankRow(data)
  {
    var key = data[this.KeyNames.KeyName].trim();
    var value = data[this.KeyNames.ValueName].trim();
    var islocked = false;
    if (key === this.CleverForms.InsertLookupEmptyDisplay && value === this.CleverForms.InsertLookupEmptyValue) islocked = true;
    if (key === this.CleverForms.InsertLookupEmptyValue && value === this.CleverForms.InsertLookupEmptyDisplay) islocked = true;
    return islocked;
  }

  _returnEmptyData ()
  {
    var data = {};
    data[this.KeyNames.KeyName] = '';
    data[this.KeyNames.ValueName] = this.AutoIncrement.toString().padLeft('0', 4);
    this.AutoIncrement++;
    return data;
  }

  /**/

  _getNextIncrement()
  {
    if (this.data)
    {
      var maxDataValue = 0;
      if (this.data.length > 0)
      {
        maxDataValue = Math.max.apply(Math, this.data.map(function (o)
        {
          return !isNaN(parseFloat(o[Affinity2018.Apps.Plugins.ListBuilder.KeyNames.ValueName])) ? parseFloat(o[Affinity2018.Apps.Plugins.ListBuilder.KeyNames.ValueName]) : 0;
        }));
      }
      if (!isNaN(maxDataValue) && maxDataValue !== Number.POSITIVE_INFINITY && maxDataValue !== Number.NEGATIVE_INFINITY) this.AutoIncrement = maxDataValue;
    }
    this.AutoIncrement++;
    return this.AutoIncrement;
  }

  _insertRow (data)
  {
    data = this._isRowDataGood(data);
    if (data)
    {
      var locked = this._isDataLockedBlankRow(data);
      if (!locked && data[this.KeyNames.ValueName].toString().trim() === '')
      {
        data[this.KeyNames.ValueName] = this.AutoIncrement;
        this.AutoIncrement++;
      }
      var rowNode;
      rowNode = document.createElement('tr');
      rowNode.innerHTML = this.listRowTemplate;
      rowNode.querySelector('textarea.description').value = data[this.KeyNames.KeyName];
      rowNode.querySelector('textarea.code').value = data[this.KeyNames.ValueName];
      if (!locked)
      {
        rowNode.querySelector('textarea.description').addEventListener('keyup', this._cellKeyUp);
        rowNode.querySelector('textarea.description').addEventListener('blur', this._cellBlur);
        rowNode.querySelector('textarea.code').addEventListener('keyup', this._cellKeyUp);
        rowNode.querySelector('textarea.code').addEventListener('blur', this._cellBlur);
        this.gridBodyNode.appendChild(rowNode);
      }
      else
      {
        rowNode.querySelector('textarea.description').value = this.CleverForms.InsertLookupEmptyDisplay;
        rowNode.querySelector('textarea.code').value = this.CleverForms.InsertLookupEmptyValue;
        rowNode.querySelector('.button[data-do="up"]').classList.add('disabled');
        rowNode.querySelector('.button[data-do="down"]').classList.add('disabled');
        rowNode.querySelector('.button[data-do="delete"]').classList.add('disabled');
        rowNode.classList.add('locked-null');
        this.gridBodyNode.insertBefore(rowNode, this.gridBodyNode.querySelector('tr'));
      }
      this._compare(rowNode);
      return rowNode;
    }
    return false;
  }

  _moveRowUp (rowNode)
  {
    if(this.gridBodyNode.querySelectorAll('tr').length > 1)
    {
      if (this.gridBodyNode.querySelector('tr') !== rowNode) // not top
      {
        rowNode.parentNode.insertBefore(rowNode, rowNode.previousSibling);
        this._compare();
      }
    }
  }

  _moveRowDown (rowNode)
  {
    if(this.gridBodyNode.querySelectorAll('tr').length > 1)
    {
      if(rowNode.nextSibling && rowNode.nextSibling.nextSibling)
      {
        rowNode.parentNode.insertBefore(rowNode, rowNode.nextSibling.nextSibling);
      }
      else
      {
        rowNode.parentNode.appendChild(rowNode);
      }
      this._compare();
    }
  }

  _addRow (rowNode)
  {
    var newNode = this._insertRow(this._returnEmptyData()); // add
    rowNode.parentNode.insertBefore(newNode, rowNode); // add before
    rowNode.parentNode.insertBefore(rowNode, newNode); // swap so new is after
    this._compare();
  }

  _deleteRow (rowNode)
  {
    rowNode.querySelector('textarea.description').removeEventListener('keyup', this._cellKeyUp);
    rowNode.querySelector('textarea.description').removeEventListener('blur', this._cellBlur);
    rowNode.querySelector('textarea.code').removeEventListener('keyup', this._cellKeyUp);
    rowNode.querySelector('textarea.code').removeEventListener('blur', this._cellBlur);
    rowNode.parentNode.removeChild(rowNode);
    if(!this.gridBodyNode.querySelector('tr'))
    {
      this._insertRow(this._returnEmptyData());
    }
    this._compare();
  }

  _gridClicked (ev)
  {
    var button = ev.target.closest('.button');
    if(button)
    {
      switch (button.dataset.do)
      {
        case 'up':
          this._moveRowUp(button.closest('tr'));
          break;
        case 'down':
          this._moveRowDown(button.closest('tr'));
          break;
        case 'add':
          this._addRow(button.closest('tr'));
          break;
        case 'delete':
          this._deleteRow(button.closest('tr'));
          break;
      }
    }
  }

  _validate(key, value, validateEmpty)
  {
    validateEmpty = $a.isBool(validateEmpty) ? validateEmpty : true;
    var tempIllegals = this.IllegalKeys.slice(0, -1);
    var illegalsString = '\'' + tempIllegals.join('\', \'') + '\' or \'' + this.IllegalKeys[this.IllegalKeys.length - 1] + '\'';
    var reasons = [];

    if (this.IllegalKeys.contains(key.toLowerCase().trim()))
    {
      //reasons.push('You cannot use ' + illegalsString + ' in a \'' + this.ColumnHeaders.KeyHeader + '\'');
      reasons.push($a.Lang.ReturnPath('generic.list_builder.validate_illegal_an', { illegals: illegalsString, column: this.ColumnHeaders.KeyHeader }));
    }

    if (this.IllegalValues.contains(value.toLowerCase().trim()))
    {
      //reasons.push('You cannot use ' + illegalsString + ' in a ' + this.ColumnHeaders.ValueHeader + '\'');
      reasons.push($a.Lang.ReturnPath('generic.list_builder.validate_illegal_a', { illegals: illegalsString, column: this.ColumnHeaders.ValueHeader }));
    }

    if (!$a.isString(key))
    {
      //reasons.push('\'' + this.ColumnHeaders.KeyHeader + '\' must be a string');
      reasons.push($a.Lang.ReturnPath('generic.list_builder.validate_string', { column: this.ColumnHeaders.KeyHeader }));
    }

    if (!$a.isString(value) && !$a.isNumeric(value))
    {
      //reasons.push('\'' + this.ColumnHeaders.ValueHeader + '\' must be a string or number');
      reasons.push($a.Lang.ReturnPath('generic.list_builder.validate_string_num', { column: this.ColumnHeaders.ValueHeader }));
    }

    if (validateEmpty)
    {
      if (key.trim() === '')
      {
        //reasons.push('\'' + this.ColumnHeaders.KeyHeader + '\' must not be empty');
        reasons.push($a.Lang.ReturnPath('generic.list_builder.validate_empty', { column: this.ColumnHeaders.KeyHeader }));
      }

      if (value.trim() === '')
      {
        //reasons.push('\'' + this.ColumnHeaders.ValueHeader + '\' must not be empty');
        reasons.push($a.Lang.ReturnPath('generic.list_builder.validate_empty', { column: this.ColumnHeaders.ValueHeader }));
      }
    }

    if (reasons.length > 0)
    {
      this._badRowReason = reasons.join('<br>');
      return false;
    }

    return true;
  }

  _cellKeyUp ()
  {
    this._compare();
  }

  _cellBlur(ev)
  {
    var rowNode = $a.getParent(ev.target, 'tr');
    //var rowIndex = rowNode.parentNode.querySelectorAll('tr').indexOf(rowNode);
    var keyInput = rowNode.querySelector('textarea.description');
    var valueInput = rowNode.querySelector('textarea.code');
    var key = keyInput.value;
    var value = valueInput.value;
    if (!this._validate(key, value) && this._badRowReason)
    {
      //var message = this._badRowReason.contains('not use') ? this._badRowReason : this._badRowReason + ' at row ' + (rowIndex + 1);
      //var message = this._badRowReason + ' at row ' + (rowIndex + 1);
      var message = this._badRowReason;
      this._badRowReason = false;
      Affinity2018.Dialog.Show({
        message: message,
        showOk: true,
        showCancel: false,
        showInput: false,
        //textAlign: 'left'
      });
    }
  }

  _updateData ()
  {
    var allData = [], key, value, data;
    this.gridBodyNode.querySelectorAll('tr').forEach(function (rowNode)
    {
      key = rowNode.querySelector('textarea.description').value.trim();
      value = rowNode.querySelector('textarea.code').value.trim();
      data = {};
      data[this.KeyNames.KeyName] = key;
      data[this.KeyNames.ValueName] = value;
      var canPush = key.trim() + value.trim() !== '';
      if (this._isDataLockedBlankRow(data))
      {
        canPush = false;
        //console.groupCollapsed('data update found locked row');
        //console.log(this.data);
        //console.groupEnd();
      }
      if (canPush) allData.push(data);
    }.bind(this));
    return allData;
  }

  _compare ()
  {
    clearTimeout(this._compareTimer);
    this._compareTimer = setTimeout(this._doCompare, 250);
  }

  _doCompare ()
  {
    let gridData = this._updateData();
    let compareData = this.data.map(item => item[this.KeyNames.ValueName].trim());
    let compareGrid = gridData.map(item => item[this.KeyNames.ValueName].trim());
    let compareDatakeys = this.data.map(item => item[this.KeyNames.KeyName].trim());
    let compareGridkeys = gridData.map(item => item[this.KeyNames.KeyName].trim());
    if (
      JSON.stringify(compareData) !== JSON.stringify(compareGrid)
      || JSON.stringify(compareDatakeys) !== JSON.stringify(compareGridkeys)
    )
    {
      console.groupCollapsed('comparer found diff:');
      console.log('actual diffs:');
      var valueDiffs = compareGrid.filter((o1) => !compareData.some((o2) => o1 === o2));
      var keyDiffs = compareGridkeys.filter((o1) => !compareDatakeys.some((o2) => o1 === o2));
      var i = 0;
      if (keyDiffs.length > 0)
      {
        for (i = 0; i < keyDiffs.length; i++)
        {
          console.log('\tthe key "' + compareDatakeys[compareGridkeys.indexOf(keyDiffs[i])] + '" is now "' + keyDiffs[i] + '"');
        }
      }
      if (valueDiffs.length > 0)
      {
        for (i = 0; i < valueDiffs.length; i++)
        {
          console.log('\tthe value "' + compareData[compareGrid.indexOf(valueDiffs[i])] + '" is now "' + valueDiffs[i] + '"');
        }
      }
      console.log('local data:');
      console.log(this.data);
      console.log('grid data:');
      console.log(gridData);
      console.groupEnd();
      this.IsModified = true;
      if (this.NewRender)
      {
        this.ModifiedCallback('render');
      }
      else
      {
        this.ModifiedCallback('manipulation');
      }
    }
    else
    {
      this.IsModified = false;
    }
    this.NewRender = false;
  }

  /**/

  _downloadCSVTemplate ()
  {
    var link = document.createElement('a');
    link.setAttribute('href', encodeURI('data:text/csv;charset=utf-8,' + this.KeyNames.KeyName + ',' + this.KeyNames.ValueName + '\r\n'));
    link.setAttribute('download', 'list_template.csv');
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    link = null;
  }

  _clearTable(insertBlankRow, fireModified)
  {
    fireModified = $a.paramOrDefault(fireModified, true, 'boolean');

    this.AutoIncrement = 0;
    insertBlankRow = $a.isBool(insertBlankRow) ? insertBlankRow : true;
    if (this.gridBodyNode)
    {
      this.gridBodyNode.querySelectorAll('tr').forEach(function (rowNode)
      {
        if (rowNode.querySelector('textarea.description'))
        {
          rowNode.querySelector('textarea.description').removeEventListener('keyup', this._cellKeyUp);
          rowNode.querySelector('textarea.description').removeEventListener('blur', this._cellBlur);
        }
        if (rowNode.querySelector('textarea.code'))
        {
          rowNode.querySelector('textarea.code').removeEventListener('keyup', this._cellKeyUp);
          rowNode.querySelector('textarea.code').removeEventListener('blur', this._cellBlur);
        }
      }.bind(this));
      this.gridBodyNode.innerHTML = '';
      if (insertBlankRow)
      {
        this.InsertBlankRow();
      }
    }
    
    if (fireModified) this.ModifiedCallback('clear');
  }

  _downloadToCSV ()
  {
    var rows = this.GetData(),
      csvContent = 'data:text/csv;charset=utf-8,',
      row, encodedUri, link;
    csvContent += this.KeyNames.KeyName + ',' + this.KeyNames.ValueName + '\r\n';
    rows.forEach(function(data)
    {
      data = this._isRowDataGood(data);
      if (data)
      {
        row = data[this.KeyNames.KeyName] + ',' + data[this.KeyNames.ValueName];
        csvContent += row + '\r\n';
      }
    }.bind(this));
    encodedUri = encodeURI(csvContent);
    $a.Dialog.Show({
      message: 'Save as',
      buttons: {
        ok: {
          show: true,
          icon: 'download',
          text: 'Download',
          color: 'blue'
        },
        cancel: {
          show: true,
          icon: 'cross',
          text: 'Cancel',
          color: 'grey'
        }
      },
      input: {
        show: true,
        placeholder: '',
        default: 'grid_data.csv',
        lines: 1
      },
      textAlign: 'left',
      canBackgroundClose: false,
      onOk: function (name)
      {
        name = name.trim();
        if (name !== '')
        {
          if (name.toLowerCase().substring(name.length - 4, name.length) !== '.csv') name = name + '.csv';
          link = document.createElement('a');
          link.setAttribute('href', encodedUri);
          link.setAttribute('download', name);
          document.body.appendChild(link);
          link.click();
          document.body.removeChild(link);
          link = null;
        }
      }.bind(this)
    });
  }

  _uploadCSV ()
  {
    if (this.uploadFileNode.files && this.uploadFileNode.files.length > 0)
    {
      var file = this.uploadFileNode.files[0],
          extractedRows = [],
          errors = [],
          ext, size, reader, rows, rowSplit, data;
      if (file)
      {
        size = ((file.size / 1024) / 1024).toFixed(4);
        ext = /(?:\.([^.]+))?$/.exec(file.name)[1].toLowerCase();
        if (ext === 'csv' && size <= 20)
        {
          reader = new FileReader();
          reader.onload = function ()
          {
            rows = reader.result.split(/\r\n|\n/);
            if (rows.length > 0)
            {
              rows.forEach(function (row)
              {
                rowSplit = row.split(',');
                if (rowSplit.length === 2)
                {
                  if (rowSplit[0].toLowerCase().trim() !== this.KeyNames.KeyName.toLowerCase() && rowSplit[1].toLowerCase().trim() !== this.KeyNames.ValueName.toLowerCase())
                  {
                    data = {};
                    data[this.KeyNames.KeyName] = rowSplit[0].trim();
                    data[this.KeyNames.ValueName] = rowSplit[1].trim();
                    extractedRows.push(data);
                  }
                }
              }.bind(this));
            }
            if (extractedRows.length > 0)
            {
              this._clearTable(false);
              extractedRows.forEach(function (data)
              {
                this._insertRow(data);
              }.bind(this));
              if (this.gridBodyNode.querySelectorAll('tr').length === 0) this.InsertBlankRow();
            }
            else
            {
              $a.Dialog.Show({
                message: errors.join('We could not find any usable data in "' + file.name + '".')
              });
            }
          }.bind(this);
          reader.readAsBinaryString(file);
        }
        else
        {
          if (ext !== 'csv') errors.push("You can only uplaod .csv files");
          if (size > 20) errors.push("Your file is too big. It must be 20MB or less.");
          $a.Dialog.Show({
            message: errors.join('<br />')
          });
        }
      }
    }

    /* reset file node */

    try
    {
      this.uploadFileNode.value = '';
    }
    catch (ex) { }
    try
    {
      if (this.uploadFileNode.value)
      {
        this.uploadFileNode.type = "text";
        this.uploadFileNode.type = "file";
      }
    }
    catch (ex) { }

    this.ModifiedCallback('csv');
  }

  /**/

  Destroy ()
  {
    clearTimeout(this._compareTimer);
    this.backupData = [];
    this.IsModified = false;
    if (this.listNode)
    {
      this._clearTable(false);
      this.downloadTemplateNode.removeEventListener('click', this._downloadCSVTemplate);
      this.listNode.removeEventListener('click', this._gridClicked);
      this.clearButtonNode.removeEventListener('click', this._clearTable);
      this.downloadButtonNode.removeEventListener('click', this._downloadToCSV);
      this.uploadFileNode.removeEventListener('change', this._uploadCSV);
      this.listNode.innerHTML = '';
      this.listNode.parentNode.removeChild(this.listNode);
    }
    delete this.InputNode.widgets.ListBuilder;
    for (var key in this)
    {
      if (this.hasOwnProperty(key))
      {
        this[key] = null;
        delete this[key];
      }
    }
  }

  /**/

  templates ()
  {
    this.listTemplate = `
    <div class="grid-wrapper flat-bottom">
      <table class="grid">
        <thead>
          <tr>
            <th class="key-header">{KeyHeader} <icon class="icon-help-round ui-has-tooltip" data-tooltip="{KeyHelp}"></icon></th>
            <th class="value-header">{ValueHeader} <icon class="icon-help-round ui-has-tooltip" data-tooltip="{ValueHelp}"></icon></th>
            <th></th>
          </tr>
        </thead>
        <tbody>
        </tbody>
      </table>
    </div>
    <div class="grid-buttons flat-top">
      <a class="download-template" href="javascript:void(0)">{downloadCSV}</a>
      <button class="blue download no-label ui-has-tooltip" data-tooltip="{downloadCSVTooltip}"><icon class="icon-download"></icon></button>
      <button class="green upload no-label ui-has-tooltip" data-tooltip="{uploadCSVTooltip}">
        <icon class="icon-upload"></icon>
        <input type="file" accept=".csv" />
      </button>
      <button class="orange reset no-label ui-has-tooltip" data-tooltip="{clearTooltip}"><icon class="icon-trash"></icon></button>
    </div>

    `;

    this.listRowTemplate = `
    <td>
      <textarea class="description" type="text" placeholder="{descPlaceholder}"></textarea>
    </td>
    <td>
      <textarea class="code" type="text" placeholder="{codePlaceholder}"></textarea>
    </td>
    <td>
      <div class="button blue icon-arrow-up" data-do="up"></div>
      <div class="button blue icon-arrow-down" data-do="down"></div>
      <div class="button green icon-plus" data-do="add"></div>
      <div class="button orange icon-delete" data-do="delete"></div>
    </td>
    `;

  }


};
;
/***************************************************************************************************************************************************/
/***************************************************************************************************************************************************/
/***                                                                   *****************************************************************************/
/***   ███    ██ ██    ██ ███    ███ ██████  ███████ ██████  ███████   *****************************************************************************/
/***   ████   ██ ██    ██ ████  ████ ██   ██ ██      ██   ██ ██        *****************************************************************************/
/***   ██ ██  ██ ██    ██ ██ ████ ██ ██████  █████   ██████  ███████   *****************************************************************************/
/***   ██  ██ ██ ██    ██ ██  ██  ██ ██   ██ ██      ██   ██      ██   *****************************************************************************/
/***   ██   ████  ██████  ██      ██ ██████  ███████ ██   ██ ███████   *****************************************************************************/
/***                                                                   *****************************************************************************/
/***************************************************************************************************************************************************/
/************************************************************************************************************************** Source63 *** numbers ***/

if(!('Affinity2018' in window)) Affinity2018 = {};
if(!('Classes' in Affinity2018)) Affinity2018.Classes = {};
if(!('Plugins' in Affinity2018.Classes)) Affinity2018.Classes.Plugins = {};

if(!('Apps' in Affinity2018)) Affinity2018.Apps = {};
if(!('Plugins' in Affinity2018.Apps)) Affinity2018.Apps.Plugins = {};

Affinity2018.Classes.Plugins.Numbers = class
{

  constructor ()
  {
    [
      'Apply', 'Remove',

      '_apply',
      '_templates'

    ].bindEach(this);
  }

  Apply (node)
  {
    if (node)
    {
      this._apply(node);
    }
    else
    {
      document.querySelectorAll('.ui-has-minmax').forEach(this._apply);
      document.querySelectorAll('.ui-has-integer').forEach(this._apply);
      document.querySelectorAll('.ui-has-float').forEach(this._apply);
      document.querySelectorAll('.ui-has-currency').forEach(this._apply);
      document.querySelectorAll('.ui-has-version').forEach(this._apply);
    }
  }

  Remove (node)
  {
    if (
      node.classList.contains('nv')
      && node.widgets
      && node.widgets.Number
      && node.widgets.Number.Destroy
    )
    {
      node.widgets.Number.Destroy();
    }
  }

  /**/

  _apply (node)
  {
    if (!node.classList.contains('nv'))
    {
      new Affinity2018.Classes.Plugins.NumberWidget(node);
    }
  }

  /**/

  _templates ()
  {

  }

};

Affinity2018.Classes.Plugins.NumberWidget = class
{
  _options ()
  {
    this.WidgetName = 'Number';
    this.WidgetType = 'none';

    this.Rounding = ['round', 'ceil', 'floor', 'none'];

    this.type = null;
    this.InputNode = null;
    this.decimals = 0;
    this.rounding = 'round';
    this.Valid = true;

    this.SpecialValidation = false;
    this.CutPasteOperration = false;

    this.MaxValue = Number.MAX_SAFE_INTEGER;
    this.MinValue = 0;
  }

  constructor (targetNode)
  {
    this._options();
    [
      'IsValid', 'ShowError', 'HideError',

      'disable', 'enable',
      '_applyEvents',
      '_keyDown',
      '_keyUp',
      '_keyIsOk',
      '_blur',
      '_validate',

      'Destroy'

    ].bindEach(this);

    if (!Affinity2018.isDomElement(targetNode))
    {
      console.error('No valid element was passed to NumberWidget, dummy!');
      return;
    }

    this.CleverForms = window.hasOwnProperty('Affinity2018') && Affinity2018.hasOwnProperty('Apps') && Affinity2018.Apps.hasOwnProperty('CleverForms') ? Affinity2018.Apps.CleverForms.Default : null
    this.Form = this.CleverForms && this.CleverForms.hasOwnProperty('Form') ? this.CleverForms.Form : null;

    this.InputNode = targetNode;
    this.RowNode = Affinity2018.getParent(this.InputNode, '.form-row');
    this.IsRequired = this.RowNode ? this.RowNode.classList.contains('required') ? true : false : false;

    if (this.InputNode.classList.contains('ui-has-integer'))
    {
      this.WidgetType = 'int';
      this.type = this.WidgetType;
      this.InputNode.classList.remove('ui-has-integer');
    }

    if (this.InputNode.classList.contains('ui-has-float'))
    {
      this.WidgetType = 'float';
      this.type = this.WidgetType;
      this.InputNode.classList.remove('ui-has-float');
    }

    if (this.InputNode.classList.contains('ui-has-currency'))
    {
      this.WidgetType = 'currency';
      this.type = this.WidgetType;
      this.InputNode.classList.remove('ui-has-currency');
    }

    if (this.InputNode.classList.contains('ui-has-version'))
    {
      this.WidgetType = 'version';
      this.type = this.WidgetType;
      this.InputNode.classList.remove('ui-has-version');
    }

    if (this.InputNode.classList.contains('ui-has-minmax'))
    {
      this.SpecialValidation = true;
      this.WidgetType = 'float';
      this.type = this.WidgetType;
      this.MaxValue = !isNaN(parseFloat(this.InputNode.dataset.maxValue)) ? parseFloat(this.InputNode.dataset.maxValue) : Number.MAX_SAFE_INTEGER;
      this.MinValue = !isNaN(parseFloat(this.InputNode.dataset.minValue)) ? parseFloat(this.InputNode.dataset.minValue) : Number.MIN_SAFE_INTEGER;
      this.InputNode.classList.remove('ui-has-minmax');
      delete this.InputNode.dataset.maxValue;
      delete this.InputNode.dataset.minValue;
    }

    if (this.type === null)
    {
      this.WidgetType = 'none';
      this.type = null;
      console.error('No valid number type could be found!', this.InputNode);
      return;
    }
    
    if (this.InputNode.dataset.decimals && !isNaN(parseInt(this.InputNode.dataset.decimals)))
    {
      this.decimals = parseInt(this.InputNode.dataset.decimals);
      delete this.InputNode.dataset.decimals;
    }

    if (this.InputNode.dataset.rounding && this.Rounding.contains(this.InputNode.dataset.rounding.toLowerCase().trim()))
    {
      this.rounding = this.InputNode.dataset.rounding.toLowerCase().trim();
      delete this.InputNode.dataset.rounding;
    }

    if (!this.InputNode.hasOwnProperty('widgets')) this.InputNode.widgets = {};
    this.InputNode.widgets.Number = this;

    this.InputNode.classList.add('nv');
    
    this.ErrorNode = this.InputNode.parentNode && this.InputNode.parentNode.querySelector('.ui-form-error') ? this.InputNode.parentNode.querySelector('.ui-form-error') : document.createElement('div');
    this.ErrorNode.classList.add('ui-form-error');
    this.InputNode.parentNode.appendChild(this.ErrorNode);

    this._applyEvents();

    //this._validate();

    this.disabled = false;
  }

  IsValid ()
  {
    return this._validate();
  }

  ShowError (error)
  {
    this.ErrorNode.innerHTML = error;
    this.ErrorNode.classList.add('show');
    if (this.Form) this.Form.ResizeSection();
  }
  HideError ()
  {
    this.ErrorNode.classList.remove('show');
    if (this.Form) this.Form.ResizeSection();
  }

  disable ()
  {
    this.disabled = true;
  }
  enable ()
  {
    this.disabled = false;
  }

  _applyEvents ()
  {
    this.InputNode.removeEventListener('keydown', this._keyDown);
    this.InputNode.removeEventListener('keyup', this._keyUp);
    this.InputNode.removeEventListener('blur', this._blur);
    this.InputNode.addEventListener('keydown', this._keyDown);
    this.InputNode.addEventListener('keyup', this._keyUp);
    this.InputNode.addEventListener('blur', this._blur);
  }

  _keyDown (ev)
  {
    // console.log("=== key up ==========================================");
    // console.log(ev);
    var key = ev.keyCode || ev.key;
    if (!this._keyIsOk(key, ev.shiftKey, ev.ctrlKey))
    {
      ev.stop();
      return false;
    }
    // TODO: Limit decimal places?
  }

  _keyUp (ev)
  {
    if (this.SpecialValidation) this._validate(ev);
    if (ev.defaultPrevented)
    {
      ev.stop();
      return false;
    }
  }

  _keyIsOk(keyCode, shiftDown, ctrlDown, inlineCheck)
  {
    if (this.disabled) return true;

    var inlineCheck = inlineCheck == undefined ? false : inlineCheck;

    keyCode = typeof keyCode === 'string' ? parseInt(keyCode) : keyCode;
    
    // console.log("=== key ok");
    // console.log(keyCode, shiftDown, this.type);

    if (ctrlDown && [17, 67, 86, 88].contains(keyCode))
    {
      this.CutPasteOperration = true;
      return true;
    }
    this.CutPasteOperration = false;

    //                 keyboard number char codes          nampad number char codes
    var isNumberKey = (keyCode >= 48 && keyCode <= 57) || (keyCode >= 96 && keyCode <= 105);

    if (!this.CutPasteOperration)
    {
      if (['float', 'decimal', 'currency'].contains(this.type) && this.decimals > 0 && this.InputNode.value.contains('.'))
      {
        // check decimal precision when a number is pressed and prevent typing too many decimals:
        if (isNumberKey && !shiftDown && !ctrlDown && !inlineCheck)
        {
          let decimalStr = (this.InputNode.value.trim() + String.fromCharCode(keyCode)).trim().split('.')[1].trim();
          if (decimalStr.length > this.decimals) return false;
        }
      }
    }

    if (isNumberKey && !shiftDown && !ctrlDown) return true;

    switch (keyCode)
    {
      case 44: // comma
      case 188: // comma
        if (this.type === 'int') return false;
        if (this.type === 'version') return false;
        if (!inlineCheck && this.InputNode.value.contains(',')) return false; // already contains a comma
        if (inlineCheck && this.InputNode.value.countString(',') < 2) return true; // is allowed one comma
        break;
      case 190: // keyboard decimal
      case 110: // nampad decimal
        if (this.type === 'int') return false;
        if ((this.type === 'float' || this.type === 'currency') && this.InputNode.value.indexOf('.') > -1) return false; // already has a decimal
        break;
      case 107: // nampad plus
      case 187: // keyboard plus (equals)
        if (keyCode == 187 && !shiftDown) return false; 
        if (this.type === 'version') return false;
        if (this.InputNode.value.length && this.InputNode.selectionStart > 0) return false; // can only have plus as first char
        if (this.InputNode.value.indexOf('+') > -1) return false; // already has a +
        break;
      case 109: // nampad minus
      case 189: // keyboard minus
      case 45: // keyboard minus
        if (keyCode === 45 && shiftDown) return false; // underscore, not minus
        if (this.type === 'version') return false;
        if (this.InputNode.value.length > 0 && this.InputNode.selectionStart !== 0) return false; // can only have minus as first char
        if (this.InputNode.value.indexOf('-') > -1) return false; // already has a minus
        break;
      case 8: // backspace
      case 9: // tab
      case 13: // enter
      case 35: // end
      case 36: // home
      case 37: // left arrow
      case 38: // up arrow
      case 39: // right arrow
      case 40: // down arrow
      case 45: // insert
      case 46: // delete
        return true;
        break;
      default:
        return false;
        break;
    }
    return true;
  }

  _blur ()
  {
    if (this.CutPasteOperration)
    {
      var validChars = [];
      var check = this.InputNode.value.toUpperCase().trim();
      for (var i = 0; i < check.length; i++)
      {
        var code = check.charCodeAt(i);
        if (this._keyIsOk(code, false, false, true)) validChars.push(this.InputNode.value.trim().charAt(i));
      }
      this.InputNode.value = validChars.join('');
    }

    //var hasComma = this.InputNode.value.countString(',') === 1;
    var decimalMultiplyer;
    var value = this.InputNode.value;
    value = (value.contains('$') ? value.split('$')[1] : value).trim();

    if (['float', 'decimal', 'currency'].contains(this.type) && this.InputNode.value.trim() !== '')
    {
      //hasComma = !hasComma ? this.InputNode.value.trim().contains(',') : hasComma;
      value = !isNaN(parseFloat(this.InputNode.value.trim().replaceAll(',', ''))) ? parseFloat(this.InputNode.value.trim().replaceAll(',', '')) : value;

      if (this.decimals > 0)
      {
        decimalMultiplyer = 10 ** this.decimals;

        switch (this.rounding)
        {
          default:
          case 'round':
            value = Math.round(value * decimalMultiplyer) / decimalMultiplyer;
            break;
          case 'ceil':
            value = Math.ceil(value * decimalMultiplyer) / decimalMultiplyer;
            break;
          case 'floor':
            value = Math.floor(value * decimalMultiplyer) / decimalMultiplyer;
            break;
          case 'none':
            var valueStr = value.toString();
            if (valueStr.contains('.')) value = parseFloat(valueStr.split('.')[0] + '.' +  valueStr.split('.')[1].substring(0, this.decimals));
            break;
        }
        //value = Math.round(value * decimalMultiplyer) / decimalMultiplyer;
      }
      value = value.toString().charAt(0) === '.' ? '0' + value : value;
      if (this.type === 'currency')
      {
        value = parseFloat(value).toLocaleString('en-GB', { style: "currency", currency: "AUD" }).trim();
        value = value.contains('$') ? value.split('$')[1] : value;
      }
      //if (!hasComma) value = value.replaceAll(',', '');

      this.InputNode.value = value;
    }

    this._validate();
  }

  _validate (ev)
  {
    var value = this.InputNode.value.trim(),
        valueAsFloat = parseFloat(value.trim().replaceAll(',', '')),
        isValid = true,
        warning;

    this.Valid = true;
    this.HideError();
    this.InputNode.classList.remove('error');
    if (this.RowNode) this.RowNode.classList.remove('error');

    if (value === '' && !this.IsRequired) return;

    if (isNaN(valueAsFloat))
    {
      isValid = false;
      warning = 'Value must be a number.';
    }
    else
    {
      if (this.SpecialValidation)
      {
        if (valueAsFloat < this.MinValue || valueAsFloat > this.MaxValue)
        {
          isValid = false;
          warning = 'Value must be between ' + this.MinValue + ' and ' + this.MaxValue + '.';
        }
      }
      else
      {
        if (valueAsFloat < this.MinValue)
        {
          isValid = false;
          warning = 'Value must be greater than or equal to ' + this.MinValue + '.';
        }
        if (valueAsFloat > this.MaxValue)
        {
          isValid = false;
          warning = 'Value must be less than or equal to ' + this.MaxValue + '.';
        }
      }
    }

    if (!isValid)
    {
      this.InputNode.classList.add('error');
      if (this.RowNode) this.RowNode.classList.add('error');
      this.ShowError(warning);
      this.Valid = false;
    }

    // do padding on blur ONLY
    if (!ev || (ev && ev.type.toLowerCase() !== 'keyup'))
    {
      if (['float', 'decimal', 'currency'].contains(this.type) && this.decimals > 0)
      {
        if (!this.InputNode.value.contains('.')) this.InputNode.value = this.InputNode.value.trim() + '.';
        let decimalStr = this.InputNode.value.trim().split('.')[1].trim();
        if (decimalStr.length < this.decimals)
        {
          var paddedInput = Affinity2018.padRight(this.InputNode.value.trim(), '0', this.decimals + (this.InputNode.value.trim().length - decimalStr.length));
          this.InputNode.value = paddedInput;
        }
      }
    }

    var formRow = $a.getParent(this.InputNode, '.form-row');
    if (formRow)
    {
      if (this.Valid)
      {
        formRow.classList.remove('error', 'flash-error', 'inline-error');
      }
      else
      {
        formRow.classList.add('error', 'inline-error');
      }
    }

    return this.Valid;
  }

  /**/

  Destroy ()
  {
    this.InputNode.remove('nv');
    this.InputNode.remove('error');
    this.InputNode.removeEventListener('keydown', this._keyDown);
    this.InputNode.removeEventListener('keyup', this._keyUp);
    this.InputNode.removeEventListener('blur', this._blur);
    this.ErrorNode.innerHTML = '';
    this.ErrorNode.parentNode.removeChild(this.ErrorNode);
    delete this.InputNode.widgets.Number;
    for (var key in this)
    {
      if (this.hasOwnProperty(key))
      {
        this[key] = null;
        delete this[key];
      }
    }
  }

};
;
/***************************************************************************************************************************************************/
/***************************************************************************************************************************************************/
/***                                                                                                               *********************************/
/***   ██████  ███████  ██████  ██    ██ ███████ ███████ ████████      ██████  ██    ██ ███████ ██    ██ ███████   *********************************/
/***   ██   ██ ██      ██    ██ ██    ██ ██      ██         ██        ██    ██ ██    ██ ██      ██    ██ ██        *********************************/
/***   ██████  █████   ██    ██ ██    ██ █████   ███████    ██        ██    ██ ██    ██ █████   ██    ██ █████     *********************************/
/***   ██   ██ ██      ██ ▄▄ ██ ██    ██ ██           ██    ██        ██ ▄▄ ██ ██    ██ ██      ██    ██ ██        *********************************/
/***   ██   ██ ███████  ██████   ██████  ███████ ███████    ██         ██████   ██████  ███████  ██████  ███████   *********************************/
/***                                                                                                               *********************************/
/***************************************************************************************************************************************************/
/******************************************************************************************************************** Source63 *** request queue ***/

if (!('Affinity2018' in window)) Affinity2018 = {};
if (!('Classes' in Affinity2018)) Affinity2018.Classes = {};
if (!('Plugins' in Affinity2018.Classes)) Affinity2018.Classes.Plugins = {};

if (!('Apps' in Affinity2018)) Affinity2018.Apps = {};
if (!('Plugins' in Affinity2018.Apps)) Affinity2018.Apps.Plugins = {};

Affinity2018.Classes.Plugins.RequestQueue = class
{
  options()
  {
    this.WidgetName = 'Request';

    this.requests = {};
    this.status = 'stopped';
    this.maxRunning = 5;

    this.maxRetryAttempts = 5;

    this.apiObj = {
      method: 'get',
      url: '',
      props: {},
      onSuccess: false,
      onFail: false,
      priority: -1
    };
  }

  constructor()
  {

    this.options();
    [
      'Get', 'Post', 'Put', 'Add', 'Remove',
      'GetKeyFromApi',
      'KeyExists', 'ApiExists',
      'StartQueue', 'StopQueue', 'ClearQueue',
      'Keys', 'RunningKeys', 'RunningCount', 'WaitingKeys', 'WaitingCount',
      'GetStatus',
      '_add', '_remove', '_cancelQueuItem', '_removeQueItem',
      '_doRequest', '_success', '_fail'
    ].bindEach(this);

    this._queueTimer = false;
  }

  Get(api, onSuccess, onFail, priority)
  {
    return this._add('get', api, false, onSuccess, onFail, priority);
  }

  Post(api, params, onSuccess, onFail, priority)
  {
    return this._add('post', api, params, onSuccess, onFail, priority);
  }

  Put(api, params, onSuccess, onFail, priority)
  {
    return this._add('put', api, params, onSuccess, onFail, priority);
  }

  Add(api, onSuccess, onFail, priority)
  {
    if (
      typeof api === 'object'
      && api.constructor === Object
    )
    {
      var obj = Object.assign(this.apiObj, api);
      return this._add(obj.method, obj.url, obj.props, obj.onSuccess, obj.onFail, obj.priority);
    }
    else
    {
      return this._add('get', api, false, onSuccess, onFail, priority);
    }
  }

  Remove(api, method)
  {
    this._remove(api, method);
  }

  GetKeyFromApi(api, method, params)
  {
    if (!Affinity2018.isUrl(api)) api = false;
    method = method.trim().toLowerCase() || 'get';
    params = typeof params === 'string' ? JSON.parse(params) : typeof params === 'object' ? params : {};

    var paramsArray = [];
    if (api && api.contains('?'))
    {
      paramsArray = new URL(api).search.replace('?', '').toLowerCase().split('&');
      api = api.substring(0, api.indexOf('?')).replace('?', '').trim();
    }
    if (params != {})
    {
      for (var key in params)
      {
        if (params.hasOwnProperty(key))
        {
          paramsArray.push((key + '=' + params[key]).trim().toLowerCase());
        }
      }
    }

    if (paramsArray.length > 0)
    {
      paramsArray.sort();
      params = paramsArray.join('&');
    }

    api = api ? params !== '' ? api + '?' + params : api : false;
    if (api) return (method + '|' + api.toLowerCase().trim().replace(/^https?\:\/\//i, '').replace('www', '').replace(/\?\&/g, '_').replace('=', '-').replace(/\W/g, '')).trim().toLowerCase();
    return false;
  }

  KeyExists(key)
  {
    return key && this.requests.hasOwnProperty(key);
  }

  ApiExists(api, method)
  {
    return this.KeyExists(this.GetKeyFromApi(api, method));
  }

  StartQueue()
  {
    // if (this.status === 'running') return true;
    if (this._queueTimer) this.StopQueue();
    var runcount = this.RunningCount(), key;
    this.status = '...';
    this.status = this.GetStatus();
    if (runcount <= this.maxRunning)
    {
      for (key in this.requests)
      {
        if (
          this.requests.hasOwnProperty(key)
          && this.requests[key].status === 0 // waiting
        )
        {
          if (runcount <= this.maxRunning)
          {
            this._doRequest(key);
          }
          else
          {
            break
          }
        }
      }
    }
    if (!this._queueTimer)
    {
      this._queueTimer = setInterval(this.StartQueue, 100);
    }
  }

  StopQueue()
  {
    this.status = 'stopped';
    if (this._queueTimer) clearTimeout(this._queueTimer);
    this._queueTimer = false;
  }

  ClearQueue()
  {
    this.status = 'stopped';
    for (var key in this.requests)
    {
      if (this.requests.hasOwnProperty(key))
      {
        this._cancelQueuItem(key);
      }
    }
    return true;
  }

  /**/

  Keys()
  {
    return Object.keys(this.requests);
  }

  RunningKeys()
  {
    var keys = [], key;
    for (var key in this.requests)
    {
      if (
        this.requests.hasOwnProperty(key)
        && this.requests[key].status === 1
      )
      {
        keys.push(key);
      }
    }
    return keys;
  }

  RunningCount()
  {
    return this.RunningKeys().length;
  }

  WaitingKeys()
  {
    var keys = [], key;
    for (var key in this.requests)
    {
      if (
        this.requests.hasOwnProperty(key)
        && this.requests[key].status === 0
      )
      {
        keys.push(key);
      }
    }
    return keys;
  }

  WaitingCount()
  {
    return this.WaitingKeys().length;
  }

  /**/

  GetStatus ()
  {
    if (this.status === 'stopped') return 'stopped';
    if (this.RunningCount() > 0 || this.WaitingCount() > 0) return 'running';
    else return 'idle';
  }

  /**/

  _add(method, api, params, onSuccess, onFail, priority)
  {
    if (!Affinity2018.isUrl(api))
    {
      onFail('URL is invalid (' + api +')');
      return;
    }
    method = method.trim().toLowerCase() || 'get';
    onSuccess = Affinity2018.isFunctionReturn(onSuccess);
    onFail = Affinity2018.isFunctionReturn(onFail);
    priority = priority || 0;
    var key = this.GetKeyFromApi(api, method, params);
    if (key && onSuccess)
    {
      if (this.KeyExists(key))
      {
        switch (this.requests[key].status)
        {
          case 2: // complete with no errors
            onSuccess(this.requests[key].data);
            break;
          case 1: // loading ...
          case 0: // waiting
            this.requests[key].successCallbacks.push(onSuccess);
            if (onFail) this.requests[key].failCallbacks.push(onFail);
            break;
          case -1: // error
            if (onFail) onFail(this.requests[key].error);
            break;
          case -2: // cancelled or cancelling
            break;
        }
      }
      else
      {
        if (method.toLowerCase().trim() === 'get' && params)
        {
          var key, paramArray = [];
          for (key in params)
          {
            if (params.hasOwnProperty(key)) paramArray.push(key + "=" + encodeURIComponent(params[key]));
          }
          if (paramArray.length > 0)
          {
            api += !api.contains('?') ? '?' : '&';
            api += paramArray.join('&');
          }
        }
        this.requests[key] = {
          status: 0,
          api: api,
          data: false,
          error: false,
          successCallbacks: [],
          failCallbacks: [],
          retryAttempts: 0,
          axiosConfig: {
            method: method,
            url: (api.includes('?') || api.includes('&') ? api + '&ran=' : api + '?ran=') + Affinity2018.uuid()
          },
          axios: false,
          _cancelToken: new axios.CancelToken(this._removeQueItem),
          _onSuccess: function (response) { this._success(key, response); }.bind(this),
          _onFail: function (error) { this._fail(key, error); }.bind(this)
        };
        this.requests[key].successCallbacks.push(onSuccess);
        if (onFail) this.requests[key].failCallbacks.push(onFail);
        if (method.toLowerCase().trim() === 'post' && params) this.requests[key].axiosConfig.data = params;

        if (priority > 0) this._doRequest(key);
      }
      if (this.status !== 'running' && this.status !== 'idle') this.StartQueue();
      return key;
    }
    return false;
  }

  _remove(api, method)
  {
    method = method.trim().toLowerCase() || 'get';
    api = Affinity2018.isUrlReturn(api);
    var key = this.GetKeyFromApi(api, method);
    if (key) this._cancelQueuItem(key);
  }

  _cancelQueuItem(key)
  {
    if (key && this.KeyExists(key))
    {
      this.requests[key].successCallbacks = [];
      this.requests[key].failCallbacks = [];
      this.requests[key].status = -2;
      if (
        this.requests[key].hasOwnProperty('_cancelToken')
        && this.requests[key]._cancelToken.hasOwnProperty('source')
        && this.requests[key]._cancelToken.source.hasOwnProperty('cancel')
      )
      {
        this.requests[key]._cancelToken.source.cancel(key);
      }
      else
      {
        this._removeQueItem(key);
      }
    }
  }

  _removeQueItem(key)
  {
    if (this.KeyExists(key))
    {
      this.requests[key].successCallbacks = [];
      this.requests[key].failCallbacks = [];
      this.requests[key].status = false;
      delete this.requests[key];
    }
  }

  _doRequest(key)
  {
    if (this.KeyExists(key))
    {
      this.status = 'running';
      this.requests[key].status = 1; // loading ....
      this.requests[key].axios = axios(this.requests[key].axiosConfig)
        .then(function (response)
        {
          this._success(key, response);
        }.bind(this))
        .catch(function (error)
        {
          if (
            this.requests[key].axios.hasOwnProperty('isCancel')
            && typeof this.requests[key].axios.isCancel === 'function'
            && this.requests[key].axios.isCancel(error)
          )
          {
            // console.log('Request canceled', error.message);
          }
          else
          {
            this._fail(key, error);
          }
        }.bind(this));
    }

  }

  _success(key, response)
  {
    var successFail = false;
    if (this.requests && this.requests.hasOwnProperty(key))
    {
      if (
        response
        && 'status' in response
        && response.status === 200
        && 'data' in response
      )
      {
        var responseStr = typeof response.data === 'string' ? response.data : JSON.stringify(response.data),
          responseCheck = responseStr.trim().toLowerCase().replace(/['"]+/g, ''),
          iterator;
        try
        {
          [
            'success:false',
            'unauthorised',
            'unauthorized'
          ].forEach(function (failStrs)
          {
            if (!successFail && responseCheck.includes(failStr))
            {
              successFail = true;
              this._fail(key, response.data);
              if (this.status !== 'stopped') this.StartQueue();
              return;
            }
          }.bind(this));
        }
        catch (e) { }
        if (successFail) return;
        this.requests[key].data = response.data;
        this.requests[key].status = 2;
        iterator = this.requests[key].successCallbacks.length;
        while (iterator--)
        {
          this.requests[key].successCallbacks[iterator](response.data);
          this.requests[key].successCallbacks.splice(iterator, 1);
        }
        this.requests[key].successCallbacks = [];
        this.requests[key].failCallbacks = [];
      }
      else
      {
        this._fail(key, 'unknown axios request failure');
      }
    }
  }

  _fail(key, error)
  {
    if (this.requests && this.requests.hasOwnProperty(key))
    {
      this.requests[key].retryAttempts++;
      if (this.requests[key].retryAttempts > this.maxRetryAttempts)
      {
        this.requests[key].status = -1;
        if (error.response)
        {
          /* The request was made and the server responded with a status code
             that falls out of the range of 2xx
          */
          error = error.response.data + ' (' + error.response.status + ')';
        }
        else if (error.request)
        {
          /* The request was made but no response was received
             `error.request` is an instance of XMLHttpRequest in the browser and an instance of
             http.ClientRequest in node.js
          */
          error = error.request.responseText + ' (' + error.request.status + ')';
        }
        else if (error.error)
        {
          /* Server returned a proper error */
          error = error.error;
        }
        else
        {
          /* Something happened in setting up the request that triggered an Error */
          error = error.message;
        }
        this.requests[key].error = error;
        var ci = this.requests[key].failCallbacks.length;
        while (ci--)
        {
          this.requests[key].failCallbacks[ci](error);
          this.requests[key].failCallbacks.splice(ci, 1);
        }
        this.requests[key].failCallbacks = [];
      }
      else
      {
        this.requests[key].status = 0; // waiting (for re attempt) ....
      }
    }
    if (this.status !== 'stopped') this.StartQueue();
  }

};
;
/***************************************************************************************************************************************************/
/***************************************************************************************************************************************************/
/***                                                                                                             ***********************************/
/***   ███████ ███████ ██      ███████  ██████ ████████     ██       ██████   ██████  ██   ██ ██    ██ ██████    ***********************************/
/***   ██      ██      ██      ██      ██         ██        ██      ██    ██ ██    ██ ██  ██  ██    ██ ██   ██   ***********************************/
/***   ███████ █████   ██      █████   ██         ██        ██      ██    ██ ██    ██ █████   ██    ██ ██████    ***********************************/
/***        ██ ██      ██      ██      ██         ██        ██      ██    ██ ██    ██ ██  ██  ██    ██ ██        ***********************************/
/***   ███████ ███████ ███████ ███████  ██████    ██        ███████  ██████   ██████  ██   ██  ██████  ██        ***********************************/
/***                                                                                                             ***********************************/
/***************************************************************************************************************************************************/
/******************************************************************************************************************** Source63 *** select lookup ***/

if(!('Affinity2018' in window)) Affinity2018 = {};
if(!('Classes' in Affinity2018)) Affinity2018.Classes = {};
if(!('Plugins' in Affinity2018.Classes)) Affinity2018.Classes.Plugins = {};

if(!('Apps' in Affinity2018)) Affinity2018.Apps = {};
if(!('Plugins' in Affinity2018.Apps)) Affinity2018.Apps.Plugins = {};

Affinity2018.Classes.Plugins.SelectLookups = class
{
  _options ()
  {
    this.widgets = [];
  }

  constructor ()
  {
    this._options();
    [
      '_init',

      'Apply', 'Remove',
      '_apply',
      '_templates'

    ].bindEach(this);
    this._templates();

    if (Affinity2018.UiReady) this._init();
    else window.addEventListener('MainInit', this._init);


  }

  _init ()
  {
    if (!Affinity2018.hasOwnProperty('RequestQueue'))
    {
      Affinity2018.RequestQueue = new Affinity2018.Classes.Plugins.RequestQueue();
    }
  }

  Apply (node)
  {
    if (Affinity2018.isDomElement(node))
    {
      this._apply(node);
    }
    else
    {
      document.querySelectorAll('select.ui-has-lookup').forEach(this._apply);
    }
  }

  Remove(node)
  {
    if (
      node.classList.contains('ui-lookup')
      && node.hasOwnProperty('widgets')
      && node.widgets.hasOwnProperty('SelectLookup')
    )
    {
      node.widgets.SelectLookup.Destroy();
    }
  }

  HideAll (except)
  {
    var key, widget;
    for (key in this.widgets)
    {
      if (this.widgets.hasOwnProperty(key))
      {
        widget = this.widgets[key];
        if (typeof except === 'object' && except.hasOwnProperty('uuid'))
        {
          if (widget.uuid !== except.uuid) widget.hide();
        }
        else
        {
          widget.hide();
        }
      }
    }
  }

  /**/

  _apply (node)
  {
    if (Affinity2018.isDomElement(node))
    {
      new Affinity2018.Classes.Plugins.SelectLookupWidget(node);
    }
  }

  /**/

  _templates ()
  {

  }

};

Affinity2018.Classes.Plugins.SelectLookupWidget = class extends Affinity2018.ClassEvents
{

  _options ()
  {
    this.WidgetName = 'SelectLookup';

    this.api = false;
    this.useRequestQueue = true;
    this.makeAutocomplete = true;

    this.request = false;

    this.Valid = true;

    this.DefaultConfig = {
      DataKey: 'Key',
	    DisplayKey: 'Value',
      IncludeDataInDisplay: true,
      AddEmpty: false,
      EmptyKey: '',
      EmptyDisplay: '',
      Filters: [],
      NoneKey: '',
      NoneDisplay: 'Select...',
      Required: false
    };

  }

  constructor (targetNode, api, config)
  {
    super();
    this._options();
    [

      '_init',

      'IsValid', 'ShowError', 'HideError', 'GetValue',

      '_gotResults', '_gotResultsError', '_requestCanceled',

      '_clear',
      '_processResults', '_insertResult', '_forceSingleValueChange', '_cleanValue',
      '_processFilters', '_insertFilter', '_filterToggled',

      '_templates'

    ].bindEach(this);
    this._templates();

    if (!Affinity2018.isDomElement(targetNode))
    {
      console.error('No valid element was passed to SelectLookupWidget, dummy!');
      return;
    }

    this.CleverForms = window.hasOwnProperty('Affinity2018') && Affinity2018.hasOwnProperty('Apps') && Affinity2018.Apps.hasOwnProperty('CleverForms') ? Affinity2018.Apps.CleverForms.Default : null
    this.Form = this.CleverForms && this.CleverForms.hasOwnProperty('Form') ? this.CleverForms.Form : null;

    if (targetNode.classList.contains('ui-has-autocomplete') || targetNode.classList.contains('do-autocomplete'))
    {
      this.makeAutocomplete = true;
      targetNode.classList.remove('ui-has-autocomplete', 'do-autocomplete');
      targetNode.classList.add('prevent-autocomplete')
    }

    this.targetNode = targetNode;
    this.RowNode = Affinity2018.getParent(this.targetNode, '.form-row');

    if (this.RowNode)
    {
      this.ErrorNode = this.RowNode && this.RowNode.querySelector('.ui-form-error') ? this.RowNode.querySelector('.ui-form-error') : document.createElement('div');
      this.RowNode.appendChild(this.ErrorNode);
    }
    else
    {
      this.ErrorNode = this.InputNode.parentNode.parentNode && this.InputNode.parentNode.parentNode.querySelector('.ui-form-error') ? this.InputNode.parentNode.parentNode.querySelector('.ui-form-error') : document.createElement('div');
      this.targetNode.parentNode.parentNode.appendChild(this.ErrorNode);
    }
    this.ErrorNode.classList.add('ui-form-error');

    this.api = $a.isUrl(api) ? api.trim() : $a.isUrl(this.targetNode.dataset.api) ? this.targetNode.dataset.api.trim() : false;

    this.config = $a.isObject(config) ? config : $a.isString(this.targetNode.dataset.config) ? JSON.parse(this.targetNode.dataset.config) : false;
    if ($a.isObject(this.config)) this.config = $a.objectDeepMerge([$a.jsonCloneObject(this.DefaultConfig), this.config]);
    else this.config = $a.jsonCloneObject(this.DefaultConfig);
    delete this.targetNode.dataset.config;

    this.IsRequired = this.RowNode ? this.RowNode.classList.contains('required') ? true : this.hasOwnProperty('config') && this.config.hasOwnProperty('Required') && this.config.Required : false;

    this.isSingleValue = this.config.IsSingleValue && !$a.isNullOrEmpty(this.config.Value);

    if (!this.api && !this.isSingleValue)
    {
      console.error('No valid api path was passed to SelectLookupWidget, dummy!');
      console.error(this.targetNode);
      return;
    }

    if (!this.targetNode.hasOwnProperty('widgets')) this.targetNode.widgets = {};
    this.targetNode.widgets.SelectLookup = this;

    this.uuid = this.targetNode.id ? this.targetNode.id : Affinity2018.uuid();
    if (Affinity2018.hasOwnProperty('SelectLookups') && !Affinity2018.SelectLookups.widgets.hasOwnProperty(this.uuid))
    {
      Affinity2018.SelectLookups.widgets[this.uuid] = this;
    }

    this.targetNode.classList.remove('ui-has-lookup');
    this.targetNode.classList.add('ui-lookup');
    if (this.makeAutocomplete) this.targetNode.classList.add('prevent-autocomplete');

    if (this.isSingleValue)
    {
      axios.post(Affinity2018.ApiPath + 'api/GetDashboardProfile')
        .then(function(response)
        {
          this._gotResults([
            {
              Key: response.data.FirstName,
              Value: this.config.Value
            }
          ]);
        }.bind(this))
        .catch(function()
        {
          this._gotResults([
            {
              Key: this.config.Value,
              Value: this.config.Value
            }
          ]);
        }.bind(this));
      this.api = false;
    }

    this._init();

  }

  _init ()
  {
    if (!$a.isNullOrEmpty(this.api))
    {
      this.targetNode.classList.add('working');
      if (this.targetNode.parentNode && this.targetNode.parentNode.classList.contains('select')) this.targetNode.parentNode.classList.add('working');
      if (this.useRequestQueue && Affinity2018.RequestQueue)
      {
        Affinity2018.RequestQueue.Add(this.api, this._gotResults, this._gotResultsError);
        Affinity2018.RequestQueue.StartQueue();
      }
      else
      {
        if (this.request && this.request.hasOwnProperty('cancelToken')) this.request.cancelToken.source.cancel(true);
        this.request = axios({
          method: 'get',
          url: this.api,
          cancelToken: new axios.CancelToken(this._requestCanceled)
        })
          .then(this._gotResults)
          .catch(this._gotResultsError);
      }
    }
  }

  /**/

  IsValid()
  {
    this.targetNode.classList.remove('error');
    this.HideError();
    if (this.RowNode) this.RowNode.classList.remove('error', 'error2', 'flash-error');
    this.Valid = this.IsRequired && this.GetValue() === this.config.NoneKey ? false : true;
    if (this.IsRequired && !this.Valid)
    {
      this.targetNode.classList.add('error');
      if (this.RowNode) this.RowNode.classList.add('error');
      var errorlabel = this.RowNode && this.RowNode.querySelector('label') ? this.RowNode.querySelector('label').innerText.trim().shorten(50) : 'This';
      var error = $a.Lang.ReturnPath('generic.validation.select.required', { label: errorlabel });
      var select = this.RowNode.querySelector('div.select.hidden select');
      select.querySelectorAll('option').forEach(function (option)
      {
        if (option.value === select.value)
        {
          if (this.IsRequired)
          {
            error = $a.Lang.ReturnPath('generic.validation.select.notempty', { label: errorlabel });
          }
          else
          {
            error = $a.Lang.ReturnPath('generic.validation.select.notnone', { label: errorlabel, value: option.innerHTML.trim() });
          }
        }
      }.bind(this));
      this.ShowError(error);
    }
    return this.Valid;
  }

  ShowError(error)
  {
    this.ErrorNode.innerHTML = error;
    this.ErrorNode.classList.add('show');
    if (this.RowNode) this.RowNode.classList.add('error');
    if (this.Form) this.Form.ResizeSection();
  }
  HideError()
  {
    this.ErrorNode.classList.remove('show');
    if (this.RowNode) this.RowNode.classList.remove('error');
    if (this.Form) this.Form.ResizeSection();
  }

  GetValue()
  {
    return this.targetNode.value;
  }

  /**/

  _gotResults (response)
  {
    if(response)
    {
      if (Affinity2018.isObject(response))
      {
        if (response.hasOwnProperty('status') && response.status === 200)
        {
          if (response.hasOwnProperty('data') && Affinity2018.isPropArray(response, 'data'))
          {
            this._processResults(response.data);
            return;
          }
          if (response.hasOwnProperty('results') && Affinity2018.isPropArray(response, 'results'))
          {
            this._processResults(response.results);
            return;
          }
        }
      }
      if (Affinity2018.isArray(response))
      {
        this._processResults(response);
        return;
      }
    }
    this._gotResultsError('The lookup did not return usable data.');
  }

  _gotResultsError (error)
  {
    var message = error || 'Unknown reason (' + url + ')',
        message = message.contains('<!DOCTYPE html>') ? message.substring(0, message.indexOf('<!DOCTYPE html>')) : message,
        message = message.contains('<html>') ? message.substring(0, message.indexOf('<html')) : message;
    Affinity2018.LogError('Lookup Error', 'Important', 'Request failed on "' + this.api + '" (' + message.trim() + ').');
    
    this.targetNode.classList.remove('working');
    if (this.targetNode.parentNode && this.targetNode.parentNode.classList.contains('select')) this.targetNode.parentNode.classList.remove('working');
  }

  _requestCanceled ()
  {
    this.request = false;
  }

  /**/

  _clear ()
  {
    this.targetNode.innerHTML = '';
  }

  _processResults (resultArray)
  {
    this._clear();
    this.insertCount = 0;
    this.hasSelected = false;
    if (Array.isArray(resultArray))
    {
      var inc = 0, inserted = false;
      if (this.config.AddEmpty && !this.config.Required)
      {
        this.hasSelected = false;
        var emptyData = { Selected: true };
        emptyData[this.config.DataKey] = this.config.EmptyKey;
        emptyData[this.config.DisplayKey] = this.config.EmptyDisplay;
        inserted = this._insertResult(emptyData);
      }
      if (this.config.Required && !this.isSingleValue)
      {
        this.hasSelected = false;
        var emptyData = { Selected: true };
        emptyData[this.config.DataKey] = this.config.NoneKey;
        emptyData[this.config.DisplayKey] = this.config.NoneDisplay;
        inserted = this._insertResult(emptyData);
      }
      for ( ; inc < resultArray.length; inc++)
      {
        inserted = this._insertResult(resultArray[inc]);
      }
    }
    var filtersInserted = this._processFilters();
    if (this.makeAutocomplete && Affinity2018.Autocompletes)
    {
      this.targetNode.classList.remove('prevent-autocomplete');
      if (this.isSingleValue)
      {
        this.targetNode.addEventListener('autocompleteReady', this._forceSingleValueChange);
      }
      Affinity2018.Autocompletes.Apply(this.targetNode);
    }
    else
    {
      if (this.isSingleValue)
      {
        this.targetNode.disabled = 'disabled';
        this.targetNode.dispatchEvent(new Event('change'));
      }
    }
    this.targetNode.classList.remove('working');
    if (this.targetNode.parentNode && this.targetNode.parentNode.classList.contains('select')) this.targetNode.parentNode.classList.remove('working');
    this.targetNode.removeEventListener('change', this.IsValid);
    this.targetNode.addEventListener('change', this.IsValid);
  }

  _insertResult (data)
  {
    var resultsNode = document.createElement('option'),
        displayStr = this._cleanValue(data[this.config.DisplayKey], data[this.config.DataKey]);
    if (displayStr.trim() !== '')
    {
      resultsNode.innerHTML = displayStr;
      resultsNode.value = data[this.config.DataKey];
      if (!this.hasSelected && this.config.Value === data[this.config.DataKey])
      {
        resultsNode.selected = true;
        this.targetNode.selectedIndex = this.insertCount;
        this.hasSelected = true;
      }
      if (!this.hasSelected && $a.isPropBool(data, 'Selected') && data.Selected === true)
      {
        resultsNode.selected = true;
        this.targetNode.selectedIndex = this.insertCount;
        this.hasSelected = true;
      }
      if (this.config.Filters.length > 0)
      {
        var i, filterData;
        for (var i = 0; i < this.config.Filters.length; i++)
        {
          filterData = this.config.Filters[i];
          if (this._filterDataOk(filterData))
          {
            if (data.hasOwnProperty(filterData.Key) && data[filterData.Key] === filterData.FilterEndabldeValue)
            {
              resultsNode.dataset[filterData.Key] = data[filterData.Key];
              resultsNode.dataset.filterCss = filterData.StartEnabled ? filterData.FitlerEnabledCss : filterData.FilterDisabledCss;
            }
          }
        }
      }
      this.targetNode.appendChild(resultsNode);
      this.insertCount++;
      return true;
    }
    return false;
  }

  _forceSingleValueChange()
  {
    this.targetNode.removeEventListener('autocompleteReady', this._forceSingleValueChange);
    if (this.targetNode.hasOwnProperty('widgets') && this.targetNode.widgets.hasOwnProperty('Autocomplete'))
    {
      this.targetNode.widgets.Autocomplete.displayNode.classList.add('force-disabled');
    }
    this.targetNode.dispatchEvent(new Event('change'));
  }

  /**/

  _processFilters ()
  {
    if (this.config.Filters.length > 0)
    {
      var inc = 0, inserted = false;
      for ( ; inc < this.config.Filters.length; inc++)
      {
        inserted = this._insertFilter(this.config.Filters[inc], inc);
      }
    }
    return true;
  }

  _insertFilter (filterData, index)
  {
    if (this._filterDataOk(filterData))
    {
      var node = document.createElement('div');
      node.classList.add('select-filter', 'check-label-pair');
      node.dataset.index = index;
      node.innerHTML = this.FilterTemplate;
      node.querySelector('input').setAttribute('id', filterData.Key + 'Filter');
      node.querySelector('label').setAttribute('for', filterData.Key + 'Filter');
      node.querySelector('label').innerHTML = filterData.Name;
      node.querySelector('input').addEventListener('change', this._filterToggled);
      //node.querySelector('input').addEventListener('click', this._filterToggled);
      //node.querySelector('label').addEventListener('click', this._filterToggled);
      if (filterData.StartEnabled)
      {
        node.querySelector('input').checked = true;
        this._filterToggled({ target: node });
      }
    }

    var insertAfterNode = this.targetNode.parentNode && this.targetNode.parentNode.classList.contains('select') ? this.targetNode.parentNode : this.targetNode;
    if (insertAfterNode.nextSibling) insertAfterNode.parentNode.insertBefore(node, insertAfterNode.nextSibling);
    else insertAfterNode.parentNode.appendChild(node);

  }

  _filterToggled(ev)
  {
    var target = false, selectedIndex = -1, index, filterData, checkFor;
    if ('target' in ev && $a.isDomElement(ev.target))
    {
      target = ev.target.classList.contains('select-filter') ? ev.target : ev.target.closest('.select-filter');
      index = parseInt(target.dataset.index);
      filterData = this.config.Filters[index];
      if (this._filterDataOk(filterData))
      {
        this.targetNode.querySelectorAll('option').forEach(function (optionNode, optionIndex)
        {
          if (optionNode && optionNode.dataset[filterData.Key])
          {
            checkFor = optionNode.dataset[filterData.Key];
            if ($a.type(checkFor) === 'string')
            {
              if (
                $a.type(filterData.FilterEndabldeValue) === 'number'
                && !isNaN(parseFloat(checkFor))
              )
              {
                checkFor = parseFloat(checkFor);
              }
              if (
                $a.type(filterData.FilterEndabldeValue) === 'boolean'
                && ['true', 'false'].contains(checkFor.trim().toLowerCase())
              )
              {
                checkFor = checkFor.trim().toLowerCase() === 'true' ? true : checkFor.trim().toLowerCase() === 'false' ? false : checkFor;
              }
            }

            if (checkFor === filterData.FilterEndabldeValue)
            {
              if (target.querySelector('input').checked)
              {
                if (selectedIndex === -1 && filterData.VisibleWhenEnabled === true) selectedIndex = optionIndex;
                optionNode.dataset.filterCss = filterData.FitlerEnabledCss;
              }
              else
              {
                if (selectedIndex === -1 &&filterData.VisibleWhenDisabled === true) selectedIndex = optionIndex;
                optionNode.dataset.filterCss = filterData.FilterDisabledCss;
              }
            }

          }
          else
          {
            if (selectedIndex === -1) selectedIndex = optionIndex;
          }

        }.bind(this));

        if (selectedIndex === -1) selectedIndex = 0;
        this.targetNode.selectedIndex = selectedIndex;
        this.targetNode.value = this.targetNode.querySelectorAll('option')[selectedIndex].value;

        if (this.targetNode.widgets.Autocomplete)
        {
          this.targetNode.widgets.Autocomplete.refreshFromSelect();
        }
      }
    }
  }

  _filterDataOk (filterData)
  {
    if (
      $a.isObject(filterData)
      && $a.isPropString(filterData, 'Key') && filterData.Key.trim() !== ''
      && $a.isPropString(filterData, 'Name') && filterData.Name.trim() !== ''
      && $a.isPropBool(filterData, 'StartEnabled')
      && filterData.hasOwnProperty('FilterEndabldeValue')
      && $a.isPropString(filterData, 'FitlerEnabledCss')
      && $a.isPropString(filterData, 'FilterDisabledCss')
    ) return true;
    return false;
  }

  _cleanValue (str, key)
  {
    var cleanStr = str && typeof str === 'string' && str.trim() !== '' ? str.trim() : '',
        keyStr =   key && typeof key === 'string' && key.trim() !== '' ? key.trim() : typeof key === 'number' ? (key + '').trim() : '',
        lastChar;
    if (str !== '')
    {
      cleanStr = str.trim().replace(/&amp;/gi, '&');
      lastChar = cleanStr.charAt(cleanStr.length - 1);
      if ([',', '-', '_', ':'].contains(lastChar)) cleanStr = cleanStr.substring(0, cleanStr.length - 1).trim();
      if (this.config.IncludeDataInDisplay)
      {
        if (keyStr !== '' && !cleanStr.contains(keyStr))
        {
          cleanStr = cleanStr + ' (' + keyStr + ')';
        }
      }
    }
    else
    {
      if (keyStr !== '') cleanStr = 'Not Set - (' + key + ')';
      else cleanStr = '';
    }
    return cleanStr;
  }

  /**/

  Destroy()
  {
    this.targetNode.classList.remove('ui-lookup');
    this.targetNode.parentNode.querySelectorAll('.select-filter').forEach(function (node)
    {
      node.querySelector('input').removeEventListener('change', this._filterToggled);
      node.parentNode.removeChild(node);
    });
    for (var key in this)
    {
      if (this.hasOwnProperty(key))
      {
        this[key] = null;
        delete this[key];
      }
    }
  }

  /**/

  _templates ()
  {
    this.FilterTemplate = `<input type="checkbox"><label></label>`;
  }

};
;
/***************************************************************************************************************************************************/
/***************************************************************************************************************************************************/
/***                                                            ************************************************************************************/
/***   ███████ ████████ ██████  ██ ███    ██  ██████  ███████   ************************************************************************************/
/***   ██         ██    ██   ██ ██ ████   ██ ██       ██        ************************************************************************************/
/***   ███████    ██    ██████  ██ ██ ██  ██ ██   ███ ███████   ************************************************************************************/
/***        ██    ██    ██   ██ ██ ██  ██ ██ ██    ██      ██   ************************************************************************************/
/***   ███████    ██    ██   ██ ██ ██   ████  ██████  ███████   ************************************************************************************/
/***                                                            ************************************************************************************/
/***************************************************************************************************************************************************/
/************************************************************************************************************************** Source63 *** strings ***/

if(!('Affinity2018' in window)) Affinity2018 = {};
if(!('Classes' in Affinity2018)) Affinity2018.Classes = {};
if(!('Plugins' in Affinity2018.Classes)) Affinity2018.Classes.Plugins = {};

if(!('Apps' in Affinity2018)) Affinity2018.Apps = {};
if(!('Plugins' in Affinity2018.Apps)) Affinity2018.Apps.Plugins = {};

Affinity2018.Classes.Plugins.Strings = class
{

  constructor ()
  {
    [

      'Apply', 'Remove',
      '_apply',
      '_templates'

    ].bindEach(this);
  }

  Apply (node)
  {
    if (node)
    {
      this._apply(node);
    }
    else
    {
      document.querySelectorAll('.ui-has-length').forEach(this._apply);
      document.querySelectorAll('.ui-has-string').forEach(this._apply);
      document.querySelectorAll('.ui-has-sentence').forEach(this._apply);
      document.querySelectorAll('.ui-has-alphanumeric').forEach(this._apply);
      document.querySelectorAll('.ui-has-email').forEach(this._apply);
      document.querySelectorAll('.ui-has-url').forEach(this._apply);
    }
  }

  Remove (node)
  {
    if (
      node.classList.contains('sv')
      && node.hasOwnProperty('widgets')
      && node.widgets.hasOwnProperty('String')
    )
    {
      node.widgets.String.Destroy();
    }
  }

  /**/

  _apply (node)
  {
    new Affinity2018.Classes.Plugins.StringWidget(node);
  }

  /**/

  _templates ()
  {

  }

};


Affinity2018.Classes.Plugins.StringWidget = class
{
  _options ()
  {
    this.WidgetName = 'String';
    this.WidgetType = 'none';

    this.type = null;
    this.InputNode = null;
    this.Valid = false;

    this.MaxLength = Number.MAX_SAFE_INTEGER;
    this.MinLength = 0;
  }

  constructor (targetNode)
  {
    this._options();
    [
      'ShowError', 'HideError',

      'IsValid',

      '_applyEvents',
      '_isRequired',
      '_stopEvents',
      '_validate',

      'Destroy'

    ].bindEach(this);

    if (!$a.isDomElement(targetNode))
    {
      console.error('No valid element was passed to StringWidget, dummy!');
      return;
    }

    this.CleverForms = window.hasOwnProperty('Affinity2018') && Affinity2018.hasOwnProperty('Apps') && Affinity2018.Apps.hasOwnProperty('CleverForms') ? Affinity2018.Apps.CleverForms.Default : null
    this.Form = this.CleverForms && this.CleverForms.hasOwnProperty('Form') ? this.CleverForms.Form : null;

    this.InputNode = targetNode;
    this.RowNode = Affinity2018.getParent(this.InputNode, '.form-row');
    this.IsRequired = this.RowNode ? this.RowNode.classList.contains('required') ? true : false : false;

    if (this.InputNode.classList.contains('ui-has-string'))
    {
      this.WidgetType = 'string';
      this.type = this.WidgetType;
      this.InputNode.classList.remove('ui-has-string');
    }

    if (this.InputNode.classList.contains('ui-has-sentence'))
    {
      this.WidgetType = 'sentence';
      this.type = this.WidgetType;
      this.InputNode.classList.remove('ui-has-sentence');
    }

    if (this.InputNode.classList.contains('ui-has-alphanumeric'))
    {
      this.WidgetType = 'alphanumeric';
      this.type = this.WidgetType;
      this.InputNode.classList.remove('ui-has-alphanumeric');
    }

    if (this.InputNode.classList.contains('ui-has-email'))
    {
      this.WidgetType = 'email';
      this.type = this.WidgetType;
      this.InputNode.classList.remove('ui-has-email');
    }

    if (this.InputNode.classList.contains('ui-has-url'))
    {
      this.WidgetType = 'url';
      this.type = this.WidgetType;
      this.InputNode.classList.remove('ui-has-url');
    }

    if (this.InputNode.classList.contains('ui-has-length'))
    {
      //this.WidgetType = 'string';
      this.type = this.WidgetType;
      this.MaxLength = !isNaN(parseFloat(this.InputNode.dataset.maxLength)) ? parseFloat(this.InputNode.dataset.maxLength) : Number.MAX_SAFE_INTEGER;
      this.MinLength = !isNaN(parseFloat(this.InputNode.dataset.minLength)) ? parseFloat(this.InputNode.dataset.minLength) : 0;
      this.InputNode.classList.remove('ui-has-length');
      delete this.InputNode.dataset.maxLength;
      delete this.InputNode.dataset.minLength;
    }

    if (this.type === null)
    {
      this.WidgetType = 'none';
      this.type = null;
      console.error('No valid string type could be found!', this.InputNode);
      return;
    }

    if (!this.InputNode.hasOwnProperty('widgets')) this.InputNode.widgets = {};
    this.InputNode.widgets.String = this;

    this.InputNode.classList.add('sv');

    this.ErrorNode = this.InputNode.parentNode && this.InputNode.parentNode.querySelector('.ui-form-error') ? this.InputNode.parentNode.querySelector('.ui-form-error') : document.createElement('div');
    this.ErrorNode.classList.add('ui-form-error');
    this.InputNode.parentNode.appendChild(this.ErrorNode);

    this._applyEvents();

    //this._validate();

  }

  IsValid ()
  {
    this._validate();
    return this.Valid;
  }

  ShowError (error)
  {
    this.ErrorNode.innerHTML = error;
    this.ErrorNode.classList.add('show');
    if (this.Form) this.Form.ResizeSection();
  }
  HideError ()
  {
    this.ErrorNode.classList.remove('show');
    if (this.Form) this.Form.ResizeSection();
  }

  /**/

  _applyEvents ()
  {
    this.InputNode.removeEventListener('keyup', this._validate);
    this.InputNode.removeEventListener('blur', this._validate);
    this.InputNode.addEventListener('keyup', this._validate);
    this.InputNode.addEventListener('blur', this._validate);
  }

  _isRequired()
  {
    var formRow = Affinity2018.getParent(this.InputNode, '.form-row');
    if (this.InputNode.classList.contains('required') || (formRow && formRow.classList.contains('required')))
    {
      if (!this.InputNode.classList.contains('required-override')) return true;
    }
    return false;
  }

  _validate(ev)
  {
    var value = this.InputNode.value.trim(),
        event = ev && ev.type === 'keyup' ? 'keyboard' : 'none',
        extraspace = false,
        required = this._isRequired(),
        pattern, warning;

    //console.group('=== string validation ===');
    //console.log(this.type);
    //console.log(event);
    //console.log(ev);
    //console.groupEnd();

    this.Valid = true;
    this.HideError();
    this.InputNode.classList.remove('error');
    if (this.RowNode) this.RowNode.classList.remove('error', 'error2', 'flash-error');

    if (value === '' && !this.IsRequired) return;

    switch (this.type)
    {
      case 'string':
        pattern = /^[A-Za-z0-9_\-.]+$/g;
        warning = $a.Lang.ReturnPath('generic.validation.strings.string'); // + ' Some characters used are invalid.<br />You can use _ - . but no spaces.';
        extraspace = true;
        break;
      case 'sentence':
      case 'sentance':
        pattern = /^[a-zA-Z0-9_\-.,:;'\"!?@#$%\&\*\/\\|()\s]*$/g;
        warning = $a.Lang.ReturnPath('generic.validation.strings.sentence'); // + ' Some characters used are invalid.<br />You can use . , _ - ; : ( ) ? $ * % @ # ! \\ \' " and spaces.';
        extraspace = true;
        break;
      case 'alphanumeric':
        pattern = /^[a-zA-Z0-9_\-.,:'!?$%\*\/\\|\s]+$/g;
        warning = $a.Lang.ReturnPath('generic.validation.strings.alphanumeric'); // + ' Some characters used are invalid.<br />You can use . , _ - : ? $ * % ! \\ / \' |';
        extraspace = true;
        break;
      case 'email':
        pattern = /^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
        // old: pattern = /^(([^<>()[\]\\.,;:\s@\"]+(\.[^<>()[\]\\.,;:\s@\"]+)*)|(\".+\"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
        warning = $a.Lang.ReturnPath('generic.validation.strings.email'); // + ' This does not look like a valid email address.';
        break;
      case 'url':
        pattern = /^((ft|htt)ps?:\/\/)?((([a-z\d]([a-z\d-]*[a-z\d])*)\.)+[a-z]{2,}|(localhost)|((\d{1,3}\.){3}\d{1,3}))(\:\d+)?(\/[-a-z\d%@_.~+&:]*)*(\?[;&a-z\d%@_.,~+&:=-]*)?(\#[-a-z\d_]*)?$/gi;
        warning = $a.Lang.ReturnPath('generic.validation.strings.url'); // + ' This does not look like a valid URL.';
        break;
    }

    if (value === '' && this.IsRequired)
    {
      pattern = /(.|\s)*\S(.|\s)*/gi;
      warning = $a.Lang.ReturnPath('generic.validation.strings.notempty');
      extraspace = false;
    }

    var isValid = true;

    if (this['_' + this.type + 'Test'] && typeof this['_' + this.type + 'Test'] === 'function')
    {
      if (value !== '' && this['_' + this.type + 'Test'](value, pattern)) isValid = true;
    }
    else
    {
      if (value !== '' && !new RegExp(pattern).test(value)) isValid = false;
    }

    if (value === '' && required)
    {
      isValid = false;
    }

    if (value.length < this.MinLength || value.length > this.MaxLength)
    {
      isValid = false;
      extraspace = false;
      if (this.MinLength === 1 || this.MinLength === 0 || this.MinLength === Number.MIN_SAFE_INTEGER)
      {
        warning = 'This must be shorter than ' + (this.MaxLength + 1) + ' character(s)';
      }
      else
      {
        warning = 'This must be between ' + this.MinLength + ' and ' + this.MaxLength + ' characters long.';
      }
    }

    if (!isValid)
    {
      this.InputNode.classList.add('error');
      if (this.RowNode && !this.InputNode.classList.contains('no-row-error')) this.RowNode.classList.add('error');
      if (this.RowNode && !this.InputNode.classList.contains('no-row-error') && extraspace) this.RowNode.classList.add('error2');
      this.ShowError(warning);
      this.Valid = false;
    }

    if (this.type === 'url' && event !== 'keyboard' && this.Valid && value !== '')
    {
      var newUrl = $a.returnFormattedUrl(value);
      if (newUrl !== value)
      {
        this.InputNode.value = newUrl;
      }
    }

    var formRow = $a.getParent(this.InputNode, '.form-row');
    if (formRow)
    {
      if (this.Valid)
      {
        formRow.classList.remove('error', 'flash-error', 'inline-error');
      }
      else
      {
        formRow.classList.add('error', 'inline-error');
      }
    }

    return this.Valid;
  }

  /**/

  _urlTest(urlString, pattern)
  {
    if (urlString === '') return true;
    var url, newUrlString = $a.returnFormattedUrl(urlString);
    if (!Affinity2018.Browser.isie || (Affinity2018.Browser.isie && Affinity2018.Browser.major > 11))
    {
      try
      {
        url = new URL(newUrlString);
      }
      catch (_)
      {
        return false;
      }
      return [
        'http:', 'https:', 'ftp:', 'sftp:',
        'mailto:', 'callto:'
      ].contains(url.protocol.toLowerCase());
    }
    else
    {
      if (!new RegExp(pattern).test(newUrlString)) return false;
      return true;
    }
    return false;
  }

  /**/

  Destroy ()
  {
    this.InputNode.remove('sv');
    this.InputNode.remove('error');
    this.InputNode.removeEventListener('keyup', this._validate);
    this.InputNode.removeEventListener('blur', this._validate);
    this.ErrorNode.innerHTML = '';
    this.ErrorNode.parentNode.removeChild(this.ErrorNode);
    delete this.InputNode.widgets.String;
    for (var key in this)
    {
      if (this.hasOwnProperty(key))
      {
        this[key] = null;
        delete this[key];
      }
    }
  }

};
;
/***************************************************************************************************************************************************/
/***************************************************************************************************************************************************/
/***                                                                                        ********************************************************/
/***   ████████  █████  ██   ██     ███    ██ ██    ██ ███    ███ ██████  ███████ ██████    ********************************************************/
/***      ██    ██   ██  ██ ██      ████   ██ ██    ██ ████  ████ ██   ██ ██      ██   ██   ********************************************************/
/***      ██    ███████   ███       ██ ██  ██ ██    ██ ██ ████ ██ ██████  █████   ██████    ********************************************************/
/***      ██    ██   ██  ██ ██      ██  ██ ██ ██    ██ ██  ██  ██ ██   ██ ██      ██   ██   ********************************************************/
/***      ██    ██   ██ ██   ██     ██   ████  ██████  ██      ██ ██████  ███████ ██   ██   ********************************************************/
/***                                                                                        ********************************************************/
/***************************************************************************************************************************************************/
/*********************************************************************************************************************** Source63 *** tax number ***/

if(!('Affinity2018' in window)) Affinity2018 = {};
if(!('Classes' in Affinity2018)) Affinity2018.Classes = {};
if(!('Plugins' in Affinity2018.Classes)) Affinity2018.Classes.Plugins = {};

if(!('Apps' in Affinity2018)) Affinity2018.Apps = {};
if(!('Plugins' in Affinity2018.Apps)) Affinity2018.Apps.Plugins = {};

Affinity2018.Classes.Plugins.TaxNumber = class
{
  options ()
  {
  }

  constructor ()
  {
    this.options();
    [

      'Apply', 'Remove',
      '_apply',
      '_templates'

    ].bindEach(this);
    this._templates();
  }

  Apply (node)
  {
    if (node !== undefined && node !== null)
    {
      this._apply(node);
    }
    else
    {
      document.querySelectorAll('.ui-has-taxnumber').forEach(this._apply);
    }
  }

  Remove (node)
  {
    if (
      node.classList.contains('ui-taxnumber')
      && node.hasOwnProperty('widgets')
      && node.widgets.hasOwnProperty('TaxNumber')
    )
    {
      node.widgets.TaxNumber.Destroy();
    }
  }

  /**/

  _apply (node)
  {
    new Affinity2018.Classes.Plugins.TaxNumberWidget(node);
  }

  /**/

  _templates ()
  {

  }

};

Affinity2018.Classes.Plugins.TaxNumberWidget = class
{
  _options()
  {
    this.WidgetName = 'TaxNumber';

    this.UseQueue = true;

    this.CountryCodes = ['A', 'N', 'AU', 'NZ'];
    this.DefaultCountryCode = 'A';
    this.CountryCodeMap = {
      'A': 'AU',
      'N': 'NZ'
    };
    this.lastCodes = {
      N: '',
      A: ''
    };

    this.ShowCountryIfUnknown = true;

    this.FirstLoad = true;

    this.hasPayPoint = false;
    this.PayPoint = false;
    this.Valid = false;
    this.pasting = false;
  }

  constructor(targetNode)
  {
    this._options();
    [

      'Get', 'GetData', 'Set', 'SetCountry', 'Check', 'Clear',

      '_clear',
      '_stringToNodes', '_stringFromNodes',
      '_getCountryCode', '_setupCountry',
      '_setIcon',
      '_userKey', '_userKeyUp', '_userValidate', '_validate', '_validateSuccess', '_validateFailed', 

      'Destroy',

      '_templates'

    ].bindEach(this);
    this._templates();

    if (!Affinity2018.isDomElement(targetNode))
    {
      console.error('No valid element was passed to TaxNumberWidget, dummy!');
      return;
    }

    this.CleverForms = Affinity2018.Apps.CleverForms.Default;

    this.ShowCountryIfUnknown = this.CleverForms.ShowCountryIfUnknown;

    var value = targetNode.value.trim();

    targetNode.classList.remove('ui-has-taxnumber');
    targetNode.classList.add('ui-taxnumber', 'no-validate');

    this.initInputNode = targetNode;
    this.initInputNode.type = 'hidden';

    if (!this.initInputNode.hasOwnProperty('widgets')) this.initInputNode.widgets = {};
    this.initInputNode.widgets.TaxNumber = this;

    this.taxnumberNode = document.createElement('div');
    this.taxnumberNode.classList.add('taxnumber-box', 'nz');
    this.taxnumberNode.innerHTML = this.template;

    this.countryNode = this.taxnumberNode.querySelector('.select');
    this.countrySelectNode = this.taxnumberNode.querySelector('select.country');
    this.input1Node = this.taxnumberNode.querySelector('input.tax1');
    this.input2Node = this.taxnumberNode.querySelector('input.tax2');
    this.input3Node = this.taxnumberNode.querySelector('input.tax3');
    this.iconNode = this.taxnumberNode.querySelector('.tickcross');

    window.tcs = this.countrySelectNode;

    /**/

    var showCountrySelect = true;
    var country = this.DefaultCountryCode;

    if (this.CountryCodes.contains(this.countrySelectNode.value.trim().toUpperCase()))
    {
      country = this.countrySelectNode.value.trim().toUpperCase();
    }

    if (this.initInputNode.dataset.country)
    {
      if (this.CountryCodes.contains(this.initInputNode.dataset.country.trim().toUpperCase()))
      {
        country = this.initInputNode.dataset.country.trim().toUpperCase();
      }
      delete this.initInputNode.dataset.country;
    }
    country = this.CleverForms.GetCountryCodeVariant(country);

    if (this.initInputNode.dataset.countryStatus)
    {
      if (this.initInputNode.dataset.countryStatus.trim().toLowerCase() === 'hide')
      {
        showCountrySelect = false;
      }
      delete this.initInputNode.dataset.countryStatus;
    }

    // Consider this: If we do not know the user or form country, show selects
    if (this.ShowCountryIfUnknown)
    {
      var formCountry = $a.isNullOrEmpty(this.CleverForms.FormCountry) ? null : this.CleverForms.GetCountryCodeVariant(this.CleverForms.FormCountry);
      var profileCountry = null;
      if (Affinity2018.hasOwnProperty('FormProfile'))
      {
        profileCountry = $a.isNullOrEmpty(Affinity2018.FormProfile.Country) || Affinity2018.FormProfile.Country.toString().trim().toUpperCase() === 'NULL' ? null : this.CleverForms.GetCountryCodeVariant(Affinity2018.FormProfile.Country);
      }
      if ($a.isNullOrEmpty(formCountry) && $a.isNullOrEmpty(profileCountry))
      {
        showCountrySelect = true;
      }
    }
    // Stop considering!

    // new options
    this.countrySelectNode.innerHTML = this.CleverForms.GetCountryOptons(country);

    this.countryNode.classList.add('hidden');
    this.countryNode.removeEventListener('change', this._setupCountry);
    if (showCountrySelect)
    {
      this.countryNode.classList.remove('hidden');
      this.countryNode.addEventListener('change', this._setupCountry);
    }

    this._setupCountry();
    this.SetCountry(country);

    /**/

    this.taxnumberNode.querySelectorAll('input[type="text"]').forEach(function (node)
    {
      node.addEventListener('keydown', this._userKey);
      node.addEventListener('keyup', this._userKeyUp);
      node.addEventListener('blur', this._userValidate);
    }.bind(this));

    // insert After initInputNode
    // if there is no initInputNode.nextSibling, the API adds as last child
    this.initInputNode.parentNode.insertBefore(this.taxnumberNode, this.initInputNode.nextSibling);

    /**/

    if (Affinity2018.Apps.Plugins.hasOwnProperty('Numbers')) Affinity2018.Apps.Plugins.Numbers.Apply();

    /**/

    if (value !== '')
    {
      this.Set(value);
      this.FirstLoad = false;
    }
    else this._validate();

    this.initInputNode.dispatchEvent(new CustomEvent('widgetReady'));

  }

  Get()
  {
    this.initInputNode.value = this._stringFromNodes();
    return this.initInputNode.value;
  }

  GetData()
  {
    return [
      this.Get(),
      this.countrySelectNode.value
    ]
  }

  Set(value)
  {
    if (this.validationLookup && this.validationLookup.hasOwnProperty('cancelToken')) this.validationLookup.cancelToken.source.cancel(true);
    this.Clear();

    if (this.MessageNode && this.MessageNode.parentNode) this.MessageNode.parentNode.removeChild(this.MessageNode);
    this.MessageNode = null;

    var countryCode = this.DefaultCountryCode;
    if (
      Affinity2018.hasOwnProperty('FormProfile')
      && Affinity2018.FormProfile.hasOwnProperty('Country')
      && this.CountryCodes.contains(Affinity2018.FormProfile.Country)
    )
    {
      countryCode = Affinity2018.FormProfile.Country;
    }
    if (
      this.CleverForms.hasOwnProperty('FormCountry')
      && this.CountryCodes.contains(this.CleverForms.FormCountry)
    )
    {
      countryCode = this.CleverForms.FormCountry;
    }

    //var countryCode = this._getCountryCode();
    if ($a.isArray(value) && value.length === 2) value = value[1] + ',' + value[0];
    if (!$a.isString(value)) value = value.toString().trim();
    if (value.toLowerCase() === 'null') value = '';
    if (value.toLowerCase() === 'null,null')
    {
      value = '';
      countryCode = '';
    }
    if (value.contains(','))
    {
      countryCode = this.CleverForms.GetCountryCodeVariant(value.split(',')[0]);
      value = value.split(',')[1];
    }

    if (value.trim() !== '')
    {
      if (!value.contains('-'))
      {
        var bits = [0, 0, 0];
        bits[2] = value.substr(value.length - 3).trim();;
        bits[1] = value.replace(bits[2], '').substr(value.replace(bits[2], '').length - 3).trim();;
        bits[0] = value.replace(bits[2], '').replace(bits[1], '').trim();
        value = bits.join('-');
      }
      if (this.lastCodes.hasOwnProperty(countryCode)) this.lastCodes[countryCode] = value;
      this.initInputNode.value = value;
      this._setupCountry();
      this.SetCountry(countryCode);
      this._stringToNodes(value);
      this._validate();
    }
    else
    {
      if (this.lastCodes.hasOwnProperty(countryCode)) this.lastCodes[countryCode] = '';
      this._clear();
    }

    if (this.CleverForms.hasOwnProperty('Form') && this.initInputNode.closest('div.form-row'))
    {
      this.FormRowNode = this.initInputNode.closest('div.form-row');
      this.CleverForms.Form.ResizeSection(this.FormRowNode);
    }
  }

  SetCountry(country)
  {
    country = $a.toString(country).toUpperCase();

    if (country === '' || country === 'NULL') country = this.DefaultCountryCode;

    country = this.CleverForms.GetCountryCodeVariant(country);
    this.countrySelectNode.value = country;

    var showCountrySelect = this.CountryCodes.contains(country) ? false : true;
    var fromFormCountry = Affinity2018.hasOwnProperty('FormCountry') && !Affinity2018.isNullOrEmpty(Affinity2018.FormCountry);

    if (fromFormCountry)
    {
      showCountrySelect = false;
    }
    else
    {
      if (
        showCountrySelect
        && Affinity2018.hasOwnProperty('FormProfile')
        && Affinity2018.FormProfile.hasOwnProperty('Country')
        && this.CountryCodes.contains(Affinity2018.FormProfile.Country)
      )
      {
        showCountrySelect = false;
      }

      if (
        Affinity2018.hasOwnProperty('Apps')
        && Affinity2018.Apps.hasOwnProperty('CleverForms')
        && Affinity2018.Apps.CleverForms.hasOwnProperty('Default')
        && Affinity2018.Apps.CleverForms.Default.GetFormEmployeeNo() === -1)
      {
        showCountrySelect = true;
      }

      // test if emp is create, not this field
      //if (
      //  !showCountrySelect
      //  && this.Config.Type === 'AffinityField'
      //  && this.Config.Details.AffinityField.Mode === this.CleverForms.AffnityFieldModeTypes.Create.Enum
      //)
      //{
      //  showCountrySelect = true;
      //}
    }

    // Consider this: If we do not know the user or form country, show selects
    if (this.ShowCountryIfUnknown)
    {
      var formCountry = $a.isNullOrEmpty(this.CleverForms.FormCountry) ? null : this.CleverForms.GetCountryCodeVariant(this.CleverForms.FormCountry);
      var profileCountry = null;
      if (Affinity2018.hasOwnProperty('FormProfile'))
      {
        profileCountry = $a.isNullOrEmpty(Affinity2018.FormProfile.Country) || Affinity2018.FormProfile.Country.toString().trim().toUpperCase() === 'NULL' ? null : this.CleverForms.GetCountryCodeVariant(Affinity2018.FormProfile.Country);
      }
      if ($a.isNullOrEmpty(formCountry) && $a.isNullOrEmpty(profileCountry))
      {
        showCountrySelect = true;
      }
    }
    // Stop considering!

    this.countryNode.classList.add('hidden');
    this.countryNode.removeEventListener('change', this._setupCountry);
    if (showCountrySelect)
    {
      this.countryNode.classList.remove('hidden');
      this.countryNode.addEventListener('change', this._setupCountry);
    }
  }

  Check()
  {
    this.FirstLoad = false;
    this._validate();
  }

  Clear()
  {
    this._clear();
  }

  /**/

  _clear(resetCountry)
  {
    resetCountry = $a.isBool(resetCountry) ? resetCountry : true;
    if (this.MessageNode && this.MessageNode.parentNode) this.MessageNode.parentNode.removeChild(this.MessageNode);
    this.MessageNode = null;

    this.input1Node.value = '';
    this.input2Node.value = '';
    this.input3Node.value = '';
    this._setIcon();
    if (resetCountry)
    {
      var defaultCountry = this.CleverForms.GetCountryCodeVariant(this.CleverForms.FormCountry !== null ? this.CleverForms.FormCountry : this.DefaultCountryCode);
      if (
        Affinity2018.hasOwnProperty('FormProfile')
        && Affinity2018.FormProfile.hasOwnProperty('Country')
        && Affinity2018.Apps.CleverForms.Default.GetFormEmployeeNo() !== -1
        && this.CountryCodes.contains(Affinity2018.FormProfile.Country)
      )
      {
        defaultCountry = this.CleverForms.GetCountryCodeVariant(Affinity2018.FormProfile.Country);
      }
      if (Affinity2018.hasOwnProperty('FormCountry') && !$a.isNullOrEmpty(Affinity2018.FormCountry))
      {
        defaultCountry = this.CleverForms.GetCountryCodeVariant(Affinity2018.FormCountry);
      }
      this.SetCountry(defaultCountry);
    }
  }

  _stringToNodes(str)
  {
    str = typeof str === 'string' ? str : this.initInputNode.value;
    str = str.replace(/[^0-9.]/g, '').trim();
    var parts = ['', '', ''];
    if (str.length <= 3)
    {
      parts = [str, '', ''];
    }
    else if (str.length > 3 && str.length <= 6)
    {
      parts = [str.substring(0, 3), str.substring(3), ''];
    }
    else if (str.length > 6)
    {
      parts = [str.substring(0, 3), str.substring(3, 6), str.substring(6)];
    }
    this.input1Node.value = parts[0];
    this.input2Node.value = parts[1];
    this.input3Node.value = parts[2];
    this._validate();
    /*
    str = typeof str === 'string' ? str : this.initInputNode.value;
    str = str.replace(/\s/g, '');
    var splitCheck, parts;
    if (str.trim() === '')
    {
      this.input1Node.value = '';
      this.input2Node.value = '';
      this.input3Node.value = '';
      this._validate();
      return;
    }
    else if (str.countString(',') === 1)
    {
      splitCheck = str.split(',');
      if (splitCheck[1].length === 2 && isNaN(parseFloat(splitCheck[1])))
      {
        this.countrySelectNode.value = splitCheck[1];
      }
      str = splitCheck[0];
    }
    if (str.contains('-'))
    {
      parts = str.split('-');
    }
    else
    {
      str = str.trim().replace(/[^0-9.]/g, '');
      if (str.length >= 9)
      {
        parts = [str.substring(0, 3), str.substring(3, 6), str.substring(6)];
      }
      else
      {
        parts = [str, '', ''];
      }
    }
    this.input1Node.value = parts[0];
    this.input2Node.value = parts[1];
    this.input3Node.value = parts[2];
    this._validate();
    */
  }

  _stringFromNodes()
  {
    var str = this.input1Node.value + '-' + this.input2Node.value + '-' + this.input3Node.value;
    str = str.replace(/\s/g, '');
    str = str.replace(/\-\-/g, '-');
    if (str[str.length - 1] === '-') str = str.substring(0, str.length - 1);
    if (str[0] === '-') str = str.substring(1);
    return str;
    /*
    var str = this.input1Node.value + this.input2Node.value + this.input3Node.value;
    str = str.replace(/\s\-/g,'');
    return str;
    */
  }

  _getCountryCode()
  {
    try
    {
      if (this.countrySelectNode.selectedIndex !== '-1')
      {
        //return this.countrySelectNode.options[this.countrySelectNode.selectedIndex].value;
        return this.CleverForms.GetCountryCodeVariant(this.countrySelectNode.options[this.countrySelectNode.selectedIndex].value);
      }
      //return this.countrySelectNode.value;
      return this.CleverForms.GetCountryCodeVariant(this.countrySelectNode.value);
    }
    catch (err) { }
    //return 'NZ';
    return this.DefaultCountryCode;
  }

  _setupCountry()
  {
    this._clear(false);
    var country = this._getCountryCode();
    switch (country)
    {
      case 'N':
      case 'NZ':

        break;

      case 'A':
      case 'AU':
      default:

        break;
    }

    /**/

    if (this.lastCodes.hasOwnProperty(country))
    {
      if (this.Get().trim() === '' && this.lastCodes[country].trim() !== '')
      {
        this._stringToNodes(this.lastCodes[country]);
      }
    }

    this.initInputNode.dispatchEvent(new CustomEvent('countryChanged', { detail: { Country: country } }));

  }

  _setIcon(valid)
  {
    var state = 'reset';
    if (typeof valid === 'boolean' && valid === true) state = 'valid';
    if (typeof valid === 'boolean' && valid === false) state = 'invalid';
    this.iconNode.classList.remove('green', 'icon-tick', 'icon-tick-round', 'red', 'icon-cross', 'icon-cross-round', 'grey', 'icon-blocked');
    switch (state)
    {
      case 'valid':
        //this.iconNode.classList.add('green','icon-tick');
        this.iconNode.classList.add('green', 'icon-tick-round');
        break;
      case 'invalid':
        //this.iconNode.classList.add('red', 'icon-cross');
        this.iconNode.classList.add('red', 'icon-cross-round');
        break;
      case 'reset':
      default:
        this.iconNode.classList.add('grey', 'icon-blocked');
        break;
    }
  }

  _userKey(ev)
  {
    if (ev.target === this.input1Node)
    {
      if (ev.ctrlKey && ev.keyCode === 86) // ctrl + v (paste)
      {
        this.taxLimit = parseInt(this.input1Node.getAttribute('maxLength'));
        if (this.input1Node.widgets && this.input1Node.widgets.Number) this.input1Node.widgets.Number.disable();
        this.input1Node.setAttribute('maxLength', 15);
        this.pasting = true;
      }
    }
  }

  _userKeyUp(ev)
  {
    if (this.pasting && ev && ev.target === this.input1Node)
    {
      var fullValue = this.input1Node.value.trim(), numbersValue = fullValue.replace(/[^0-9]/gi, '').trim();
      this.input1Node.setAttribute('maxLength', this.taxLimit);
      this.input1Node.value = numbersValue.substring(0, this.taxLimit);
      if (this.input1Node.widgets && this.input1Node.widgets.Number) this.input1Node.widgets.Number.enable();
      if (numbersValue.length > 7)
      {
        this._stringToNodes(fullValue);
      }
      this.initInputNode.value = this._stringFromNodes();
    }

    if (!this.pasting && !ev.shiftKey && ev.key !== 'Tab' && ev.key !== 'Shift')
    {
      if (ev.target === this.input1Node && this.input1Node.value.trim().length === parseInt(this.input1Node.getAttribute('maxLength')))
      {
        this.input2Node.focus();
      }
      if (ev.target === this.input2Node && this.input2Node.value.trim().length === parseInt(this.input2Node.getAttribute('maxLength')))
      {
        this.input3Node.focus();
      }
    }

    this.pasting = false;

    this.initInputNode.value = this._stringFromNodes();

    if (this.lastCodes.hasOwnProperty(this._getCountryCode())) this.lastCodes[this._getCountryCode()] = this.initInputNode.value;

    this._userValidate();
  }

  _userValidate()
  {
    clearTimeout(this._userValidateDelay);
    this._userValidateDelay = setTimeout(this._validate, 500);
  }

  _validate(attemtpCountry)
  {
    attemtpCountry = attemtpCountry || this._getCountryCode();

    if (this.MessageNode && this.MessageNode.parentNode) this.MessageNode.parentNode.removeChild(this.MessageNode);
    this.MessageNode = null;
    if (this.CleverForms.hasOwnProperty('Form'))
    {
      this.CleverForms.Form.ResizeSection(this.FormRowNode);
    }

    var api = null, employeeNumber = null;

    if (
      window.hasOwnProperty('Affinity2018')
      && Affinity2018.isPropObject(Affinity2018, 'UserProfile')
      && Affinity2018.isPropString(Affinity2018.UserProfile, 'EmployeeNumber')
      && Affinity2018.UserProfile.EmployeeNumber.trim() !== ''
      && Affinity2018.isPropObject(Affinity2018, 'ApiEndpoints')
      && Affinity2018.isPropString(Affinity2018.ApiEndpoints, 'TaxValidationApi')
      && Affinity2018.ApiEndpoints.TaxValidationApi.trim() !== ''
    )
    {
      api = Affinity2018.ApiEndpoints.TaxValidationApi + '';
      employeeNumber = Affinity2018.UserProfile.EmployeeNumber + '';
    }
    else
    {
      return;
    }

    if (attemtpCountry == '')
    {
      this._setIcon();
      return;
    }

    this.iconNode.classList.add('validating');

    if (this.UseQueue)
    {
      Affinity2018.RequestQueue.Post(api, {
        TaxNumber: this._stringFromNodes().replace(/\-/g, ''),
      }, this._validateSuccess, this._validateFailed, 0);
    }
    else
    {
      var postData = new FormData();
      postData.append('TaxNumber', this._stringFromNodes().replace(/\-/g, ''));
      if (this.validationLookup && this.validationLookup.hasOwnProperty('cancelToken')) this.validationLookup.cancelToken.source.cancel(true);
      this.validationLookup = axios({
        method: 'POST',
        url: api,
        data: postData,
        cancelToken: new axios.CancelToken(function () { })
      })
        .then(this._validateSuccess)
        .catch(this._validateFailed);
    }

  }

  _validated()
  {
    if (this.FirstLoad) this._setIcon();
    this.LastValidation = this._stringFromNodes();
    if (this.Valid)
    {
      this._setIcon(this.Valid);
    }
    else
    {
      if (this._stringFromNodes() === '') this._setIcon();
      else this._setIcon(this.Valid);
    }
    this.initInputNode.dispatchEvent(new CustomEvent('validated'));
  }


  _validateSuccess(response)
  {

    // stub
    //response = {
    //  config: {
    //    data: postData
    //  },
    //  data: [
    //    {
    //      IsValid: false,
    //      CountryCode: 'N'
    //    },
    //    {
    //      IsValid: true,
    //      CountryCode: 'A'
    //    }
    //  ]
    //};

    if (
      typeof response === 'object'
      && !response.hasOwnProperty('data')
    )
    {
      response = {
        data: response
      };
    }

    if (
      typeof response === 'object'
      && response.hasOwnProperty('data')
      && $a.isArray(response.data)
    )
    {

      if (response.hasOwnProperty('config'))
      {
        // Validity check: Make sure the validatino result is for this field
        var responsePostData = {}; // Object.fromEntries(response.config.data.entries());
        response.config.data.forEach((value, key) => (responsePostData[key] = value));
        var check = responsePostData.TaxNumber;
        var against = this._stringFromNodes().replace(/\-/g, '');
        if (check !== against)
        {
          this._validate();
          return;
        }
      }

      var isValid = false;
      var formCountry = $a.isNullOrEmpty(this.CleverForms.FormCountry) ? null : this.CleverForms.GetCountryCodeVariant(this.CleverForms.FormCountry);
      var profileCountry = null;
      if (Affinity2018.hasOwnProperty('FormProfile'))
      {
        profileCountry = $a.isNullOrEmpty(Affinity2018.FormProfile.Country) || Affinity2018.FormProfile.Country.toString().trim().toUpperCase() === 'NULL' ? null : this.CleverForms.GetCountryCodeVariant(Affinity2018.FormProfile.Country);
      }
      var selectedCountry = this.CleverForms.GetCountryCodeVariant(this._getCountryCode());
      var compareCountry = !$a.isNullOrEmpty(formCountry) ? formCountry : !$a.isNullOrEmpty(profileCountry) ? profileCountry : selectedCountry;
      for (var c = 0; c < response.data.length; c++)
      {
        var validationData = response.data[c];
        if (validationData.IsValid && validationData.CountryCode === compareCountry)
        {
          isValid = true;
          break;
        }
      }
      if (!isValid)
      {
        for (c = 0; c < response.data.length; c++)
        {
          validationData = response.data[c];
          if (validationData.IsValid && validationData.CountryCode !== compareCountry)
          {
            var message = $a.Lang.ReturnPath('app.cf.form.' + (this.CleverForms.FormCountry !== null ? 'form_country_vaidation_warning' : 'employee_country_vaidation_warning'), {
              fieldName: this.initInputNode.parentNode.querySelector('label') ? this.initInputNode.parentNode.querySelector('label').innerText.trim() : 'Bank Number',
              country: this.CleverForms.GetCountryDisplayVariant(validationData.CountryCode),
              formCountry: this.CleverForms.GetCountryDisplayVariant(compareCountry)
            });
            if (this.MessageNode && this.MessageNode.parentNode) this.MessageNode.parentNode.removeChild(this.MessageNode);
            this.MessageNode = null;
            this.MessageNode = document.createElement('div');
            this.MessageNode.classList.add('country-warning');
            this.iconNode.parentNode.insertBefore(this.MessageNode, this.iconNode.nextSibling);
            this.MessageNode.innerHTML = message;
            if (this.CleverForms.hasOwnProperty('Form'))
            {
              this.CleverForms.Form.ResizeSection(this.FormRowNode);
            }
            break;
          }
        }
      }
    }
    this.Valid = isValid;
    this._validated();
  }

  _validateFailed(error)
  {
    this._validated();
  }

  /**/

  Destroy ()
  {
    clearTimeout(this._userValidateDelay);
    if (this.initInputNode.hasOwnProperty('widgets') && this.initInputNode.widgets.hasOwnProperty('String')) this.initInputNode.widgets.String.Destroy();
    if (this.initInputNode.hasOwnProperty('widgets') && this.initInputNode.widgets.hasOwnProperty('Number')) this.initInputNode.widgets.Number.Destroy();
    this.countryNode.removeEventListener('change', this._setupCountry);
    this.taxnumberNode.querySelectorAll('input[type="text"]').forEach(function(node)
    {
      node.removeEventListener('keydown', this._userKey);
      node.removeEventListener('keyup', this._userValidate);
      node.removeEventListener('blur', this._userValidate);
      if (node.hasOwnProperty('widgets') && node.widgets.hasOwnProperty('String')) node.widgets.String.Destroy();
      if (node.hasOwnProperty('widgets') && node.widgets.hasOwnProperty('Number')) node.widgets.Number.Destroy();
    }.bind(this));
    this.initInputNode.type = 'text';
    this.initInputNode.classList.remove('ui-taxnumber');
    this.taxnumberNode.innerHTML = '';
    this.taxnumberNode.parentNode.removeChild(this.taxnumberNode);
    delete this.initInputNode.widgets.TaxNumber;
    for (var key in this)
    {
      if (this.hasOwnProperty(key))
      {
        this[key] = null;
        delete this[key];
      }
    }
  }

  /**/

  _templates ()
  {
    this.template = `
    <div class="select hidden">
      <select class="country">
      </select>
    </div>
    <input class="tax1 ui-has-integer" type="text" maxlength="3">
    <span> - </span>
    <input class="tax2 ui-has-integer" type="text" maxlength="3">
    <span> - </span>
    <input class="tax3 ui-has-integer" type="text" maxlength="3">
    <span class="tickcross grey icon-blocked"></span>
    `;
  }

};
;
